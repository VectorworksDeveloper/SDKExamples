<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<VectorScriptReference>

  <Item>
    <Name>Abs</Name>
    <Version>100</Version>
    <Category>Math - General</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the absolute value of the specified value.</Description>
    <ShortDesc>Returns the absolute value of v.</ShortDesc>
    <ID>229</ID>
    <IDName>funcAbs</IDName>
    <InternalFunctionName>MP_Abs</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>v</Name>
        <Type>realMode</Type>
        <Desc>Real number.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ActiveClass</Name>
    <Version>600</Version>
    <Category>Classes</Category>
    <CategorySecondary>Classes</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Returns the name of the active class of the document.</Description>
    <ShortDesc>Returns the name of the active document class.</ShortDesc>
    <SeeAlso>ActLayer,ActSymDef</SeeAlso>
    <Example>activeClName:= [[name]];</Example>
    <ID>560</ID>
    <IDName>funcActiveClass</IDName>
    <InternalFunctionName>MP_ActiveClass</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>ActLayer</Name>
    <Version>100</Version>
    <Category>Layers</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to the currently active layer in a document.</Description>
    <ShortDesc>Returns a handle to the active layer of the document.</ShortDesc>
    <SeeAlso>ActiveClass,ActSymDef,GetLName</SeeAlso>
    <ID>249</ID>
    <IDName>funcActLayer</IDName>
    <InternalFunctionName>MP_ActLayer</InternalFunctionName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
  </Item>

  <Item>
    <Name>ActSSheet</Name>
    <Version>100</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns the handle to the currently active worksheet.[[BR]]</Description>
    <ShortDesc>Returns a handle to the active worksheet.</ShortDesc>
    <Comments>OBSOLETE for Version 9: see new GetTopVisibleWS. [VML 01/09/01]</Comments>
    <ID>352</ID>
    <IDName>funcActSSheet</IDName>
    <InternalFunctionName>MP_ActSSheet</InternalFunctionName>
    <ModernName>ActWorksheet</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
  </Item>

  <Item>
    <Name>ActSymDef</Name>
    <ChangedDate>2020:05:18T15:00:00</ChangedDate>
    <Version>100</Version>
    <Category>Objects - Symbols</Category>
    <CategorySecondary>Document Attributes</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to the currently active symbol.[[BR]][[BR]]If the active symbol is not in the active document, it will be imported, and the imported symbol will be returned.</Description>
    <ShortDesc>Returns the active symbol of the document.</ShortDesc>
    <SeeAlso>ActLayer,ActiveClass, ActSymDefN</SeeAlso>
    <Example>HandleToActiveSym:=ActSymDef;</Example>
    <ID>449</ID>
    <IDName>funcActSymDef</IDName>
    <InternalFunctionName>MP_ActSymDef</InternalFunctionName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
  </Item>

  <Item>
    <Name>Add3DPt</Name>
    <Version>100</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] adds a vertex into a newly created 3D polygon.[[BR]][[BR]]Calls to [[name]] should be made between calls to BeginPoly3D, which initiates polygon creation, and EndPoly3D, which terminates polygon creation. A minimum of two vertices must be created to define a valid 3D polygon object, and calculations may be performed within the BeginPoly3D-EndPoly3D structure, providing additional options for vertex generation.</Description>
    <ShortDesc>This function adds a new point to the 3-D poly being constructed.  Should be called only after BeginPoly3D is called.  See BeginPoly3D, EndPoly3D.</ShortDesc>
    <SeeAlso>BeginPoly3D, EndPoly3D</SeeAlso>
    <Example>BeginPoly3D;[[BR]]     Add3DPt(0,0,0);[[BR]]     Add3DPt(2,0,0);[[BR]]     Add3DPt(2,2,0);[[BR]]     Add3DPt(1,3,0);[[BR]]     Add3DPt(0,2,0);[[BR]]     Add3DPt(0,0,0);[[BR]]EndPoly3D;[[BR]][[BR]][[BR]]</Example>
    <ID>341</ID>
    <IDName>procAdd3DPt</IDName>
    <SpecialOverride>GetAddD3Point</SpecialOverride>
    <InternalFunctionName>GetAddD3Point</InternalFunctionName>
    <ModernName>AddPoint3D</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Placement3D>True</Placement3D>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>d3PtMode</Type>
        <Desc>Location of 3D vertex.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddCavity</Name>
    <Version>400</Version>
    <OldVersion>1200</OldVersion>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a wall cavity in a new wall object. The newly defined cavity becomes the default for all subsequently defined walls.[[BR]][[BR]]To apply a bitmap fill pattern, use positive value corresponding to the index  of the bitmap pattern.  To apply a vector fill pattern, use the negative of the vector fill index (index * -1). [[BR]][[BR]][[note:FillPatTable]]</Description>
    <ShortDesc>Creates a cavity in the most recently created wall object. Cavity becomes default for all subsequent walls.  This function is obsolete. Use InsertNewComponent instead.</ShortDesc>
    <Comments>OBSOLETE for Version 12: This function is obsolete. Use InsertNewComponent instead. (NZH 5-9-05)</Comments>
    <Example>{ Create wall object with 1" wide cavity using black pattern fill.}[[BR]]DoubLines(6");[[BR]][[name]](True, 1", 2", 2);[[BR]]Wall(0, 1, 9, 1);[[BR]][[BR]]{ Create wall object with 1" wide cavity using a custom hatch fill.}[[BR]]DoubLines(6");[[BR]][[name]](True, 1", 2", -Name2Index('My Hatch'));[[BR]]Wall(0, 1, 9, 1);[[BR]]</Example>
    <ID>500</ID>
    <IDName>procAddCavity</IDName>
    <SpecialOverride>MPAddCavity</SpecialOverride>
    <InternalFunctionName>MPAddCavity</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>pair</Name>
        <Type>boolMode</Type>
        <Desc>Double line display mode.</Desc>
      </Param>
      <Param>
        <Name>leftOffDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Left edge offset from wall centerline.</Desc>
      </Param>
      <Param>
        <Name>rightOffDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Right edge offset from wall centerline.</Desc>
      </Param>
      <Param>
        <Name>pairFill</Name>
        <Type>longMode</Type>
        <Desc>Fill index for filled cavities.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddPoint</Name>
    <Version>100</Version>
    <Category>Objects - Polys</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] adds a vertex point to a newly created polygon. [[name]] is designed to be used with BeginPoly and EndPoly to define new polygon objects via VectorScript.[[BR]][[BR]]</Description>
    <ShortDesc>Adds a vertex point to a new polygon/polyline.</ShortDesc>
    <Example>BeginPoly;[[BR]]     AddPoint(0,0);[[BR]]     AddPoint(2,0);[[BR]]     AddPoint(2,2);[[BR]]     AddPoint(1,3);[[BR]]     AddPoint(0,2);[[BR]]     AddPoint(0,0);[[BR]]EndPoly;[[BR]]{creates a polygon object}[[BR]][[BR]]BeginPoly;[[BR]]     AddPoint(x,y);[[BR]]     x := x + 1;[[BR]]     y := y + 1;[[BR]]     AddPoint(x,y);[[BR]]     x:= x + 1;[[BR]]     y := y - 1;[[BR]]     AddPoint(x,y);[[BR]]EndPoly;[[BR]]{creates a polygon with vertices as calculated}</Example>
    <ID>338</ID>
    <IDName>procAddPoint</IDName>
    <SpecialOverride>MPGetAddPoint</SpecialOverride>
    <InternalFunctionName>MPGetAddPoint</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinates of vertex.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddSolid</Name>
    <Version>700</Version>
    <Category>Objects - Solids</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] creates a new solid addition object from the referenced source objects. If the operation succeeds, the source objects will then be contained within the newSolid object, as the primitives which define the CSG.[[BR]][[BR]][[note:SolidsResultsTable]]</Description>
    <ShortDesc>Creates a solid addition from the referenced objects.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   h1, h2, h3 :HANDLE;[[BR]]   int :INTEGER;[[BR]]BEGIN[[BR]]   DSelectAll; BeginXtrd(0, 1); CallTool(-203); h1 := FSActLayer; EndXtrd;[[BR]]   DSelectAll; BeginXtrd(0, 1); CallTool(-203); h2 := FSActLayer; EndXtrd;[[BR]]   int := AddSolid(h1, h2, h3);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>592</ID>
    <IDName>funcAddSolid</IDName>
    <InternalFunctionName>MP_AddSolid</InternalFunctionName>
    <ModernName>AddSolids</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj1</Name>
        <Type>handleMode</Type>
        <Desc>Handle to source object for add operation.</Desc>
      </Param>
      <Param>
        <Name>obj2</Name>
        <Type>handleMode</Type>
        <Desc>Handle to source object for add operation.</Desc>
      </Param>
      <Param>
        <Name>newSolid</Name>
        <Type>handleVarMode</Type>
        <Desc>Handle to resultant object from add operation.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddSymToWall</Name>
    <Version>600</Version>
    <Category>Objects - Walls</Category>
    <CategorySecondary>Symbols</CategorySecondary>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] inserts a specified symbol into the referenced wall.</Description>
    <ShortDesc>Inserts a specified symbol into the referenced wall.</ShortDesc>
    <SeeAlso>AddSymToWallEdge</SeeAlso>
    <Comments>See AddSymToWallEdge[[BR]][sd 8/13/98]</Comments>
    <Example>AddSymToWall(HandleToWall,3',0',FALSE,FALSE,'Door-1');</Example>
    <ID>557</ID>
    <IDName>procAddSymToWall</IDName>
    <SpecialOverride>AddSymToWall</SpecialOverride>
    <InternalFunctionName>AddSymToWall</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>wallHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to wall.</Desc>
      </Param>
      <Param>
        <Name>offDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Offset distance from wall start.</Desc>
      </Param>
      <Param>
        <Name>heightDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Elevation of symbol.</Desc>
      </Param>
      <Param>
        <Name>flip</Name>
        <Type>boolMode</Type>
        <Desc>Flipped status of symbol.</Desc>
      </Param>
      <Param>
        <Name>right</Name>
        <Type>boolMode</Type>
        <Desc>Left-right orientation of symbol.</Desc>
      </Param>
      <Param>
        <Name>symbolName</Name>
        <Type>stringMode</Type>
        <Desc>Name of symbol to insert in wall.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddVertex3D</Name>
    <Version>600</Version>
    <Category>Objects - 3D</Category>
    <CategorySecondary>Polygons / Polylines</CategorySecondary>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] adds a 3D vertex to the referenced 3D polygon object.</Description>
    <ShortDesc>Adds a vertex to the referenced 3D polygon.</ShortDesc>
    <SeeAlso>Add3DPt</SeeAlso>
    <ID>550</ID>
    <IDName>procAddVertex3D</IDName>
    <SpecialOverride>AddVertex3D</SpecialOverride>
    <InternalFunctionName>AddVertex3D</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>d3PtMode</Type>
        <Desc>Location of 3D vertex point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddWallPeak</Name>
    <Version>600</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a wall peak in the referenced wall object.</Description>
    <ShortDesc>Adds a wall peak to the referenced wall.</ShortDesc>
    <ID>559</ID>
    <IDName>procAddWallPeak</IDName>
    <SpecialOverride>AddWallPeak</SpecialOverride>
    <InternalFunctionName>AddWallPeak</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>wallHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to wall.</Desc>
      </Param>
      <Param>
        <Name>offDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Offset distance from wall start.</Desc>
      </Param>
      <Param>
        <Name>heightDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Elevation of wall peak.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AlrtDialog</Name>
    <ChangedDate>2017:06:05T17:15:00</ChangedDate>
    <Version>100</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] displays an alert dialog to the user.</Description>
    <ShortDesc>Displays an alert message to the user.</ShortDesc>
    <Example>AlrtDialog('No objects are selected for this operation.');</Example>
    <ID>206</ID>
    <IDName>procAlrtDialog</IDName>
    <SpecialOverride>GetDialogAlrt</SpecialOverride>
    <InternalFunctionName>GetDialogAlrt</InternalFunctionName>
    <ModernName>AlertDialog</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>message</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The alert message to be displayed.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AngDialog</Name>
    <ChangedDate>2017:07:05T17:11:00</ChangedDate>
    <Version>100</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] displays a dialog box which requests the user to enter an angle value. The dialog automatically screens for valid numeric input, and will accept supported angle formats.</Description>
    <ShortDesc>Displays dialog box that requests a user input angle</ShortDesc>
    <Example>AngleValue := AngDialog('Enter an angle value:', '0d');</Example>
    <ID>199</ID>
    <IDName>funcAngDialog</IDName>
    <InternalFunctionName>MP_AngDialog</InternalFunctionName>
    <ModernName>AngleDialog</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>request</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Dialog user prompt string.</Desc>
      </Param>
      <Param>
        <Name>default</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Default value for input field.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AngDialog3D</Name>
    <ChangedDate>2017:07:05T17:12:00</ChangedDate>
    <Version>100</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Procedure</Type>
    <Description>Function [[name]] displays a dialog box which requests the user to enter three angle values. [[name]] will accept angle values in any supported angle format.[[BR]]</Description>
    <ShortDesc>Displays a dialog box that allows a user to input 3D angles.</ShortDesc>
    <Example>[[name]]('Enter the angle values:','0','0','0',x,y,z);</Example>
    <ID>207</ID>
    <IDName>procAngDialog3D</IDName>
    <InternalFunctionName>MP_AngDialog3D</InternalFunctionName>
    <ModernName>AngleDialog3D</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>displayStr</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Dialog user prompt string.</Desc>
      </Param>
      <Param>
        <Name>xStr</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Default value for input field.</Desc>
      </Param>
      <Param>
        <Name>yStr</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Default value for input field.</Desc>
      </Param>
      <Param>
        <Name>zStr</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Default value for input field.</Desc>
      </Param>
      <Param>
        <Name>xAngleResult</Name>
        <Type>rVarMode</Type>
        <Desc>Returns user input X value.</Desc>
      </Param>
      <Param>
        <Name>yAngleResult</Name>
        <Type>rVarMode</Type>
        <Desc>Returns user input Y value.</Desc>
      </Param>
      <Param>
        <Name>zAngleResult</Name>
        <Type>rVarMode</Type>
        <Desc>Returns user input Z value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AngularDim</Name>
    <Version>100</Version>
    <Category>Dimensions</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates an angular dimension in the document.[[BR]][[BR]][[note:DimFlagNote]][[BR]][[BR]]&lt;I&gt;Angular Dimension&lt;/I&gt;&lt;P&gt;[[BR]][[fig:angdim.gif]]</Description>
    <ShortDesc>Creates angular dimensions.</ShortDesc>
    <Example>AngularDim(1 1/2",3/8",-1/4",-1/2",7/8",-1/2",1.7001838",771,770,#35d 32'16");</Example>
    <ID>491</ID>
    <IDName>procAngularDim</IDName>
    <SpecialOverride>GetAngularDimension</SpecialOverride>
    <InternalFunctionName>GetAngularDimension</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>startPt</Name>
        <Type>globPtMode</Type>
        <Desc>X-Y coordinates of dimension start point.</Desc>
      </Param>
      <Param>
        <Name>endPt</Name>
        <Type>globPtMode</Type>
        <Desc>X-Y coordinates of dimension end point</Desc>
      </Param>
      <Param>
        <Name>vert1</Name>
        <Type>globPtMode</Type>
        <Desc>X-Y coordinates of dimension arc center.</Desc>
      </Param>
      <Param>
        <Name>textOffsetDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Offset from dimension arc center (radius of the dimension arc).</Desc>
      </Param>
      <Param>
        <Name>arrow</Name>
        <Type>intMode</Type>
        <Desc>Dimension arrowhead style flag.</Desc>
      </Param>
      <Param>
        <Name>textFlag</Name>
        <Type>intMode</Type>
        <Desc>Dimension text style flag.</Desc>
      </Param>
      <Param>
        <Name>posAngle</Name>
        <Type>angleMode</Type>
        <Desc>Position angle of dimension text(from start). Auto position text overrides this value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Append</Name>
    <ChangedDate>2017:04:14T10:33:00</ChangedDate>
    <Version>100</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] opens the specified file for writing and appends the data to the end of the file. Existing data in the file is NOT overwritten.[[BR]][[BR]][[note:FilePathNote]]</Description>
    <ShortDesc>Opens a file for writing, appending new data to end of file.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   fileName :STRING; [[BR]]   major, minor, maintenance, platform :INTEGER;[[BR]]BEGIN[[BR]]   GetVersion(major, minor, maintenance, platform);[[BR]]   IF platform = 1 THEN BEGIN[[BR]]      fileName := 'Macintosh HD:Example.txt';[[BR]]   END ELSE BEGIN[[BR]]      fileName := 'C:\Example.txt';[[BR]]   END;[[BR]]   Append(fileName);[[BR]]   WriteLn('example text');[[BR]]   Close(fileName);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>210</ID>
    <IDName>procAppend</IDName>
    <InternalFunctionName>MP_Append</InternalFunctionName>
    <ModernName>AppendToFile</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>fileName</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Name of file to open for writing.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Arc</Name>
    <Version>100</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates an arc object, or a polyline object, in the active document. If [[p:1]] and [[p:2]] define a perfect square, an arc will be created, with its center point at the center of the square. If [[p:1]] and [[p:2]] define a rectangle, a polyline will be created which will represent the oval segment defined by the rectangle.</Description>
    <ShortDesc>Draws an arc in a Vectorworks document.</ShortDesc>
    <Example>Arc(0,0,2,2,45,90);[[BR]]{draws an 90 degree arc with a start angle of 45 degrees}[[BR]][[BR]]</Example>
    <ID>102</ID>
    <IDName>procArc</IDName>
    <SpecialOverride>GetArc</SpecialOverride>
    <InternalFunctionName>GetArc</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p1</Name>
        <Type>globPtMode</Type>
        <Desc>Top left coordinate of bounding box of oval defining the arc.</Desc>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>globPtMode</Type>
        <Desc>Bottom right coordinate of bounding box of oval defining the arc.</Desc>
      </Param>
      <Param>
        <Name>StartAngle</Name>
        <Type>angleMode</Type>
        <Desc>Start angle of drawn arc.</Desc>
      </Param>
      <Param>
        <Name>ArcAngle</Name>
        <Type>angleMode</Type>
        <Desc>Sweep angle of drawn arc.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ArcCos</Name>
    <Version>100</Version>
    <Category>Math - General</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the arccosine (in radians) of the specified value.</Description>
    <ShortDesc>Returns the arccosine in radians.</ShortDesc>
    <ID>426</ID>
    <IDName>funcArcCos</IDName>
    <InternalFunctionName>MP_ArcCos</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>v</Name>
        <Type>realMode</Type>
        <Desc>Numeric value for which to find the cosine.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ArcSin</Name>
    <Version>100</Version>
    <Category>Math - General</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the arc sine (in radians) of the specified value.</Description>
    <ShortDesc>Returns the arcsine in radians.</ShortDesc>
    <ID>425</ID>
    <IDName>funcArcSin</IDName>
    <InternalFunctionName>MP_ArcSin</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>v</Name>
        <Type>realMode</Type>
        <Desc>Numeric value for which to find the sine.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ArcTan</Name>
    <Version>100</Version>
    <Category>Math - General</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the arc tangent (in radians) of the specified value.</Description>
    <ShortDesc>Returns the arctangent in radians.</ShortDesc>
    <ID>236</ID>
    <IDName>funcArcTan</IDName>
    <InternalFunctionName>MP_ArcTan</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>v</Name>
        <Type>realMode</Type>
        <Desc>Numeric value for which to find the tangent.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ArcTo</Name>
    <Version>400</Version>
    <Category>Objects - Polys</Category>
    <CategorySecondary>Arcs</CategorySecondary>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates an arc vertex with a point of intersection at the specified coordinate point.[[BR]][[BR]]The endpoints of the arc are tangent to the control segments which intersect at [[p:1]]. If a radius of 0 is passed as the parameter, the arc endpoints will be at the vertices preceding and following the arc spline vertex.</Description>
    <ShortDesc>Creates a new arc spline vertex of the specified radius.</ShortDesc>
    <Example>BeginPoly;[[BR]]   LineTo(-1",2");[[BR]]   LineTo(-2 1/2",1/2");[[BR]]   CurveTo(-1 1/2",-1 1/2");[[BR]]   LineTo(1",-1/2");[[BR]]   ArcTo(1",1 1/2",1/2");[[BR]]EndPoly;[[BR]]{creates a polyline object}</Example>
    <ID>497</ID>
    <IDName>procArcTo</IDName>
    <SpecialOverride>MPGetAddArc</SpecialOverride>
    <InternalFunctionName>MPGetAddArc</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinates of vertex.</Desc>
      </Param>
      <Param>
        <Name>radiusDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Radius of vertex arc.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ArrowHead</Name>
    <Version>100</Version>
    <OldVersion>800</OldVersion>
    <Category>Object Attributes</Category>
    <CategorySecondary>Lines</CategorySecondary>
    <Type>Procedure</Type>
    <Description>Obsolete procedure.</Description>
    <ShortDesc>Obsolete procedure. Replaced by Marker.</ShortDesc>
    <SeeAlso>Marker</SeeAlso>
    <Comments>Deleted this obsolete function as of 9.0.0b7 - PCP 12-21-2000[[BR]][[BR]]Sets the current default arrow head style for the document. See FMarker for a description of the style value. This function has been replaced by Marker.[[BR]][[BR]][sd 8/13/98]</Comments>
    <ID>144</ID>
    <IDName>procArrowHead</IDName>
    <InternalFunctionName>MP_ArrowHead</InternalFunctionName>
    <Params>
      <Param>
        <Name>arrow</Name>
        <Type>intMode</Type>
        <Desc>Arrow style constant.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ArrowSize</Name>
    <Version>100</Version>
    <OldVersion>800</OldVersion>
    <Category>Object Attributes</Category>
    <CategorySecondary>Lines</CategorySecondary>
    <Type>Procedure</Type>
    <Description>Obsolete procedure.</Description>
    <ShortDesc>Obsolete procedure. Replaced by Marker.</ShortDesc>
    <SeeAlso>Marker</SeeAlso>
    <Comments>Deleted this obsolete function as of 9.0.0b7 - PCP 12-21-2000[[BR]][[BR]]Sets the document default arrow head size to size in points. Legal values include 1 through 255. This function has been replaced by Marker.[[BR]][[BR]][sd 8/13/98]</Comments>
    <ID>145</ID>
    <IDName>procArrowSize</IDName>
    <InternalFunctionName>MP_ArrowSize</InternalFunctionName>
    <Params>
      <Param>
        <Name>size</Name>
        <Type>intMode</Type>
        <Desc>Arrow length.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AutoKey</Name>
    <Version>100</Version>
    <Category>User Interactive</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns TRUE if a non-modifier keyboard character has been continually depressed for longer than the system defined key repeat rate. If a keyboard character has been continually depressed, then ASCII code of the character is returned in parameter [[p:1]].[[BR]][[BR]][[note:ModifierKeyNote]][[BR]]</Description>
    <ShortDesc>Returns TRUE if a non-modifier key has been continually pressed. Also returns the ASCII code of the key that was pressed.</ShortDesc>
    <Example>WHILE NOT AutoKey(keyHit) DO[[BR]]BEGIN[[BR]]     SysBeep;[[BR]]     SysBeep;[[BR]]END;[[BR]]Message('The key pressed was ',keyHit);[[BR]]</Example>
    <ID>382</ID>
    <IDName>funcAutoKey</IDName>
    <InternalFunctionName>MP_AutoKey</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>asciiCode</Name>
        <Type>lngVarMode</Type>
        <Desc>The ASCII code of the key depressed.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BeginColumn</Name>
    <Version>700</Version>
    <Category>Objects - Architectural</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a column object in a Vectorworks document using 2D object creation procedure calls to define the "template" for the column object. [[BR]][[BR]]After specifying object procedure calls to define the column, you should call EndGroup to complete the column definition and create the actual object.[[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Creates a column object in a Vectorworks document.</ShortDesc>
    <Comments>BeginColumn takes the group of objects that follow, until there is an EndGroup, and converts them into a column with height equal to column distance.[[BR]][[BR]][sd 8/17/98]</Comments>
    <Example>BeginColumn(12');[[BR]]  Oval(2',2',6',6');[[BR]]EndGroup;</Example>
    <ID>591</ID>
    <IDName>procBeginColumn</IDName>
    <SpecialOverride>BeginColumn</SpecialOverride>
    <InternalFunctionName>BeginColumn</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>columnDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Height of column.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BeginFloor</Name>
    <Version>400</Version>
    <Category>Objects - Architectural</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a new floor object in a Vectorworks document. [[name]] uses 2D object creation procedure calls to define the "template" for the object. [[BR]][[BR]]After specifying object procedure calls to define the floor object, you should call EndGroup to complete the column definition and create the actual object.[[BR]]</Description>
    <ShortDesc>Creates a new floor object in a Vectorworks document.</ShortDesc>
    <Example>BeginFloor(6");[[BR]]Rect(1,1,5,5);[[BR]]EndGroup;</Example>
    <ID>509</ID>
    <IDName>procBeginFloor</IDName>
    <SpecialOverride>BeginFloor</SpecialOverride>
    <InternalFunctionName>BeginFloor</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>thicknessDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Floor thickness.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BeginFolder</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a new symbol folder in a Vectorworks document. Any symbols or symbol folders created after the current call to [[name]] will be nested inside the new symbol folder. A call to EndFolder will complete the creation of the symbol folder, which is then generated in the Vectorworks document.[[BR]][[BR]]To name the new symbol folder, precede [[name]] with a call to NameObject.[[BR]][[BR]]</Description>
    <ShortDesc>Creates a new symbol folder in a Vectorworks document.</ShortDesc>
    <Example>NameObject('Object Symbols');[[BR]]BeginFolder;[[BR]]  BeginSym('Oval Symbols');[[BR]]    PenSize(14);[[BR]]    PenPat(2);[[BR]]    FillPat(1);[[BR]]    FillFore(0,0,0);[[BR]]    FillBack(65535,65535,65535);[[BR]]    PenFore(0,0,0);[[BR]]    PenBack(65535,65535,65535);[[BR]]    Oval(-1/4",1/4",3/4",-3/4");[[BR]]  EndSym;[[BR]]EndFolder;[[BR]]{creates the symbol folder 'Object Symbols', which contains a symbol}</Example>
    <ID>131</ID>
    <IDName>procBeginFolder</IDName>
    <SpecialOverride>GetBeginFolder</SpecialOverride>
    <InternalFunctionName>GetBeginFolder</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>BeginGroup</Name>
    <Version>100</Version>
    <Category>Objects - Groups</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a new group object in a Vectorworks document. Procedure calls subsequent to [[name]] and before EndGroup will be included in the new group object. [[name]] may be called repeatedly to created nested groups of objects.</Description>
    <ShortDesc>Creates a new group object.</ShortDesc>
    <Example>BeginGroup;[[BR]]  Rect(-1,1,0.5,0);[[BR]]  Rect(0,1.5,1,0.5);[[BR]]  Oval(-1.5,0.5,-0.5,-0.5);[[BR]]EndGroup;[[BR]]{creates a group}[[BR]][[BR]]BeginGroup;[[BR]]  Rect(-1,1,0,0.5);[[BR]]  Rect(-1,0.5,-0.5,0);[[BR]]  BeginGroup;[[BR]]    Oval(-0.5,0.5,1,0);[[BR]]    Oval(0,0,1,-0.5);[[BR]]  EndGroup;[[BR]]EndGroup;[[BR]]{creates a group comprised of 2 rects and 1 group}</Example>
    <ID>117</ID>
    <IDName>procBeginGroup</IDName>
    <SpecialOverride>GetBeginGroup</SpecialOverride>
    <InternalFunctionName>GetBeginGroup</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>BeginMesh</Name>
    <Version>100</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] begins the efinition of a 3D mesh object in Vectorworks. Any 3D point or planar object call after [[name]] will be included in the mesh object. [[BR]][[BR]]A mesh object allows the user to select and manipulate each vertex within its wire-frame model. </Description>
    <ShortDesc>Creates a new 3D mesh object.</ShortDesc>
    <Example>BeginMesh;[[BR]]ClosePoly;[[BR]]PenSize(1);[[BR]]PenPat(2);[[BR]]FillPat(0);[[BR]]Poly3D(0',0',4'-0",4'-0",0',4'-0",4'-0",-4'-0",4'-0",0',-4'-0",4'-0");[[BR]]Smooth(0);[[BR]]Poly3D(0',0',0',4'-0",0',0',4'-0",-4'-0",0',0',-4'-0",0');[[BR]]Smooth(0);[[BR]]Poly3D(0',-4'-0",0',0',-4'-0",4'-0",0',0',4'-0",0',0',0');[[BR]]Poly3D(4'-0",-4'-0",0',4'-0",-4'-0",4'-0",0',-4'-0",4'-0",0',-4'-0",0');[[BR]]Poly3D(4'-0",0',0',4'-0",0',4'-0",4'-0",-4'-0",4'-0",4'-0",-4'-0",0');[[BR]]Poly3D(0',0',0',0',0',4'-0",4'-0",0',4'-0",4'-0",0',0');[[BR]]EndMesh;[[BR]]</Example>
    <ID>136</ID>
    <IDName>procBeginMesh</IDName>
    <SpecialOverride>GetBeginMesh</SpecialOverride>
    <InternalFunctionName>GetBeginMesh</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>BeginMXtrd</Name>
    <Version>100</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a multiple extrude object in a Vectorworks document. [[name]] uses 2D object creation procedure calls to define the "template" for the object.[[BR]][[BR]]You should call EndMXtrd after the object creation procedures to complete the definition and generate the object in the document.[[BR]][[BR]]A multiple extrude object is a 3D object created from three or more 2D objects, which are used as defining shapes for the extruded object.[[BR]][[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Creates a new multiple extrude object.</ShortDesc>
    <Example>BeginMXtrd(0',1 363/512");[[BR]]  Rect(-125/128",1 113/512",375/512",375/512");[[BR]]  Rect(-25/32",1 113/512",275/512",375/512");[[BR]]  Rect(-75/128",1 113/512",325/1024",375/512");[[BR]]  Locus(-275/2048",125/128");[[BR]]  Rect(-75/128",1 113/512",325/1024",375/512");[[BR]]  Rect(-25/32",1 113/512",275/512",375/512");[[BR]]  Rect(-125/128",1 113/512",375/512",375/512");[[BR]]EndMXtrd;[[BR]]</Example>
    <ID>140</ID>
    <IDName>procBeginMXtrd</IDName>
    <SpecialOverride>GetBeginMxtrd</SpecialOverride>
    <InternalFunctionName>GetBeginMxtrd</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>startDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Start distance from document ground plane.</Desc>
      </Param>
      <Param>
        <Name>endDistance</Name>
        <Type>distanceMode</Type>
        <Desc>End distance from document ground plane.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BeginPoly3D</Name>
    <Version>100</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a 3D polygon in the Vectorworks document. This procedure is used with Add3DPt and EndPoly3D to create 3D polygons. Any calls to the Add3DPt procedure after [[name]] will be included in the 3D polygon.</Description>
    <ShortDesc>Creates a new 3D polygon. </ShortDesc>
    <SeeAlso>Add3DPt, EndPoly3D</SeeAlso>
    <Example>BeginPoly3D;[[BR]]  Add3DPt(0,0,0);[[BR]]  Add3DPt(2,0,0);[[BR]]  Add3DPt(2,2,0);[[BR]]  Add3DPt(1,3,0);[[BR]]  Add3DPt(0,2,0);[[BR]]  Add3DPt(0,0,0);[[BR]]EndPoly3D;[[BR]][[BR]]</Example>
    <ID>340</ID>
    <IDName>procBeginPoly3D</IDName>
    <SpecialOverride>GetBeginD3Poly</SpecialOverride>
    <InternalFunctionName>GetBeginD3Poly</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>BeginPoly</Name>
    <Version>100</Version>
    <Category>Objects - Polys</Category>
    <Type>Procedure</Type>
    <Description>Procedures [[name]] creates a new polygon or polyline object in a Vectorworks document. When used with vertex creation procedure calls, [[name]] and EndPoly() define the polygon object on a vertex by vertex basis.[[BR]][[BR]]A minimum of two vertices must be created, and calculations may be performed within the creation structure between vertex calls, thus allowing additional flexibility in object generation.Hidden edges may be created by using use MoveTo() or Move() between vertex calls.</Description>
    <ShortDesc>Creates a new polygon or polyline object.</ShortDesc>
    <Example>[[BR]][[BR]]</Example>
    <ID>337</ID>
    <IDName>procBeginPoly</IDName>
    <SpecialOverride>GetBeginPoly</SpecialOverride>
    <InternalFunctionName>GetBeginPoly</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>BeginRoof</Name>
    <Version>400</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a simple roof object in a Vectorworks document. [[BR]][[BR]][[note:RoofMiterStyleTable]][[BR]][[BR]]&lt;I&gt;3-D View of Roof&lt;/I&gt;&lt;P&gt;[[BR]][[BR]][[fig:roof.gif]][[BR]]</Description>
    <ShortDesc>Invokes roof creation mode.</ShortDesc>
    <Example>BeginRoof(1,1,5,1,2,2,0.5,1,1,0);[[BR]]  ClosePoly;[[BR]]  Poly(1,1,3,1,3.5,2,4,1,5,1,5,5,1,5);[[BR]]EndGroup;[[BR]][[BR]]</Example>
    <ID>508</ID>
    <IDName>procBeginRoof</IDName>
    <SpecialOverride>BeginRoof</SpecialOverride>
    <InternalFunctionName>BeginRoof</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p1</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinates of roof axis start point.</Desc>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinates of roof axis end point.</Desc>
      </Param>
      <Param>
        <Name>upslope</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinates of upslope definition point.</Desc>
      </Param>
      <Param>
        <Name>riseDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Rise distance.</Desc>
      </Param>
      <Param>
        <Name>runDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Run distance.</Desc>
      </Param>
      <Param>
        <Name>miter</Name>
        <Type>intMode</Type>
        <Desc>Edge miter style of roof.</Desc>
      </Param>
      <Param>
        <Name>vertPart</Name>
        <Type>realMode</Type>
        <Desc>Dimension of vertical miter for double miter style.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BeginSweep</Name>
    <Version>100</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a three-dimensional sweep object in the Vectorworks document. A sweep object is a two-dimensional template object which has been rotated about a specified point to create a 3D object. For example, a circle of radius 1" that is swept about a point 2" to the right of the circles center wil create a sweep object resembling a donut, also known as a torus.[[BR]][[BR]]The sweep increment may also be thought of as the spacing between the duplication of radial sweep mesh lines. The "pitch", or vertical distance, is the distance that the sweep object will travel for every 360° of rotation.  In sweep objects, the 2D template object may also be translated as it rotates, resulting in a "corkscrew" effect. The vertical movement is determined by the following equation: vertical movement = pitch * ArcAngle/360.[[BR]][[BR]][[note:Sweep2DNote]][[BR]][[fig:sweep2d.gif]][[BR]][[note:Sweep3DNote]][[BR]][[fig:sweep3d.gif]]</Description>
    <ShortDesc>Creates a new sweep object.</ShortDesc>
    <Example>BeginSweep(#0d,#360d,#10d,0');[[BR]]  Poly(3 1/4",-1/2",[[BR]]       3 1/4",-1",[[BR]]       2 3/4",-1",[[BR]]       2 1/4",-1/2",[[BR]]       2 1/4",1",[[BR]]       1 3/4",1 1/2",[[BR]]       -1 3/4",1 1/2",[[BR]]       -2 1/4",1",[[BR]]       -2 1/4",-1/2",[[BR]]       -2 3/4",-1",[[BR]]       -3 1/4",-1",[[BR]]       -3 1/4",-1/2",[[BR]]       -2 3/4",0",[[BR]]       -2 3/4",1 1/2",[[BR]]       -2 1/4",2",[[BR]]       2 1/4",2",[[BR]]       2 3/4",1 1/2",[[BR]]       2 3/4",0");[[BR]]EndSweep;[[BR]]</Example>
    <ID>142</ID>
    <IDName>procBeginSweep</IDName>
    <SpecialOverride>GetBeginSweep</SpecialOverride>
    <InternalFunctionName>GetBeginSweep</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>startAngle</Name>
        <Type>angleMode</Type>
        <Desc>Starting angle of the sweep.</Desc>
      </Param>
      <Param>
        <Name>arcAngle</Name>
        <Type>angleMode</Type>
        <Desc>Angle of sweep.</Desc>
      </Param>
      <Param>
        <Name>incAngle</Name>
        <Type>angleMode</Type>
        <Desc>Increment of sweep.</Desc>
      </Param>
      <Param>
        <Name>PitchDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Pitch (translation distance) of sweep.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BeginSym</Name>
    <Version>100</Version>
    <Category>Objects - Symbols</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a new symbol definition ina Vectorworks document. [[BR]][[BR]]Any objects created after a call to [[name]] will be included in the symbol definition. A call to EndSym will complete the creation of the symbol, which is then generated in the Vectorworks document.[[BR]][[BR]]</Description>
    <ShortDesc>Creates a new symbol definition.</ShortDesc>
    <Comments>Note: normally SetOriginAbsolute(0,0) should be called before calling this. The user origin is used as the insertion point for the symbol, but it may be out of bounds, in which case the symbol is still created but the center of the document is used instead for the insertion point.</Comments>
    <Example>BeginSym('Window');[[BR]]  Rect(-5'-11",-1",-2'-0",-5'-11");[[BR]]  Rect(-5'-8 3/4",-2 1/4",-2'-2 1/4",-2'-10");[[BR]]  Rect(-5'-8 3/4",-3'-1 3/4",-2'-2 1/4",-5'-9");[[BR]]  Rect(-4'-7",-2'-7 3/4",-3'-3 1/2",-2'-9 1/2");[[BR]]  MoveTo(-5'-11",-3'-0");[[BR]]  LineTo(-2'-0",-3'-0");[[BR]]EndSym;[[BR]]</Example>
    <ID>129</ID>
    <IDName>procBeginSym</IDName>
    <SpecialOverride>GetBeginSymbol</SpecialOverride>
    <InternalFunctionName>GetBeginSymbol</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>symbolName</Name>
        <Type>stringMode</Type>
        <Desc>Name of the new symbol.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BeginXtrd</Name>
    <Version>100</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a 3D extrude object in a Vectorworks document. [[name]] uses 2D object creation procedure calls to define the "template" for the object. [[BR]][[BR]]You should call EndXtrd after the object creation procedures to complete the definition and generate the extrude object in the document.[[BR]][[BR]][[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Creates a new extrude object.</ShortDesc>
    <Example>BeginXtrd(0',4');[[BR]]Rect(-1 61/64",125/128",-1 119/256",-375/512");[[BR]]Rect(-1 113/512",1 113/512",-375/512",-125/256");[[BR]]Rect(-125/256",125/128",0',-375/512");[[BR]]Rect(125/128",125/128",1 119/256",-375/512");[[BR]]Rect(1 25/512",1 113/512",375/512",-125/256");[[BR]]Rect(1 363/512",1 113/512",2 101/512",-125/256");[[BR]]EndXtrd;[[BR]]{creates an extrude using the defined rectangles, each extruded to a depth of 4'}</Example>
    <ID>138</ID>
    <IDName>procBeginXtrd</IDName>
    <SpecialOverride>GetBeginXtrd</SpecialOverride>
    <InternalFunctionName>GetBeginXtrd</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>startDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Start distance from document ground plane.</Desc>
      </Param>
      <Param>
        <Name>endDistance</Name>
        <Type>distanceMode</Type>
        <Desc>End distance from document ground plane.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BreakWall</Name>
    <Version>400</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a break in a wall object on the left or the right at a specified offset location.[[BR]]</Description>
    <ShortDesc>Creates a wall break in the most recently created wall object.</ShortDesc>
    <Example>MoveTo(2,3);[[BR]]WallTo(7,3);[[BR]]BreakWall(3",1",True);[[BR]]{creates a right hand 1" wall break 3" from the start of the wall}</Example>
    <ID>504</ID>
    <IDName>procBreakWall</IDName>
    <SpecialOverride>MPBreakWall</SpecialOverride>
    <InternalFunctionName>MPBreakWall</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>offsetDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Offset distance from wall start.</Desc>
      </Param>
      <Param>
        <Name>breakWidthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Width of wall break.</Desc>
      </Param>
      <Param>
        <Name>right</Name>
        <Type>boolMode</Type>
        <Desc>Left-right edge status of break.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CallTool</Name>
    <Version>400</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Activates the specified Vectorworks tool for a single use. After the tool has been used Vectorworks will revert back to the previously active tool.[[BR]][[BR]]Note: [[note:SetCallToolIDTableRef]]</Description>
    <ShortDesc>Sets the active tool. When finished, returns to the previously active tool.</ShortDesc>
    <Comments>Changes the active tool to that specified by toolID. Waits until the user has executed the functionality of that tool, then switches back to the previously active tool &amp; returns.[[BR]][[BR]][sd 8/13/98]</Comments>
    <Example>PushAttrs;[[BR]]PenFore(16);[[BR]]PenBack(0);[[BR]]PenPat(-2);[[BR]]CallTool(-201);[[BR]]PopAttrs;[[BR]]</Example>
    <ID>520</ID>
    <IDName>procCallTool</IDName>
    <InternalFunctionName>MP_CallTool</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>toolID</Name>
        <Type>intMode</Type>
        <Desc>Vectorworks tool constant.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CapsLock</Name>
    <Version>100</Version>
    <Category>User Interactive</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>[[name]] returns TRUE if the Caps Lock was depressed during the last user event. This function operates with the MouseDown, KeyDown, AutoKey, GetPt, GetPtL, GetLine, and GetRect calls.</Description>
    <ShortDesc>Returns TRUE if the Caps Lock key was pressed.</ShortDesc>
    <ID>404</ID>
    <IDName>funcCapsLock</IDName>
    <InternalFunctionName>MP_CapsLock</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>CellHasNum</Name>
    <Version>100</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns TRUE if the specified cell of a referenced worksheet contains a value or an equation which returns a numeric value.</Description>
    <ShortDesc>Returns TRUE if cell contains a numeric result.</ShortDesc>
    <Comments>OBSOLETE for Version 9: see new IsWSCellNumber and IsWSSubrowCellNumber. [VML 01/09/01]</Comments>
    <ID>355</ID>
    <IDName>funcCellHasNum</IDName>
    <InternalFunctionName>MP_CellHasNum</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Worksheet row index.</Desc>
      </Param>
      <Param>
        <Name>col</Name>
        <Type>intMode</Type>
        <Desc>Worksheet column index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CellHasStr</Name>
    <Version>100</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns TRUE if the specified cell of a referenced worksheet contains a value or an equation which returns a numeric value.[[BR]]</Description>
    <ShortDesc>Returns TRUE if cell contains a string result.</ShortDesc>
    <Comments>OBSOLETE for Version 9: see new IsWSCellString and IsWSSubrowCellString. [VML 01/09/01]</Comments>
    <ID>354</ID>
    <IDName>funcCellHasStr</IDName>
    <InternalFunctionName>MP_CellHasStr</InternalFunctionName>
    <ModernName>CellHasString</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Worksheet row index.</Desc>
      </Param>
      <Param>
        <Name>col</Name>
        <Type>intMode</Type>
        <Desc>Worksheet column index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CellString</Name>
    <Version>100</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Function [[name]] returns the string of a specified cell in the active worksheet </Description>
    <ShortDesc>Returns the string of a specified cell in the active worksheet.</ShortDesc>
    <Comments>Returns the string representation of the current worksheet's cell specified by 'row' and 'column' numbers. [sd 8/13/98][[BR]]OBSOLETE for Version 9: see new GetWSCellString and GetWSSubrowCellString. [VML 01/09/01]</Comments>
    <ID>226</ID>
    <IDName>funcCellString</IDName>
    <SpecialOverride>GetCellStr</SpecialOverride>
    <InternalFunctionName>GetCellStr</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Worksheet row index.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Worksheet column index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CellValue</Name>
    <Version>100</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the numeric value of a specified cell in the active worksheet. If the specified cell is not a numeric type, then this function returns 0.[[BR]]</Description>
    <ShortDesc>Returns the numeric value of a specified cell in the active worksheet.</ShortDesc>
    <Comments>Returns the floating point representation of the current worksheet's cell specified by "row" and "column" numbers.  If the specified cell is not a numeric type, then this function returns 0. [sd 8/13/98][[BR]]OBSOLETE for Version 9: see new GetWSCellValue and GetWSSubrowCellValue. [VML 01/09/01]</Comments>
    <ID>225</ID>
    <IDName>funcCellValue</IDName>
    <SpecialOverride>GetCellVal</SpecialOverride>
    <InternalFunctionName>GetCellVal</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Worksheet row index.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Worksheet column index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CircularDim</Name>
    <Version>100</Version>
    <Category>Dimensions</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a diameter or radial dimension in a Vectorworks document.[[BR]][[BR]][[note:DimFlagNote]][[BR]][[BR]]&lt;I&gt;Circular Dimension&lt;/I&gt;&lt;P&gt;[[BR]][[fig:circdim.gif]]</Description>
    <ShortDesc>Creates a radial or diameter dimension.</ShortDesc>
    <Example>CircularDim(-4 3/8",3",-4 3/8",1/4",-5 3/4",3",-3",1/4",1 1/8",1,3, 1025,1/4");[[BR]][[BR]]</Example>
    <ID>493</ID>
    <IDName>procCircularDim</IDName>
    <SpecialOverride>GetCircularDimension</SpecialOverride>
    <InternalFunctionName>GetCircularDimension</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>startPt</Name>
        <Type>globPtMode</Type>
        <Desc>X-Y coordinates of dimension start point.</Desc>
      </Param>
      <Param>
        <Name>endPt</Name>
        <Type>globPtMode</Type>
        <Desc>X-Y coordinates of dimension end point.</Desc>
      </Param>
      <Param>
        <Name>box1</Name>
        <Type>globPtMode</Type>
        <Desc>X-Y coordinates of top left corner of object bounding box</Desc>
      </Param>
      <Param>
        <Name>box2</Name>
        <Type>globPtMode</Type>
        <Desc>X-Y coordinates of bottom right corner of object bounding box</Desc>
      </Param>
      <Param>
        <Name>textOffsetDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Offset distance of text from dimension line(witness leader length).</Desc>
      </Param>
      <Param>
        <Name>dimType</Name>
        <Type>intMode</Type>
        <Desc>Dimension type flag.</Desc>
      </Param>
      <Param>
        <Name>arrow</Name>
        <Type>intMode</Type>
        <Desc>Arrow style flag.</Desc>
      </Param>
      <Param>
        <Name>textFlag</Name>
        <Type>intMode</Type>
        <Desc>Text style flag.</Desc>
      </Param>
      <Param>
        <Name>shoulder</Name>
        <Type>realMode</Type>
        <Desc>Shoulder extension line length.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ClassList</Name>
    <Version>100</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Returns the name of the specified class in the document class list. For example,  ClassList(4) will return the name of the fourth class in the list.</Description>
    <ShortDesc>Returns the name of the specified class in the document's class list. </ShortDesc>
    <SeeAlso>ClassNum</SeeAlso>
    <Comments>NOTE: the manual has said that ClassLIst(4) returns the 4th class in the list, but it actually was returning the 5th class.  BF changed the function on 3/98 so it does return the 4th class.</Comments>
    <Example>noneClass := [[name]](1);[[BR]]dimensionClass := [[name]](2);[[BR]]classNumber3 := [[name]](3);[[BR]]classNumber4 := [[name]](4);[[BR]]</Example>
    <ID>325</ID>
    <IDName>funcClassList</IDName>
    <InternalFunctionName>MP_ClassList</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>longMode</Type>
        <Desc>Index of class in class list (range of 1- n).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ClassNum</Name>
    <Version>100</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Returns the total number of classes in the active document.</Description>
    <ShortDesc>Returns the number of classes in the document.</ShortDesc>
    <Example>numOfClasses:= [[name]];[[BR]]</Example>
    <ID>303</ID>
    <IDName>funcClassNum</IDName>
    <InternalFunctionName>MP_ClassNum</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>ClearCavities</Name>
    <Version>400</Version>
    <OldVersion>1250</OldVersion>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] resets the default cavity style of wall objects to no cavities.[[BR]][[BR]]</Description>
    <ShortDesc>Resets the default cavity style to none.</ShortDesc>
    <Example>DoubLines(6");[[BR]]AddCavity(True,1",2",2);[[BR]]Wall(0,1,9,1);[[BR]]ClearCavities;[[BR]]Wall(0,2,11,2);[[BR]]{creates a wall with a cavity, then creates a wall without a cavity}</Example>
    <ID>507</ID>
    <IDName>procClearCavities</IDName>
    <SpecialOverride>MPClearCavities</SpecialOverride>
    <InternalFunctionName>MPClearCavities</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Close</Name>
    <ChangedDate>2017:04:14T10:33:00</ChangedDate>
    <Version>100</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>Procedure Close closes the specified text file.[[BR]][[BR]][[note:FilePathNote]]</Description>
    <ShortDesc>Closes a currently open text file.</ShortDesc>
    <Example>BEGIN[[BR]]     Open('MyData');[[BR]]     WHILE NOT EOF('MyData') DO[[BR]]          ReadLn(a,b,c,d);[[BR]]     [[name]]('MyData');[[BR]]END;[[BR]][[BR]]</Example>
    <ID>211</ID>
    <IDName>procClose</IDName>
    <SpecialOverride>GetClose</SpecialOverride>
    <InternalFunctionName>GetClose</InternalFunctionName>
    <ModernName>CloseFile</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>fileName</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Name of file to close.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CloseSS</Name>
    <Version>600</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] closes the referenced worksheet.[[BR]]</Description>
    <ShortDesc>Closes the referenced worksheet.</ShortDesc>
    <Comments>OBSOLETE for Version 9: see new ShowWS. [VML 01/09/01]</Comments>
    <Example>CloseSS(HandleToWS);[[BR]]</Example>
    <ID>535</ID>
    <IDName>procCloseSS</IDName>
    <InternalFunctionName>MP_CloseSS</InternalFunctionName>
    <ModernName>CloseWorksheet</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ColorIndexToRGB</Name>
    <Version>600</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] converts the Vectorworks palette colors from the colors' palette position index to its red, green, and blue component values. RGB values are in the range of 0~65535.[[BR]][[BR]][[note:ColorTableNote]]</Description>
    <ShortDesc>Converts a color palette index to RGB values.</ShortDesc>
    <Example>[[name]](45,r,g,b);[[BR]]{returns the color value components of the color at position 45}</Example>
    <ID>567</ID>
    <IDName>procColorIndexToRGB</IDName>
    <SpecialOverride>ColorIndexToRGB</SpecialOverride>
    <InternalFunctionName>ColorIndexToRGB</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>color</Name>
        <Type>intMode</Type>
        <Desc>Color index.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Command</Name>
    <Version>100</Version>
    <Category>User Interactive</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>[[name]] returns TRUE if the Command key (Mac) or Control key (Windows) was depressed during the last user event. This function operates with the MouseDown, KeyDown, AutoKey, GetPt, GetPtL, GetLine, and GetRect calls.</Description>
    <ShortDesc>Returns TRUE if the Command/Control key was pressed.</ShortDesc>
    <ID>402</ID>
    <IDName>funcCommand</IDName>
    <InternalFunctionName>MP_Command</InternalFunctionName>
    <ModernName>CommandKey</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Copy</Name>
    <Version>100</Version>
    <Category>Strings</Category>
    <Type>Function</Type>
    <ReturnType>DYNARRAY[] of CHAR</ReturnType>
    <Description>Function [[name]] returns a substring from a specified source string.[[BR]]</Description>
    <ShortDesc>Returns a specified substring from a text string.</ShortDesc>
    <Example>newStr:=Copy('A sample string',10,6);[[BR]]{returns 'string'}[[BR]]</Example>
    <ID>244</ID>
    <IDName>funcCopy</IDName>
    <InternalFunctionName>MP_Copy</InternalFunctionName>
    <ModernName>Substring</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>source</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Source string.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Start position in text string.</Desc>
      </Param>
      <Param>
        <Name>count</Name>
        <Type>intMode</Type>
        <Desc>Length of substring.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CopyMode</Name>
    <Version>100</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the transfer mode for the active design layer.  If a sheet layer is active, the procedure has no effect.[[BR]][[BR]][[note:XferModeTable]][[BR]][[BR]]The design layer will only be imaged with the transfer mode on systems which support it, like Windows.  Setting the transfer mode to a mode other than Copy (i.e. 8, Paint mode), when the current layer transparency percentage is 0, will also automatically change the layer transparency percentage to 50.  Similarly, setting the transfer mode to Copy, when the current layer transparency percentage is greater than 0, will also automatically change the layer transparency percentage to 0.  This is to approximately preserve the appearance of the layer on systems that don't support transfer modes, like Quartz on the Mac.[[BR]]</Description>
    <ShortDesc>Sets the layer transfer mode for the active layer.</ShortDesc>
    <SeeAlso>SetLayerTransparency</SeeAlso>
    <Comments>Sets the layer transfer mode for the actlve layer.[[BR]][[BR]]Valid mode values are:[[BR]]8 - Copy[[BR]]9 - OR[[BR]]10 - XOR[[BR]]11 - BIC[[BR]]12 - Inverse Copy[[BR]]13 - Inverse OR[[BR]]14 - Inverse XOR[[BR]]15 - Inverse BIC[[BR]][[BR]]This procedure may also set the layer transparency to approximate the given transfer mode on systems that don't support transfer modes.</Comments>
    <ID>148</ID>
    <IDName>procCopyMode</IDName>
    <InternalFunctionName>MP_CopyMode</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>mode</Name>
        <Type>intMode</Type>
        <Desc>Mode index value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CopySymbol</Name>
    <Version>100</Version>
    <Category>Objects - Symbols</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Procedure [[name]] will copy a symbol into the active document from a user specified source document. [[BR]][[BR]][[note:FilePathNote]]</Description>
    <ShortDesc>Copies the specified symbol from the source document into the active document.</ShortDesc>
    <Result>Returns a BOOLEAN value indicating the success or failure of the import operation.</Result>
    <Example>PROCEDURE CopySym;[[BR]]VAR[[BR]]	theSymbolName :STRING;[[BR]]BEGIN[[BR]]	theSymbolName := 'Fax';[[BR]]	IF [[name]]('Object Libraries\Office Equipment.mcd', theSymbolName) [[BR]]		THEN Symbol(theSymbolName, 0, 0, 0);[[BR]]END;[[BR]]RUN(CopySym);</Example>
    <ID>482</ID>
    <IDName>funcCopySymbol</IDName>
    <SpecialOverride>GetFuncCopySym</SpecialOverride>
    <InternalFunctionName>GetFuncCopySym</InternalFunctionName>
    <ModernName>ImportSymbol</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>filePath</Name>
        <Type>stringMode</Type>
        <Desc>File path to document, relative to the application folder.</Desc>
      </Param>
      <Param>
        <Name>symbol</Name>
        <Type>stringMode</Type>
        <Desc>Name of symbol to import.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Cos</Name>
    <Version>100</Version>
    <Category>Math - General</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the cosine of the specified value. The base value is assumed to represent an angle in radians.</Description>
    <ShortDesc>Returns the cosine of the specified value.</ShortDesc>
    <ID>232</ID>
    <IDName>funcCos</IDName>
    <InternalFunctionName>MP_Cos</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>v</Name>
        <Type>realMode</Type>
        <Desc>The angle for which to find the cosine.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateLight</Name>
    <Version>700</Version>
    <Category>Objects - Lights</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>CreateLight creates a new light object in the active VectorScript document. [[BR]][[BR]]A new light objects' color is defaulted to white, and brightness is defaulted to 75%. [[BR]][[BR]][[note:LightTypeTable]][[BR]][[BR]]</Description>
    <ShortDesc>Creates a new light object.</ShortDesc>
    <Example>CreateLight(2,3,8,1,TRUE,TRUE);[[BR]]</Example>
    <ID>570</ID>
    <IDName>funcCreateLight</IDName>
    <SpecialOverride>CreateLight</SpecialOverride>
    <InternalFunctionName>CreateLight</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>pXR</Name>
        <Type>realMode</Type>
        <Desc>X coordinate of new light.</Desc>
      </Param>
      <Param>
        <Name>pYR</Name>
        <Type>realMode</Type>
        <Desc>Y coordinate of new light.</Desc>
      </Param>
      <Param>
        <Name>pZR</Name>
        <Type>realMode</Type>
        <Desc>Z coordinate of new light.</Desc>
      </Param>
      <Param>
        <Name>lightType</Name>
        <Type>intMode</Type>
        <Desc>Light type.</Desc>
      </Param>
      <Param>
        <Name>isOn</Name>
        <Type>boolMode</Type>
        <Desc>On-off status of light.</Desc>
      </Param>
      <Param>
        <Name>castShadow</Name>
        <Type>boolMode</Type>
        <Desc>Specifies whether light will cast shadow.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CurveThrough</Name>
    <Version>400</Version>
    <Category>Objects - Polys</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] fits a cubic spline through the specified point.[[BR]]</Description>
    <ShortDesc>Creates a cubic spline vertex at the specified point.</ShortDesc>
    <ID>496</ID>
    <IDName>procCurveThrough</IDName>
    <SpecialOverride>MPGetAddCubic</SpecialOverride>
    <InternalFunctionName>MPGetAddCubic</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinates of vertex.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CurveTo</Name>
    <Version>400</Version>
    <Category>Objects - Polys</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a bezier vertex point at the specified point. Parameter [[p:1]] specifies the coordinate location of the vertex.</Description>
    <ShortDesc>Creates a bezier spline vertex at the specified point.</ShortDesc>
    <ID>495</ID>
    <IDName>procCurveTo</IDName>
    <SpecialOverride>MPGetAddCurve</SpecialOverride>
    <InternalFunctionName>MPGetAddCurve</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinate of vertex.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Date</Name>
    <Version>100</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Function [[name]] returns a formatted date and time string.[[BR]][[BR]][[note:DateFormatTable]][[BR]][[BR]][[note:DateStringFormatTable]][[BR]][[BR]]</Description>
    <ShortDesc>Returns the current date and time as a string.</ShortDesc>
    <Example>{ All examples are for the date Friday,  }[[BR]]{ Nov. 18, 1988 and the time 10:42:24 AM }[[BR]][[BR]][[name]](0,1);[[BR]]{returns Friday, November 18, 1988 10:42:24 AM}[[BR]][[BR]][[name]](0,0);[[BR]]{returns Friday, November 18, 1988}[[BR]][[BR]][[name]](2,2);[[BR]]{returns 10:42:24 AM}[[BR]][[BR]][[name]](2,1);[[BR]]{returns 11/18/88 10:42:24 AM}</Example>
    <ID>347</ID>
    <IDName>funcDate</IDName>
    <SpecialOverride>GetDate</SpecialOverride>
    <InternalFunctionName>GetDate</InternalFunctionName>
    <ModernName>DateString</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dateFormat</Name>
        <Type>intMode</Type>
        <Desc>Specify how verbose or compact the resulting string is.</Desc>
      </Param>
      <Param>
        <Name>infoFormat</Name>
        <Type>intMode</Type>
        <Desc>Specify if result should contain date, time or both.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Deg2Rad</Name>
    <Version>100</Version>
    <Category>Math - General</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] converts the specified value (in degrees) to radians.</Description>
    <ShortDesc>Converts decimal degrees into radians.</ShortDesc>
    <ID>238</ID>
    <IDName>funcDeg2Rad</IDName>
    <InternalFunctionName>MP_Deg2Rad</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>degreeValue</Name>
        <Type>realMode</Type>
        <Desc>Value in degrees.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DelClass</Name>
    <Version>100</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Deletes the specified class from the active document. If there are objects in the class to be deleted, they are reassigned to the None class. [[BR]][[BR]]</Description>
    <ShortDesc>Deletes the specified class.</ShortDesc>
    <Example>[[name]]('Future Construction');[[BR]]</Example>
    <ID>344</ID>
    <IDName>procDelClass</IDName>
    <InternalFunctionName>MP_DelClass</InternalFunctionName>
    <ModernName>DeleteClass</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class to delete.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Delete</Name>
    <Version>100</Version>
    <Category>Strings</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] removes a substring from the specified source string.[[BR]]</Description>
    <ShortDesc>Deletes a substring from the specified source string.</ShortDesc>
    <Example>theStr:='A sample string';[[BR]][[name]](theStr,3,7);[[BR]]{deletes 'sample' from the string value}</Example>
    <ID>245</ID>
    <IDName>procDelete</IDName>
    <InternalFunctionName>MP_Delete</InternalFunctionName>
    <ModernName>DeleteSubstring</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>source</Name>
        <Type>eCharDynarrayInOutMode</Type>
        <Desc>Source string.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Start position in text string.</Desc>
      </Param>
      <Param>
        <Name>count</Name>
        <Type>intMode</Type>
        <Desc>Length of substring.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DeleteObjs</Name>
    <Version>100</Version>
    <Category>Object Editing</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] deletes all selected objects on the active layer. Using this procedure when the layer display mode is Show/Snap/Modify will cause selected objects on any visible layer will be deleted.[[BR]][[BR]]</Description>
    <ShortDesc>Deletes all selected objects on the active layer.</ShortDesc>
    <Example>DSelectAll;[[BR]]SelectObj(((T=Locus) &amp; (NOT V)));[[BR]][[name]];[[BR]]</Example>
    <ID>185</ID>
    <IDName>procDeleteObjs</IDName>
    <SpecialOverride>MPDeleteObjs</SpecialOverride>
    <InternalFunctionName>MPDeleteObjs</InternalFunctionName>
    <ModernName>DeleteObjects</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>DeleteWallSym</Name>
    <Version>600</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] deletes the referenced symbol from a wall object.</Description>
    <ShortDesc>Deletes the referenced symbol from a wall.</ShortDesc>
    <ID>558</ID>
    <IDName>funcDeleteWallSym</IDName>
    <SpecialOverride>DeleteWallSym</SpecialOverride>
    <InternalFunctionName>DeleteWallSym</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>symbolHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to symbol.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DelName</Name>
    <Version>100</Version>
    <Category>Object Names</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] deletes an object name from a Vectorworks document. The associated object is not affected by the name deletion.[[BR]][[BR]]</Description>
    <ShortDesc>Removes the specified name from the name list. Does not affect objects.</ShortDesc>
    <ID>345</ID>
    <IDName>procDelName</IDName>
    <InternalFunctionName>MP_DelName</InternalFunctionName>
    <ModernName>DeleteName</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Object name to be deleted.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DelObject</Name>
    <Version>100</Version>
    <Category>Object Editing</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] deletes the referenced object from the document.</Description>
    <ShortDesc>Deletes the referenced object.</ShortDesc>
    <ID>488</ID>
    <IDName>procDelObject</IDName>
    <InternalFunctionName>MP_DelObject</InternalFunctionName>
    <ModernName>DeleteObject</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DelRecord</Name>
    <ChangedDate>2017:04:14T10:42:00</ChangedDate>
    <Version>700</Version>
    <Category>Database / Record</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] removes an attached record from the referenced object.</Description>
    <ShortDesc>Deletes the specified record from the referenced object.</ShortDesc>
    <ID>584</ID>
    <IDName>procDelRecord</IDName>
    <SpecialOverride>DelRecord</SpecialOverride>
    <InternalFunctionName>DelRecord</InternalFunctionName>
    <ModernName>DeleteRecord</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>name</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Name of record to be removed.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DelVertex</Name>
    <Version>600</Version>
    <Category>Objects - Polys</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] deletes a vertex from the referenced object. Parameter [[p:2]] specifies the vertex to be deleted.[[BR]]</Description>
    <ShortDesc>Deletes the specified vertex of the referenced polygon/polyline.</ShortDesc>
    <ID>551</ID>
    <IDName>procDelVertex</IDName>
    <SpecialOverride>DelVertex</SpecialOverride>
    <InternalFunctionName>DelVertex</InternalFunctionName>
    <ModernName>DeleteVertex</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to polygon.</Desc>
      </Param>
      <Param>
        <Name>vertexNum</Name>
        <Type>intMode</Type>
        <Desc>Index of vertex to be deleted.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DidCancel</Name>
    <Version>100</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] detects whether the Cancel button in a predefined dialog was pressed. [[name]] is intended for use with conditional statements to signal that a cancel event has occurred.[[BR]][[BR]]</Description>
    <ShortDesc>Detects selection of the Cancel button in a dialog.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	i : INTEGER;[[BR]]BEGIN[[BR]]	i := IntDialog('Enter an integer:', '0');[[BR]]	IF NOT DidCancel THEN BEGIN[[BR]]		i := i*3;[[BR]]		Message(i);[[BR]]	END;[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>348</ID>
    <IDName>funcDidCancel</IDName>
    <SpecialOverride>MPHitCancel</SpecialOverride>
    <InternalFunctionName>MPHitCancel</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>DimArcText</Name>
    <Version>100</Version>
    <Category>Dimensions</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates an angular dimension object from the last arc object that was drawn using VectorScript.</Description>
    <ShortDesc>Creates an angular dimension object from the last arc object.</ShortDesc>
    <Comments>Creates an angular dimension object from the last arc object that was drawn using VectorScript</Comments>
    <Example>Arc(0,0,2,2,45d,90d);[[BR]]DimArcText;[[BR]]{ creates a dimension from the new arc object }</Example>
    <ID>103</ID>
    <IDName>procDimArcText</IDName>
    <InternalFunctionName>MP_DimArcText</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>DimText</Name>
    <Version>100</Version>
    <Category>Dimensions</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] converts the most recently created line object in VectorScript to a dimension.</Description>
    <ShortDesc>Converts most recently created line to dimension.</ShortDesc>
    <Comments>Creates a linear dimension object from the last line object that was drawn using VectorScript.</Comments>
    <Example>LineTo(2,2);[[BR]]DimText;[[BR]]</Example>
    <ID>104</ID>
    <IDName>procDimText</IDName>
    <InternalFunctionName>MP_DimText</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Distance</Name>
    <Version>100</Version>
    <Category>Graphic Calculation</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the distance between the two specified coordinate locations.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the distance between (x1,y1) and (x2,y2).</ShortDesc>
    <SeeAlso>Norm</SeeAlso>
    <Example>d:=[[name]](0,2,4,5);[[BR]]{returns the distance between (0,2) and (4,5)}</Example>
    <ID>390</ID>
    <IDName>funcDistance</IDName>
    <SpecialOverride>MPDistance</SpecialOverride>
    <InternalFunctionName>MPDistance</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>x1</Name>
        <Type>realMode</Type>
        <Desc>X coordinate of first point.</Desc>
      </Param>
      <Param>
        <Name>y1</Name>
        <Type>realMode</Type>
        <Desc>Y coordinate of first point.</Desc>
      </Param>
      <Param>
        <Name>x2</Name>
        <Type>realMode</Type>
        <Desc>X coordinate of second point.</Desc>
      </Param>
      <Param>
        <Name>y2</Name>
        <Type>realMode</Type>
        <Desc>Y coordinate of second point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DistDialog</Name>
    <ChangedDate>2017:07:05T17:12:00</ChangedDate>
    <Version>100</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] displays a dialog box which requests the user to enter a distance value.[[BR]][[BR]][[name]] automatically screens for valid numeric input.[[BR]][[BR]]</Description>
    <ShortDesc>Displays a dialog box that requests the user to input an distance.</ShortDesc>
    <Example>DistValue := [[name]]('Enter a distance value:','0');[[BR]]</Example>
    <ID>200</ID>
    <IDName>funcDistDialog</IDName>
    <InternalFunctionName>MP_DistDialog</InternalFunctionName>
    <ModernName>DistanceDialog</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>request</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Dialog user prompt string.</Desc>
      </Param>
      <Param>
        <Name>default</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Default value for input field.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DoMenu</Name>
    <Version>100</Version>
    <OldVersion>500</OldVersion>
    <Category>Command</Category>
    <Type>Procedure</Type>
    <Description>Obsolete procedure.</Description>
    <ShortDesc>Obsolete procedure. See DoMenuTextByName.</ShortDesc>
    <SeeAlso>DoMenuTextByName</SeeAlso>
    <Comments>Deleted this obsolete function as of 9.0.0b7 - PCP 12-21-2000[[BR]][[BR]]Obsolete. Non-functional in Vectorworks 8.[[BR]][[BR]][sd 8/17/98]</Comments>
    <ID>332</ID>
    <IDName>procDoMenu</IDName>
    <SpecialOverride>DoMenu</SpecialOverride>
    <InternalFunctionName>DoMenu</InternalFunctionName>
    <Params>
      <Param>
        <Name>menuID</Name>
        <Type>intMode</Type>
        <Desc>Menu ID value.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>intMode</Type>
        <Desc>Item ID value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DoMenuText</Name>
    <Version>400</Version>
    <OldVersion>800</OldVersion>
    <Category>Command</Category>
    <Type>Procedure</Type>
    <Description>Obsolete procedure.</Description>
    <ShortDesc>Obsolete procedure. See DoMenuTextByName.</ShortDesc>
    <SeeAlso>DoMenuTextByName</SeeAlso>
    <Comments>As of 9.0.0b7, DoMenuText will generate a runtime error if the user attempts to execute a main application menu item. It will continue to work wor worksheet menu items using the WS prefix until 10.0.0, when it will be removed completely. - PCP 12-21-2000[[BR]]</Comments>
    <ID>524</ID>
    <IDName>procDoMenuText</IDName>
    <SpecialOverride>MPDoMenuText</SpecialOverride>
    <InternalFunctionName>MPDoMenuText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>menuItem</Name>
        <Type>stringMode</Type>
        <Desc>Menu item name.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DoMenuTextByName</Name>
    <Version>500</Version>
    <Category>Command</Category>
    <Type>Procedure</Type>
    <Description>Calls the specified Vectorworks menu command item.[[BR]][[BR]]If the item is part of a Vectorworks menu chunk, pass the position of the item within the chunk as the second parameter. For menu items that are not part of a chunk, pass 0 as the second parameter.[[BR]][[BR]]Note: [[name]] uses the internal Vectorworks menu item name to reference the menu command, and calls to this procedure will work on localized (international) versions of Vectorworks without modification. Note also that when calling VS plug-ins, you have to use the filename (which could be different from the internal plug-in name).[[BR]][[BR]][[note:DoMenuTextTable]]</Description>
    <ShortDesc>Calls the specified Vectorworks menu item.</ShortDesc>
    <Example>PROCEDURE [[name]]Example;[[BR]]BEGIN[[BR]]	[[name]]('Print',0); {calls the print dialog}[[BR]]	[[name]]('Standard Views',8); {sets view to right isometric}[[BR]]END;[[BR]]RUN([[name]]Example);[[BR]]</Example>
    <ID>526</ID>
    <IDName>procDoMenuTextByName</IDName>
    <SpecialOverride>MPDoMenuTextByName</SpecialOverride>
    <InternalFunctionName>MPDoMenuTextByName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>subMenu</Name>
        <Type>stringMode</Type>
        <Desc>Menu item  selector.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Menu chunk item position (range of 1 -  n).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DoubleFixedTolerance</Name>
    <Version>400</Version>
    <Category>Dimensions</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] is used with dimensioning procedures to define a tolerance for the most recently created dimension object.[[BR]]</Description>
    <ShortDesc>Defines a double fixed tolerance for the most recently created dimension.</ShortDesc>
    <Example>LinearDim(-2",2",1",2",-3",0,771,771,0.75);[[BR]][[name]](TRUE,FALSE,'','','yes','no');[[BR]]{defines a dimension with a double fixed tolerance}</Example>
    <ID>515</ID>
    <IDName>procDoubleFixedTolerance</IDName>
    <SpecialOverride>DoubleFixedTolerance</SpecialOverride>
    <InternalFunctionName>DoubleFixedTolerance</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>showVal</Name>
        <Type>boolMode</Type>
        <Desc>Dimension text display flag.</Desc>
      </Param>
      <Param>
        <Name>boxText</Name>
        <Type>boolMode</Type>
        <Desc>Boxed text display flag.</Desc>
      </Param>
      <Param>
        <Name>leader</Name>
        <Type>stringMode</Type>
        <Desc>Dimension leader text string.</Desc>
      </Param>
      <Param>
        <Name>trailer</Name>
        <Type>stringMode</Type>
        <Desc>Dimension trailer text string.</Desc>
      </Param>
      <Param>
        <Name>topStr</Name>
        <Type>stringMode</Type>
        <Desc>Tolerance value text string.</Desc>
      </Param>
      <Param>
        <Name>botStr</Name>
        <Type>stringMode</Type>
        <Desc>Tolerance value text string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DoubleTolerance</Name>
    <Version>400</Version>
    <Category>Dimensions</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] is used with dimensioning procedures to define a tolerance for the most recently created dimension.[[BR]]</Description>
    <ShortDesc>Defines a double tolerance for the most recently created dimension.</ShortDesc>
    <Example>LinearDim(-2",2",1",2",-3",0,771,771,0.75);[[BR]][[name]](True,False,'est. ','',1/16",1/16");[[BR]]{defines a dimension with a double tolerance}</Example>
    <ID>514</ID>
    <IDName>procDoubleTolerance</IDName>
    <SpecialOverride>DoubleTolerance</SpecialOverride>
    <InternalFunctionName>DoubleTolerance</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>showVal</Name>
        <Type>boolMode</Type>
        <Desc>Dimension text display flag.</Desc>
      </Param>
      <Param>
        <Name>boxText</Name>
        <Type>boolMode</Type>
        <Desc>Boxed text display flag.</Desc>
      </Param>
      <Param>
        <Name>leader</Name>
        <Type>stringMode</Type>
        <Desc>Dimension leader text string.</Desc>
      </Param>
      <Param>
        <Name>trailer</Name>
        <Type>stringMode</Type>
        <Desc>Dimension trailer text string.</Desc>
      </Param>
      <Param>
        <Name>topDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Tolerance value text string.</Desc>
      </Param>
      <Param>
        <Name>botDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Tolerance value text string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DoubLines</Name>
    <Version>100</Version>
    <OldVersion>1250</OldVersion>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the line spacing width for double-line tools.[[BR]]</Description>
    <ShortDesc>Sets the active double line width spacing.</ShortDesc>
    <Example>[[name]](1/2");[[BR]]</Example>
    <ID>175</ID>
    <IDName>procDoubLines</IDName>
    <InternalFunctionName>MP_DoubLines</InternalFunctionName>
    <ModernName>SetDoubleLineWidth</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>doubleLineDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Width between lines.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DrwSize</Name>
    <Version>100</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the drawing area of the document.[[BR]][[BR]]</Description>
    <ShortDesc>Sets the active printing page size.</ShortDesc>
    <Example>[[name]](2,3);[[BR]]{sets the drawing size to 2 x 3 sheets}</Example>
    <ID>176</ID>
    <IDName>procDrwSize</IDName>
    <SpecialOverride>GetDrwSize</SpecialOverride>
    <InternalFunctionName>GetDrwSize</InternalFunctionName>
    <ModernName>SetDrawingArea</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>rows</Name>
        <Type>intMode</Type>
        <Desc>Number of sheet rows comprising total document area.</Desc>
      </Param>
      <Param>
        <Name>columns</Name>
        <Type>intMode</Type>
        <Desc>Number of sheet columns comprising total document area.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Duplicate</Name>
    <Version>100</Version>
    <Category>Object Editing</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] copies the currently selected objects and moves them the specified offset distance.</Description>
    <ShortDesc>Duplicates selected objects with an offset of (dX,dY).</ShortDesc>
    <Example>Rect(0,1,1,0);[[BR]][[name]](2,0);[[BR]]{duplicates the rectangle 2 units right of the original}</Example>
    <ID>186</ID>
    <IDName>procDuplicate</IDName>
    <SpecialOverride>GetDuplicate</SpecialOverride>
    <InternalFunctionName>GetDuplicate</InternalFunctionName>
    <ModernName>DuplicateSel</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>offset</Name>
        <Type>tdPtMode</Type>
        <Desc>Offset value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EndFolder</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] completes symbol folder creation in VectorScript. When [[name]] is called, the any procedure calls defined since a call to BeginFolder are used to create symbols and/or symbol folders.[[BR]]</Description>
    <ShortDesc>Completes symbol folder creation.</ShortDesc>
    <ID>132</ID>
    <IDName>procEndFolder</IDName>
    <SpecialOverride>GetEndFolder</SpecialOverride>
    <InternalFunctionName>GetEndFolder</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>EndGroup</Name>
    <Version>100</Version>
    <Category>Objects - Groups</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] completes the creation of a new group object in a Vectorworks document. The new group object is then generated in the document.[[BR]]</Description>
    <ShortDesc>Ends the creation of a group object and draws the object in the document.</ShortDesc>
    <Example>BeginGroup;[[BR]]Rect(-1,1,0.5,0);[[BR]]Rect(0,1.5,1,0.5);[[BR]]Oval(-1.5,0.5,-0.5,-0.5);[[BR]][[name]];[[BR]]{creates a group object}[[BR]][[BR]]BeginGroup;[[BR]]Rect(-1,1,0,0.5);[[BR]]Rect(-1,0.5,-0.5,0);[[BR]]BeginGroup;[[BR]]Oval(-0.5,0.5,1,0);[[BR]]Oval(0,0,1,-0.5);[[BR]][[name]];[[BR]][[name]];[[BR]]{creates a group comprised of 2 rects and 1 group}</Example>
    <ID>118</ID>
    <IDName>procEndGroup</IDName>
    <SpecialOverride>GetEndGroup</SpecialOverride>
    <InternalFunctionName>GetEndGroup</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>EndMesh</Name>
    <Version>100</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] completes the definition of a mesh object within a Vectorworks document. On calling [[name]], the mesh is created in the document from the preceding object creation calls.[[BR]][[BR]]It is recommended to call ResetOrientation3D after 3D object creations in order to ensure that the new 3D objects will draw properly.[[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Ends the creation of a 3D mesh and draws the object in the document.</ShortDesc>
    <Example>BeginMesh;[[BR]]ClosePoly;[[BR]]PenSize(1);[[BR]]PenPat(2);[[BR]]FillPat(0);[[BR]]Poly3D(0',0',4'-0",4'-0",0',4'-0",4'-0",-4'-0",4'-0",0',-4'-0",4'-0");[[BR]]Smooth(0);[[BR]]Poly3D(0',0',0',4'-0",0',0',4'-0",-4'-0",0',0',-4'-0",0');[[BR]]Smooth(0);[[BR]]Poly3D(0',-4'-0",0',0',-4'-0",4'-0",0',0',4'-0",0',0',0');[[BR]]Poly3D(4'-0",-4'-0",0',4'-0",-4'-0",4'-0",0',-4'-0",4'-0",0',-4'-0",0');[[BR]]Poly3D(4'-0",0',0',4'-0",0',4'-0",4'-0",-4'-0",4'-0",4'-0",-4'-0",0');[[BR]]Poly3D(0',0',0',0',0',4'-0",4'-0",0',4'-0",4'-0",0',0');[[BR]][[name]];[[BR]]</Example>
    <ID>137</ID>
    <IDName>procEndMesh</IDName>
    <SpecialOverride>GetEndMesh</SpecialOverride>
    <InternalFunctionName>GetEndMesh</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>EndMXtrd</Name>
    <Version>100</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] completes the definition of a multiple extrude object within a Vectorworks document. On calling [[name]], the object is created in the document from the preceding object creation calls.[[BR]][[BR]]It is recommended to call ResetOrientation3D after 3D object creations in order to ensure that the new 3D objects will draw properly.[[BR]]</Description>
    <ShortDesc>Ends the creation of a multiple extrude and draws the object in the document.</ShortDesc>
    <Example>BeginMXtrd(0',1 363/512");[[BR]]  Rect(-125/128",1 113/512",375/512",375/512");[[BR]]  Rect(-25/32",1 113/512",275/512",375/512");[[BR]]  Rect(-75/128",1 113/512",325/1024",375/512");[[BR]]  Locus(-275/2048",125/128");[[BR]]  Rect(-75/128",1 113/512",325/1024",375/512");[[BR]]  Rect(-25/32",1 113/512",275/512",375/512");[[BR]]  Rect(-125/128",1 113/512",375/512",375/512");[[BR]][[name]];[[BR]]</Example>
    <ID>141</ID>
    <IDName>procEndMXtrd</IDName>
    <SpecialOverride>GetEndMxtrd</SpecialOverride>
    <InternalFunctionName>GetEndMxtrd</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>EndPoly</Name>
    <Version>100</Version>
    <Category>Objects - Polys</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] completes the definition of a polygon or polyline object within a Vectorworks document. On calling [[name]], the object is created in the document from the preceding vertex creation calls.[[BR]]</Description>
    <ShortDesc>Ends the creation of a polygon object and draws the object in the document</ShortDesc>
    <ID>339</ID>
    <IDName>procEndPoly</IDName>
    <InternalFunctionName>MP_EndPoly</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>EndPoly3D</Name>
    <Version>100</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] completes the definition of a multiple extrude object within a Vectorworks document. On calling [[name]], the object is created in the document from the preceding object creation calls.[[BR]][[BR]]It is recommended to call ResetOrientation3D after 3D object creations in order to ensure that the new 3D objects will draw properly.[[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Ends the creation of a 3D polygon and draws the object in the document.</ShortDesc>
    <SeeAlso>BeginPoly3D, Add3DPt</SeeAlso>
    <Comments>[sd 8/14/98]</Comments>
    <Example>BeginPoly3D;[[BR]]     Add3DPt(0,0,0);[[BR]]     Add3DPt(2,0,0);[[BR]]     Add3DPt(2,2,0);[[BR]]     Add3DPt(1,3,0);[[BR]]     Add3DPt(0,2,0);[[BR]]     Add3DPt(0,0,0);[[BR]][[name]];[[BR]][[BR]]</Example>
    <ID>342</ID>
    <IDName>procEndPoly3D</IDName>
    <InternalFunctionName>MP_EndPoly3D</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>EndSweep</Name>
    <Version>100</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] completes the definition of a sweep object within a Vectorworks document. On calling [[name]], the object is created in the document from the preceding object creation calls.[[BR]][[BR]]It is recommended to call ResetOrientation3D after 3D object creations in order to ensure that the new 3D objects will draw properly.[[BR]]</Description>
    <ShortDesc>Ends the creation of a sweep object and draws the object in the document.</ShortDesc>
    <Example>BeginSweep(#0°,#360°,#10°,0');[[BR]]  Poly(3 1/4",-1/2",3 1/4",-1",2 3/4",-1",[[BR]]  2 1/4",-1/2",2 1/4",1",1 3/4",1 1/2",[[BR]]  -1 3/4",1 1/2",-2 1/4",1",-2 1/4",-1/2",[[BR]]  -2 3/4",-1",-3 1/4",-1",-3 1/4",-1/2",[[BR]]  -2 3/4",0",-2 3/4",1 1/2",-2 1/4",2",[[BR]]  2 1/4",2",2 3/4",1 1/2",2 3/4",0");[[BR]][[name]];[[BR]][[BR]]</Example>
    <ID>143</ID>
    <IDName>procEndSweep</IDName>
    <SpecialOverride>GetEndSweep</SpecialOverride>
    <InternalFunctionName>GetEndSweep</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>EndSym</Name>
    <Version>100</Version>
    <Category>Objects - Symbols</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] completes symbol creation in VectorScript. When [[name]] is called, the any procedure calls defined since a call to BeginSym are used to create the symbol.[[BR]][[BR]]</Description>
    <ShortDesc>Completes symbol creation.</ShortDesc>
    <ID>130</ID>
    <IDName>procEndSym</IDName>
    <SpecialOverride>GetEndSymbol</SpecialOverride>
    <InternalFunctionName>GetEndSymbol</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>EndXtrd</Name>
    <Version>100</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] completes the definition of an extrude object within a Vectorworks document. On calling [[name]], the object is created in the document from the preceding object creation calls.[[BR]][[BR]]It is recommended to call ResetOrientation3D after 3D object creations in order to ensure that the new 3D objects will draw properly.[[BR]][[BR]]</Description>
    <ShortDesc>Ends the creation of an extrude object and draws the object in the document.</ShortDesc>
    <Example>BeginXtrd(0',4');[[BR]] Rect(-1 61/64",125/128",-1 119/256",-375/512");[[BR]] Rect(-1 113/512",1 113/512",-375/512",-125/256");[[BR]] Rect(-125/256",125/128",0',-375/512");[[BR]] Rect(125/128",125/128",1 119/256",-375/512");[[BR]] Rect(1 25/512",1 113/512",375/512",-125/256");[[BR]] Rect(1 363/512",1 113/512",2 101/512",-125/256");[[BR]][[name]];[[BR]]</Example>
    <ID>139</ID>
    <IDName>procEndXtrd</IDName>
    <SpecialOverride>GetEndXtrd</SpecialOverride>
    <InternalFunctionName>GetEndXtrd</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>EOF</Name>
    <ChangedDate>2017:04:14T10:33:00</ChangedDate>
    <Version>100</Version>
    <Category>File I/O</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns TRUE if the file pointer of an open text file has reached the end of the file (EOF marker). Function [[name]] is used with Procedures Read and ReadLn to ensure proper file reading and closure. Parameter [[p:1]] specifies a text file which is open for reading or writing.[[BR]][[BR]][[note:FilePathNote]]</Description>
    <ShortDesc>Returns TRUE if the end-of-file marker has been reached.</ShortDesc>
    <Example>BEGIN[[BR]]     Open('MyData');[[BR]]     WHILE NOT [[name]]('MyData') DO[[BR]]          ReadLn(a,b,c,d);[[BR]]     Close('MyData');[[BR]]END;[[BR]]</Example>
    <ID>217</ID>
    <IDName>funcEOF</IDName>
    <InternalFunctionName>MP_EOF</InternalFunctionName>
    <ModernName>EndOfFile</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>fileName</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Name of file.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EOLN</Name>
    <ChangedDate>2017:04:14T10:34:00</ChangedDate>
    <Version>100</Version>
    <Category>File I/O</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns TRUE if the file pointer of an open text file has reached a carriage return within the file. Parameter [[p:1]] specifies a text file which is open for reading or writing.[[BR]][[BR]]</Description>
    <ShortDesc>Returns TRUE a carriage return has been reached.</ShortDesc>
    <Example>BEGIN[[BR]]     Open('MyData');[[BR]]     WHILE NOT [[name]]('MyData') DO[[BR]]           Read(a,b,c,d);[[BR]]      Close('MyData');[[BR]]END;[[BR]]</Example>
    <ID>218</ID>
    <IDName>funcEOLN</IDName>
    <InternalFunctionName>MP_EOLN</InternalFunctionName>
    <ModernName>EndOfLine</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>fileName</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Name of file.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EqualPt</Name>
    <Version>100</Version>
    <Category>Graphic Calculation</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether the two specified coordinate locations are equal (i.e., the same point, to 12 significant digits).[[BR]]</Description>
    <ShortDesc>Returns TRUE if the specified points are equal.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	x1, y1, x2, y2 :REAL;[[BR]]BEGIN[[BR]]	x1 := 1;[[BR]]	y1 := 1;[[BR]]	x2 := 1.0000000000001;[[BR]]	y2 := 1.0000000000001;[[BR]]	Message(EqualPt(x1, y1, x2, y2));[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>394</ID>
    <IDName>funcEqualPt</IDName>
    <SpecialOverride>CoordPtEqual</SpecialOverride>
    <InternalFunctionName>CoordPtEqual</InternalFunctionName>
    <ModernName>EqualPoints</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>p1</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinates of first comparison point.</Desc>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinates of second comparison point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EqualRect</Name>
    <Version>100</Version>
    <Category>Graphic Calculation</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether the two specified rectangular areas are equal. [[BR]]</Description>
    <ShortDesc>Returns TRUE if the specified rectangular areas are equal.</ShortDesc>
    <Example>AreTheyEqual:=[[name]](0,0,3,3,3,3,0,0);[[BR]]</Example>
    <ID>393</ID>
    <IDName>funcEqualRect</IDName>
    <SpecialOverride>MPEqualRect</SpecialOverride>
    <InternalFunctionName>MPEqualRect</InternalFunctionName>
    <ModernName>EqualRects</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>rectAp1</Name>
        <Type>globPtMode</Type>
        <Desc>Top left coordinate of rectangle A.</Desc>
      </Param>
      <Param>
        <Name>rectAp2</Name>
        <Type>globPtMode</Type>
        <Desc>Bottom right coordinate of rectangle A.</Desc>
      </Param>
      <Param>
        <Name>rectBp1</Name>
        <Type>globPtMode</Type>
        <Desc>Top left coordinate of rectangle B.</Desc>
      </Param>
      <Param>
        <Name>rectBp2</Name>
        <Type>globPtMode</Type>
        <Desc>Bottom right coordinate of rectangle B.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Exp</Name>
    <Version>100</Version>
    <Category>Math - General</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the value of e to the x, where e is the base of the natural logarithms and x is the specified value.</Description>
    <ShortDesc>Returns the natural exponent of v.</ShortDesc>
    <ID>233</ID>
    <IDName>funcExp</IDName>
    <InternalFunctionName>MP_Exp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>v</Name>
        <Type>realMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FActLayer</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to the first object on the active layer. If the object does not exist, the function returns NIL.[[BR]][[BR]]</Description>
    <ShortDesc>Returns a handle to the first object on the active layer.</ShortDesc>
    <ID>250</ID>
    <IDName>funcFActLayer</IDName>
    <InternalFunctionName>MP_FActLayer</InternalFunctionName>
    <ModernName>FirstOnActLayer</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>FArrowHead</Name>
    <Version>100</Version>
    <OldVersion>800</OldVersion>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Obsolete procedure.</Description>
    <ShortDesc>Obsolete procedure. Replaced by FMarker.</ShortDesc>
    <SeeAlso>FMarker</SeeAlso>
    <Comments>Deleted this obsolete function as of 9.0.0b7 - PCP 12-21-2000[[BR]][[BR]]Returns the current default arrow head style for the document. See FMarker for a description of the style value. This function has been replaced by FMarker.[[BR]][[BR]][sd 8/14/98][[BR]]</Comments>
    <ID>413</ID>
    <IDName>funcFArrowHead</IDName>
    <InternalFunctionName>MP_FArrowHead</InternalFunctionName>
  </Item>

  <Item>
    <Name>FArrowSize</Name>
    <Version>100</Version>
    <OldVersion>800</OldVersion>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Obsolete procedure.</Description>
    <ShortDesc>Obsolete procedure.  Replaced by FMaker.</ShortDesc>
    <SeeAlso>FMarker</SeeAlso>
    <Comments>Deleted this obsolete function as of 9.0.0b7 - PCP 12-21-2000[[BR]][[BR]]Returns the current default arrow head size for the document in points. This function has been replaced by FMarker.[[BR]][[BR]][sd 8/14/98]</Comments>
    <ID>428</ID>
    <IDName>funcFArrowSize</IDName>
    <InternalFunctionName>MP_FArrowSize</InternalFunctionName>
  </Item>

  <Item>
    <Name>FFillBack</Name>
    <Version>100</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the current fill background color. RGB values are in the range of 0~65535.[[BR]]</Description>
    <ShortDesc>Returns the active fill background color setting.</ShortDesc>
    <SeeAlso>RGBToColorIndex,ColorIndexToRGB</SeeAlso>
    <Example>[[name]](redValue,greenValue,blueValue);[[BR]]</Example>
    <ID>419</ID>
    <IDName>procFFillBack</IDName>
    <InternalFunctionName>MP_FFillBack</InternalFunctionName>
    <ModernName>ActFillBack</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FFillFore</Name>
    <Version>100</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the current fill foreground color. RGB values are in the range of 0~65535.[[BR]]</Description>
    <ShortDesc>Returns the active fill foreground color setting.</ShortDesc>
    <SeeAlso>RGBToColorIndex,ColorIndexToRGB</SeeAlso>
    <Example>[[name]](redValue,greenValue,blueValue);[[BR]]</Example>
    <ID>420</ID>
    <IDName>procFFillFore</IDName>
    <InternalFunctionName>MP_FFillFore</InternalFunctionName>
    <ModernName>ActiveFillFore</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FFillPat</Name>
    <Version>100</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the current fill pattern setting.[[BR]][[BR]][[note:FillPatTable]]</Description>
    <ShortDesc>Returns the current active fill pattern setting.  A positive value corresponds to the index into the pattern palette.  If set to a hatch, it returns the negative of the internal index of the hatch.</ShortDesc>
    <Example>currFillStyle:=[[name]];[[BR]]</Example>
    <ID>416</ID>
    <IDName>funcFFillPat</IDName>
    <InternalFunctionName>MP_FFillPat</InternalFunctionName>
    <ModernName>ActFillPat</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Field</Name>
    <Version>100</Version>
    <Category>Database / Record</Category>
    <Type>Procedure</Type>
    <Description>Obsolete.  [[BR]]</Description>
    <ShortDesc>Obsolete function. See SetRField.</ShortDesc>
    <SeeAlso>SetRField</SeeAlso>
    <Comments>Obsolete function maintained for compatibility with old scripts. Use "SetRField" for new scripts.  See "SetRField".[[BR]][[BR]]Update the RecordNode attached to object "h" by setting the field "s2" of format "s1" to the value "s3".  The object is not redrawn immediately, so don't call this for a symbol which uses the "link text to record" feature.[[BR]][[BR]][sd 9/14/98]</Comments>
    <ID>477</ID>
    <IDName>procField</IDName>
    <SpecialOverride>GetProcField</SpecialOverride>
    <InternalFunctionName>GetProcField</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>s1</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>s2</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>s3</Name>
        <Type>stringMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FillBack</Name>
    <Version>100</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the active fill background color setting for the document. RGB values are in the range of 0~65535.[[BR]]</Description>
    <ShortDesc>Sets the active fill background color.</ShortDesc>
    <SeeAlso>RGBToColorIndex,ColorIndexToRGB</SeeAlso>
    <Example>[[name]](65535,0,39321);[[BR]]</Example>
    <ID>153</ID>
    <IDName>procFillBack</IDName>
    <InternalFunctionName>MP_FillBack</InternalFunctionName>
    <ModernName>SetActFillBack</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color value to set as active fill background color.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FillFore</Name>
    <Version>100</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the active fill foreground color setting for the document. RGB values are in the range of 0~65535.[[BR]]</Description>
    <ShortDesc>Sets the active fill foreground color.</ShortDesc>
    <SeeAlso>RGBToColorIndex,ColorIndexToRGB</SeeAlso>
    <Example>[[name]](65535,0,39321);[[BR]]</Example>
    <ID>152</ID>
    <IDName>procFillFore</IDName>
    <InternalFunctionName>MP_FillFore</InternalFunctionName>
    <ModernName>SetActFillFore</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color value to set as active fill foreground color.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FillPat</Name>
    <Version>100</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure FillPat sets the active fill pattern for the document. Any objects created after a calling this procedure will use the specified fill pattern.[[BR]][[BR]][[note:FillPatTable]]</Description>
    <ShortDesc>Sets the active fill pattern.   A positive value corresponds to the index  into the pattern palette.  To set it to a hatch, use the negative of the internal index of the hatch.</ShortDesc>
    <Example>Rect(0,0,2,2);[[BR]][[name]](21);[[BR]]Rect(2,2,4,4);[[BR]]</Example>
    <ID>151</ID>
    <IDName>procFillPat</IDName>
    <InternalFunctionName>MP_FillPat</InternalFunctionName>
    <ModernName>SetActFillPat</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>patNumber</Name>
        <Type>longMode</Type>
        <Desc>Index of fill pattern to be set as document default.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FIn3D</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to the first component object in the referenced 3D object definition.</Description>
    <ShortDesc>Returns a handle to the first component of the referenced 3D object.</ShortDesc>
    <ID>324</ID>
    <IDName>funcFIn3D</IDName>
    <InternalFunctionName>MP_FIn3D</InternalFunctionName>
    <ModernName>FirstIn3D</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FInFolder</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to the first object in the referenced symbol folder. The object can be either a symbol definition or a nested symbol folder.[[BR]]If the folder is empty, the function returns NIL.[[BR]][[BR]]</Description>
    <ShortDesc>Returns a handle to the first symbol definition within the referenced symbol folder.</ShortDesc>
    <ID>395</ID>
    <IDName>funcFInFolder</IDName>
    <InternalFunctionName>MP_FInFolder</InternalFunctionName>
    <ModernName>FirstInFolder</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>sfHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to symbol definition or symbol folder.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FInGroup</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to the first component object of the referenced group.[[BR]]</Description>
    <ShortDesc>Returns a handle to the first component object of the referenced group.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	h :HANDLE;[[BR]]BEGIN[[BR]]	h := FInGroup(FSActLayer);[[BR]]	WHILE h &lt;&gt; NIL DO BEGIN[[BR]]		SetClass(h, 'None');[[BR]]		h := NextObj(h);[[BR]]	END;[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>259</ID>
    <IDName>funcFInGroup</IDName>
    <InternalFunctionName>MP_FInGroup</InternalFunctionName>
    <ModernName>FirstInGroup</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>ObjectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to group object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FInLayer</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to the first object within the referenced layer. If the layer is empty, the function returns NIL.[[BR]]</Description>
    <ShortDesc>Returns a handle to the first object in the referenced layer.</ShortDesc>
    <ID>260</ID>
    <IDName>funcFInLayer</IDName>
    <InternalFunctionName>MP_FInLayer</InternalFunctionName>
    <ModernName>FirstInLayer</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to layer.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FInSymDef</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to the first component object within the referenced symbol definition.[[BR]]</Description>
    <ShortDesc>Returns a handle to the first component of the referenced symbol definition.</ShortDesc>
    <ID>261</ID>
    <IDName>funcFInSymDef</IDName>
    <InternalFunctionName>MP_FInSymDef</InternalFunctionName>
    <ModernName>FirstInSymDef</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>sdHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to symbol definition.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FLayer</Name>
    <Version>100</Version>
    <Category>Layers</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to the first layer in a Vectorworks document.[[BR]][[BR]]</Description>
    <ShortDesc>Returns a handle to the first layer in a document.</ShortDesc>
    <ID>251</ID>
    <IDName>funcFLayer</IDName>
    <InternalFunctionName>MP_FLayer</InternalFunctionName>
    <ModernName>FirstLayer</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
  </Item>

  <Item>
    <Name>FMarker</Name>
    <Version>600</Version>
    <OldVersion>1300</OldVersion>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the active marker style parameters.[[BR]][[BR]][[note:MarkerStyleNote]]</Description>
    <ShortDesc>Returns the active marker settings - OBSOLETE procedure: Use GetDefaultBeginningMarker and/or GetDefaultEndMarker instead.</ShortDesc>
    <Comments>OBSOLETE for VW2008: Use GetDefaultBeginningMarker and/or GetDefaultEndMarker instead.[[BR]]Style is an 8 bit quantity interpreted as follows:[[BR]][[BR]]Bit 0 indicates the visibility of a marker at the start of the line.[[BR]]Bit 1 indicates the visibility of a marker at the end of the line.[[BR]]Bits 2 - 7 indicate the index of the marker style to be used.[[BR]][[BR]]Size is in page-inches. Legal values are 0.0 to 2.0.[[BR]][[BR]]Angle is in degrees.[[BR]][sd 8/14/98]</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	style :INTEGER;[[BR]]	size  :REAL;[[BR]]	ang   :INTEGER;[[BR]]BEGIN[[BR]]	FMarker(style, size, ang);[[BR]]	Message(style, ' ', size, ' ', ang);[[BR]]END;[[BR]]RUN(Example);[[BR]][[BR]]</Example>
    <ID>566</ID>
    <IDName>procFMarker</IDName>
    <SpecialOverride>FMarker</SpecialOverride>
    <InternalFunctionName>FMarker</InternalFunctionName>
    <ModernName>ActMarker</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>style</Name>
        <Type>intVarMode</Type>
        <Desc>Returns marker style.</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>rVarMode</Type>
        <Desc>Returns marker size in inches measured in page space.</Desc>
      </Param>
      <Param>
        <Name>ang</Name>
        <Type>intVarMode</Type>
        <Desc>Returns marker angle (in degrees).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FndError</Name>
    <Version>100</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether an error has occurred within a VectorScript subroutine. Provided as a debugging tool, [[name]] receives notification after execution of every line of code whether an error has occurred.</Description>
    <ShortDesc>Returns TRUE if a VectorScript error occurs. Used in debugging.</ShortDesc>
    <Comments>This example isn't very helpful. JDW.[[BR]][sd 8/14/98]</Comments>
    <ID>349</ID>
    <IDName>funcFndError</IDName>
    <SpecialOverride>MPerrorOccurred</SpecialOverride>
    <InternalFunctionName>MPerrorOccurred</InternalFunctionName>
    <ModernName>FindError</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
  </Item>

  <Item>
    <Name>FObject</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function FObject returns a handle to the first object in the active document. If the document is empty, the function returns NIL.[[BR]][[BR]]</Description>
    <ShortDesc>Returns a handle to the first object in the active document.</ShortDesc>
    <ID>252</ID>
    <IDName>funcFObject</IDName>
    <InternalFunctionName>MP_FObject</InternalFunctionName>
    <ModernName>FirstObject</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
  </Item>

  <Item>
    <Name>FPenBack</Name>
    <Version>100</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the current pen background color. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Returns the active pen background color setting.</ShortDesc>
    <SeeAlso>RGBToColorIndex,ColorIndexToRGB</SeeAlso>
    <ID>417</ID>
    <IDName>procFPenBack</IDName>
    <InternalFunctionName>MP_FPenBack</InternalFunctionName>
    <ModernName>ActPenBack</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FPenFore</Name>
    <Version>100</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the current pen foreground color of the document. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Returns the active pen foreground color setting.</ShortDesc>
    <SeeAlso>RGBToColorIndex,ColorIndexToRGB</SeeAlso>
    <ID>418</ID>
    <IDName>procFPenFore</IDName>
    <InternalFunctionName>MP_FPenFore</InternalFunctionName>
    <ModernName>ActPenFore</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FPenPat</Name>
    <ChangedDate>2017:10:26T09:13:00</ChangedDate>
    <Version>100</Version>
    <OldVersion Mode="AsError">1800</OldVersion>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Deprecated - will generate error. Use FPenPatN instead.[[BR]]</Description>
    <ShortDesc>Deprecated - will generate error. Use FPenPatN instead.</ShortDesc>
    <SeeAlso>FPenPatN</SeeAlso>
    <Comments>Deprecated - will generate error. Use FPenPatN instead. Original description was: Function [[name]] returns the active pen pattern setting.</Comments>
    <Example>CurrPenStyle:=[[name]];[[BR]]</Example>
    <ID>415</ID>
    <IDName>funcFPenPat</IDName>
    <InternalFunctionName>MP_FPenPat</InternalFunctionName>
    <ModernName>ActPenPat</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
  </Item>

  <Item>
    <Name>FPenSize</Name>
    <Version>100</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function FPenSize returns the active pen size setting (in mils).[[BR]][[BR]]</Description>
    <ShortDesc>Returns the active line weight setting.</ShortDesc>
    <Example>CurrPenSize:=[[name]];[[BR]]</Example>
    <ID>414</ID>
    <IDName>funcFPenSize</IDName>
    <InternalFunctionName>MP_FPenSize</InternalFunctionName>
    <ModernName>ActPenSize</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
  </Item>

  <Item>
    <Name>FSActLayer</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to the first selected object on the active layer. If no objects are selected, the function returns NIL.[[BR]][[BR]]</Description>
    <ShortDesc>Returns a handle to the first selected object on the active layer.</ShortDesc>
    <ID>253</ID>
    <IDName>funcFSActLayer</IDName>
    <InternalFunctionName>MP_FSActLayer</InternalFunctionName>
    <ModernName>FirstSelObjActLay</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
  </Item>

  <Item>
    <Name>FSObject</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns the handle to the first selected object in the referenced layer. If no objects are selected, the function returns NIL.[[BR]][[BR]]</Description>
    <ShortDesc>Returns a handle to the first selected object on the referenced layer.</ShortDesc>
    <ID>272</ID>
    <IDName>funcFSObject</IDName>
    <InternalFunctionName>MP_FSObject</InternalFunctionName>
    <ModernName>FirstSelObj</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to layer.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FSymDef</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to the first symbol definition in the current document's symbol library. If the symbol library is empty, the function returns NIL.[[BR]][[BR]]</Description>
    <ShortDesc>Returns a handle to the first symbol definition of the document.</ShortDesc>
    <ID>258</ID>
    <IDName>funcFSymDef</IDName>
    <InternalFunctionName>MP_FSymDef</InternalFunctionName>
    <ModernName>FirstSymDef</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
  </Item>

  <Item>
    <Name>Get3DCntr</Name>
    <Version>100</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the three-dimensional center point of the referenced 3D object.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the 3D center point of the referenced object.</ShortDesc>
    <Example>PROCEDURE IncreaseExtr;[[BR]]	{This script increases extruded objects in the selection by a user requested value.}[[BR]]	{by Paolo, on the VectorScript bulletin board}[[BR]]VAR[[BR]]	oggetto :HANDLE;[[BR]]	increaseValue :REAL;[[BR]][[BR]]FUNCTION Increase(h :HANDLE) :BOOLEAN;[[BR]]VAR[[BR]]	height, width, depth :REAL;[[BR]]	xRot, yRot, zRot :REAL;[[BR]]	p0X, p0Y, p0Z :REAL;[[BR]]	p1X, p1Y, p1Z :REAL;[[BR]]	result, isMirroredXY :BOOLEAN;[[BR]]BEGIN[[BR]]	{check if the obj is an extrusion}[[BR]]	if (GetType(h) = 24) THEN BEGIN[[BR]]		result := Get3DOrientation(h, xRot, yRot, zRot, isMirroredXY);[[BR]]		Get3DCntr(h, p0X, p0Y, p0Z);[[BR]]		[[BR]]		SetRot3D(h, 0, 0, 0, 0, 0, 0);[[BR]]		{here depth = extrusion value}[[BR]]		Get3DInfo(h, height, width, depth);[[BR]]		[[BR]]		{I increase the depth}[[BR]]		SET3DInfo(h, height, width, depth + increaseValue);[[BR]][[BR]]		SET3DRot(h, xRot, yRot, zRot , 0,0,0);[[BR]]		[[BR]]		Get3DCntr(h, p1X, p1Y, p1Z);[[BR]]		[[BR]]		{move of the misplacement p0-p1}[[BR]]		Move3DObj(h, p0X-p1X, p0Y-p1Y, p0Z-p1Z);[[BR]]		Get3DCntr(h, p1X, p1Y, p1Z);[[BR]]	END;[[BR]]	increase := FALSE;[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]	{ask the value to increase}[[BR]]	increaseValue := RealDialog('Increase extrusions in the selection of this value','10');[[BR]]	{apply to the selected set of objects}[[BR]]	ForEachObjectInList(increase, 2, 0, oggetto);[[BR]]END;[[BR]]RUN(IncreaseExtr);[[BR]]</Example>
    <ID>328</ID>
    <IDName>procGet3DCntr</IDName>
    <InternalFunctionName>MP_Get3DCntr</InternalFunctionName>
    <ModernName>GetCenter3D</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Placement3D>True</Placement3D>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>globPtVarMode</Type>
        <Desc>Returns coordinates of object center point.</Desc>
      </Param>
      <Param>
        <Name>zValue</Name>
        <Type>rVarMode</Type>
        <Desc>Returns elevation of object center point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Get3DInfo</Name>
    <Version>100</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the height, width and depth values of the referenced 3D object.[[BR]][[BR]]</Description>
    <ShortDesc>Returns 3D dimensional information on the referenced object.</ShortDesc>
    <Example>PROCEDURE GetBBox3D(h :HANDLE; VAR x1, y1, z1, x2, y2, z2 :REAL);[[BR]]VAR[[BR]]	garb_r, z_span, z_center :REAL;[[BR]]BEGIN[[BR]]	GetBBox(h, x1, y1, x2, y2);[[BR]]	Get3DInfo(h, garb_r, garb_r, z_span);[[BR]]	Get3DCntr(h, garb_r, garb_r, z_center);[[BR]]	z1 := z_center - (z_span / 2);[[BR]]	z2 := z_center + (z_span / 2);[[BR]]END;[[BR]]</Example>
    <ID>351</ID>
    <IDName>procGet3DInfo</IDName>
    <InternalFunctionName>MP_Get3DInfo</InternalFunctionName>
    <ModernName>GetInfo3D</ModernName>
    <Implemented>True</Implemented>
    <Placement3D>True</Placement3D>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to 3D object.</Desc>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>rVarMode</Type>
        <Desc>Height of object.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>rVarMode</Type>
        <Desc>Width of object.</Desc>
      </Param>
      <Param>
        <Name>depth</Name>
        <Type>rVarMode</Type>
        <Desc>Depth of object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetArc</Name>
    <Version>100</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the start and sweep angle of the referenced arc or round wall.</Description>
    <ShortDesc>Returns the start angle and arc angle of the referenced arc.</ShortDesc>
    <Example>PROCEDURE GetArcSetArcExample;[[BR]]VAR[[BR]]	h :HANDLE;[[BR]]	startAng, sweepAng :REAL;[[BR]]BEGIN[[BR]]	h := FSActLayer;[[BR]]	GetArc(h, startAng, sweepAng);[[BR]]	SetArc(h, startAng, sweepAng + 10);[[BR]]END;[[BR]]RUN(GetArcSetArcExample);</Example>
    <ID>306</ID>
    <IDName>procGetArc</IDName>
    <SpecialOverride>ProcGetArc</SpecialOverride>
    <InternalFunctionName>ProcGetArc</InternalFunctionName>
    <ModernName>GetArcAngles</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to arc.</Desc>
      </Param>
      <Param>
        <Name>startAngleR</Name>
        <Type>rVarMode</Type>
        <Desc>Returns start angle of arc.</Desc>
      </Param>
      <Param>
        <Name>arcAngleR</Name>
        <Type>rVarMode</Type>
        <Desc>Returns sweep angle of arc.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetBBox</Name>
    <ChangedDate>2010:09:02T10:53:00</ChangedDate>
    <Version>100</Version>
    <Category>Object Info</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the bounding box coordinates of the projection of the referenced object on the screen plane. [[BR]]</Description>
    <ShortDesc>Returns the bounding box of the projection of the referenced object on the screen plane.</ShortDesc>
    <ID>305</ID>
    <IDName>procGetBBox</IDName>
    <SpecialOverride>GetBBox</SpecialOverride>
    <InternalFunctionName>GetBBox</InternalFunctionName>
    <ModernName>GetBounds</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>p1</Name>
        <Type>globPtVarMode</Type>
        <Desc>Top left coordinate of bounding box.</Desc>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>globPtVarMode</Type>
        <Desc>Bottom right coordinate of bounding box.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetBeamAngle</Name>
    <Version>700</Version>
    <Category>Objects - Lights</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the spread angle of the referenced spot light.[[BR]]</Description>
    <ShortDesc>Returns beam spread angle of referenced light.</ShortDesc>
    <ID>579</ID>
    <IDName>procGetBeamAngle</IDName>
    <SpecialOverride>GetBeamAngle</SpecialOverride>
    <InternalFunctionName>GetBeamAngle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to light.</Desc>
      </Param>
      <Param>
        <Name>beamAngleR</Name>
        <Type>rVarMode</Type>
        <Desc>Returns beam spread angle.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCAlign</Name>
    <Version>100</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the alignment value of a cell in the referenced worksheet. [[BR]][[BR]][[note:CellAlignTable]]</Description>
    <ShortDesc>Returns the alignment of a specified cell.</ShortDesc>
    <Comments>OBSOLETE for Version 9: see new GetWSCellAlignment. [VML 01/09/01]</Comments>
    <Example>AlignmentMode:=[[name]](WSheetHd,4,5);[[BR]]</Example>
    <ID>359</ID>
    <IDName>funcGetCAlign</IDName>
    <InternalFunctionName>MP_GetCAlign</InternalFunctionName>
    <ModernName>GetCellAlign</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Worksheet row index.</Desc>
      </Param>
      <Param>
        <Name>col</Name>
        <Type>intMode</Type>
        <Desc>Worksheet column index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCellNum</Name>
    <Version>100</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the numeric value of a cell in the referenced worksheet. </Description>
    <ShortDesc>Returns the numeric value of a cell in the referenced worksheet.</ShortDesc>
    <Comments>OBSOLETE for Version 9: see new GetWSCellValue and GetWSSubrowCellValue. [VML 01/09/01]</Comments>
    <ID>356</ID>
    <IDName>funcGetCellNum</IDName>
    <SpecialOverride>GetGetCellNum</SpecialOverride>
    <InternalFunctionName>GetGetCellNum</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Worksheet row index.</Desc>
      </Param>
      <Param>
        <Name>col</Name>
        <Type>intMode</Type>
        <Desc>Worksheet column index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCellStr</Name>
    <Version>100</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Function [[name]] returns the string value of a cell in the referenced worksheet. [[BR]]</Description>
    <ShortDesc>Returns the string value from a cell.</ShortDesc>
    <Comments>OBSOLETE for Version 9: see new GetWSCellString and GetWSSubrowCellString. [VML 01/09/01]</Comments>
    <ID>357</ID>
    <IDName>funcGetCellStr</IDName>
    <SpecialOverride>GetGetCellStr</SpecialOverride>
    <InternalFunctionName>GetGetCellStr</InternalFunctionName>
    <ModernName>GetCellString</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Worksheet row index.</Desc>
      </Param>
      <Param>
        <Name>col</Name>
        <Type>intMode</Type>
        <Desc>Worksheet column index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClass</Name>
    <Version>100</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Function [[name]] returns the class assigned to the referenced object. None is returned if the object has no class assigned to it.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the class of the referenced object.</ShortDesc>
    <Example>ObjectClass:=[[name]](handleToObject);</Example>
    <ID>277</ID>
    <IDName>funcGetClass</IDName>
    <InternalFunctionName>MP_GetClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCVis</Name>
    <Version>100</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the visibility status of the specified class.[[BR]][[BR]][[note:ClassVisResultTable]]</Description>
    <ShortDesc>Returns the visibility status of the specified class.  </ShortDesc>
    <Result>[[note:ClassVisResultTable]][[BR]]</Result>
    <Example>PROCEDURE Example;[[BR]]BEGIN[[BR]]	Message(GetCVis('Dimension'));[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>487</ID>
    <IDName>funcGetCVis</IDName>
    <SpecialOverride>GetClassVis</SpecialOverride>
    <InternalFunctionName>GetClassVis</InternalFunctionName>
    <ModernName>GetClassVis</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCWidth</Name>
    <Version>100</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the column width of a cell in the referenced worksheet. [[BR]][[BR]]</Description>
    <ShortDesc>Returns the width of a specified cell in the referenced worksheet.</ShortDesc>
    <Comments>OBSOLETE for Version 9: see new GetWSColumnWidth. [VML 01/09/01]</Comments>
    <ID>358</ID>
    <IDName>funcGetCWidth</IDName>
    <InternalFunctionName>MP_GetCWidth</InternalFunctionName>
    <ModernName>GetCellWidth</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Worksheet row index.</Desc>
      </Param>
      <Param>
        <Name>col</Name>
        <Type>intMode</Type>
        <Desc>Worksheet column index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDimText</Name>
    <Version>100</Version>
    <Category>Dimensions</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Function [[name]] returns the dimension value displayed with the referenced object.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the dimension value of the referenced dimension.</ShortDesc>
    <Example>DimValue:=[[name]](HandleToObj);</Example>
    <ID>281</ID>
    <IDName>funcGetDimText</IDName>
    <InternalFunctionName>MP_GetDimText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetFile</Name>
    <ChangedDate>2017:03:29T13:39:00</ChangedDate>
    <Version>100</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] displays a standard file dialog which requests the user to select a text document.[[BR]][[BR]]It is advisable to call DidCancel after using this procedure and check that the user did not cancel the file selection process.[[BR]][[BR]]</Description>
    <ShortDesc>Returns a path and name of a user selected file.</ShortDesc>
    <Example>GetFile(fileName);[[BR]]IF NOT DidCancel THEN BEGIN[[BR]]     Read(a,b,c);[[BR]]     Close(fileName);[[BR]]END;[[BR]]{Select a file for reading via a file open dialog}[[BR]]</Example>
    <ID>219</ID>
    <IDName>procGetFile</IDName>
    <SpecialOverride>MP_GetFile</SpecialOverride>
    <InternalFunctionName>MP_GetFile</InternalFunctionName>
    <ModernName>GetFileDialog</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>fileName</Name>
        <Type>eCharDynarrayVarMode</Type>
        <Desc>Returns name of selected file.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetFillBack</Name>
    <Version>600</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the fill background color of the referenced object. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Returns the fill background of the referenced object.</ShortDesc>
    <SeeAlso>RGBToColorIndex,ColorIndexToRGB</SeeAlso>
    <Example>[[name]](handleToObject,redValue,greenValue,blueValue);</Example>
    <ID>544</ID>
    <IDName>procGetFillBack</IDName>
    <InternalFunctionName>MP_GetFillBack</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetFillFore</Name>
    <Version>600</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the fill foreground color of the referenced object. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Returns the fill foreground of the referenced object.</ShortDesc>
    <SeeAlso>RGBToColorIndex,ColorIndexToRGB</SeeAlso>
    <Example>[[name]](handleToObject,redValue,greenValue,blueValue);[[BR]]</Example>
    <ID>545</ID>
    <IDName>procGetFillFore</IDName>
    <InternalFunctionName>MP_GetFillFore</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetFldName</Name>
    <Version>100</Version>
    <Category>Database / Record</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Returns the name of the specified field in the referenced record.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the name of the specified record field.</ShortDesc>
    <Example>FName:=[[name]](HandleToRecord,1);[[BR]]</Example>
    <ID>486</ID>
    <IDName>funcGetFldName</IDName>
    <SpecialOverride>GetFieldList</SpecialOverride>
    <InternalFunctionName>GetFieldList</InternalFunctionName>
    <ModernName>GetFieldName</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to record.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Number of field whose name will be returned (in a range of 1-n).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetFldType</Name>
    <Version>100</Version>
    <Category>Database / Record</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns a constant indicating the data type of a specified field in the referenced record.[[BR]][[BR]][[note:FieldTypeConstantTable]][[BR]][[BR]][[note:ParamTypeConstantTable]][[BR]]</Description>
    <ShortDesc>Returns the field type of a specified record</ShortDesc>
    <Comments>Returns a constant indicating which type of field is specified by the field number "t" of record "h".  The field type constants are listed in an appendix in the vectorscript manual.[[BR]][[BR]][sd 8/14/98]</Comments>
    <Example>fieldType:=[[name]](recordHandle,3);</Example>
    <ID>492</ID>
    <IDName>funcGetFldType</IDName>
    <SpecialOverride>GetFieldType</SpecialOverride>
    <InternalFunctionName>GetFieldType</InternalFunctionName>
    <ModernName>GetFieldType</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to record.</Desc>
      </Param>
      <Param>
        <Name>t</Name>
        <Type>intMode</Type>
        <Desc>Field index (range of 1 - n).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetFName</Name>
    <Version>100</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Function [[name]] returns the current file name of the active document.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the name of the active document.</ShortDesc>
    <ID>323</ID>
    <IDName>funcGetFName</IDName>
    <SpecialOverride>GetFileName</SpecialOverride>
    <InternalFunctionName>GetFileName</InternalFunctionName>
    <ModernName>ActFileName</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
  </Item>

  <Item>
    <Name>GetFont</Name>
    <Version>100</Version>
    <OldVersion>500</OldVersion>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Obsolete function.[[BR]]</Description>
    <ShortDesc>Obsolete function. See GetTextFont.</ShortDesc>
    <SeeAlso>GetTextFont</SeeAlso>
    <Comments>Deleted this obsolete function as of 9.0.0b7 - PCP 12-21-2000[[BR]][[BR]]Returns the font ID of the font of the first character in the text block h. This function is obsolete. Use GetTextFont instead.[[BR]][[BR]][sd 8/14/98]</Comments>
    <ID>451</ID>
    <IDName>funcGetFont</IDName>
    <InternalFunctionName>MP_GetFont</InternalFunctionName>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetFPat</Name>
    <Version>100</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the fill pattern of the referenced object.[[BR]][[BR]]A positive value corresponds to the index of the fill pattern on the pattern palette. A negative value corresponds to internal index of a vector fill pattern applied to the object.[[BR]][[BR]][[note:FillPatTable]][[BR]][[BR]]</Description>
    <ShortDesc>Returns the fill pattern of the referenced object. </ShortDesc>
    <Example>FPatValue:=[[name]](HandleToObj);[[BR]]</Example>
    <ID>293</ID>
    <IDName>funcGetFPat</IDName>
    <InternalFunctionName>MP_GetFPat</InternalFunctionName>
    <ModernName>GetFillPat</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetKeyDown</Name>
    <Version>100</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] pauses execution of a VectorScript routine until a key is pressed by the user. When the key is pressed, the ASCII code of the key is returned.[[BR]][[BR]]</Description>
    <ShortDesc>Pauses execution, waiting for user keyboard input.</ShortDesc>
    <ID>378</ID>
    <IDName>procGetKeyDown</IDName>
    <SpecialOverride>GetProcGetKeyDown</SpecialOverride>
    <InternalFunctionName>GetProcGetKeyDown</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>asciiCode</Name>
        <Type>lngVarMode</Type>
        <Desc>ASCII code of key pressed.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLayer</Name>
    <Version>100</Version>
    <Category>Layers</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to the layer of the referenced object. [[BR]][[BR]]</Description>
    <ShortDesc>Returns a handle to the layer of the referenced object.</ShortDesc>
    <Example>LayerHandle:=GetLayer(ObjHd);[[BR]]</Example>
    <ID>273</ID>
    <IDName>funcGetLayer</IDName>
    <InternalFunctionName>MP_GetLayer</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLightDirection</Name>
    <Version>700</Version>
    <Category>Objects - Lights</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the direction angles of the referenced light object. </Description>
    <ShortDesc>Returns direction information for the referenced light.</ShortDesc>
    <ID>575</ID>
    <IDName>procGetLightDirection</IDName>
    <SpecialOverride>GetLightDirection</SpecialOverride>
    <InternalFunctionName>GetLightDirection</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to light.</Desc>
      </Param>
      <Param>
        <Name>panAngleR</Name>
        <Type>rVarMode</Type>
        <Desc>Returns light pan angle.</Desc>
      </Param>
      <Param>
        <Name>tiltAngleR</Name>
        <Type>rVarMode</Type>
        <Desc>Returns light tilt angle.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLightInfo</Name>
    <Version>700</Version>
    <Category>Objects - Lights</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the attributes of the referenced light object.[[BR]][[BR]][[note:LightTypeTable]]</Description>
    <ShortDesc>Returns attribute information for referenced light.</ShortDesc>
    <ID>572</ID>
    <IDName>procGetLightInfo</IDName>
    <SpecialOverride>GetLightInfo</SpecialOverride>
    <InternalFunctionName>GetLightInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to light.</Desc>
      </Param>
      <Param>
        <Name>lightType</Name>
        <Type>intVarMode</Type>
        <Desc>Returns light type.</Desc>
      </Param>
      <Param>
        <Name>brightness</Name>
        <Type>intVarMode</Type>
        <Desc>Returns light brightness.</Desc>
      </Param>
      <Param>
        <Name>isOn</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns on-off status of light.</Desc>
      </Param>
      <Param>
        <Name>castShadow</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether light casts shadows.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLightLocation</Name>
    <Version>700</Version>
    <Category>Objects - Lights</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the position of the referenced light object.</Description>
    <ShortDesc>Returns position of referenced light.</ShortDesc>
    <ID>573</ID>
    <IDName>procGetLightLocation</IDName>
    <SpecialOverride>GetLightLocation</SpecialOverride>
    <InternalFunctionName>GetLightLocation</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to light.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Returns coordinate location of light.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLine</Name>
    <Version>100</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns two user selected points, and draws a temporary "rubberband" line when prompting for the second point. This cannot be used if there is a function anywhere in the calling chain.</Description>
    <ShortDesc>Draws user interactive line and returns end point coordinates.</ShortDesc>
    <ID>377</ID>
    <IDName>procGetLine</IDName>
    <InternalFunctionName>MP_GetLine</InternalFunctionName>
    <ModernName>GetUserLine</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p1</Name>
        <Type>globPtVarMode</Type>
        <Desc>Returns coordinates of first user click.</Desc>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>globPtVarMode</Type>
        <Desc>Returns coordinates of second user click.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLName</Name>
    <Version>100</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Function [[name]] returns the name of the referenced layer.</Description>
    <ShortDesc>Returns the name of the referenced layer.</ShortDesc>
    <Comments>Returns the name of the referenced layer.[[BR]][[BR]][sd 8/14/98]</Comments>
    <ID>278</ID>
    <IDName>funcGetLName</IDName>
    <InternalFunctionName>MP_GetLName</InternalFunctionName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to layer.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLocPt</Name>
    <Version>100</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the coordinate location of the referenced locus.</Description>
    <ShortDesc>Returns the X-Y coordinates of the referenced locus.</ShortDesc>
    <ID>336</ID>
    <IDName>procGetLocPt</IDName>
    <SpecialOverride>ProcGetLocPt</SpecialOverride>
    <InternalFunctionName>ProcGetLocPt</InternalFunctionName>
    <ModernName>GetLocus</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to locus.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>globPtVarMode</Type>
        <Desc>Coordinates of locus point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLocus3D</Name>
    <Version>600</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure GetLocus3D returns the coordinates of the referenced 3D locus object.[[BR]]</Description>
    <ShortDesc>Returns the X-Y-Z coordinates of the referenced 3D locus.</ShortDesc>
    <ID>564</ID>
    <IDName>procGetLocus3D</IDName>
    <SpecialOverride>GetLocus3D</SpecialOverride>
    <InternalFunctionName>GetLocus3D</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to 3D locus.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Returns 3D coordinates of locus.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLS</Name>
    <ChangedDate>2017:10:26T09:20:00</ChangedDate>
    <Version>100</Version>
    <OldVersion Mode="AsError">1800</OldVersion>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Deprecated - will generate error. Use GetLSN instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use GetLSN instead.</ShortDesc>
    <SeeAlso>GetLSN </SeeAlso>
    <Comments>Deprecated - will generate error. Use GetLSN instead. Original description was: Returns the line style of the referenced object.</Comments>
    <Example>lStyleValue:=[[name]](handleToObject);[[BR]]</Example>
    <ID>295</ID>
    <IDName>funcGetLS</IDName>
    <InternalFunctionName>MP_GetLS</InternalFunctionName>
    <ModernName>GetLineStyle</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLScale</Name>
    <Version>100</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the scale of the referenced layer.[[BR]]</Description>
    <ShortDesc>Returns the scale of the referenced layer.</ShortDesc>
    <ID>430</ID>
    <IDName>funcGetLScale</IDName>
    <InternalFunctionName>MP_GetLScale</InternalFunctionName>
    <ModernName>GetLayerScale</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to layer.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLVis</Name>
    <Version>100</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the visibility of the referenced layer.[[BR]][[BR]][[note:LayerVisTable]][[BR]]</Description>
    <ShortDesc>Returns the visibility of the referenced layer.  A value of 0 means normal visibility, a value of 2 means grayed, and a value of -1 means invisible.</ShortDesc>
    <Example>FUNCTION GetLayerVisibility(layerHandle :handle) :INTEGER;[[BR]]	{Returns the effective visibility of a layer.}[[BR]]BEGIN[[BR]]	GetLayerVisibility := -1;[[BR]]	IF layerHandle = ActLayer THEN GetLayerVisibility := 0 ELSE {Active layers are always visible.}[[BR]]	IF (GetObjectVariableInt(ActLayer, 154) = 1) &amp; (GetObjectVariableInt(layerHandle, 154) = 1) THEN BEGIN[[BR]]		{If it's not the active layer, then the only way that it can be visible is if[[BR]]		the active layer is a design layer, and so is layerHandle, and the combination[[BR]]		of layer options and the layer's visibility will result in a visible layer.}[[BR]]		IF (GetLayerOptions = 2) &amp; (GetLVis(layerHandle) = 2) THEN GetLayerVisibility := 2 ELSE[[BR]]		IF (GetLayerOptions = 2) &amp; (GetLVis(layerHandle) = 0) THEN GetLayerVisibility := 2 ELSE[[BR]]		IF (GetLayerOptions &gt; 2) &amp; (GetLVis(layerHandle) = 2) THEN GetLayerVisibility := 2 ELSE[[BR]]		IF (GetLayerOptions &gt; 2) &amp; (GetLVis(layerHandle) = 0) THEN GetLayerVisibility := 0;[[BR]]	END;[[BR]]END;[[BR]][[BR]][[BR]]PROCEDURE Example;[[BR]]BEGIN[[BR]]	Message(GetLVis(GetLayerByName('Layer-1')));[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>454</ID>
    <IDName>funcGetLVis</IDName>
    <InternalFunctionName>MP_GetLVis</InternalFunctionName>
    <ModernName>GetLayerVis</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to layer.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLW</Name>
    <Version>100</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the line weight of the referenced object. The value returned represents the width in mils.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the line weight(in mils) of the referenced object.</ShortDesc>
    <Example>PROCEDURE GetLWExample;[[BR]]VAR[[BR]]	x, y :REAL;[[BR]]	h :HANDLE;[[BR]]BEGIN[[BR]]	GetPt(x, y);[[BR]]	h := PickObject(x, y);[[BR]]	IF h &lt;&gt; NIL THEN Message(GetLW(h));[[BR]]END;[[BR]]RUN(GetLWExample);[[BR]]</Example>
    <ID>294</ID>
    <IDName>funcGetLW</IDName>
    <InternalFunctionName>MP_GetLW</InternalFunctionName>
    <ModernName>GetLineWeight</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetMouse</Name>
    <Version>100</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] tracks and returns the current location of the cursor within the active Vectorworks document, allowing the cursor coordinates to be returned dynamically while moving the cursor onscreen.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the current X-Y coordinates of the mouse.</ShortDesc>
    <Example>BEGIN[[BR]]     WHILE NOT KeyDown(aCode) DO[[BR]]     BEGIN[[BR]]           GetMouse(CursX,CursY);[[BR]]           Message('X : ',CursX,' Y : ',CursY);[[BR]]     END;[[BR]]END;[[BR]]{displays the cursor coordinates as it is moved around onscreen}</Example>
    <ID>399</ID>
    <IDName>procGetMouse</IDName>
    <SpecialOverride>ProcGetMouse</SpecialOverride>
    <InternalFunctionName>ProcGetMouse</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtVarMode</Type>
        <Desc>Returns current mouse coordinates.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetName</Name>
    <Version>100</Version>
    <Category>Object Names</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Function [[name]] returns the object name of the referenced object. The function returns None if the object has no object name.[[BR]][[BR]]A handle to layer may not passed to this routine; to obtain a layer name, use GetLName.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the user specified name of the referenced object.  If it has no name, the string "none" is returned.</ShortDesc>
    <SeeAlso>SetName</SeeAlso>
    <Example>ObjectName:=GetName(HandleToObject);[[BR]]</Example>
    <ID>276</ID>
    <IDName>funcGetName</IDName>
    <InternalFunctionName>MP_GetName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObject</Name>
    <Version>100</Version>
    <Category>Object Names</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to a named object. If the name does not exist, NIL is returned.[[BR]][[BR]]</Description>
    <ShortDesc>Returns a handle to the specified named object.</ShortDesc>
    <ID>331</ID>
    <IDName>funcGetObject</IDName>
    <SpecialOverride>GetHandle</SpecialOverride>
    <InternalFunctionName>GetHandle</InternalFunctionName>
    <ModernName>GetObjectByName</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Object name.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOrigin</Name>
    <Version>100</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the current origin location relative to the center of the page.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the location of the user specified origin.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   originPt :VECTOR;[[BR]]BEGIN[[BR]]   GetOrigin(originPt.x, originPt.y);[[BR]]   Message(originPt);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>398</ID>
    <IDName>procGetOrigin</IDName>
    <SpecialOverride>ProcGetOrigin</SpecialOverride>
    <InternalFunctionName>ProcGetOrigin</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>x</Name>
        <Type>rVarMode</Type>
        <Desc>Returns X coordinate of origin.</Desc>
      </Param>
      <Param>
        <Name>y</Name>
        <Type>rVarMode</Type>
        <Desc>Returns Y coordinate of origin.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPenBack</Name>
    <Version>600</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the pen background color of the referenced object. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Returns the pen background of the referenced object.</ShortDesc>
    <SeeAlso>RGBToColorIndex,ColorIndexToRGB</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	h :HANDLE;[[BR]]	r, g, b :LONGINT;[[BR]]BEGIN[[BR]]	h := FSActLayer;[[BR]]	GetPenBack(h, r, g, b);[[BR]]	Message('r= ', r, ' g= ', g, ' b= ', b);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>546</ID>
    <IDName>procGetPenBack</IDName>
    <InternalFunctionName>MP_GetPenBack</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPenFore</Name>
    <Version>600</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the pen foreground color components of the referenced object. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Returns the pen foreground of the referenced object.</ShortDesc>
    <SeeAlso>ColorIndexToRGB,RGBToColorIndex</SeeAlso>
    <Example>[[name]](handleToObject,redValue,greenValue,blueValue);[[BR]]</Example>
    <ID>547</ID>
    <IDName>procGetPenFore</IDName>
    <InternalFunctionName>MP_GetPenFore</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPolyPt</Name>
    <Version>100</Version>
    <Category>Objects - Polys</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the coordinates of a specified vertex of the referenced object.</Description>
    <ShortDesc>Returns the coordinates of the specified vertex of a referenced polygon.</ShortDesc>
    <Example>for i := 1 to GetVertNum(thePoly) do[[BR]]begin		[[BR]]	GetPolyPt(thePoly, i, vertX, vertY);[[BR]]end;	[[BR]]</Example>
    <ID>310</ID>
    <IDName>procGetPolyPt</IDName>
    <SpecialOverride>GetPolyPt</SpecialOverride>
    <InternalFunctionName>GetPolyPt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to polygon.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Index of vertex (range of 1 to n).</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>globPtVarMode</Type>
        <Desc>Returns coordinates of vertex.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPolyPt3D</Name>
    <Version>700</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the coordinates of the specified vertex of the referenced mesh, 3D polygon, or NURBS curve object.[[BR]][[BR]]Error checking for valid index values must be provided by the programmer.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the location of the specified vertex of the referenced 3D polygon.</ShortDesc>
    <Example>for i := 0 to (GetVertNum(thePoly) - 1) do[[BR]]begin		[[BR]]	GetPolyPt3D(thePoly, i, vertX, vertY, vertZ);[[BR]]end;	[[BR]]</Example>
    <ID>581</ID>
    <IDName>procGetPolyPt3D</IDName>
    <SpecialOverride>GetPolyPt3D</SpecialOverride>
    <InternalFunctionName>GetPolyPt3D</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to 3D mesh or polygon.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Index of vertex (range of 0 to n-1).</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Returns 3D coordinates of vertex.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPref</Name>
    <Version>600</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns the on-off status of the specified preference item.[[BR]][[BR]][[note:PrefItemTableNote]][[BR]][[BR]]</Description>
    <ShortDesc>Returns the on/off status of a specified preference item.</ShortDesc>
    <Example>SelHandleStatus:=GetPref(17);[[BR]]</Example>
    <ID>561</ID>
    <IDName>funcGetPref</IDName>
    <SpecialOverride>GetPref</SpecialOverride>
    <InternalFunctionName>GetPref</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>prefIndex</Name>
        <Type>intMode</Type>
        <Desc>Preference item constant.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPt</Name>
    <Version>100</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] switches the cursor to selection mode and allows the user to select a point in a Vectorworks document. This cannot be used if there is a function anywhere in the calling chain.[[BR]]</Description>
    <ShortDesc>Returns user mouse click coordinates.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	pt :POINT;[[BR]]BEGIN[[BR]]	GetPt(pt.x, pt.y);[[BR]]	Message(pt);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>375</ID>
    <IDName>procGetPt</IDName>
    <SpecialOverride>ProcGetPt</SpecialOverride>
    <InternalFunctionName>ProcGetPt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtVarMode</Type>
        <Desc>Returns coordinates of mouse click.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPtL</Name>
    <Version>100</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a temporary "rubberband" line from a specified point to the user selected end point. This cannot be used if there is a function anywhere in the calling chain.</Description>
    <ShortDesc>Draws user interactive line from a specified point and returns coordinates of selected end point.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	pt1, pt2 :VECTOR;[[BR]]BEGIN[[BR]]	GetPt(pt1.x, pt1.y);[[BR]]	GetPtL(pt1.x, pt1.y, pt2.x, pt2.y);[[BR]]	MoveTo(pt1.x, pt1.y);[[BR]]	LineTo(pt2.x, pt2.y);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>405</ID>
    <IDName>procGetPtL</IDName>
    <SpecialOverride>GetProcGetPtL</SpecialOverride>
    <InternalFunctionName>GetProcGetPtL</InternalFunctionName>
    <ModernName>GetUserPt</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p1</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinates of line start point.</Desc>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>globPtVarMode</Type>
        <Desc>Returns coordinates of mouse click.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetRecord</Name>
    <Version>100</Version>
    <Category>Database / Record</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns the handle to a specified record attached the referenced object.</Description>
    <ShortDesc>Returns a handle to the specified record.</ShortDesc>
    <Example>handleToRecord := [[name]](handleToObject,3);[[BR]]</Example>
    <ID>485</ID>
    <IDName>funcGetRecord</IDName>
    <SpecialOverride>GetRecList</SpecialOverride>
    <InternalFunctionName>GetRecList</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>cnt</Name>
        <Type>intMode</Type>
        <Desc>Index of attached record (in a range of 1 -  n).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetRect</Name>
    <Version>100</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] draws a temporary "rubberband" rectangle onscreen, similar to a selection marquee. The user defines the rectangle by selecting two points which define the top left and bottom right of the rectangle. This cannot be used if there is a function anywhere in the calling chain.</Description>
    <ShortDesc>Draws user interactive rectangle and returns corner point coordinates.</ShortDesc>
    <ID>376</ID>
    <IDName>procGetRect</IDName>
    <InternalFunctionName>MP_GetRect</InternalFunctionName>
    <ModernName>GetUserRect</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p1</Name>
        <Type>globPtVarMode</Type>
        <Desc>Returns coordinates of first user click.</Desc>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>globPtVarMode</Type>
        <Desc>Returns coordinates of second user click.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetRot3D</Name>
    <Version>100</Version>
    <OldVersion>800</OldVersion>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Obsolete procedure.[[BR]]</Description>
    <ShortDesc>Obsolete procedure. See Get3DOrientation.</ShortDesc>
    <SeeAlso>Get3DOrientation</SeeAlso>
    <Comments>Deleted this obsolete function as of 9.0.0b7 - PCP 12-21-2000[[BR]][[BR]]This is the old call to query 3D rotations. It was never documented &amp; never supported returning the reflection status of the object. It has been replaced by Get3DOrientation.</Comments>
    <ID>327</ID>
    <IDName>procGetRot3D</IDName>
    <InternalFunctionName>MP_GetRot3D</InternalFunctionName>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>xRot</Name>
        <Type>rVarMode</Type>
        <Desc>X rotation.</Desc>
      </Param>
      <Param>
        <Name>yRot</Name>
        <Type>rVarMode</Type>
        <Desc>Y rotation.</Desc>
      </Param>
      <Param>
        <Name>zRot</Name>
        <Type>rVarMode</Type>
        <Desc>Z rotation.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetRRDiam</Name>
    <Version>100</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the horizontal and vertical diameters of the rounded corners of a rounded rectangle object.[[BR]][[BR]]</Description>
    <ShortDesc>Returns corner rounding values for the referenced object.</ShortDesc>
    <ID>309</ID>
    <IDName>procGetRRDiam</IDName>
    <SpecialOverride>ProcGetDiam</SpecialOverride>
    <InternalFunctionName>ProcGetDiam</InternalFunctionName>
    <ModernName>GetRoundRectDiam</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>xDiam</Name>
        <Type>rVarMode</Type>
        <Desc>X diameter of rounded corner.</Desc>
      </Param>
      <Param>
        <Name>yDiam</Name>
        <Type>rVarMode</Type>
        <Desc>Y diameter of rounded corner.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetScreen</Name>
    <Version>100</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the top-left and bottom-right corners of the display screen. These values will change as different sized screens are used. This procedure can be utilized to aid in development of dialog boxes, or as a check of screen size for sizing or displaying custom dialogs.</Description>
    <ShortDesc>Returns the display boundary coordinates of the current video device. </ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR [[BR]]	x1, y1, x2, y2 :INTEGER;[[BR]]BEGIN[[BR]]	GetScreen(x1, y1, x2, y2);[[BR]]	Message(x1,' ',y1,' ',x2,' ',y2);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>442</ID>
    <IDName>procGetScreen</IDName>
    <SpecialOverride>ReturnRect</SpecialOverride>
    <InternalFunctionName>ReturnRect</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>x1</Name>
        <Type>intVarMode</Type>
        <Desc>Returns X coordinate of top left of screen.</Desc>
      </Param>
      <Param>
        <Name>y1</Name>
        <Type>intVarMode</Type>
        <Desc>Returns Y coordinate of top left of screen.</Desc>
      </Param>
      <Param>
        <Name>x2</Name>
        <Type>intVarMode</Type>
        <Desc>Returns X coordinate of bottom right of screen.</Desc>
      </Param>
      <Param>
        <Name>y2</Name>
        <Type>intVarMode</Type>
        <Desc>Returns Y coordinate of bottom right of screen.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSDName</Name>
    <Version>100</Version>
    <Category>Objects - Symbols</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Function [[name]] returns the name of the referenced symbol definition.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the name of the referenced symbol definition.</ShortDesc>
    <ID>280</ID>
    <IDName>funcGetSDName</IDName>
    <InternalFunctionName>MP_GetSDName</InternalFunctionName>
    <ModernName>GetSymDefName</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to symbol definition.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSegPt1</Name>
    <Version>100</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the X-Y coordinates of the start point of the referenced line, wall, or linear dimension object.</Description>
    <ShortDesc>Returns the X-Y coordinates of the first point of the referenced line.</ShortDesc>
    <ID>307</ID>
    <IDName>procGetSegPt1</IDName>
    <SpecialOverride>GetObjPt1</SpecialOverride>
    <InternalFunctionName>GetObjPt1</InternalFunctionName>
    <ModernName>GetLineStart</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to line.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>globPtVarMode</Type>
        <Desc>Coordinates of start point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSegPt2</Name>
    <Version>100</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the end point of the of the referenced line, wall, or linear dimension object.</Description>
    <ShortDesc>Returns the X-Y coordinates of the second point of the referenced line.</ShortDesc>
    <ID>308</ID>
    <IDName>procGetSegPt2</IDName>
    <SpecialOverride>GetObjPt2</SpecialOverride>
    <InternalFunctionName>GetObjPt2</InternalFunctionName>
    <ModernName>GetLineEnd</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to line.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>globPtVarMode</Type>
        <Desc>Coordinates of end point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSize</Name>
    <Version>100</Version>
    <OldVersion>500</OldVersion>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Obsolete function.</Description>
    <ShortDesc>Obsolete function. See GetTextSize.</ShortDesc>
    <SeeAlso>GetTextSize</SeeAlso>
    <Comments>Deleted this obsolete function as of 9.0.0b7 - PCP 12-21-2000[[BR]][[BR]]Returns the font size in points of the first character in the text block h. This function is obsolete. Use GetTextSize instead.[[BR]][[BR]][sd 8/14/98]</Comments>
    <ID>452</ID>
    <IDName>funcGetSize</IDName>
    <InternalFunctionName>MP_GetSize</InternalFunctionName>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSpreadAngle</Name>
    <Version>700</Version>
    <Category>Objects - Lights</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the spread angle of the referenced spot light. [[BR]]</Description>
    <ShortDesc>Returns light spread angle of referenced light.</ShortDesc>
    <ID>577</ID>
    <IDName>procGetSpreadAngle</IDName>
    <SpecialOverride>GetSpreadAngle</SpecialOverride>
    <InternalFunctionName>GetSpreadAngle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to light.</Desc>
      </Param>
      <Param>
        <Name>spreadAngleR</Name>
        <Type>rVarMode</Type>
        <Desc>Returns spread angle of light.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetStyle</Name>
    <Version>100</Version>
    <OldVersion>500</OldVersion>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Obsolete function.</Description>
    <ShortDesc>Obsolete function. See GetTextStyle.</ShortDesc>
    <SeeAlso>GetTextStyle</SeeAlso>
    <Comments>Deleted this obsolete function as of 9.0.0b7 - PCP 12-21-2000[[BR]][[BR]]Returns the style of the first character in the text block h. This function is obsolete. Use GetTextStyle instead.[[BR]][[BR]][sd 8/14/98]</Comments>
    <ID>453</ID>
    <IDName>funcGetStyle</IDName>
    <InternalFunctionName>MP_GetStyle</InternalFunctionName>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSymLoc</Name>
    <Version>100</Version>
    <Category>Object Info</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the insertion point of the referenced symbol or plug-in object.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the X-Y location of the referenced symbol or plug-in object.</ShortDesc>
    <ID>450</ID>
    <IDName>procGetSymLoc</IDName>
    <SpecialOverride>ProcGetSymLoc</SpecialOverride>
    <InternalFunctionName>ProcGetSymLoc</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>symHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to placed symbol.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>globPtVarMode</Type>
        <Desc>Returns insertion point of symbol</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSymName</Name>
    <Version>100</Version>
    <Category>Objects - Symbols</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Function [[name]] returns the symbol name of a referenced symbol in a Vectorworks document.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the name of a referenced symbol.</ShortDesc>
    <ID>282</ID>
    <IDName>funcGetSymName</IDName>
    <InternalFunctionName>MP_GetSymName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>symHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to placed symbol.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSymRot</Name>
    <Version>100</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function GetSymRot returns the rotation angle (in degrees) of the referenced symbol or plug-in object.</Description>
    <ShortDesc>Returns the rotation of the referenced symbol in degrees. </ShortDesc>
    <ID>386</ID>
    <IDName>funcGetSymRot</IDName>
    <InternalFunctionName>MP_GetSymRot</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>symHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to symbol.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetText</Name>
    <Version>100</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>DYNARRAY[] of CHAR</ReturnType>
    <Description>Function [[name]] returns the text contained within the referenced text object.</Description>
    <ShortDesc>Returns the text value of the referenced object.</ShortDesc>
    <SeeAlso>SetText</SeeAlso>
    <ID>279</ID>
    <IDName>funcGetText</IDName>
    <InternalFunctionName>MP_GetText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextFont</Name>
    <Version>600</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Procedure [[name]] returns the font of the referenced text object at a specified position in the string.[[BR]][[BR]][[note:TextIndex]]</Description>
    <ShortDesc>Returns the font of the referenced object at the specified position in the string.</ShortDesc>
    <SeeAlso>GetFontName, GetFontID</SeeAlso>
    <Example>fontID:=GetTextFont(handleToText,2);[[BR]]</Example>
    <ID>531</ID>
    <IDName>funcGetTextFont</IDName>
    <InternalFunctionName>MP_GetTextFont</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
      <Param>
        <Name>Position</Name>
        <Type>intMode</Type>
        <Desc>Position in text string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextJust</Name>
    <Version>600</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the text justification of the referenced text object.[[BR]][[BR]][[note:TextHorizontalAlignTable]]</Description>
    <ShortDesc>Returns the justification of the referenced text object.</ShortDesc>
    <ID>534</ID>
    <IDName>funcGetTextJust</IDName>
    <InternalFunctionName>MP_GetTextJust</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>TextHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextSize</Name>
    <Version>600</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Procedure [[name]] returns the text point size at a specified position within the referenced text object. 1 point = 1/72". [[BR]][[BR]][[note:TextIndex]]</Description>
    <ShortDesc>Returns the text size of the referenced object at a specified position in the string.</ShortDesc>
    <Comments>The result was previously an integer, but is now a floating point value. [9/14/98 - PCP]</Comments>
    <ID>532</ID>
    <IDName>funcGetTextSize</IDName>
    <InternalFunctionName>MP_GetTextSize</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>TextHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
      <Param>
        <Name>Position</Name>
        <Type>intMode</Type>
        <Desc>Position in text string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextStyle</Name>
    <Version>600</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Procedure [[name]] returns the text style at a specified position within the referenced text object.[[BR]][[BR]][[note:TextIndex]][[BR]][[BR]][[note:TextStyleTable]]</Description>
    <ShortDesc>Returns the text style of the referenced object at a specified position in the string.</ShortDesc>
    <ID>533</ID>
    <IDName>funcGetTextStyle</IDName>
    <InternalFunctionName>MP_GetTextStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>TextHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
      <Param>
        <Name>Position</Name>
        <Type>intMode</Type>
        <Desc>Position in text string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetType</Name>
    <ChangedDate>2010:07:12T17:03:00</ChangedDate>
    <Version>100</Version>
    <OldVersion>1600</OldVersion>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the type index of the referenced screen object.</Description>
    <ShortDesc>Returns the node type of the referenced screen object.</ShortDesc>
    <SeeAlso>GetTypeN</SeeAlso>
    <Comments>Returns the node type of the referenced screen object. See GetTypeN.</Comments>
    <ID>298</ID>
    <IDName>funcGetType</IDName>
    <InternalFunctionName>MP_GetType</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetUnits</Name>
    <ChangedDate>2017:12:01T12:08:00</ChangedDate>
    <Version>100</Version>
    <Category>Units</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the current units settings of the document.[[BR]][[BR]][[note:UnitsFormatTable]][[BR]][[BR]]More extensive Units information is available using the GetPref routines with the selectors shown in the tables of the VectorScript Appendix.  </Description>
    <ShortDesc>Returns the current unit settings of the document.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR [[BR]]	fraction   :LONGINT; [[BR]]	display    :LONGINT; [[BR]]	format     :INTEGER; [[BR]]	upi        :REAL; [[BR]]	lenUnitMk   :STRING;[[BR]]	areaUnitMk :STRING;[[BR]]BEGIN[[BR]]	GetUnits(fraction, display, format, upi, lenUnitMk, areaUnitMk);[[BR]]	Message(fraction, ' ', display, ' ', format, ' ', upi, ' ', lenUnitMk, ' ', areaUnitMk);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>489</ID>
    <IDName>procGetUnits</IDName>
    <SpecialOverride>MPGetUnits</SpecialOverride>
    <InternalFunctionName>MPGetUnits</InternalFunctionName>
    <ModernName>ActUnits</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>fraction</Name>
        <Type>lngVarMode</Type>
        <Desc>Approximate WorldCoords per drawing unit.  Use GetPrefReal(150) instead.  </Desc>
      </Param>
      <Param>
        <Name>display</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns display accuracy.</Desc>
      </Param>
      <Param>
        <Name>format</Name>
        <Type>intVarMode</Type>
        <Desc>Returns units format setting.</Desc>
      </Param>
      <Param>
        <Name>upi</Name>
        <Type>rVarMode</Type>
        <Desc>Returns units per inch value.</Desc>
      </Param>
      <Param>
        <Name>lenUnitMk</Name>
        <Type>strVarMode</Type>
        <Desc>Returns length unit mark.</Desc>
      </Param>
      <Param>
        <Name>areaUnitMk</Name>
        <Type>strVarMode</Type>
        <Desc>Returns area unit mark.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVersion</Name>
    <ChangedDate>2008:10:17T10:09:00</ChangedDate>
    <Version>700</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Returns version information about the Vectorworks application. Parameter [[p:1]] returns the major version number of the application. Parameters [[p:2]] and [[p:3]] return minor version information. Parameter [[p:4]] returns the OS platform on which Vectorworks is running (1 = Macintosh, 2 = Windows).[[BR]][[BR]]Vectorworks 2008 has version major number 13, 2009 - 14 and so on.[[BR]][[BR]]For example:[[BR]][[BR]]Vectorworks 8.0.1 running on a Macintosh would return:[[BR]][[BR]][[p:1]]: 8[[BR]][[p:2]]: 0[[BR]][[p:3]]: 1[[BR]][[p:4]]: 1[[BR]]</Description>
    <ShortDesc>Returns version information on Vectorworks.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR [[BR]]	osMajor, osMinor, osIncr :LONGINT; [[BR]]	appMajor, appMinor, appMaint, platform :INTEGER;[[BR]]	platformStr :STRING;[[BR]]BEGIN[[BR]]	GetVersion(appMajor, appMinor, appMaint, platform);[[BR]]	GetOSVersion(osMajor, osMinor, osIncr);[[BR]]	IF (platform = 1) [[BR]]		THEN platformStr := 'MacOS'[[BR]]		ELSE platformStr := 'Windows';[[BR]]	Message('Vectorworks ', appMajor, '.', appMinor, '.', appMaint, ' running on ', platformStr, ' ', osMajor, '.', osMinor, '.', osIncr);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>583</ID>
    <IDName>procGetVersion</IDName>
    <SpecialOverride>GetVersion</SpecialOverride>
    <InternalFunctionName>GetVersion</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>major</Name>
        <Type>intVarMode</Type>
        <Desc>Returns major version number of application.</Desc>
      </Param>
      <Param>
        <Name>minor</Name>
        <Type>intVarMode</Type>
        <Desc>Returns minor version number of application.</Desc>
      </Param>
      <Param>
        <Name>maintenance</Name>
        <Type>intVarMode</Type>
        <Desc>Returns maintenance version number of application.</Desc>
      </Param>
      <Param>
        <Name>platform</Name>
        <Type>intVarMode</Type>
        <Desc>Returns platform of application.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVertNum</Name>
    <Version>100</Version>
    <Category>Objects - Polys</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the number of vertices of the referenced polygon or polyline object.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the number of vertices in the referenced polygon.</ShortDesc>
    <ID>299</ID>
    <IDName>funcGetVertNum</IDName>
    <InternalFunctionName>MP_GetVertNum</InternalFunctionName>
    <ModernName>GetNumVerts</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>PolyHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to polygon.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetView</Name>
    <Version>800</Version>
    <Category>View / Zoom</Category>
    <Type>Procedure</Type>
    <Description>Returns information about the current 3D view.</Description>
    <ShortDesc>Returns information about the current 3D view.</ShortDesc>
    <Comments>Returns information about the current 3D view.[[BR]]All parameters are for output:[[BR]]xAngleR, the angle the view is rotated away from the x-axis[[BR]]yAngleR, the angle the view is rotated away from the y-axis[[BR]]zAngleR, the angle the view is rotated away from the z-axis[[BR]]offsetX, Y, and Z, the center of the view[[BR]][[BR]][sd 8/14/98][[BR]]</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	xAngleR, yAngelR, zAngleR, offsetX, offsetY, offsetZ :REAL;[[BR]]BEGIN[[BR]]	GetView(xAngleR, yAngelR, zAngleR, offsetX, offsetY, offsetZ);[[BR]]	Message(xAngleR, ' ', yAngelR, ' ', zAngleR, ' ', offsetX, ' ', offsetY, ' ', offsetZ);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2017</ID>
    <IDName>procGetView</IDName>
    <InternalFunctionName>MP_GetView</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>xAngleR</Name>
        <Type>rVarMode</Type>
        <Desc>Returns X rotation angle of view.</Desc>
      </Param>
      <Param>
        <Name>yAngelR</Name>
        <Type>rVarMode</Type>
        <Desc>Returns Y rotation angle of view.</Desc>
      </Param>
      <Param>
        <Name>zAngleR</Name>
        <Type>rVarMode</Type>
        <Desc>Returns Z rotation angle of view.</Desc>
      </Param>
      <Param>
        <Name>offset</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Center of view rotation.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWallWidth</Name>
    <Version>600</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the default wall width setting of the document.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the active wall width setting.</ShortDesc>
    <ID>530</ID>
    <IDName>funcGetWallWidth</IDName>
    <SpecialOverride>GetWallWidth</SpecialOverride>
    <InternalFunctionName>GetWallWidth</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetZVals</Name>
    <Version>500</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the Z (layer base elevation) and delta Z (layer thickness) values for the active layer.</Description>
    <ShortDesc>Returns the Z(base elevation) and delta Z(layer thickness) values for the active layer.</ShortDesc>
    <Comments>Returns the Z and Delta Z values for the active layer.[[BR]][[BR]][sd 8/14/98]</Comments>
    <Example>PROCEDURE GetLayerHeights(layerHandle :handle; var baseElev, thickness :REAL);[[BR]]BEGIN[[BR]]	GetLayerElevation(layerHandle, baseElev, thickness);[[BR]]	baseElev  := baseElev  / (25.4 / GetPrefReal(152));[[BR]]	thickness := thickness / (25.4 / GetPrefReal(152));[[BR]]END;</Example>
    <ID>527</ID>
    <IDName>procGetZVals</IDName>
    <SpecialOverride>GetZVals</SpecialOverride>
    <InternalFunctionName>GetZVals</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>zVal</Name>
        <Type>rVarMode</Type>
        <Desc>Layer base elevation(above document ground plane).</Desc>
      </Param>
      <Param>
        <Name>deltaZVal</Name>
        <Type>rVarMode</Type>
        <Desc>Layer thickness.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GrayLayer</Name>
    <Version>100</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the visibility status of the active layer to grayed. Objects on grayed layers will always appear grayed when viewed from other layers.[[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Sets the active layer visibility to grayed.</ShortDesc>
    <Example>Layer('Future Construction');[[BR]]GrayLayer;[[BR]]{grays the layer 'Future Construction'}[[BR]]</Example>
    <ID>163</ID>
    <IDName>procGrayLayer</IDName>
    <InternalFunctionName>MP_GrayLayer</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GridLines</Name>
    <Version>100</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the distance between the drawing grid lines in the document. [[BR]]</Description>
    <ShortDesc>Sets the active display grid width.</ShortDesc>
    <ID>177</ID>
    <IDName>procGridLines</IDName>
    <InternalFunctionName>MP_GridLines</InternalFunctionName>
    <ModernName>GridLineSpacing</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>gridDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Grid spacing distance.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Group</Name>
    <Version>100</Version>
    <Category>Objects - Groups</Category>
    <Type>Procedure</Type>
    <Description>Procedures [[name]] groups selected objects in a Vectorworks document. Any selected objects on the active layer(or any selected objects in the document when in Show-Snap-Modify mode) will be included in the new group object.[[BR]][[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Groups selected objects.</ShortDesc>
    <Example>Rect(-1,1,0,0);[[BR]]Rect(-1,-0.5,0,-1.5);[[BR]]Group;[[BR]]{groups the most recently created objects}[[BR]][[BR]][[BR]]</Example>
    <ID>119</ID>
    <IDName>procGroup</IDName>
    <SpecialOverride>GetGroup</SpecialOverride>
    <InternalFunctionName>GetGroup</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>HAngle</Name>
    <Version>100</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the angle of the referenced line or arc object.[[BR]]</Description>
    <ShortDesc>Returns the angle of the referenced object.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]BEGIN[[BR]]	CallTool(-202);[[BR]]	Message(HAngle(FSActLayer));[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>372</ID>
    <IDName>funcHAngle</IDName>
    <InternalFunctionName>MP_HAngle</InternalFunctionName>
    <ModernName>GetAngle</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HArea</Name>
    <Version>100</Version>
    <OldVersion>1250</OldVersion>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the area of the referenced object.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the area of the referenced object.  This function is obsolete.  Use ObjArea instead.</ShortDesc>
    <ID>367</ID>
    <IDName>funcHArea</IDName>
    <InternalFunctionName>MP_HArea</InternalFunctionName>
    <ModernName>GetArea</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HasDim</Name>
    <Version>100</Version>
    <Category>Dimensions</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns TRUE if a line or arc object has dimension text associated with it, otherwise it returns FALSE.[[BR]][[BR]]</Description>
    <ShortDesc>Returns TRUE if the referenced object has dimension text.</ShortDesc>
    <Example>isDimension:=HasDim(HandleToObject);[[BR]]</Example>
    <ID>397</ID>
    <IDName>funcHasDim</IDName>
    <InternalFunctionName>MP_HasDim</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HCenter</Name>
    <Version>100</Version>
    <Category>Graphic Calculation</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the logical center point of the object specified in [[p:1]]. For most objects, this is the center of the bounding box. For circles, arcs, and round walls [[name]] returns the arc center of the object.</Description>
    <ShortDesc>Returns the center point of the referenced object.</ShortDesc>
    <ID>373</ID>
    <IDName>procHCenter</IDName>
    <SpecialOverride>ProcHCenter</SpecialOverride>
    <InternalFunctionName>ProcHCenter</InternalFunctionName>
    <ModernName>GetCenter</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>globPtVarMode</Type>
        <Desc>X-Y location of object center.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HHeight</Name>
    <Version>100</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the height of the referenced object.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the 2D height of the referenced object.</ShortDesc>
    <ID>370</ID>
    <IDName>funcHHeight</IDName>
    <InternalFunctionName>MP_HHeight</InternalFunctionName>
    <ModernName>GetHeight</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HideClass</Name>
    <Version>100</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Sets the class visibility of the specified class to hidden (invisible) status.</Description>
    <ShortDesc>Hides the specified class.</ShortDesc>
    <SeeAlso>ShowClass</SeeAlso>
    <Example>[[name]]('Dimension');[[BR]]</Example>
    <ID>333</ID>
    <IDName>procHideClass</IDName>
    <InternalFunctionName>MP_HideClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HideLayer</Name>
    <Version>100</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the visibility status of the active layer to hidden. Objects on hidden layers will not be viewable from other layers.[[BR]][[BR]]</Description>
    <ShortDesc>Hides the active layer.</ShortDesc>
    <Example>Layer('Future Construction');[[BR]]HideLayer;[[BR]]{hides the layer 'Future Construction'}</Example>
    <ID>162</ID>
    <IDName>procHideLayer</IDName>
    <InternalFunctionName>MP_HideLayer</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>HLength</Name>
    <Version>100</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the length of a line.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the length of the referenced object.</ShortDesc>
    <ID>369</ID>
    <IDName>funcHLength</IDName>
    <InternalFunctionName>MP_HLength</InternalFunctionName>
    <ModernName>GetLength</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HMove</Name>
    <Version>100</Version>
    <Category>Object Editing</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] moves the referenced object a relative offset distance.[[BR]][[BR]]</Description>
    <ShortDesc>Moves the referenced object by an offset of (xOffset,yOffset).</ShortDesc>
    <Example>[[name]](handleToObject,2,2);[[BR]]</Example>
    <ID>466</ID>
    <IDName>procHMove</IDName>
    <SpecialOverride>HMove</SpecialOverride>
    <InternalFunctionName>HMove</InternalFunctionName>
    <ModernName>MoveObj</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>xOffset</Name>
        <Type>realMode</Type>
        <Desc>X offset distance.</Desc>
      </Param>
      <Param>
        <Name>yOffset</Name>
        <Type>realMode</Type>
        <Desc>Y offset distance.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HPerim</Name>
    <Version>100</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the perimeter of the referenced object.[[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Returns the perimeter of the referenced object.</ShortDesc>
    <ID>368</ID>
    <IDName>funcHPerim</IDName>
    <InternalFunctionName>MP_HPerim</InternalFunctionName>
    <ModernName>GetPerim</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HRotate</Name>
    <Version>600</Version>
    <Category>Object Editing</Category>
    <Type>Procedure</Type>
    <Description>Procedure HRotate rotates the referenced object about a coordinate point location. [[p:3]] is in degrees.[[BR]]</Description>
    <ShortDesc>Rotates the referenced object about the point (x,y).</ShortDesc>
    <Example>[[name]](objHd,3,5,60d);[[BR]]</Example>
    <ID>548</ID>
    <IDName>procHRotate</IDName>
    <SpecialOverride>HRotate</SpecialOverride>
    <InternalFunctionName>HRotate</InternalFunctionName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>center</Name>
        <Type>globPtMode</Type>
        <Desc>X-Y coordinates of center point of rotation.</Desc>
      </Param>
      <Param>
        <Name>rotationAngle</Name>
        <Type>angleMode</Type>
        <Desc>Angle of rotation.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HWallHeight</Name>
    <ChangedDate>2011:03:28T12:07:00</ChangedDate>
    <Version>600</Version>
    <OldVersion Mode="AsWarning">1700</OldVersion>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the wall heights of the referenced wall object.[[BR]]</Description>
    <ShortDesc>Sets the start and end heights of the referenced wall.</ShortDesc>
    <ID>556</ID>
    <IDName>procHWallHeight</IDName>
    <SpecialOverride>HWallHeight</SpecialOverride>
    <InternalFunctionName>HWallHeight</InternalFunctionName>
    <ModernName>SetWallHeight</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>wallHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to wall.</Desc>
      </Param>
      <Param>
        <Name>startHeightDistance</Name>
        <Type>distanceMode</Type>
        <Desc>New start height of wall.</Desc>
      </Param>
      <Param>
        <Name>endHeightDistance</Name>
        <Type>distanceMode</Type>
        <Desc>New end height of wall.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HWallWidth</Name>
    <Version>600</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Procedure HWallWidth sets the wall width of the referenced wall object.[[BR]]</Description>
    <ShortDesc>Sets the width of the referenced wall.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	targetWall, sourceWall :HANDLE;[[BR]]	cnt1, cnt2, cavs :INTEGER;[[BR]]BEGIN[[BR]]	targetWall := FSActLayer;[[BR]]	MoveTo(0,0);[[BR]]	WallTo(1,0);[[BR]]	sourceWall := LNewObj;[[BR]]	cavs := GetObjectVariableInt(sourceWall, 199);[[BR]]	HWallWidth(targetWall, WallWidth(sourceWall));[[BR]]	SetObjectVariableInt(targetWall, 199, cavs);[[BR]]	FOR cnt2 := 0 TO cavs - 1 DO BEGIN[[BR]]		SetObjectVariableBoolean(targetWall, 240 + cnt2, GetObjectVariableBoolean(sourceWall, 240 + cnt2)); {cavity is pair}[[BR]]		SetObjectVariableReal   (targetWall, 200 + cnt2, GetObjectVariableReal   (sourceWall, 200 + cnt2)); {left offset}[[BR]]		SetObjectVariableReal   (targetWall, 220 + cnt2, GetObjectVariableReal   (sourceWall, 220 + cnt2)); {right offset}[[BR]]		SetObjectVariableLongInt(targetWall, 260 + cnt2, GetObjectVariableLongInt(sourceWall, 260 + cnt2)); {cavity fill}[[BR]]		SetObjectVariableInt    (targetWall, 280 + cnt2, GetObjectVariableInt    (sourceWall, 280 + cnt2)); {pen weight}[[BR]]		SetObjectVariableInt    (targetWall, 300 + cnt2, GetObjectVariableInt    (sourceWall, 300 + cnt2)); {pen style}[[BR]]	END;[[BR]]	ResetObject(targetWall);[[BR]]	DelObject(sourceWall);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>555</ID>
    <IDName>procHWallWidth</IDName>
    <SpecialOverride>HWallWidth</SpecialOverride>
    <InternalFunctionName>HWallWidth</InternalFunctionName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>wallHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to wall.</Desc>
      </Param>
      <Param>
        <Name>widthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>New wall width.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HWidth</Name>
    <Version>100</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the width of the referenced object.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the 2D width of the referenced object.</ShortDesc>
    <Example>w:=[[name]](HandleToObj); [[BR]]</Example>
    <ID>371</ID>
    <IDName>funcHWidth</IDName>
    <InternalFunctionName>MP_HWidth</InternalFunctionName>
    <ModernName>GetWidth</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Insert</Name>
    <Version>100</Version>
    <Category>Strings</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] will insert the specified string into a destination string. </Description>
    <ShortDesc>Inserts a specified source string into a destination string.</ShortDesc>
    <Example>theStr:='sample';[[BR]]originalStr:='A string';[[BR]][[name]](theStr,originalStr,3);[[BR]]{inserts 'sample' into the target string}</Example>
    <ID>246</ID>
    <IDName>procInsert</IDName>
    <InternalFunctionName>MP_Insert</InternalFunctionName>
    <ModernName>InsertSubstring</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>source</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>String to be inserted.</Desc>
      </Param>
      <Param>
        <Name>dest</Name>
        <Type>eCharDynarrayVarMode</Type>
        <Desc>Destination string.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Position where string is to be inserted.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertSymbol</Name>
    <Version>400</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] places a specified symbol into a wall.[[BR]]</Description>
    <ShortDesc>Inserts the specified symbol into the most recently created wall.</ShortDesc>
    <SeeAlso>AddSymToWall, AddSymToWallEdge</SeeAlso>
    <Example>MoveTo(3,1);[[BR]]WallTo(5',5');[[BR]]InsertSymbol(1',False,False,True,'Door');[[BR]]{inserts the symbol 'Door' at 1' from the start point of the last wall segment}</Example>
    <ID>503</ID>
    <IDName>procInsertSymbol</IDName>
    <SpecialOverride>MPInsertSymbol</SpecialOverride>
    <InternalFunctionName>MPInsertSymbol</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>offsetDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Offset distance from wall start.</Desc>
      </Param>
      <Param>
        <Name>heightDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Elevation of symbol.</Desc>
      </Param>
      <Param>
        <Name>flipped</Name>
        <Type>boolMode</Type>
        <Desc>Flip orientation of symbol.</Desc>
      </Param>
      <Param>
        <Name>right</Name>
        <Type>boolMode</Type>
        <Desc>Left-right orientation of symbol.</Desc>
      </Param>
      <Param>
        <Name>capped</Name>
        <Type>boolMode</Type>
        <Desc>Cap wall breaks.</Desc>
      </Param>
      <Param>
        <Name>symbolName</Name>
        <Type>stringMode</Type>
        <Desc>Name of symbol to be inserted in wall.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IntDialog</Name>
    <ChangedDate>2017:07:05T17:13:00</ChangedDate>
    <Version>100</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] displays a dialog box which requests the user to enter an integer value. [[BR]][[BR]][[name]] automatically screens for valid numeric input.[[BR]][[BR]]</Description>
    <ShortDesc>Displays a dialog box that requests the user to input an integer number.</ShortDesc>
    <Example>distValue := IntDialog('Enter an integer value:','0');[[BR]]</Example>
    <ID>201</ID>
    <IDName>funcIntDialog</IDName>
    <SpecialOverride>GetDialogStrInt</SpecialOverride>
    <InternalFunctionName>GetDialogStrInt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>request</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Dialog user prompt string.</Desc>
      </Param>
      <Param>
        <Name>default</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Default value for input field.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IntersectSolid</Name>
    <Version>700</Version>
    <Category>Objects - Solids</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] creates a new solid intersection object from the referenced source objects.[[BR]][[BR]][[note:SolidsResultsTable]]</Description>
    <ShortDesc>Creates a solid intersection from the referenced objects.</ShortDesc>
    <ID>594</ID>
    <IDName>funcIntersectSolid</IDName>
    <InternalFunctionName>MP_IntersectSolid</InternalFunctionName>
    <ModernName>IntersectSolids</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj1</Name>
        <Type>handleMode</Type>
        <Desc>Handle to source object for intersect operation.</Desc>
      </Param>
      <Param>
        <Name>obj2</Name>
        <Type>handleMode</Type>
        <Desc>Handle to source object for intersect operation.</Desc>
      </Param>
      <Param>
        <Name>newSolid</Name>
        <Type>handleVarMode</Type>
        <Desc>Handle to resultant object from intersect operation.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>KeyDown</Name>
    <Version>100</Version>
    <Category>User Interactive</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns TRUE if a non-modifier keyboard character has been depressed. When TRUE is returned, the ASCII code of the character is returned.[[BR]][[BR]]Modifier keys are the Caps Lock, Command, Control, Option, and Shift keys.[[BR]][[BR]]</Description>
    <ShortDesc>Returns TRUE if a non-modifier key has been pressed and also returns the ASCII code of the key that was pressed.</ShortDesc>
    <Example>WHILE NOT KeyDown(keyHit) DO[[BR]]BEGIN[[BR]]     SysBeep;[[BR]]     SysBeep;[[BR]]END;[[BR]]Message('The key pressed was ',keyHit);[[BR]]{an annoying example of one use of the KeyDown function}</Example>
    <ID>381</ID>
    <IDName>funcKeyDown</IDName>
    <InternalFunctionName>MP_KeyDown</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>asciiCode</Name>
        <Type>lngVarMode</Type>
        <Desc>ASCII code of key pressed.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LActLayer</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function LActLayer returns a handle to the last object in the active layer.</Description>
    <ShortDesc>Returns a handle to the last object in the active layer.</ShortDesc>
    <Comments>Returns a handle to the last object in the active layer.[[BR]][[BR]][sd 8/14/98]</Comments>
    <ID>254</ID>
    <IDName>funcLActLayer</IDName>
    <InternalFunctionName>MP_LActLayer</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Layer</Name>
    <Version>100</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a new layer in a Vectorworks document. After creation, the new layer becomes the active layer of the document.[[BR]][[BR]][[name]] can also be used to switch the active layer of the document. If the layer name passed to the procedure already exists, the procedure switches the active layer to the specified layer.[[BR]][[BR]][[note:LayerNameNote]][[BR]][[BR]]</Description>
    <ShortDesc>Creates a new active layer or sets the active layer of the document.</ShortDesc>
    <Example>Layer('Ductwork-1st Floor');[[BR]]{creates a new layer named 'Ductwork-1st Floor'}[[BR]][[BR]]Layer(newLayerName);[[BR]]{creates a new layer whose name is specified in the variable}[[BR]][[BR]]Layer('Untitled-1');[[BR]]{switches to the existing layer 'Untitled-1'}</Example>
    <ID>105</ID>
    <IDName>procLayer</IDName>
    <InternalFunctionName>MP_Layer</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Name of new or existing layer.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LayerRef</Name>
    <Version>400</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] places a layer reference (layer link) into the active layer at location (0,0).[[BR]]</Description>
    <ShortDesc>Creates a layer link from the specified layer at (0,0) on the active layer.</ShortDesc>
    <Example>LayerRef('Layer-2');[[BR]]{creates a layer link of 'Layer-2' on the active layer}</Example>
    <ID>510</ID>
    <IDName>procLayerRef</IDName>
    <SpecialOverride>LayerReference</SpecialOverride>
    <InternalFunctionName>LayerReference</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>layerName</Name>
        <Type>stringMode</Type>
        <Desc>Name of referenced layer.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Len</Name>
    <Version>100</Version>
    <Category>Strings</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the length of the specified string value.</Description>
    <ShortDesc>Returns the length of the specified string.</ShortDesc>
    <ID>241</ID>
    <IDName>funcLen</IDName>
    <InternalFunctionName>MP_Len</InternalFunctionName>
    <ModernName>StringLength</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>v</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Source string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LFillBack</Name>
    <Version>100</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the background fill color for the active layer. RGB values are in the range of 0~65535.[[BR]]</Description>
    <ShortDesc>Sets the background fill color for the active layer.</ShortDesc>
    <Comments>Sets the background fill color for the active layer.[[BR]][[BR]][sd 8/14/98]</Comments>
    <Example>[[name]](65535,0,39321);[[BR]]</Example>
    <ID>432</ID>
    <IDName>procLFillBack</IDName>
    <InternalFunctionName>MP_LFillBack</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LFillFore</Name>
    <Version>100</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the foreground fill color for the active layer. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Sets the foreground fill color for the active layer.</ShortDesc>
    <Comments>Sets the foreground fill color for the active layer.[[BR]][[BR]][sd 8/14/98][[BR]]</Comments>
    <Example>[[name]](65535,0,39321);[[BR]]</Example>
    <ID>431</ID>
    <IDName>procLFillFore</IDName>
    <InternalFunctionName>MP_LFillFore</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LimitTolerance</Name>
    <Version>400</Version>
    <Category>Dimensions</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] is used with dimensioning procedures to define a tolerance for the most recently created dimension object.</Description>
    <ShortDesc>Defines a limit tolerance for the most recently created dimension.</ShortDesc>
    <Example>LinearDim(-2",2",1",2",-3",0,771,771,0.75);[[BR]][[name]](TRUE,FALSE,'','',-1",1");[[BR]]</Example>
    <ID>516</ID>
    <IDName>procLimitTolerance</IDName>
    <SpecialOverride>LimitTolerance</SpecialOverride>
    <InternalFunctionName>LimitTolerance</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>showVal</Name>
        <Type>boolMode</Type>
        <Desc>Dimension text display flag.</Desc>
      </Param>
      <Param>
        <Name>boxText</Name>
        <Type>boolMode</Type>
        <Desc>Boxed text display flag.</Desc>
      </Param>
      <Param>
        <Name>leader</Name>
        <Type>stringMode</Type>
        <Desc>Dimension leader text string.</Desc>
      </Param>
      <Param>
        <Name>trailer</Name>
        <Type>stringMode</Type>
        <Desc>Dimension trailer text string.</Desc>
      </Param>
      <Param>
        <Name>lowDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Tolerance value text string.</Desc>
      </Param>
      <Param>
        <Name>hiDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Tolerance value text string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Line</Name>
    <Version>100</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a line object in Vectorworks. The line is drawn from the current pen position(x,y) to the specified point. The point may also be thought of as the location (x+dX,y+dY), where dX and dY are x and y offsets, respectively. [[BR]][[BR]]The line object is drawn with the current default attributes unless otherwise specified.[[BR]][[BR]]</Description>
    <ShortDesc>Draws a line from the current pen position to (x+dX,y+dY).</ShortDesc>
    <Example>Line(2,2);[[BR]]{ draws a line from the current pen location to a point }[[BR]]{ 2 horizontal and 2 vertical units away.               }</Example>
    <ID>106</ID>
    <IDName>procLine</IDName>
    <SpecialOverride>GetLine</SpecialOverride>
    <InternalFunctionName>GetLine</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>line</Name>
        <Type>tdPtMode</Type>
        <Desc>Offset values for line.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LinearDim</Name>
    <Version>100</Version>
    <Category>Dimensions</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a linear dimension in a Vectorworks document.[[BR]][[BR]][[note:DimFlagNote]][[BR]][[BR]]&lt;I&gt;Linear Dimension&lt;/I&gt;&lt;P&gt;[[BR]][[fig:lindim.gif]]</Description>
    <ShortDesc>Creates a linear dimension.</ShortDesc>
    <Example>[[name]](-2",2",1",2",-3",0,771,770,0.75);[[BR]]</Example>
    <ID>490</ID>
    <IDName>procLinearDim</IDName>
    <SpecialOverride>GetLinearDimension</SpecialOverride>
    <InternalFunctionName>GetLinearDimension</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>startPt</Name>
        <Type>globPtMode</Type>
        <Desc>X-Y coordinates of dimension start point.</Desc>
      </Param>
      <Param>
        <Name>endPt</Name>
        <Type>globPtMode</Type>
        <Desc>X-Y coordinates of dimension end point.</Desc>
      </Param>
      <Param>
        <Name>offsetDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Offset distance of dimension line from object.</Desc>
      </Param>
      <Param>
        <Name>dimType</Name>
        <Type>intMode</Type>
        <Desc>Dimension type flag.</Desc>
      </Param>
      <Param>
        <Name>arrow</Name>
        <Type>intMode</Type>
        <Desc>Arrowhead style flag.</Desc>
      </Param>
      <Param>
        <Name>textFlag</Name>
        <Type>intMode</Type>
        <Desc>Text style flag.</Desc>
      </Param>
      <Param>
        <Name>textOffset</Name>
        <Type>realMode</Type>
        <Desc>Dimension text offset distance.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LineTo</Name>
    <Version>100</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a line object in the document. [[name]] draws from the current graphics pen position to the specified coordinate location. The line object is drawn with the current default attributes unless otherwise specified in the VectorScript routine.[[BR]][[BR]]</Description>
    <ShortDesc>Draws a line from the current pen position to (X,Y).</ShortDesc>
    <SeeAlso>Absolute, Relative</SeeAlso>
    <Example>LineTo(3,4);[[BR]]{draws a line from the current pen position to (3,4)}[[BR]]</Example>
    <ID>107</ID>
    <IDName>procLineTo</IDName>
    <SpecialOverride>GetLineTo</SpecialOverride>
    <InternalFunctionName>GetLineTo</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>Line endpoint.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LinkText</Name>
    <ChangedDate>2017:04:14T10:43:00</ChangedDate>
    <Version>100</Version>
    <Category>Database / Record</Category>
    <Type>Procedure</Type>
    <Description>Creates a linked text field in a newly created symbol. The specified text is linked to a record field, whose value is displayed by the text object.[[BR]][[BR]][[name]] must be called during symbol creation; the record to be associated with the linked text string must also exist at the time the link is created.</Description>
    <ShortDesc>Creates  linked text from the referenced text object.</ShortDesc>
    <SeeAlso>BeginSym,EndSym</SeeAlso>
    <Example>BeginSym('Symbol #2');[[BR]]  Oval(-3/4",1/2",3/4",-1/2");[[BR]]  TextFont(3);[[BR]]  TextSize(12.00037);[[BR]]  TextJust(1);[[BR]]  TextOrigin(0.8611111",0.5138889");[[BR]]  BeginText;[[BR]]   'Field 9 String'[[BR]]  EndText;[[BR]]  LinkText(LNewObj,'Sample Format','Field 1');[[BR]]EndSym;[[BR]]Record(LNewObj,'Sample Format');[[BR]]</Example>
    <ID>481</ID>
    <IDName>procLinkText</IDName>
    <SpecialOverride>GetLinkText</SpecialOverride>
    <InternalFunctionName>GetLinkText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object that will be linked to record.</Desc>
      </Param>
      <Param>
        <Name>rec</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Name of record that will be linked to text string.</Desc>
      </Param>
      <Param>
        <Name>fld</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Name of field that will be linked to text string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LLayer</Name>
    <Version>100</Version>
    <Category>Layers</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to the last layer in a Vectorworks document.[[BR]][[BR]]</Description>
    <ShortDesc>Returns a handle to the last layer of the document.</ShortDesc>
    <ID>255</ID>
    <IDName>funcLLayer</IDName>
    <InternalFunctionName>MP_LLayer</InternalFunctionName>
    <ModernName>LastLayer</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
  </Item>

  <Item>
    <Name>Ln</Name>
    <Version>100</Version>
    <Category>Math - General</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the natural logarithm of the specified value.</Description>
    <ShortDesc>Returns the natural logarithm of v.</ShortDesc>
    <ID>234</ID>
    <IDName>funcLn</IDName>
    <InternalFunctionName>MP_Ln</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>v</Name>
        <Type>realMode</Type>
        <Desc>Numeric value for which to find the natural logarithm.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LNewObj</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns a handle to the last object created by a VectorScript function call during the current script execution.[[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Returns a handle to the last object created during the execution of the VectorScript command.</ShortDesc>
    <Result>Returns a HANDLE to the most recently created object, otherwise returns NIL.</Result>
    <Comments>[As of 8.0.0b10][[BR]][[BR]]If the object has been deleted since it was created, this function returns NIL. It is recommended that you call LNewObj immediately after the function or procedure which created the object to avoid problems.</Comments>
    <ID>478</ID>
    <IDName>funcLNewObj</IDName>
    <InternalFunctionName>MP_LNewObj</InternalFunctionName>
    <ModernName>LastCreatedObj</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
  </Item>

  <Item>
    <Name>LoadCell</Name>
    <Version>100</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] inserts a value into a specified cell of the active worksheet. </Description>
    <ShortDesc>Places the specified value into a worksheet cell.</ShortDesc>
    <Comments>OBSOLETE for Version 9: see new SetWSCellFormula, SetWSCellBorder, SetWSCellAlignment, SetWSColumnWidth, SetWSCellTextFormat and SetWSCellNumberFormat. [VML 01/09/01]</Comments>
    <Example>SprdSheet(0,0,3,3);[[BR]]LoadCell(1,1,'= (14 + 2) * 3');[[BR]]{ inserts a formula into a cell }[[BR]][[BR]]SprdSheet(0,0,3,3);[[BR]]LoadCell(1,1,'Window Schedule');[[BR]]{ inserts a literal into a cell }[[BR]][[BR]]</Example>
    <ID>126</ID>
    <IDName>procLoadCell</IDName>
    <SpecialOverride>GetLoadCell</SpecialOverride>
    <InternalFunctionName>GetLoadCell</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>ro</Name>
        <Type>intMode</Type>
        <Desc>Worksheet row index.</Desc>
      </Param>
      <Param>
        <Name>col</Name>
        <Type>intMode</Type>
        <Desc>Worksheet column index.</Desc>
      </Param>
      <Param>
        <Name>entry</Name>
        <Type>stringMode</Type>
        <Desc>Worksheet entry value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LObject</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function LObject returns a handle to the last object in the active document.[[BR]]</Description>
    <ShortDesc>Returns a handle to the last object in the active document.</ShortDesc>
    <ID>256</ID>
    <IDName>funcLObject</IDName>
    <InternalFunctionName>MP_LObject</InternalFunctionName>
    <ModernName>LastObject</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Locus</Name>
    <Version>100</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a 2D locus object at the specified coordinate location. [[BR]]</Description>
    <ShortDesc>Draws a locus at (X,Y).</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	x, y :REAL;[[BR]]BEGIN[[BR]]	HCenter(FSActLayer, x, y);[[BR]]	Locus(x, y);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>108</ID>
    <IDName>procLocus</IDName>
    <SpecialOverride>ProcLocus</SpecialOverride>
    <InternalFunctionName>ProcLocus</InternalFunctionName>
    <ModernName>Locus2D</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinate location of new locus.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Locus3D</Name>
    <Version>600</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a new 3D locus in the document at the specified 3D coordinate location.[[BR]][[BR]]</Description>
    <ShortDesc>Draws a 3D locus at (X,Y,Z).</ShortDesc>
    <ID>563</ID>
    <IDName>procLocus3D</IDName>
    <SpecialOverride>MPCreateLocus3D</SpecialOverride>
    <InternalFunctionName>MPCreateLocus3D</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>d3PtMode</Type>
        <Desc>3D coordinates of new locus.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LPenBack</Name>
    <Version>100</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the background pen color for the active layer. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Sets the background pen color for the active layer.</ShortDesc>
    <Comments>Sets the background pen color for the active layer.[[BR]][[BR]][sd  8/14/98]</Comments>
    <ID>434</ID>
    <IDName>procLPenBack</IDName>
    <InternalFunctionName>MP_LPenBack</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LPenFore</Name>
    <Version>100</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the foreground pen color for the active layer. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Sets the foreground pen color for the active layer.</ShortDesc>
    <Comments>Sets the foreground pen color for the active layer.[[BR]][[BR]][sd 8/14/98]</Comments>
    <ID>433</ID>
    <IDName>procLPenFore</IDName>
    <InternalFunctionName>MP_LPenFore</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LSActLayer</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function LSActLayer returns a handle to the last selected object on the active layer. If no objects are selected,  the function returns NIL.[[BR]][[BR]]</Description>
    <ShortDesc>Return a handle to the last selected object on the active layer.</ShortDesc>
    <ID>257</ID>
    <IDName>funcLSActLayer</IDName>
    <InternalFunctionName>MP_LSActLayer</InternalFunctionName>
    <ModernName>LastSelActLayer</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
  </Item>

  <Item>
    <Name>Marker</Name>
    <Version>600</Version>
    <OldVersion>1300</OldVersion>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Marker defines a marker (arrowhead) style for the document. This marker style becomes the active style for the document.[[BR]][[BR]][[note:MarkerStyleNote]]</Description>
    <ShortDesc>Creates a new active marker style in the document - OBSOLETE procedure: Use SetDefaultBeginningMarker and/or SetDefaultEndMarker instead.</ShortDesc>
    <Comments>OBSOLETE for VW2008: Use SetDefaultBeginningMarker and/or SetDefaultEndMarker instead.[[BR]]See FMarker for parameter descriptions.[[BR]][[BR]][sd 8/14/98]</Comments>
    <Example>Marker(2,0.25,60);[[BR]]</Example>
    <ID>565</ID>
    <IDName>procMarker</IDName>
    <SpecialOverride>VWMarker</SpecialOverride>
    <InternalFunctionName>VWMarker</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
        <Desc>Marker style constant.</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>realMode</Type>
        <Desc>Marker size in inches measured in page space.  Legal values are 0.0 to 2.0.</Desc>
      </Param>
      <Param>
        <Name>ang</Name>
        <Type>intMode</Type>
        <Desc>Marker angle.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>MirrorXY3D</Name>
    <Version>502</Version>
    <Category>General Edit</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] mirrors the currently selected object through the XY plane.</Description>
    <ShortDesc>This function mirrors the currently selected objects through the XY plane.</ShortDesc>
    <ID>528</ID>
    <IDName>procMirrorXY3D</IDName>
    <SpecialOverride>MirrorXY3D</SpecialOverride>
    <InternalFunctionName>MirrorXY3D</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>MouseDown</Name>
    <Version>100</Version>
    <Category>User Interactive</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns TRUE if a mouse down event has occurred within the active document window.[[BR]]</Description>
    <ShortDesc>Returns TRUE if mouse is clicked. Also returns coordinate location.</ShortDesc>
    <Example>REPEAT[[BR]]UNTIL MouseDown(x1,y1);[[BR]]REPEAT[[BR]]UNTIL MouseDown(x2,y2);[[BR]]MoveTo(x1,y1);[[BR]]LineTo(x2,y2);[[BR]]</Example>
    <ID>380</ID>
    <IDName>funcMouseDown</IDName>
    <SpecialOverride>GetFuncMouseDown</SpecialOverride>
    <InternalFunctionName>GetFuncMouseDown</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtVarMode</Type>
        <Desc>Returns coordinates of mouse click.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Move</Name>
    <Version>100</Version>
    <Category>Command</Category>
    <Type>Procedure</Type>
    <Description>Sets the position of the graphics pen in the Vectorworks document by moving a specified distance from the current pen location. [[BR]][[BR]]Horizontal and vertical offsets from the initial location. The final position of the pen at a point whose coordinates are (x+moveDX, y+moveDY).[[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Moves the graphics pen from the current position to (x+dX,y+dY).</ShortDesc>
    <SeeAlso>MoveTo</SeeAlso>
    <Example>[[name]](6,1);[[BR]]{ moves the graphics pen 6 units to the right }[[BR]]{ and 1 unit up from the current position.    }</Example>
    <ID>109</ID>
    <IDName>procMove</IDName>
    <SpecialOverride>GetMove</SpecialOverride>
    <InternalFunctionName>GetMove</InternalFunctionName>
    <ModernName>MovePen</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>move</Name>
        <Type>tdPtMode</Type>
        <Desc>X-Y offset distance.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Move3D</Name>
    <Version>100</Version>
    <Category>Object Editing</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] moves the most recently created three-dimensional object a relative distance from it's original location. The object is moved relative to its center. [[BR]]</Description>
    <ShortDesc>Moves the most recently created 3D object relative to its current position.</ShortDesc>
    <Example>BeginXtrd(0',2");[[BR]]Rect(0",1",1",0");[[BR]]EndXtrd;[[BR]][[name]](3",1",2");[[BR]]</Example>
    <ID>194</ID>
    <IDName>procMove3D</IDName>
    <SpecialOverride>GetMove3D</SpecialOverride>
    <InternalFunctionName>GetMove3D</InternalFunctionName>
    <ModernName>MoveLastCreated3D</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>xDistance</Name>
        <Type>distanceMode</Type>
        <Desc>X offset distance.</Desc>
      </Param>
      <Param>
        <Name>yDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Y offset distance.</Desc>
      </Param>
      <Param>
        <Name>zDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Z offset ditance.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Move3DObj</Name>
    <Version>100</Version>
    <Category>Object Editing</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] moves the referenced object a specified  distance from its current location. Movement distances are calculated from the 3D center of the object. </Description>
    <ShortDesc>Moves the referenced object by specified offsets.</ShortDesc>
    <Example>[[name]](HandleToObj,2,4,0);</Example>
    <ID>350</ID>
    <IDName>procMove3DObj</IDName>
    <SpecialOverride>GetMoveXYZ</SpecialOverride>
    <InternalFunctionName>GetMoveXYZ</InternalFunctionName>
    <ModernName>MoveSelObj3D</ModernName>
    <Implemented>True</Implemented>
    <Placement3D>True</Placement3D>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>xDistance</Name>
        <Type>distanceMode</Type>
        <Desc>X offset distance.</Desc>
      </Param>
      <Param>
        <Name>yDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Y offset distance.</Desc>
      </Param>
      <Param>
        <Name>zDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Z offset distance.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>MoveObjs</Name>
    <Version>100</Version>
    <Category>Object Editing</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] moves object(s) a specified offset distance. The last two parameters, [[p:2]] and [[p:3]],  control which objects are offset by this procedure.[[BR]][[BR]][[note:MoveObjsTable]]</Description>
    <ShortDesc>Moves selected object(s) relative to their current position.</ShortDesc>
    <Example>[[name]](3,0,FALSE,FALSE);[[BR]]{ moves selected objects on active layer 3 units to the right }[[BR]]</Example>
    <ID>193</ID>
    <IDName>procMoveObjs</IDName>
    <SpecialOverride>GetMoveObjs</SpecialOverride>
    <InternalFunctionName>GetMoveObjs</InternalFunctionName>
    <ModernName>MoveSelObj</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>move</Name>
        <Type>tdPtMode</Type>
        <Desc>X-Y object offset distance.</Desc>
      </Param>
      <Param>
        <Name>allLayers</Name>
        <Type>boolMode</Type>
        <Desc>Move objects on all layers option setting.</Desc>
      </Param>
      <Param>
        <Name>allObjects</Name>
        <Type>boolMode</Type>
        <Desc>Move all objects option setting.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>MoveTo</Name>
    <Version>100</Version>
    <Category>Command</Category>
    <Type>Procedure</Type>
    <Description>Sets the position of the graphics pen in the Vectorworks document using absolute coordinate values. The parameter specifies the X-Y coordinate location where the pen should be moved.[[BR]][[BR]]</Description>
    <ShortDesc>Moves the graphics pen from the current position to (X,Y).</ShortDesc>
    <SeeAlso>Move</SeeAlso>
    <Example>[[name]](4,3);[[BR]]{moves the graphics pen to (4,3)}</Example>
    <ID>110</ID>
    <IDName>procMoveTo</IDName>
    <SpecialOverride>GetMoveTo</SpecialOverride>
    <InternalFunctionName>GetMoveTo</InternalFunctionName>
    <ModernName>MovePenTo</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>X-Y coordinate location.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NameClass</Name>
    <Version>100</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Creates a new class in a Vectorworks document, which then become the active class.[[BR]]If the specified class already exists, then it will become the active class of the document.[[BR]][[BR]]Note: [[note:ClassName]][[BR]][[BR]]</Description>
    <ShortDesc>Creates a new active class or sets the active class of the document.</ShortDesc>
    <Example>[[name]]('Revisions');[[BR]]Rect(4,4,6,6);[[BR]][[BR]]{Create a class 'Revisions' in the document}[[BR]]{The rectangle is then assigned this class }[[BR]]</Example>
    <ID>150</ID>
    <IDName>procNameClass</IDName>
    <InternalFunctionName>MP_NameClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NameList</Name>
    <Version>100</Version>
    <Category>Object Names</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Function [[name]] returns the specified object name from the object name list. </Description>
    <ShortDesc>Returns the specified name from the name list.</ShortDesc>
    <ID>326</ID>
    <IDName>funcNameList</IDName>
    <InternalFunctionName>MP_NameList</InternalFunctionName>
    <ModernName>NameByIndex</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>longMode</Type>
        <Desc>Name list position index (in a arange of 1 - n).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NameNum</Name>
    <Version>100</Version>
    <Category>Object Names</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the number of different object names in the active Vectorworks document.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the number of names in the name list.</ShortDesc>
    <ID>302</ID>
    <IDName>funcNameNum</IDName>
    <InternalFunctionName>MP_NameNum</InternalFunctionName>
    <ModernName>NumNames</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>NameObject</Name>
    <Version>100</Version>
    <Category>Object Names</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] assigns an object name to the next object created.</Description>
    <ShortDesc>Assigns a user specified name to the most recent VectorScript created object.</ShortDesc>
    <Example>[[name]]('Part 5257');[[BR]]Rect(0,2,2,0);[[BR]]</Example>
    <ID>149</ID>
    <IDName>procNameObject</IDName>
    <InternalFunctionName>MP_NameObject</InternalFunctionName>
    <ModernName>NameObj</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objName</Name>
        <Type>stringMode</Type>
        <Desc>Name to be assigned to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NewField</Name>
    <ChangedDate>2017:04:14T10:43:00</ChangedDate>
    <Version>100</Version>
    <Category>Database / Record</Category>
    <Type>Procedure</Type>
    <Description>Creates a new field in a specified record format. If the record does not exist, a new one is created using the specified record name.[[BR]][[BR]][[note:FieldTypeConstantTable]][[BR]][[BR]][[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Assigns a new field to the specified record.</ShortDesc>
    <Example>NewField('Part Info','Serial No.','A-0000',4,0);[[BR]]</Example>
    <ID>475</ID>
    <IDName>procNewField</IDName>
    <InternalFunctionName>MP_NewField</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>recName</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Name of record to which field will be added. </Desc>
      </Param>
      <Param>
        <Name>fieldName</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Name of new field.</Desc>
      </Param>
      <Param>
        <Name>fieldValue</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Default value for new field.</Desc>
      </Param>
      <Param>
        <Name>fType</Name>
        <Type>intMode</Type>
        <Desc>Data type of new field.</Desc>
      </Param>
      <Param>
        <Name>fFlag</Name>
        <Type>intMode</Type>
        <Desc>Display style of field.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NewSprdSheet</Name>
    <Version>800</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a new worksheet in a Vectorworks document.[[BR]]</Description>
    <ShortDesc>Creates a new worksheet in a Vectorworks document.</ShortDesc>
    <Comments>OBSOLETE for Version 9: see new CreateWS and ShowWS. [VML 01/09/01]</Comments>
    <Example>[[name]]('Window Schedule',12,24,5,8,TRUE,FALSE);</Example>
    <ID>598</ID>
    <IDName>procNewSprdSheet</IDName>
    <SpecialOverride>ProcNewSprdSheet</SpecialOverride>
    <InternalFunctionName>ProcNewSprdSheet</InternalFunctionName>
    <ModernName>NewWorksheet</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Name of new worksheet.</Desc>
      </Param>
      <Param>
        <Name>location</Name>
        <Type>globPtMode</Type>
        <Desc>Insertion point of worksheet.</Desc>
      </Param>
      <Param>
        <Name>rows</Name>
        <Type>intMode</Type>
        <Desc>Number of rows.</Desc>
      </Param>
      <Param>
        <Name>columns</Name>
        <Type>intMode</Type>
        <Desc>Number of columns.</Desc>
      </Param>
      <Param>
        <Name>showOnDrawing</Name>
        <Type>boolMode</Type>
        <Desc>Display worksheet in document.</Desc>
      </Param>
      <Param>
        <Name>openAfterCreate</Name>
        <Type>boolMode</Type>
        <Desc>Open worksheet after creation.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NextDObj</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns the next deselected object after the referenced object in a list. If the end of the list is reached, the function returns NIL.[[BR]][[BR]]</Description>
    <ShortDesc>Returns a handle to the next deselected object after the referenced object.</ShortDesc>
    <Example>handleToObject:=FObject;[[BR]]WHILE handleToObject &lt;&gt; NIL DO BEGIN[[BR]]  SetSelect(handleToObject);[[BR]]  handleToObject:=[[name]](handleToObject);[[BR]]END;[[BR]]{ selects all deselected objects }[[BR]]</Example>
    <ID>262</ID>
    <IDName>funcNextDObj</IDName>
    <InternalFunctionName>MP_NextDObj</InternalFunctionName>
    <ModernName>NextDeselObj</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NextLayer</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function NextLayer returns a handle to the next layer in the document after the referenced. If the end of the list has been reached, the function returns NIL.[[BR]][[BR]]</Description>
    <ShortDesc>Returns a handle to the next layer after the referenced layer.</ShortDesc>
    <Example>handleToLayer:=FLayer;[[BR]]WHILE handleToLayer &lt;&gt; NIL DO BEGIN[[BR]]  SysBeep;[[BR]]  handleToLayer:=[[name]](handleToLayer);[[BR]]END; [[BR]]{ will process through all the layers in the list }</Example>
    <ID>263</ID>
    <IDName>funcNextLayer</IDName>
    <InternalFunctionName>MP_NextLayer</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to layer.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NextObj</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns the next object in any list . If the end of the list is reached, the function returns NIL. This procedure can be used with other handle routines such as FirstIn3D,FInGroup, FirstInSymDef, or FLayer.[[BR]][[BR]]</Description>
    <ShortDesc>Returns a handle to the next object after the referenced object.</ShortDesc>
    <Example>handleToObject:=FObject;[[BR]]WHILE handleToObject &lt;&gt; NIL DO BEGIN[[BR]]  i:=i+1;[[BR]]  handleToObject:=[[name]](handleToObject);[[BR]]END;[[BR]]</Example>
    <ID>264</ID>
    <IDName>funcNextObj</IDName>
    <InternalFunctionName>MP_NextObj</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object,  group, or  symbol definition.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NextSObj</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns the next selected object in a list. If the end of the list is reached, the function returns NIL.[[BR]][[BR]]</Description>
    <ShortDesc>Returns a handle to the next selected object after the referenced object.</ShortDesc>
    <ID>265</ID>
    <IDName>funcNextSObj</IDName>
    <InternalFunctionName>MP_NextSObj</InternalFunctionName>
    <ModernName>NextSelObj</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NextSymDef</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function NextSymDef returns a handle to the next definition in the symbol library after the referenced symbol. If the end of the list has been reached, the function returns NIL.[[BR]][[BR]]</Description>
    <ShortDesc>Returns a handle to the next symbol definition in the documents' symbol list.</ShortDesc>
    <ID>270</ID>
    <IDName>funcNextSymDef</IDName>
    <InternalFunctionName>MP_NextSymDef</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>symHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to symbol definition in library.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Num2Str</Name>
    <ChangedDate>2009:07:16T15:56:00</ChangedDate>
    <Version>100</Version>
    <Category>Strings</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Function [[name]] converts a REAL value to a string and returns the value.[[BR]][[BR]]Parameter [[p:1]] has a range of -1 to 10; if -1 is specified, the value will be returned in scientific notation.[[BR]][[BR]]</Description>
    <ShortDesc>Converts the specified REAL value to a string.</ShortDesc>
    <Example>oldnumValue:=232.5148;[[BR]]newStrValue:=[[name]](3,oldnumValue);[[BR]]{would return '232.515'}</Example>
    <ID>248</ID>
    <IDName>funcNum2Str</IDName>
    <SpecialOverride>GetNum2Str</SpecialOverride>
    <InternalFunctionName>GetNum2Str</InternalFunctionName>
    <ModernName>NumToScalarString</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>decPlace</Name>
        <Type>intMode</Type>
        <Desc>Number of decimal places.</Desc>
      </Param>
      <Param>
        <Name>v</Name>
        <Type>realMode</Type>
        <Desc>Numeric value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Num2StrF</Name>
    <Version>100</Version>
    <Category>Strings</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Function [[name]] converts a specified REAL value into a string. The numeric value will be converted and displayed in the current unit settings of the drawing.[[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Converts the specified REAL value to a string using the current units settings.</ShortDesc>
    <Example>oldnumValue:=23.45;[[BR]]newStrValue:=[[name]](oldnumValue);[[BR]]{would return 1'-11 1/2"}</Example>
    <ID>400</ID>
    <IDName>funcNum2StrF</IDName>
    <SpecialOverride>GetNum2StrF</SpecialOverride>
    <InternalFunctionName>GetNum2StrF</InternalFunctionName>
    <ModernName>NumToUnitString</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>vDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Numeric value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NumDashStyles</Name>
    <ChangedDate>2018:01:09T13:13:00</ChangedDate>
    <Version>400</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the number of available line dash patterns.</Description>
    <ShortDesc>Returns the number of available line dash patterns.</ShortDesc>
    <Comments>Returns the number of available line dash patterns.[[BR]][[BR]][sd 8/18/98]</Comments>
    <Example>numLS:=[[name]];</Example>
    <ID>517</ID>
    <IDName>funcNumDashStyles</IDName>
    <SpecialOverride>GetNumDashStyles</SpecialOverride>
    <InternalFunctionName>GetNumDashStyles</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>NumFields</Name>
    <Version>100</Version>
    <Category>Database / Record</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the number of fields in the referenced record.[[BR]]</Description>
    <ShortDesc>Returns the number of fields in the referenced record.</ShortDesc>
    <Example>totalFields:=NumFields(HandleToRecord);[[BR]]</Example>
    <ID>484</ID>
    <IDName>funcNumFields</IDName>
    <InternalFunctionName>MP_NumFields</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to record.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NumLayers</Name>
    <Version>100</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function NumLayers returns the current number of layers within the active document.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the number of layers in the active document.</ShortDesc>
    <ID>300</ID>
    <IDName>funcNumLayers</IDName>
    <InternalFunctionName>MP_NumLayers</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>NumObj</Name>
    <Version>100</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the number of objects on the referenced layer.[[BR]]</Description>
    <ShortDesc>Returns the number of objects on the referenced layer.</ShortDesc>
    <ID>291</ID>
    <IDName>funcNumObj</IDName>
    <InternalFunctionName>MP_NumObj</InternalFunctionName>
    <ModernName>NumObjsOnLayer</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to layer.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NumRecords</Name>
    <Version>100</Version>
    <Category>Database / Record</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the number of records attached to the referenced object. [[BR]][[BR]]</Description>
    <ShortDesc>Returns the number of records attached to the referenced object.</ShortDesc>
    <Example>numAttached:=NumRecords(HandleToObject);[[BR]]</Example>
    <ID>483</ID>
    <IDName>funcNumRecords</IDName>
    <InternalFunctionName>MP_NumRecords</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NumSObj</Name>
    <Version>100</Version>
    <Category>Selection</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the number of selected objects on the referenced layer.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the number of selected objects on the referenced layer.</ShortDesc>
    <ID>292</ID>
    <IDName>funcNumSObj</IDName>
    <InternalFunctionName>MP_NumSObj</InternalFunctionName>
    <ModernName>NumSelObjsOnLayer</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to layer.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Open</Name>
    <ChangedDate>2017:04:05T11:45:00</ChangedDate>
    <Version>100</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>Procedure Open opens a ASCII text file for reading.[[BR]][[BR]]Remember to use Close when you are finished reading or writing to a file.[[BR]][[BR]][[note:FilePathNote]]</Description>
    <ShortDesc>Opens a file for reading.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	fileName :STRING;[[BR]]BEGIN[[BR]]	UseDefaultFileErrorHandling(FALSE);[[BR]]	fileName := 'Plug-Ins\Common\Data\Callout Prefs.txt';[[BR]]	Open(fileName);[[BR]]	AlrtDialog(Concat(GetLastFileErr));[[BR]]	Close(fileName);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>214</ID>
    <IDName>procOpen</IDName>
    <InternalFunctionName>MP_Open</InternalFunctionName>
    <ModernName>OpenFile</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>fileName</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Name or path of file to open.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Option</Name>
    <Version>100</Version>
    <Category>User Interactive</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>[[name]] return TRUE if the Option key (Mac) or Alt key (Windows) was depressed during the last user event. This function operates with the MouseDown, KeyDown, AutoKey, GetPt, GetPtL, GetLine, and GetRect calls.</Description>
    <ShortDesc>Returns TRUE if the Option/Alt key was pressed.</ShortDesc>
    <SeeAlso>MouseDown,KeyDown,AutoKey</SeeAlso>
    <ID>401</ID>
    <IDName>funcOption</IDName>
    <InternalFunctionName>MP_Option</InternalFunctionName>
    <ModernName>OptionKey</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Oval</Name>
    <Version>100</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Procedure Oval creates an oval object in a Vectorworks document.[[BR]][[BR]]</Description>
    <ShortDesc>Draws an oval in a Vectorworks document.</ShortDesc>
    <ID>111</ID>
    <IDName>procOval</IDName>
    <InternalFunctionName>MP_Oval</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p1</Name>
        <Type>globPtMode</Type>
        <Desc>Top left coordinate of oval bounding box.</Desc>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>globPtMode</Type>
        <Desc>Bottom right coordinate of oval bounding box.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PenBack</Name>
    <Version>100</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] set the active pen background color for the document. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Sets the active pen background color.</ShortDesc>
    <SeeAlso>RGBToColorIndex,ColorIndexToRGB</SeeAlso>
    <Example>[[name]](65535,0,39321);[[BR]]</Example>
    <ID>155</ID>
    <IDName>procPenBack</IDName>
    <InternalFunctionName>MP_PenBack</InternalFunctionName>
    <ModernName>SetActPenBack</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color value to be set as active pen background.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PenFore</Name>
    <Version>100</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the active pen foreground color for the document. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Sets the active pen foreground color.</ShortDesc>
    <SeeAlso>RGBToColorIndex,ColorIndexToRGB</SeeAlso>
    <Example>[[name]](65535,0,39321);[[BR]]</Example>
    <ID>154</ID>
    <IDName>procPenFore</IDName>
    <InternalFunctionName>MP_PenFore</InternalFunctionName>
    <ModernName>SetActPenFore</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color value to be set as active pen foreground.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PenGrid</Name>
    <Version>100</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the snap grid distance in the document.[[BR]][[BR]]</Description>
    <ShortDesc>Sets the active snap grid width.</ShortDesc>
    <ID>178</ID>
    <IDName>procPenGrid</IDName>
    <InternalFunctionName>MP_PenGrid</InternalFunctionName>
    <ModernName>SetSnapGridSpacing</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>gridDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Pen grid spacing.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PenLoc</Name>
    <Version>100</Version>
    <Category>Command</Category>
    <Type>Procedure</Type>
    <Description>Returns the current coordinate location of the graphics pen.[[BR]]</Description>
    <ShortDesc>Returns the current location of the graphics pen.</ShortDesc>
    <Example>[[name]](theXCoord,theYCoord);[[BR]]</Example>
    <ID>112</ID>
    <IDName>procPenLoc</IDName>
    <SpecialOverride>ProcPenLoc</SpecialOverride>
    <InternalFunctionName>ProcPenLoc</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtVarMode</Type>
        <Desc>The current location of the graphics pen.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PenPat</Name>
    <ChangedDate>2017:10:26T09:42:00</ChangedDate>
    <Version>100</Version>
    <OldVersion Mode="AsError">1800</OldVersion>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Deprecated - will generate error. Use PenPatN instead.[[BR]][[BR]]</Description>
    <ShortDesc>Deprecated - will generate error. Use PenPatN instead.</ShortDesc>
    <SeeAlso>PenPatN</SeeAlso>
    <Comments>Deprecated - will generate error. Use PenPatN instead.</Comments>
    <Example>PenPat(25);[[BR]]{ uses fill pattern 25 as the active pen pattern }[[BR]][[BR]]PenPat(-3);[[BR]]{ sets a linestyle as the active pen pattern }</Example>
    <ID>158</ID>
    <IDName>procPenPat</IDName>
    <InternalFunctionName>MP_PenPat</InternalFunctionName>
    <ModernName>SetActPenPat</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>patNumber</Name>
        <Type>intMode</Type>
        <Desc>Pattern/linestyle ID value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PenSize</Name>
    <Version>100</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the active line weight for the document.</Description>
    <ShortDesc>Sets the active line weight setting.</ShortDesc>
    <Example>[[name]](28);[[BR]]</Example>
    <ID>159</ID>
    <IDName>procPenSize</IDName>
    <InternalFunctionName>MP_PenSize</InternalFunctionName>
    <ModernName>SetActPenSize</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>lw</Name>
        <Type>intMode</Type>
        <Desc>Line weight (in mils). Fourteen (14) mils equals one pixel.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PickObject</Name>
    <Version>100</Version>
    <Category>Utility</Category>
    <CategorySecondary>Handles</CategorySecondary>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to an object in the document. The function receives a coordinate location, specified by parameter [[p:1]], and checks this location for the presence of an object. If an object exists at the location, the function returns a handle to the object.[[BR]]</Description>
    <ShortDesc>Returns a handle to the object located at the specified location.</ShortDesc>
    <SeeAlso>GetPickObjectInfo, ForEachObjectAtPoint</SeeAlso>
    <Example>FUNCTION UserObjectPick :HANDLE;[[BR]]VAR [[BR]]	x, y :REAL;[[BR]]BEGIN[[BR]]	GetPt(x, y);[[BR]]	UserObjectPick := PickObject(x, y);[[BR]]END;[[BR]][[BR]]</Example>
    <ID>412</ID>
    <IDName>funcPickObject</IDName>
    <SpecialOverride>GetPickObject</SpecialOverride>
    <InternalFunctionName>GetPickObject</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinate location to test for object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Pos</Name>
    <Version>100</Version>
    <Category>Strings</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] searches for a specified substring contained within in a target string.[[BR]][[BR]][[name]] returns the position of the substring. If the string is not found, 0 is returned.[[BR]]</Description>
    <ShortDesc>Searches for a specified substring within a target string. Returns the position of the substring(if found).</ShortDesc>
    <Example>Loc:=Pos('samp','A sample string');[[BR]]</Example>
    <ID>242</ID>
    <IDName>funcPos</IDName>
    <InternalFunctionName>MP_Pos</InternalFunctionName>
    <ModernName>SubstringPosition</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>subStr</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Substring to be located.</Desc>
      </Param>
      <Param>
        <Name>str</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Target string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PrevDObj</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns the previous deselected object in a list of objects . If the end of the object list is reached, the function returns NIL.[[BR]][[BR]]</Description>
    <ShortDesc>Returns a handle to the next deselected object prior to the referenced object.</ShortDesc>
    <ID>266</ID>
    <IDName>funcPrevDObj</IDName>
    <InternalFunctionName>MP_PrevDObj</InternalFunctionName>
    <ModernName>PrevDeselObj</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PrevLayer</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to the layer in the document preceding the referenced layer.</Description>
    <ShortDesc>Returns a handle to the next layer prior to the referenced layer.</ShortDesc>
    <ID>267</ID>
    <IDName>funcPrevLayer</IDName>
    <InternalFunctionName>MP_PrevLayer</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to layer.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PrevObj</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns the object in any list which precedes the specified object.  If the end of the list is reached, the function returns NIL. [[BR]][[BR]]</Description>
    <ShortDesc>Returns a handle to the next object prior to the referenced object.</ShortDesc>
    <ID>268</ID>
    <IDName>funcPrevObj</IDName>
    <InternalFunctionName>MP_PrevObj</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object,  group, or  symbol definition.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PrevSObj</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns the previous selected object in the list preceding the referenced object.[[BR]]</Description>
    <ShortDesc>Returns a handle to the next selected object prior to the referenced object.</ShortDesc>
    <ID>269</ID>
    <IDName>funcPrevSObj</IDName>
    <InternalFunctionName>MP_PrevSObj</InternalFunctionName>
    <ModernName>PrevSelObj</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PrevSymDef</Name>
    <Version>100</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to the symbol definition in the symbol library preceding the referenced definition.[[BR]]</Description>
    <ShortDesc>Returns a handle to the previous symbol definition in the documents' symbol list.</ShortDesc>
    <ID>271</ID>
    <IDName>funcPrevSymDef</IDName>
    <InternalFunctionName>MP_PrevSymDef</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>symHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to symbol definition.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PrimaryUnits</Name>
    <Version>700</Version>
    <Category>Units</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] specifies the primary units settings for the active document. The primary units setting is used by the document for all measurement entry and display values in the document. [[BR]][[BR]][[note:UnitSettingTable]][[BR]][[BR]][[note:UnitsFormatTable]]</Description>
    <ShortDesc>Sets the primary units for the active document.</ShortDesc>
    <Comments>[sd 8/18/98]</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	style :INTEGER;[[BR]]	prec, dimPrec :LONGINT;[[BR]]	format, angPrec :INTEGER;[[BR]]	showMark, dispFrac :BOOLEAN;[[BR]]	outStr :STRING;[[BR]]BEGIN[[BR]]	outStr := '';[[BR]]	GetPrimaryUnitInfo(style, prec, dimPrec, format, angPrec, showMark, dispFrac);[[BR]]	FOR style := 0 to 16 DO BEGIN[[BR]]		PrimaryUnits(style, prec, dimPrec, format, angPrec, showMark, dispFrac);[[BR]]		outStr := Concat(outStr, Chr(13), style, ': ', GetPrefReal(152));[[BR]]	END;[[BR]]	AlrtDialog(outStr);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>587</ID>
    <IDName>procPrimaryUnits</IDName>
    <SpecialOverride>PrimaryUnits</SpecialOverride>
    <InternalFunctionName>PrimaryUnits</InternalFunctionName>
    <ModernName>SetActPrimaryUnits</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
        <Desc>Active primary unit style for document.</Desc>
      </Param>
      <Param>
        <Name>prec</Name>
        <Type>longMode</Type>
        <Desc>Display precision.</Desc>
      </Param>
      <Param>
        <Name>dimPrec</Name>
        <Type>longMode</Type>
        <Desc>Dimension precision.</Desc>
      </Param>
      <Param>
        <Name>format</Name>
        <Type>intMode</Type>
        <Desc>Decimal formatting.</Desc>
      </Param>
      <Param>
        <Name>angPrec</Name>
        <Type>intMode</Type>
        <Desc>Angular precision.</Desc>
      </Param>
      <Param>
        <Name>showMark</Name>
        <Type>boolMode</Type>
        <Desc>Unit mark display setting.</Desc>
      </Param>
      <Param>
        <Name>dispFrac</Name>
        <Type>boolMode</Type>
        <Desc>Fractional display setting.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Projection</Name>
    <Version>400</Version>
    <Category>View / Zoom</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the projection mode of a Vectorworks document.[[BR]][[BR]]Parameters [[p:3]], [[p:4]], and [[p:5]] are used only in perspective projection mode.[[BR]][[BR]]</Description>
    <ShortDesc>Sets the view projection mode of the active document.</ShortDesc>
    <Example>Projection(1,2,3',-2,-2,2,2);[[BR]]</Example>
    <ID>522</ID>
    <IDName>procProjection</IDName>
    <SpecialOverride>MPProjection</SpecialOverride>
    <InternalFunctionName>MPProjection</InternalFunctionName>
    <ModernName>SetProjection</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>proj</Name>
        <Type>intMode</Type>
        <Desc>Projection mode of document.</Desc>
      </Param>
      <Param>
        <Name>rMode</Name>
        <Type>intMode</Type>
        <Desc>Render mode of document.</Desc>
      </Param>
      <Param>
        <Name>viewDistance</Name>
        <Type>distanceMode</Type>
        <Desc>View length.</Desc>
      </Param>
      <Param>
        <Name>clip1</Name>
        <Type>globPtMode</Type>
        <Desc>Top left coordinate of clipping rectangle.</Desc>
      </Param>
      <Param>
        <Name>clip2</Name>
        <Type>globPtMode</Type>
        <Desc>Bottom right coordinate of clipping rectangle.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PtDialog</Name>
    <ChangedDate>2017:07:05T17:13:00</ChangedDate>
    <Version>100</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] displays a dialog box which requests the user to enter a coordinate (point) value.[[BR]]</Description>
    <ShortDesc>Displays a dialog box that requests the user to input X-Y coordinates.</ShortDesc>
    <Example>PtDialog('Enter a coordinate.','0','0',cX,cY);[[BR]]</Example>
    <ID>202</ID>
    <IDName>procPtDialog</IDName>
    <SpecialOverride>GetProcPtDialog</SpecialOverride>
    <InternalFunctionName>GetProcPtDialog</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>request</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Dialog user prompt string.</Desc>
      </Param>
      <Param>
        <Name>defaultX</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Default value for input field.</Desc>
      </Param>
      <Param>
        <Name>defaultY</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Default value for input field.</Desc>
      </Param>
      <Param>
        <Name>x</Name>
        <Type>rVarMode</Type>
        <Desc>Returns user input X value.</Desc>
      </Param>
      <Param>
        <Name>y</Name>
        <Type>rVarMode</Type>
        <Desc>Returns user input Y value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PtDialog3D</Name>
    <ChangedDate>2017:07:05T17:14:00</ChangedDate>
    <Version>100</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] displays a dialog box which requests the user to enter a 3D coordinate (point) value.[[BR]]</Description>
    <ShortDesc>Displays a dialog box that allows a user to input a 3D coordinate point.</ShortDesc>
    <Example>PtDialog3D('Enter the 3D location:','0','0','0',x,y,z);[[BR]]</Example>
    <ID>208</ID>
    <IDName>procPtDialog3D</IDName>
    <InternalFunctionName>MP_PtDialog3D</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>displayStr</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Dialog user prompt string.</Desc>
      </Param>
      <Param>
        <Name>xStr</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Default value for input field.</Desc>
      </Param>
      <Param>
        <Name>yStr</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Default value for input field.</Desc>
      </Param>
      <Param>
        <Name>zStr</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Default value for input field.</Desc>
      </Param>
      <Param>
        <Name>xPt</Name>
        <Type>rVarMode</Type>
        <Desc>Returns user input X value.</Desc>
      </Param>
      <Param>
        <Name>yPt</Name>
        <Type>rVarMode</Type>
        <Desc>Returns user input Y value.</Desc>
      </Param>
      <Param>
        <Name>zPt</Name>
        <Type>rVarMode</Type>
        <Desc>Returns user input Z value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PtInPoly</Name>
    <Version>100</Version>
    <Category>Graphic Calculation</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns TRUE if the point specified point lies within, or on, the referenced polygon or polyline object.</Description>
    <ShortDesc>Returns TRUE if the point (x,y) is inside the referenced polygon.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	polyHandle :HANDLE;[[BR]]	locusHandle :HANDLE;[[BR]]	x, y :REAL;[[BR]]BEGIN[[BR]]	CallTool(-204); polyHandle := FSActLayer;[[BR]]	CallTool(-221); locusHandle := FSActLayer;[[BR]]	GetLocPt(locusHandle, x, y);[[BR]]	Message(PtInPoly(x, y, polyHandle));[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>346</ID>
    <IDName>funcPtInPoly</IDName>
    <SpecialOverride>GetPtInPoly</SpecialOverride>
    <InternalFunctionName>GetPtInPoly</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>X-Y coordinate point.</Desc>
      </Param>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to polygon.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PtInRect</Name>
    <Version>100</Version>
    <Category>Graphic Calculation</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether the coordinate location is located within the specified rectangular boundary.[[BR]][[BR]]</Description>
    <ShortDesc>Returns TRUE if the point (x,y) is located within the specified rectangular boundary.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	pointX, pointY, rect1X, rect1Y, rect2X, rect2Y :REAL;[[BR]]BEGIN[[BR]]	pointX := 1;[[BR]]	pointY := 1;[[BR]]	rect1X := 0;[[BR]]	rect1Y := 2;[[BR]]	rect2X := 2;[[BR]]	rect2Y := 0;[[BR]]	Message(PtInRect(pointX, pointY, rect1X, rect1Y, rect2X, rect2Y));[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>391</ID>
    <IDName>funcPtInRect</IDName>
    <SpecialOverride>MPPtInRect</SpecialOverride>
    <InternalFunctionName>MPPtInRect</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>point</Name>
        <Type>globPtMode</Type>
        <Desc>X-Y coordinate point location.</Desc>
      </Param>
      <Param>
        <Name>rect1</Name>
        <Type>globPtMode</Type>
        <Desc>Top left coordinate of rectangular area.</Desc>
      </Param>
      <Param>
        <Name>rect2</Name>
        <Type>globPtMode</Type>
        <Desc>Bottom right coordinate of rectangular area.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PutFile</Name>
    <ChangedDate>2017:04:14T10:35:00</ChangedDate>
    <Version>100</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] displays a standard file dialog which requests the user to select or create a text file for output.[[BR]]</Description>
    <ShortDesc>Returns a path and file name of a user selected output file.</ShortDesc>
    <SeeAlso>GetLastFileErr,Rewrite,GetFile,Open,Close</SeeAlso>
    <Example>PROCEDURE PutFileExample;[[BR]]VAR[[BR]]	fileName :STRING;[[BR]]BEGIN[[BR]]	PutFile('Select the file to create:', 'New File.txt', fileName);[[BR]]	Message(fileName);[[BR]]	IF NOT DidCancel THEN BEGIN[[BR]]		WriteLn('some text');[[BR]]		Close(fileName);[[BR]]	END;[[BR]]END;[[BR]]RUN(PutFileExample);</Example>
    <ID>220</ID>
    <IDName>procPutFile</IDName>
    <SpecialOverride>GetPutFile</SpecialOverride>
    <InternalFunctionName>GetPutFile</InternalFunctionName>
    <ModernName>PutFileDialog</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>commentStr</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>User prompt string for dialog.</Desc>
      </Param>
      <Param>
        <Name>defaultStr</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Default file name string.</Desc>
      </Param>
      <Param>
        <Name>fileName</Name>
        <Type>eCharDynarrayVarMode</Type>
        <Desc>Returns name of the user selected file.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Rad2Deg</Name>
    <Version>100</Version>
    <Category>Math - General</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] converts the specified value (in radians) to degrees.</Description>
    <ShortDesc>Converts radians into decimal degrees.</ShortDesc>
    <ID>237</ID>
    <IDName>funcRad2Deg</IDName>
    <InternalFunctionName>MP_Rad2Deg</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>radianValue</Name>
        <Type>realMode</Type>
        <Desc>Value in radians.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RealDialog</Name>
    <ChangedDate>2017:07:05T17:14:00</ChangedDate>
    <Version>100</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] displays a dialog box which requests the user to enter a REAL value. [[name]] automatically screens for valid numeric input.[[BR]][[BR]]</Description>
    <ShortDesc>Displays a dialog box that requests the user to input a real number.</ShortDesc>
    <Example>RealValue:=RealDialog('Enter a real value:','0.00');[[BR]]</Example>
    <ID>203</ID>
    <IDName>funcRealDialog</IDName>
    <InternalFunctionName>MP_RealDialog</InternalFunctionName>
    <Implemented>True</Implemented>
    <UseRoutineSelector>GetDialogProcD3Pt</UseRoutineSelector>
    <Params>
      <Param>
        <Name>request</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Dialog user prompt string.</Desc>
      </Param>
      <Param>
        <Name>default</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Default value for input field.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Record</Name>
    <ChangedDate>2017:04:14T10:43:00</ChangedDate>
    <Version>100</Version>
    <Category>Database / Record</Category>
    <Type>Procedure</Type>
    <Description>Replaces an existing record with a new version of the same record. Parameter [[p:2]] specifies the record to be updated.</Description>
    <ShortDesc>Deletes existing an record and replaces it with a new version of that record</ShortDesc>
    <Comments>Delete any existing record named "s" on "h", Create new record for format named "s", attach to "h".[[BR]][[BR]][sd 8/14/98]</Comments>
    <Example>Record(handleToObj,'Vendor Information');</Example>
    <ID>476</ID>
    <IDName>procRecord</IDName>
    <InternalFunctionName>MP_Record</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>s</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Name of record to be updated.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Rect</Name>
    <Version>100</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a rectangle object in a Vectorworks document.[[BR]][[BR]]The procedure will accept coordinate definitions by either of two methods : coordinate values or distance angle values. Coordinate values are the absolute coordinate locations(in the documents' coordinate system) and are expressed as x and y values. [[BR]][[BR]]Distance-angle values are expressed as a distance and angle from the current pen position. For Rect, two distance angle pairs are required to specify the top left and bottom right of the rectangle object.[[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Draws a rectangle with top left at (x1,y1) and bottom right at (x2,y2).</ShortDesc>
    <SeeAlso>RRect</SeeAlso>
    <Example>[[name]](0,2,2,1);[[BR]]{creates a rectangle object by coordinate values}[[BR]][[BR]][[name]](0.5,#90,2,#0);[[BR]]{creates a rectangle object by dist-angle values}[[BR]]</Example>
    <ID>115</ID>
    <IDName>procRect</IDName>
    <InternalFunctionName>MP_Rect</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p1</Name>
        <Type>globPtMode</Type>
        <Desc>Top left coordinate of rectangle.</Desc>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>globPtMode</Type>
        <Desc>Bottom right coordinate of rectangle.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ReDraw</Name>
    <Version>100</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] invokes a screen redraw of newly created objects in the active Vectorworks document. If new objects are to be manipulated using procedures which operate on selected objects, a call to ReDraw should precede the selected object routines to ensure that all new objects are correctly identified.[[BR]][[BR]]</Description>
    <ShortDesc>Invokes a redraw of newly created objects.</ShortDesc>
    <ID>179</ID>
    <IDName>procReDraw</IDName>
    <SpecialOverride>MPRedraw</SpecialOverride>
    <InternalFunctionName>MPRedraw</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>ReDrawAll</Name>
    <Version>100</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] invokes a full screen redraw of the active Vectorworks document. [[name]] is used when the document view needs to be refreshed prior to additional operation being performed in the document.[[BR]][[BR]]</Description>
    <ShortDesc>Invokes a redraw of the entire active document.</ShortDesc>
    <ID>343</ID>
    <IDName>procReDrawAll</IDName>
    <SpecialOverride>MPRedrawAll</SpecialOverride>
    <InternalFunctionName>MPRedrawAll</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>ResetBBox</Name>
    <Version>100</Version>
    <Category>Object Editing</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] forces the bounding box information for the specified object to be recomputed based on the objects' current geometry. [[BR]][[BR]]Call this procedure after modifying an object to force a redraw of the object.</Description>
    <ShortDesc>Forces the bounding box information to be recomputed based on current geometry.</ShortDesc>
    <Comments>Forces the bouding box information for object h to be recomputed based on current geometry.[[BR]][[BR]][sd 8/14/98]</Comments>
    <ID>364</ID>
    <IDName>procResetBBox</IDName>
    <InternalFunctionName>MP_ResetBBox</InternalFunctionName>
    <ModernName>ResetBounds</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ResetOrientation3D</Name>
    <Version>502</Version>
    <Category>General Edit</Category>
    <Type>Procedure</Type>
    <Description>[[name]] resets the 3D environment parameters of the active Vectorworks document. [[BR]][[BR]]Call this procedure after 3D object creation to ensure correct orientation and display of the new object in 3D space.[[BR]][[BR]]</Description>
    <ShortDesc>Updates the 3D view of the active document.</ShortDesc>
    <Example>Poly3D(1,1,0,1.5,1.5,1,2.5,1.5,1,);[[BR]]ResetOrientation3D;[[BR]]</Example>
    <ID>529</ID>
    <IDName>procResetOrientation3D</IDName>
    <SpecialOverride>ResetOrientation3D</SpecialOverride>
    <InternalFunctionName>ResetOrientation3D</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Rewrite</Name>
    <ChangedDate>2017:04:14T10:36:00</ChangedDate>
    <Version>100</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a new ASCII text file or opens an existing one prior to writing data to the file.  If the file exists, new data written to the file will overwrite any data currently within the file.[[BR]][[BR]][[note:FilePathNote]]</Description>
    <ShortDesc>Creates a new file or opens an existing one for writing.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   fileName :STRING; [[BR]]   major, minor, maintenance, platform :INTEGER;[[BR]]BEGIN[[BR]]   GetVersion(major, minor, maintenance, platform);[[BR]]   IF platform = 1 THEN BEGIN[[BR]]      fileName := '/Example.txt';[[BR]]   END ELSE BEGIN[[BR]]      fileName := 'C:\Example.txt';[[BR]]   END;[[BR]]   ReWrite(fileName);[[BR]]   WriteLn('example text');[[BR]]   Close(fileName);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>209</ID>
    <IDName>procRewrite</IDName>
    <InternalFunctionName>MP_Rewrite</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>fileName</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Name of file.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RGBToColorIndex</Name>
    <Version>600</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] converts the Vectorworks palette colors from its' red, green, and blue component values to the colors' palette position index. Parameters [[p:1]], [[p:2]], and [[p:3]] return the color components of the swatch, and parameter [[p:4]] is the palette position ID of the color swatch. RGB values are in the range of 0~65535. [[BR]][[BR]][[note:ColorTableNote]][[BR]][[BR]]</Description>
    <ShortDesc>Converts RGB values to color palette index.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	red, green, blue :LONGINT;[[BR]]	colorIndex :INTEGER;[[BR]]BEGIN[[BR]]	GetPenFore(FSActLayer, red, green, blue);[[BR]]	RGBToColorIndex(red, green, blue, colorIndex);[[BR]]	Message(colorIndex);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>568</ID>
    <IDName>procRGBToColorIndex</IDName>
    <SpecialOverride>RGBToColorIndex</SpecialOverride>
    <InternalFunctionName>RGBToColorIndex</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>red</Name>
        <Type>longMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>longMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>longMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>intVarMode</Type>
        <Desc>Color index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Rotate</Name>
    <Version>100</Version>
    <Category>General Edit</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] rotates the currently selected objects on the active layer. The rotation angle may be specified in any valid angle format. When a locus is selected with a group of objects, the objects are rotated around the locus. If two or more loci are selected, the objects are rotated around the center of the selected objects.[[BR]]</Description>
    <ShortDesc>Rotates the selected object(s) by the specified amount.</ShortDesc>
    <Example>Rotate(45d15'23");[[BR]]</Example>
    <ID>195</ID>
    <IDName>procRotate</IDName>
    <SpecialOverride>GetRotate</SpecialOverride>
    <InternalFunctionName>GetRotate</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>rotationAngle</Name>
        <Type>angleMode</Type>
        <Desc>Rotation angle.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Rotate3D</Name>
    <Version>100</Version>
    <Category>General Edit</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] rotates the most recently created three-dimensional object. Rotation values are applied about the respective axes.[[BR]][[BR]]</Description>
    <ShortDesc>Rotates the most recently created 3D object.</ShortDesc>
    <Example>BeginXtrd(0",4");[[BR]]Rect(0",3",1",0");[[BR]]EndXtrd;[[BR]]Rotate3D(21d 10' 22",-18d 44' 50",-7d 5' 45");[[BR]]</Example>
    <ID>196</ID>
    <IDName>procRotate3D</IDName>
    <SpecialOverride>GetRotate3D</SpecialOverride>
    <InternalFunctionName>GetRotate3D</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>xAngle</Name>
        <Type>angleMode</Type>
        <Desc>Rotation about X-axis.</Desc>
      </Param>
      <Param>
        <Name>yAngle</Name>
        <Type>angleMode</Type>
        <Desc>Rotation about Y-axis</Desc>
      </Param>
      <Param>
        <Name>zAngle</Name>
        <Type>angleMode</Type>
        <Desc>Rotation about Z-axis.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RotatePoint</Name>
    <Version>600</Version>
    <Category>General Edit</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] rotates selected Vectorworks objects about the specified coordinate point.</Description>
    <ShortDesc>Rotates the selected object(s) about the specified coordinate point.</ShortDesc>
    <Example>SetSelect(LNewObj);[[BR]]RotatePoint(0,3,45d);[[BR]]</Example>
    <ID>549</ID>
    <IDName>procRotatePoint</IDName>
    <SpecialOverride>RotatePoint</SpecialOverride>
    <InternalFunctionName>RotatePoint</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>Point of rotation.</Desc>
      </Param>
      <Param>
        <Name>rotationAngle</Name>
        <Type>angleMode</Type>
        <Desc>Rotation angle.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Round</Name>
    <Version>100</Version>
    <Category>Math - General</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] converts the specified REAL value to a LONGINT value. The LONGINT result is the value rounded to the nearest whole number.</Description>
    <ShortDesc>Converts a REAL to a LONGINT by rounding to the next highest whole value.</ShortDesc>
    <ID>228</ID>
    <IDName>funcRound</IDName>
    <InternalFunctionName>MP_Round</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>v</Name>
        <Type>realMode</Type>
        <Desc>Real value to round.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RoundWall</Name>
    <Version>700</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a counter-clockwise round wall.[[BR]]</Description>
    <ShortDesc>Creates a counter-clockwise round wall.</ShortDesc>
    <SeeAlso>Wall</SeeAlso>
    <Comments>Creates a round wall the that is centered on the arc specified by the the three input points.</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	x1, y1, x2, y2, x3, y3 :REAL;[[BR]]	lineHandle :HANDLE;[[BR]]BEGIN[[BR]]	GetPt(x1, y1);[[BR]]	GetPtL(x1, y1, x2, y2);[[BR]]	MoveTo(x1, y1);[[BR]]	LineTo(x2, y2);[[BR]]	lineHandle := LNewObj;[[BR]]	GetPtL(x2, y2, x3, y3);[[BR]]	IF lineHandle &lt;&gt; NIL THEN DelObject(lineHandle);[[BR]]	RoundWall(x1, y1, x2, y2, x3, y3);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>595</ID>
    <IDName>procRoundWall</IDName>
    <SpecialOverride>GetRoundWall</SpecialOverride>
    <InternalFunctionName>GetRoundWall</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>centerPt</Name>
        <Type>globPtMode</Type>
        <Desc>Center point of wall arc.</Desc>
      </Param>
      <Param>
        <Name>startPt</Name>
        <Type>globPtMode</Type>
        <Desc>Start point of wall arc.</Desc>
      </Param>
      <Param>
        <Name>endPt</Name>
        <Type>globPtMode</Type>
        <Desc>End point of wall arc.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RRect</Name>
    <Version>100</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a rounded rectangle object in a Vectorworks document.[[BR]][[BR]]Corner definition is controlled by parameter [[p:3]], which determines the "roundness" of the rectangle corners. The X and Y components of [[p:3]] correspond to the major and minor axes of an oval defining the rectangle corner.[[BR]][[BR]]</Description>
    <ShortDesc>Creates a rounded rectangle in a Vectorworks document.</ShortDesc>
    <SeeAlso>Rect,GetRRDiam</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]BEGIN[[BR]]	RRect(0, 0, 1, 1, 0.25, 0.25);[[BR]]	{same as: RRectangleN(0, 0, 1, 0, 1, 1, .25, .25);}[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>116</ID>
    <IDName>procRRect</IDName>
    <SpecialOverride>GetRRect</SpecialOverride>
    <InternalFunctionName>GetRRect</InternalFunctionName>
    <ModernName>RoundRect</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p1</Name>
        <Type>globPtMode</Type>
        <Desc>Top left coordinate of rectangle.</Desc>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>globPtMode</Type>
        <Desc>Bottom right coordinate of rectangle.</Desc>
      </Param>
      <Param>
        <Name>Diam</Name>
        <Type>tdPtMode</Type>
        <Desc>X and Y diameters of corner.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Scale</Name>
    <Version>100</Version>
    <Category>General Edit</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] rescales selected objects. Scaling occurs about the center of the selected object(s).[[BR]][[BR]]</Description>
    <ShortDesc>Scales the selected object(s).</ShortDesc>
    <Example>[[name]](2,3);[[BR]]</Example>
    <ID>197</ID>
    <IDName>procScale</IDName>
    <SpecialOverride>GetscaleDrawing</SpecialOverride>
    <InternalFunctionName>GetscaleDrawing</InternalFunctionName>
    <ModernName>ScaleSelObj</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>scaleXR</Name>
        <Type>realMode</Type>
        <Desc>X scale factor.</Desc>
      </Param>
      <Param>
        <Name>scaleYR</Name>
        <Type>realMode</Type>
        <Desc>Y scale factor.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SecondaryUnits</Name>
    <Version>700</Version>
    <Category>Units</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the secondary unit parameters for the active document. The secondary units setting is used primarily for display of alternate dimensions in[[BR]]when a dual dimension standard is active. [[BR]][[BR]][[note:UnitSettingTable]][[BR]][[BR]][[note:UnitsFormatTable]]</Description>
    <ShortDesc>Sets the secondary units for the active document.</ShortDesc>
    <Example>SecondaryUnits(1,6,2,TRUE,TRUE); [[BR]][[BR]]{ Sets the secondary units to feet/inches with a dimension precision of 1/64, }[[BR]]{ unit mark displayed, and fractional display of units values enabled.        }[[BR]]</Example>
    <ID>588</ID>
    <IDName>procSecondaryUnits</IDName>
    <SpecialOverride>SecondaryUnits</SpecialOverride>
    <InternalFunctionName>SecondaryUnits</InternalFunctionName>
    <ModernName>SetActSecondaryUnits</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
        <Desc>Active secondary unit style for document.</Desc>
      </Param>
      <Param>
        <Name>dimPrec</Name>
        <Type>longMode</Type>
        <Desc>Dimension precision.</Desc>
      </Param>
      <Param>
        <Name>format</Name>
        <Type>intMode</Type>
        <Desc>Decimal formatting.</Desc>
      </Param>
      <Param>
        <Name>showMark</Name>
        <Type>boolMode</Type>
        <Desc>Unit mark display setting.</Desc>
      </Param>
      <Param>
        <Name>dispFrac</Name>
        <Type>boolMode</Type>
        <Desc>Fractional display setting.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SelectAll</Name>
    <Version>100</Version>
    <Category>Selection</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] selects all visible objects on the active layer of a Vectorworks document. [[BR]][[BR]]If Layer Options is set to Show-Snap-Modify Others, then [[name]] will select all visible objects within the document.[[BR]][[BR]]</Description>
    <ShortDesc>Selects all objects on active layers.</ShortDesc>
    <ID>100</ID>
    <IDName>procSelectAll</IDName>
    <SpecialOverride>SelectAll</SpecialOverride>
    <InternalFunctionName>SelectAll</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Selected</Name>
    <Version>100</Version>
    <Category>Selection</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns the selection status of the referenced object.[[BR]]</Description>
    <ShortDesc>Returns the selection status of the referenced object.</ShortDesc>
    <ID>304</ID>
    <IDName>funcSelected</IDName>
    <InternalFunctionName>MP_Selected</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SelectSS</Name>
    <Version>100</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] opens the referenced worksheet and makes it active.[[BR]]</Description>
    <ShortDesc>Opens and activates the referenced worksheet.</ShortDesc>
    <Comments>OBSOLETE for Version 9: see new ShowWS. [VML 01/09/01]</Comments>
    <ID>365</ID>
    <IDName>procSelectSS</IDName>
    <InternalFunctionName>MP_SelectSS</InternalFunctionName>
    <ModernName>OpenWorksheet</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Set3DInfo</Name>
    <Version>100</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the height, width and depth dimensions of the referenced object.[[BR]][[BR]]</Description>
    <ShortDesc>Sets the the 3D size information for the referenced object.</ShortDesc>
    <ID>363</ID>
    <IDName>procSet3DInfo</IDName>
    <SpecialOverride>GetSet3DInfo</SpecialOverride>
    <InternalFunctionName>GetSet3DInfo</InternalFunctionName>
    <ModernName>SetInfo3D</ModernName>
    <Implemented>True</Implemented>
    <Placement3D>True</Placement3D>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to 3D object.</Desc>
      </Param>
      <Param>
        <Name>heightDistance</Name>
        <Type>distanceMode</Type>
        <Desc>New height of object.</Desc>
      </Param>
      <Param>
        <Name>widthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>New width of object.</Desc>
      </Param>
      <Param>
        <Name>depthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>New depth of object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Set3DRot</Name>
    <Version>100</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] rotates the referenced 3D object about a specified 3D point.  It works with the following 3D objects: extrude, multiple extrude, sweep, mesh, 3D polygon, solid, CSG solid, group, symbol, plug-in object, NURBS curve, NURBS surface.[[BR]][[BR]][[fig:3drotate.gif]][[BR]][[BR]]The difference between Set3DRot and SetRot3D is that Set3DRot adds the specified rotation to the existing rotation of the object, whereas SetRot3D does not consider the existing rotation, and merely makes the object rotation match the specified values.</Description>
    <ShortDesc>Rotates the referenced object using the specified angles about the specified 3D center point.</ShortDesc>
    <SeeAlso>SetRot3D</SeeAlso>
    <Example>Set3DRot(hd,10d,30d,23d45',3,3,2);[[BR]]</Example>
    <ID>322</ID>
    <IDName>procSet3DRot</IDName>
    <InternalFunctionName>MP_Set3DRot</InternalFunctionName>
    <Implemented>True</Implemented>
    <Placement3D>True</Placement3D>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to 3D object.</Desc>
      </Param>
      <Param>
        <Name>xAngle</Name>
        <Type>angleMode</Type>
        <Desc>X axis rotation angle.</Desc>
      </Param>
      <Param>
        <Name>yAngle</Name>
        <Type>angleMode</Type>
        <Desc>Y axis rotation angle.</Desc>
      </Param>
      <Param>
        <Name>zAngle</Name>
        <Type>angleMode</Type>
        <Desc>Z axis rotation angle.</Desc>
      </Param>
      <Param>
        <Name>xDistance</Name>
        <Type>distanceMode</Type>
        <Desc>X coordinate of center of rotation.</Desc>
      </Param>
      <Param>
        <Name>yDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Y coordinate of center of rotation.</Desc>
      </Param>
      <Param>
        <Name>zDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Z coordinate of center of rotation.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetActSymbol</Name>
    <Version>100</Version>
    <Category>Objects - Symbols</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the active symbol for a Vectorworks document.[[BR]][[BR]]</Description>
    <ShortDesc>Sets the active symbol of the document.</ShortDesc>
    <ID>468</ID>
    <IDName>procSetActSymbol</IDName>
    <SpecialOverride>GetSetActSymbol</SpecialOverride>
    <InternalFunctionName>GetSetActSymbol</InternalFunctionName>
    <ModernName>SetActSym</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Name of symbol.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetArc</Name>
    <Version>100</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the start and sweep angles of the referenced arc or round wall object.   Specify the angles in degrees.</Description>
    <ShortDesc>Modifies the start and sweep angles of the referenced arc.  Specify angles in degrees.</ShortDesc>
    <Example>PROCEDURE GetArcSetArcExample;[[BR]]VAR[[BR]]	h :HANDLE;[[BR]]	startAng, sweepAng :REAL;[[BR]]BEGIN[[BR]]	h := FSActLayer;[[BR]]	GetArc(h, startAng, sweepAng);[[BR]]	SetArc(h, startAng, sweepAng + 10);[[BR]]END;[[BR]]RUN(GetArcSetArcExample);</Example>
    <ID>319</ID>
    <IDName>procSetArc</IDName>
    <SpecialOverride>GetSetArc</SpecialOverride>
    <InternalFunctionName>GetSetArc</InternalFunctionName>
    <ModernName>SetArcAngles</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to arc.</Desc>
      </Param>
      <Param>
        <Name>startAngle</Name>
        <Type>angleMode</Type>
        <Desc>New start angle of arc.</Desc>
      </Param>
      <Param>
        <Name>arcAngle</Name>
        <Type>angleMode</Type>
        <Desc>New sweep angle of arc.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetBBox</Name>
    <Version>100</Version>
    <Category>Object Editing</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] positions objects whose geometry is defined by a bounding box. These objects currently are Image, PICT, Rectangle, Oval, Rounded Rectangle, and Worksheet Container. [[BR]][[BR]]Other objects will generate a warning if they are passed to [[name]].</Description>
    <ShortDesc>Allows an object's bounding box to be modified. </ShortDesc>
    <Comments>This function should be obsleted and replaced by a function which can only move objects and not corrupt other bounding boxes. [PCP][[BR]]For objects which are defined by their box, such as rectangles &amp; ovals, this function allows that box to be changed.  [sd 8/14/98]</Comments>
    <ID>320</ID>
    <IDName>procSetBBox</IDName>
    <SpecialOverride>SetBBox</SpecialOverride>
    <InternalFunctionName>SetBBox</InternalFunctionName>
    <ModernName>SetBounds</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>p1</Name>
        <Type>globPtMode</Type>
        <Desc>Top left coordinate of bounding box.</Desc>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>globPtMode</Type>
        <Desc>Bottom right coordinate of bounding box.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetBeamAngle</Name>
    <Version>700</Version>
    <Category>Objects - Lights</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the spread angle of the referenced spot light.[[BR]]</Description>
    <ShortDesc>Sets beam spread angle of referenced light.</ShortDesc>
    <ID>580</ID>
    <IDName>procSetBeamAngle</IDName>
    <SpecialOverride>SetBeamAngle</SpecialOverride>
    <InternalFunctionName>SetBeamAngle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to light.</Desc>
      </Param>
      <Param>
        <Name>beamAngleR</Name>
        <Type>realMode</Type>
        <Desc>Beam angle of light.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClass</Name>
    <Version>100</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] assigns a class to the referenced object.[[BR]][[BR]]</Description>
    <ShortDesc>Sets the class of the referenced object.</ShortDesc>
    <Example>[[name]](ObjHd,'Dimension');[[BR]]</Example>
    <ID>317</ID>
    <IDName>procSetClass</IDName>
    <InternalFunctionName>MP_SetClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>class</Name>
        <Type>stringMode</Type>
        <Desc>Name of class to assign to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetConstrain</Name>
    <Version>100</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the active drawing constraints for the document. Each constraint is represented by an ASCII character identifier; these characters are assembled into a string which determines the constraints to be activated.[[BR]][[BR]][[note:ConstraintIDTable]][[BR]][[BR]]</Description>
    <ShortDesc>Sets the active drawing constraints.  The procedure parameter is a string comprised of constraint identifiers.</ShortDesc>
    <Example>[[name]]('QD');[[BR]][[BR]]{activates the snap objects and smart point constraints}</Example>
    <ID>470</ID>
    <IDName>procSetConstrain</IDName>
    <SpecialOverride>GetSetConstrain</SpecialOverride>
    <InternalFunctionName>GetSetConstrain</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>str</Name>
        <Type>stringMode</Type>
        <Desc>Constraint constant string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCurrentObject</Name>
    <Version>400</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the referenced object to be the current object of the document. The current object is defined as the last object created, and can be referenced by LNewObj.[[BR]][[BR]]</Description>
    <ShortDesc>Sets the referenced object as the most recently created object.</ShortDesc>
    <ID>511</ID>
    <IDName>procSetCurrentObject</IDName>
    <SpecialOverride>SetNewObj</SpecialOverride>
    <InternalFunctionName>SetNewObj</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCursor</Name>
    <Version>100</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Procedure SetCursor changes the appearance of the screen cursor.[[BR]][[BR]][[note:CursorTypeTable]]</Description>
    <ShortDesc>Sets the cursor style.</ShortDesc>
    <Example>SetCursor(LgCrossC);[[BR]]</Example>
    <ID>427</ID>
    <IDName>procSetCursor</IDName>
    <SpecialOverride>GetSetCursor</SpecialOverride>
    <InternalFunctionName>GetSetCursor</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>cursor</Name>
        <Type>intMode</Type>
        <Desc>Cursor style setting.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDimStd</Name>
    <Version>400</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] changes the default dimension standard of a Vectorworks document. [[BR]][[BR]]Built-in dimension standards are specified using index values of 1 thru 9, corresponding to the dimension standard preference menu. Custom dimensions are specified using indexes 0 thru -8, with 0 being the first custom dimension standard, -1 being the second, and so on.</Description>
    <ShortDesc>Sets the default dimension standard for the document.</ShortDesc>
    <Comments>Changes the document's default dimension standard.  The whichStandard parameter specifies which dimension standard to change it to. The nine built-in dimension standards are specified using indexes 1 thru 9, and correspond to the ordering in the dimension standard popup menu. Custom dimensions are specified using indexes 0 thru -8, with 0 being the first custom dimension standard, -1 being the second, and so on.[[BR]][[BR]][sd 8/18/98]</Comments>
    <Example>[[name]](2);[[BR]][[BR]]{sets the dimension standard to ASME}</Example>
    <ID>521</ID>
    <IDName>procSetDimStd</IDName>
    <InternalFunctionName>MP_SetDimStd</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>whichStandard</Name>
        <Type>intMode</Type>
        <Desc>Dimension standard constant.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDimText</Name>
    <Version>400</Version>
    <Category>Dimensions</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] will set the dimension text of the referenced dimension to the specified value. [[BR]][[BR]]The maximum length for dimension text is 60 characters.  The first 30 characters of the specified dimension text string will be displayed in the primary dimension string; the remaining characters will be displayed in the secondary dimension string, if it exists.</Description>
    <ShortDesc>Sets the dimension text of the referenced dimension to the specified value. </ShortDesc>
    <Example>SetDimText(dimHandle,'Length varies');</Example>
    <ID>523</ID>
    <IDName>procSetDimText</IDName>
    <SpecialOverride>MPSetDimText</SpecialOverride>
    <InternalFunctionName>MPSetDimText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a dimension object.</Desc>
      </Param>
      <Param>
        <Name>leaderTrailer</Name>
        <Type>stringMode</Type>
        <Desc>Dimension text string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDSelect</Name>
    <Version>100</Version>
    <Category>Selection</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] deselects the referenced object.[[BR]]</Description>
    <ShortDesc>Deselects the referenced object.</ShortDesc>
    <ID>275</ID>
    <IDName>procSetDSelect</IDName>
    <InternalFunctionName>MP_SetDSelect</InternalFunctionName>
    <ModernName>Deselect</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetFillBack</Name>
    <Version>100</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the fill background color setting of the specified object. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Sets the fill background color of the referenced object.</ShortDesc>
    <SeeAlso>RGBToColorIndex,ColorIndexToRGB</SeeAlso>
    <ID>422</ID>
    <IDName>procSetFillBack</IDName>
    <InternalFunctionName>MP_SetFillBack</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetFillFore</Name>
    <Version>100</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the fill foreground color setting of the referenced object. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Sets the fill foreground color of the referenced object.</ShortDesc>
    <SeeAlso>RGBToColorIndex,ColorIndexToRGB</SeeAlso>
    <Example>SetFillFore(h, 65535, 0, 0);[[BR]]</Example>
    <ID>421</ID>
    <IDName>procSetFillFore</IDName>
    <InternalFunctionName>MP_SetFillFore</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetFPat</Name>
    <Version>100</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the fill pattern of the referenced object.[[BR]][[BR]]To apply a bitmap fill pattern, use positive value corresponding to the index  of the bitmap pattern.  To apply a vector fill pattern, use the negative of the vector fill index (index * -1).[[BR]][[BR]][[note:FillPatTable]][[BR]]</Description>
    <ShortDesc>Sets the fill pattern of the referenced object.  </ShortDesc>
    <Example>{ Apply a bitmap fill pattern. }[[BR]][[name]](objectOne, 47);[[BR]][[BR]]{ Apply a vector fill. }[[BR]][[name]](objectTwo, -Name2Index('My Hatch'));[[BR]]</Example>
    <ID>311</ID>
    <IDName>procSetFPat</IDName>
    <InternalFunctionName>MP_SetFPat</InternalFunctionName>
    <ModernName>SetFillPat</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>fillPattern</Name>
        <Type>longMode</Type>
        <Desc>Fill index value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetHDef</Name>
    <Version>600</Version>
    <Category>Object Editing</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] replaces the definition of the referenced "container" object with a new definition. Supported object types are worksheets, symbol definitions, and layer references.[[BR]][[BR]]</Description>
    <ShortDesc>Replaces the existing reference to an object in a symbol instance, layer link, or worksheet image with the specified reference.</ShortDesc>
    <Example>[[name]](symbolHd,newSymDefHd);[[BR]]{updates the referenced symbol with a new definition}</Example>
    <ID>552</ID>
    <IDName>procSetHDef</IDName>
    <SpecialOverride>SetHDef</SpecialOverride>
    <InternalFunctionName>SetHDef</InternalFunctionName>
    <ModernName>RedefineObj</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>oldH</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>newH</Name>
        <Type>handleMode</Type>
        <Desc>Handle to new definition.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLightDirection</Name>
    <Version>700</Version>
    <Category>Objects - Lights</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the direction angles of the referenced light object. </Description>
    <ShortDesc>Modifies direction information of referenced light.</ShortDesc>
    <ID>576</ID>
    <IDName>procSetLightDirection</IDName>
    <SpecialOverride>SetLightDirection</SpecialOverride>
    <InternalFunctionName>SetLightDirection</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to light.</Desc>
      </Param>
      <Param>
        <Name>panAngleR</Name>
        <Type>realMode</Type>
        <Desc>Pan angle of light.</Desc>
      </Param>
      <Param>
        <Name>tiltAngleR</Name>
        <Type>realMode</Type>
        <Desc>Tilt angle of light.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLightInfo</Name>
    <Version>700</Version>
    <Category>Objects - Lights</Category>
    <Type>Procedure</Type>
    <Description>Sets the attributes of the referenced light object.</Description>
    <ShortDesc>Modifies settings of referenced light. </ShortDesc>
    <ID>571</ID>
    <IDName>procSetLightInfo</IDName>
    <SpecialOverride>SetLightInfo</SpecialOverride>
    <InternalFunctionName>SetLightInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to light.</Desc>
      </Param>
      <Param>
        <Name>lightType</Name>
        <Type>intMode</Type>
        <Desc>Light type.</Desc>
      </Param>
      <Param>
        <Name>brightness</Name>
        <Type>intMode</Type>
        <Desc>Brightness of light.</Desc>
      </Param>
      <Param>
        <Name>isOn</Name>
        <Type>boolMode</Type>
        <Desc>On-off status of light.</Desc>
      </Param>
      <Param>
        <Name>castShadow</Name>
        <Type>boolMode</Type>
        <Desc>Shadow casting status of light.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLightLocation</Name>
    <Version>700</Version>
    <Category>Objects - Lights</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the location of the referenced light object.</Description>
    <ShortDesc>Modifies position of referenced light.</ShortDesc>
    <ID>574</ID>
    <IDName>procSetLightLocation</IDName>
    <SpecialOverride>SetLightLocation</SpecialOverride>
    <InternalFunctionName>SetLightLocation</InternalFunctionName>
    <ModernName>SetLightLoc</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to light.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>X-Y coordinate location of light.</Desc>
      </Param>
      <Param>
        <Name>zValue</Name>
        <Type>realMode</Type>
        <Desc>Elevation of light.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLS</Name>
    <ChangedDate>2017:10:26T09:22:00</ChangedDate>
    <Version>100</Version>
    <OldVersion Mode="AsError">1800</OldVersion>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Deprecated - will generate error. Use SetLSN instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use SetLSN instead.</ShortDesc>
    <SeeAlso>SetLSN</SeeAlso>
    <Comments>Deprecated - will generate error. Use SetLSN instead. Original description was: Sets the linestyle of the referenced object. If the value is in the range 0 to 71, the specified fill pattern is applied as the linestyle; a value in the range of -1 to -8 will apply the specified linestyle.</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	cnt :INTEGER;[[BR]]BEGIN[[BR]]	PushAttrs;[[BR]]	TextSize(1);[[BR]]	TextJust(3);[[BR]]	TextVerticalAlign(3);[[BR]]	FOR cnt := -10 TO 71 DO BEGIN[[BR]]		TextOrigin(-2, cnt);[[BR]]		CreateText(Concat(cnt));[[BR]]		MoveTo(0, cnt);[[BR]]		LineTo(24", cnt);[[BR]]		SetLS(LNewObj, cnt);[[BR]]	END;[[BR]]	PopAttrs;[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>313</ID>
    <IDName>procSetLS</IDName>
    <InternalFunctionName>MP_SetLS</InternalFunctionName>
    <ModernName>SetLineStyle</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>ls</Name>
        <Type>intMode</Type>
        <Desc>Linestyle to apply to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLScale</Name>
    <Version>600</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the scale of the referenced layer. [[BR]][[BR]][[note:ScaleCalcNote]]</Description>
    <ShortDesc>Sets the scale of the referenced layer.</ShortDesc>
    <Example>[[name]](HandleToLayer,96);[[BR]]{sets the referenced layer to a scale of 1/8" = 1'}</Example>
    <ID>539</ID>
    <IDName>procSetLScale</IDName>
    <InternalFunctionName>MP_SetLScale</InternalFunctionName>
    <ModernName>SetLayerScale</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to layer.</Desc>
      </Param>
      <Param>
        <Name>scale</Name>
        <Type>realMode</Type>
        <Desc>Scale value for layer.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLW</Name>
    <Version>100</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the line weight of the referenced object.</Description>
    <ShortDesc>Sets the line weight of the referenced object.</ShortDesc>
    <Example>[[name]](ObjHd,12);[[BR]]</Example>
    <ID>312</ID>
    <IDName>procSetLW</IDName>
    <InternalFunctionName>MP_SetLW</InternalFunctionName>
    <ModernName>SetLineWeight</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object</Desc>
      </Param>
      <Param>
        <Name>lw</Name>
        <Type>intMode</Type>
        <Desc>Line weight to be applied to object (in mils).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetName</Name>
    <Version>100</Version>
    <Category>Object Names</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] assigns a name to the referenced object.</Description>
    <ShortDesc>Sets the name of the referenced object.</ShortDesc>
    <SeeAlso>GetName</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	h1    :HANDLE;[[BR]]	SName :STRING;[[BR]]BEGIN[[BR]]	SName := 'Fred';[[BR]]	h1 := CreateSphere(0, 0, 0, 1000);[[BR]]	SetName(h1, SName);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>318</ID>
    <IDName>procSetName</IDName>
    <InternalFunctionName>MP_SetName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Name to be assigned to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOrigin</Name>
    <Version>100</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Shifts the position of the document origin. The function does not modify the relative [[BR]]positions of objects in the document; the coordinate locations of objects, however, [[BR]]will change when the origin location is modified.[[BR]][[BR]]</Description>
    <ShortDesc>Shifts the position of the document origin.</ShortDesc>
    <SeeAlso>SetOriginAbsolute</SeeAlso>
    <Example>Rect(0,0,1,1);[[BR]]SetOrigin(1,1);[[BR]][[BR]]{ Creates a rectangle with the bottom left point at coordinates (0,0), then moves the origin so that the top right point of the rectangle has coordinates (0,0). }</Example>
    <ID>180</ID>
    <IDName>procSetOrigin</IDName>
    <SpecialOverride>ProcSetOrigin</SpecialOverride>
    <InternalFunctionName>ProcSetOrigin</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>x</Name>
        <Type>realMode</Type>
        <Desc>X-offset from current origin.</Desc>
      </Param>
      <Param>
        <Name>y</Name>
        <Type>realMode</Type>
        <Desc>Y-offset from current origin.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOriginAbsolute</Name>
    <Version>800</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the position of the origin relative to the center of the document drawing space.[[BR]]</Description>
    <ShortDesc>Sets the position of the origin relative to the center of the document drawing space.</ShortDesc>
    <SeeAlso>SetOrigin</SeeAlso>
    <ID>596</ID>
    <IDName>procSetOriginAbsolute</IDName>
    <SpecialOverride>ProcSetOriginAbsolute</SpecialOverride>
    <InternalFunctionName>ProcSetOriginAbsolute</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>xValue</Name>
        <Type>realMode</Type>
        <Desc>X coordinate of origin.</Desc>
      </Param>
      <Param>
        <Name>yValue</Name>
        <Type>realMode</Type>
        <Desc>Y coordinate of origin.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetPenBack</Name>
    <Version>100</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the pen background color of the referenced object. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Sets the pen background color of the referenced object.</ShortDesc>
    <SeeAlso>RGBToColorIndex,ColorIndexToRGB</SeeAlso>
    <ID>424</ID>
    <IDName>procSetPenBack</IDName>
    <InternalFunctionName>MP_SetPenBack</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetPenFore</Name>
    <Version>100</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the pen foreground color of the referenced object. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Sets the pen foreground color of the referenced object.</ShortDesc>
    <SeeAlso>RGBToColorIndex,ColorIndexToRGB</SeeAlso>
    <Comments>Be nice if it said what color values were legal. -JDW</Comments>
    <Example>SetPenFore(HandleToObj,65535,0,39321); [[BR]]</Example>
    <ID>423</ID>
    <IDName>procSetPenFore</IDName>
    <InternalFunctionName>MP_SetPenFore</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetPolyPt</Name>
    <Version>100</Version>
    <Category>Objects - Polys</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the location a specified vertex in the referenced polygon or polyline.[[BR]]</Description>
    <ShortDesc>Sets the coordinates of a vertex of the referenced polygon/polyline.</ShortDesc>
    <ID>316</ID>
    <IDName>procSetPolyPt</IDName>
    <SpecialOverride>GetSetPolyPt</SpecialOverride>
    <InternalFunctionName>GetSetPolyPt</InternalFunctionName>
    <ModernName>MoveVertex</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to polygon.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Index of vertex.</Desc>
      </Param>
      <Param>
        <Name>xR</Name>
        <Type>realMode</Type>
        <Desc>New X coordinate of vertex.</Desc>
      </Param>
      <Param>
        <Name>yR</Name>
        <Type>realMode</Type>
        <Desc>New Y coordinate of vertex.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetPolyPt3D</Name>
    <Version>700</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the position of the specified vertex in the referenced 3D object.[[BR]]</Description>
    <ShortDesc>Sets the location of the specified vertex of the referenced 3D polygon.</ShortDesc>
    <Example>[[name]](objectHandle,3,2.5",3",8");</Example>
    <ID>582</ID>
    <IDName>procSetPolyPt3D</IDName>
    <SpecialOverride>SetPolyPt3D</SpecialOverride>
    <InternalFunctionName>SetPolyPt3D</InternalFunctionName>
    <ModernName>MoveVertex3D</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to mesh or 3D poly object.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Index of vertex point.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>New X-Y coordinates of vertex.</Desc>
      </Param>
      <Param>
        <Name>zValue</Name>
        <Type>realMode</Type>
        <Desc>New elevation of vertex.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetPref</Name>
    <Version>600</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Procedure SetPref sets the on-off status of a Vectorworks preference dialog item. Parameter [[p:1]] specifies the preference item, and parameter [[p:2]] sets the on-off status of the item.[[BR]][[BR]][[note:PrefItemTableNote]]</Description>
    <ShortDesc>Sets the on/off state of a specified preference.</ShortDesc>
    <Example>SetPref(17,FALSE);[[BR]]</Example>
    <ID>562</ID>
    <IDName>procSetPref</IDName>
    <SpecialOverride>SetPref</SpecialOverride>
    <InternalFunctionName>SetPref</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Preference item constant.</Desc>
      </Param>
      <Param>
        <Name>status</Name>
        <Type>boolMode</Type>
        <Desc>On- off status of preference.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetPrimaryDim</Name>
    <Version>700</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the primary dimension options for single and dual dimensions. [[BR]]</Description>
    <ShortDesc>Sets primary dimension values for both single and dual dimensions</ShortDesc>
    <Comments>Sets dimension values that are specific to the primary portion of a dual dimension. This procedure can also be used for non-dual dimensions.[[BR]][[BR]][sd 8/18/98]</Comments>
    <Example>SetPrimaryDim(dimHd,TRUE,FALSE,'Approx.','',64);</Example>
    <ID>589</ID>
    <IDName>procSetPrimaryDim</IDName>
    <SpecialOverride>SetPrimaryDim</SpecialOverride>
    <InternalFunctionName>SetPrimaryDim</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to dimension.</Desc>
      </Param>
      <Param>
        <Name>showValue</Name>
        <Type>boolMode</Type>
        <Desc>Display dimension value flag.</Desc>
      </Param>
      <Param>
        <Name>boxText</Name>
        <Type>boolMode</Type>
        <Desc>Display box around dimension text flag.</Desc>
      </Param>
      <Param>
        <Name>leader</Name>
        <Type>stringMode</Type>
        <Desc>Leader string.</Desc>
      </Param>
      <Param>
        <Name>trailer</Name>
        <Type>stringMode</Type>
        <Desc>Trailer string.</Desc>
      </Param>
      <Param>
        <Name>precision</Name>
        <Type>longMode</Type>
        <Desc>Precision setting for displayed dimension value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetRecord</Name>
    <ChangedDate>2017:04:14T10:44:00</ChangedDate>
    <Version>100</Version>
    <Category>Database / Record</Category>
    <Type>Procedure</Type>
    <Description>Assigns an instance of an existing record format to the referenced object . [[BR]]</Description>
    <ShortDesc>Assigns a record to the referenced object.</ShortDesc>
    <Example>[[name]](HandleToObject,'Part Info');[[BR]]</Example>
    <ID>479</ID>
    <IDName>procSetRecord</IDName>
    <SpecialOverride>GetSetRecord</SpecialOverride>
    <InternalFunctionName>GetSetRecord</InternalFunctionName>
    <ModernName>AddRecordToObj</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>record</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Name of record to assign to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetRField</Name>
    <ChangedDate>2017:04:14T10:44:00</ChangedDate>
    <Version>100</Version>
    <Category>Database / Record</Category>
    <Type>Procedure</Type>
    <Description>Assigns a new value to an existing field of a record attached to the referenced object.</Description>
    <ShortDesc>Assigns a value to the specified record field.</ShortDesc>
    <Comments>Update the RecordNode attached to object "h" by setting the field "field" of record format named "record" to the value "value".  The object "h" is redrawn afterward to support the symbol "link text to record" feature.[[BR]][[BR]]Replaces obsolete function "Field".[[BR]]</Comments>
    <Example>[[name]](HandleToObject,'Part Info','Serial No.','P-4322');[[BR]]</Example>
    <ID>480</ID>
    <IDName>procSetRField</IDName>
    <InternalFunctionName>MP_SetRField</InternalFunctionName>
    <ModernName>SetRecordField</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a object with an attached record.</Desc>
      </Param>
      <Param>
        <Name>record</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Name of record to be updated.</Desc>
      </Param>
      <Param>
        <Name>field</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Name of field to be updated.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>New value for field.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetRot3D</Name>
    <Version>100</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the rotation (in degrees) of the referenced object to the specified rotations and center.  This procedure works on the following 3D objects: extrudes, multiple extrudes, and sweeps.[[BR]][[BR]][[fig:3drotate.gif]][[BR]][[BR]]The difference between Set3DRot and SetRot3D is that Set3DRot adds the specified rotation to the existing rotation of the object, whereas SetRot3D does not consider the existing rotation, and merely makes the object rotation match the specified values.</Description>
    <ShortDesc>Sets the matrix for the given object to the given rotations and center. </ShortDesc>
    <SeeAlso>Set3DRot</SeeAlso>
    <Comments>[sd 8/18/98]</Comments>
    <ID>321</ID>
    <IDName>procSetRot3D</IDName>
    <InternalFunctionName>MP_SetRot3D</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to 3D object.</Desc>
      </Param>
      <Param>
        <Name>xAngle</Name>
        <Type>angleMode</Type>
        <Desc>New X rotation angle.</Desc>
      </Param>
      <Param>
        <Name>yAngle</Name>
        <Type>angleMode</Type>
        <Desc>New Y rotation angle.</Desc>
      </Param>
      <Param>
        <Name>zAngle</Name>
        <Type>angleMode</Type>
        <Desc>New Z rotation angle.</Desc>
      </Param>
      <Param>
        <Name>xDistance</Name>
        <Type>distanceMode</Type>
        <Desc>X coordinate of rotation center.</Desc>
      </Param>
      <Param>
        <Name>yDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Y coordinate of rotation center.</Desc>
      </Param>
      <Param>
        <Name>zDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Z coordinate of rotation center.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetScale</Name>
    <Version>100</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the drawing scale of the active layer of the document.[[BR]][[BR]][[note:ScaleCalcNote]][[BR]][[BR]]</Description>
    <ShortDesc>Sets the drawing scale of the active layer.</ShortDesc>
    <ID>181</ID>
    <IDName>procSetScale</IDName>
    <SpecialOverride>GetSetScale</SpecialOverride>
    <InternalFunctionName>GetSetScale</InternalFunctionName>
    <ModernName>SetActLayerScale</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>actualSize</Name>
        <Type>realMode</Type>
        <Desc>Drawing scale factor.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetSecondaryDim</Name>
    <Version>700</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the dimension options that are specific to the secondary portion of a dual dimension. This procedure can only be used for dual dimensions.</Description>
    <ShortDesc>Sets secondary dimension values on dual dimensions</ShortDesc>
    <Comments>Sets dimension values that are specific to the secondary portion of a dual dimension. This procedure can only be used for dual dimensions.[[BR]][[BR]][sd 8/18/98]</Comments>
    <Example>SetSecondaryDim(dimHd,TRUE,FALSE,'Approx.','',64);</Example>
    <ID>590</ID>
    <IDName>procSetSecondaryDim</IDName>
    <SpecialOverride>SetSecondaryDim</SpecialOverride>
    <InternalFunctionName>SetSecondaryDim</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to dimension.</Desc>
      </Param>
      <Param>
        <Name>showValue</Name>
        <Type>boolMode</Type>
        <Desc>Display dimension value flag.</Desc>
      </Param>
      <Param>
        <Name>boxText</Name>
        <Type>boolMode</Type>
        <Desc>Display box around dimension text flag.</Desc>
      </Param>
      <Param>
        <Name>leader</Name>
        <Type>stringMode</Type>
        <Desc>Leader string.</Desc>
      </Param>
      <Param>
        <Name>trailer</Name>
        <Type>stringMode</Type>
        <Desc>Trailer string.</Desc>
      </Param>
      <Param>
        <Name>precision</Name>
        <Type>longMode</Type>
        <Desc>Precision setting for displayed dimension value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetSegPt1</Name>
    <Version>100</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the location of the start point of the referenced line or wall object.</Description>
    <ShortDesc>Sets the coordinates of the first point of the referenced line.</ShortDesc>
    <SeeAlso>SetSegPt2</SeeAlso>
    <Example>PROCEDURE ExtendLine;[[BR]]CONST[[BR]]   kEXTENSION = 250mm;[[BR]][[BR]]PROCEDURE ProcessLine(lineHdl :HANDLE);[[BR]]VAR[[BR]]   size :REAL;[[BR]]   lineVec :VECTOR;[[BR]]   arrow1,arrow2 :BOOLEAN;[[BR]]   style,angle :INTEGER;[[BR]]   p1X,p1Y,p2X,p2Y,lineLen :REAL;[[BR]]BEGIN[[BR]]   GetSegPt1(lineHdl, p1X, p1Y);[[BR]]   GetSegPt2(lineHdl, p2X, p2Y);[[BR]]   GetObjArrow(lineHdl, style, size, angle, arrow1, arrow2);[[BR]]   IF arrow1 THEN BEGIN[[BR]]      lineVec[1] := p1X - p2X;[[BR]]      lineVec[2] := p1Y - p2Y;[[BR]]      lineLen := Norm(lineVec);[[BR]]      lineVec := (lineLen + kEXTENSION) * UnitVec(lineVec);[[BR]]      p1X := p2X + lineVec[1];[[BR]]      p1Y := p2Y + lineVec[2];[[BR]]      SetSegPt1(lineHdl, p1X, p1Y);[[BR]]   END ELSE BEGIN[[BR]]      lineVec[1] := p2X - p1X;[[BR]]      lineVec[2] := p2Y - p1Y;[[BR]]      lineLen := Norm(lineVec);[[BR]]      lineVec := (lineLen + kEXTENSION) * UnitVec(lineVec);[[BR]]      p2X := p1X + lineVec[1];[[BR]]      p2Y := p1Y + lineVec[2];[[BR]]      SetSegPt2(lineHdl, p2X, p2Y);[[BR]]   END;[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]   ForEachObject(ProcessLine, (((C='LineClass') &amp; (T=LINE))));[[BR]]END;[[BR]]RUN(ExtendLine);[[BR]]</Example>
    <ID>314</ID>
    <IDName>procSetSegPt1</IDName>
    <InternalFunctionName>MP_SetSegPt1</InternalFunctionName>
    <ModernName>SetLineStart</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to line.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>New start point of line.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetSegPt2</Name>
    <Version>100</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the location of the end point of the referenced line or wall object. [[BR]][[BR]]</Description>
    <ShortDesc>Sets the coordinates of the second point of the referenced line.</ShortDesc>
    <SeeAlso>SetSegPt1</SeeAlso>
    <ID>315</ID>
    <IDName>procSetSegPt2</IDName>
    <InternalFunctionName>MP_SetSegPt2</InternalFunctionName>
    <ModernName>SetLineEnd</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to arc.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>New end point of line.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetSelect</Name>
    <Version>100</Version>
    <Category>Selection</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] selects the referenced object.[[BR]]</Description>
    <ShortDesc>Selects the referenced object.</ShortDesc>
    <ID>274</ID>
    <IDName>procSetSelect</IDName>
    <InternalFunctionName>MP_SetSelect</InternalFunctionName>
    <ModernName>Select</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetSpreadAngle</Name>
    <Version>700</Version>
    <Category>Objects - Lights</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the spread angle of the light object. If the light type is not a spot light, the procedure has no effect on the light.[[BR]]</Description>
    <ShortDesc>Sets light spread angle of referenced light.</ShortDesc>
    <ID>578</ID>
    <IDName>procSetSpreadAngle</IDName>
    <SpecialOverride>SetSpreadAngle</SpecialOverride>
    <InternalFunctionName>SetSpreadAngle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to light.</Desc>
      </Param>
      <Param>
        <Name>spreadAngleR</Name>
        <Type>realMode</Type>
        <Desc>Beam spread angle of light.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetText</Name>
    <Version>100</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the content of the referenced text object. The new text is assigned the font, size and style characteristics of the first character of the old text string.</Description>
    <ShortDesc>Sets the text value of the referenced object.</ShortDesc>
    <Example>SetText(hText,'A new text string value');</Example>
    <ID>385</ID>
    <IDName>procSetText</IDName>
    <InternalFunctionName>MP_SetText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
      <Param>
        <Name>text</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>New text string value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextFont</Name>
    <Version>600</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the font of a substring in the referenced text object.</Description>
    <ShortDesc>Sets the font of the specified substring in the referenced object.</ShortDesc>
    <SeeAlso>GetFontID</SeeAlso>
    <Example>SetTextFont(handleToText,0,5,GetFontID('Helvetica'));[[BR]][[BR]]{sets the first five characters of the referenced text string to Helvetica}[[BR]]</Example>
    <ID>540</ID>
    <IDName>procSetTextFont</IDName>
    <InternalFunctionName>MP_SetTextFont</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
      <Param>
        <Name>Start</Name>
        <Type>intMode</Type>
        <Desc>Start position in text string.</Desc>
      </Param>
      <Param>
        <Name>Count</Name>
        <Type>intMode</Type>
        <Desc>Length of substring.</Desc>
      </Param>
      <Param>
        <Name>FontNum</Name>
        <Type>intMode</Type>
        <Desc>Font ID for substring.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextJust</Name>
    <ChangedDate>2010:06:01T13:55:00</ChangedDate>
    <Version>600</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the text justification of the referenced text object. [[BR]][[BR]][[note:TextHorizontalAlignTable]][[BR]][[fig:textlocus.gif]]</Description>
    <ShortDesc>Sets the justification of the referenced text object.</ShortDesc>
    <SeeAlso>SetTextJustN</SeeAlso>
    <ID>543</ID>
    <IDName>procSetTextJust</IDName>
    <InternalFunctionName>MP_SetTextJust</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>TextHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
      <Param>
        <Name>JustFlag</Name>
        <Type>intMode</Type>
        <Desc>Justification setting for text.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextSize</Name>
    <Version>600</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the text size of a specified substring in the referenced text object. Parameters [[p:2]] and [[p:3]] specify the substring start position and substring length. Parameter [[p:4]] specifies the size (in points) to be assigned to the substring.</Description>
    <ShortDesc>Sets the text size of a specified substring in the referenced object.</ShortDesc>
    <Comments>The size parameter was previously an integer, but is now a floating point value. [9/14/98 - PCP]</Comments>
    <Example>SetTextSize(HandleToText,0,5,24);[[BR]]{set the first five characters of the referenced text string to 24 point text}[[BR]]</Example>
    <ID>542</ID>
    <IDName>procSetTextSize</IDName>
    <InternalFunctionName>MP_SetTextSize</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
      <Param>
        <Name>Start</Name>
        <Type>intMode</Type>
        <Desc>Start position in text string.</Desc>
      </Param>
      <Param>
        <Name>Count</Name>
        <Type>intMode</Type>
        <Desc>Length of substring.</Desc>
      </Param>
      <Param>
        <Name>Size</Name>
        <Type>realMode</Type>
        <Desc>Text size setting for substring.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextStyle</Name>
    <Version>600</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the text style of a specified substring in the referenced text object.[[BR]][[BR]][[note:TextStyleTable]]</Description>
    <ShortDesc>Sets the text style of a specified substring in the referenced object.</ShortDesc>
    <Example>SetTextSyle(HandleToText,0,5,34);[[BR]][[BR]]{set the style of the substring text to bold and shadowed}</Example>
    <ID>541</ID>
    <IDName>procSetTextStyle</IDName>
    <InternalFunctionName>MP_SetTextStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
      <Param>
        <Name>Start</Name>
        <Type>intMode</Type>
        <Desc>Start position in text string.</Desc>
      </Param>
      <Param>
        <Name>Count</Name>
        <Type>intMode</Type>
        <Desc>Length of substring.</Desc>
      </Param>
      <Param>
        <Name>Style</Name>
        <Type>intMode</Type>
        <Desc>Text style setting for substring.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTool</Name>
    <ChangedDate>2015:07:03T19:19:00</ChangedDate>
    <Version>100</Version>
    <Category>Command</Category>
    <Type>Procedure</Type>
    <Description>Activates the specified Vectorworks tool for use. The tool remains selected as the active tool after use.[[BR]][[BR]]Note: [[note:SetCallToolIDTableRef]][[BR]]</Description>
    <ShortDesc>Sets the active Vectorworks tool.</ShortDesc>
    <SeeAlso>CallTool</SeeAlso>
    <Example>[[name]](-203);[[BR]]</Example>
    <ID>469</ID>
    <IDName>procSetTool</IDName>
    <InternalFunctionName>MP_SetTool</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theTool</Name>
        <Type>intMode</Type>
        <Desc>Vectorworks tool constant.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetUnits</Name>
    <Version>100</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets low-level unit values in a Vectorworks document. [[BR]][[BR]]If only one of the units values is to be modified, GetUnits should be called first, and the values retrieved from that call should be passed back into SetUnits. [[BR]][[BR]]To specify a standard units setting with default values, use Units. To specify a standard units setting, but with some modified values, use PrimaryUnit.[[BR]][[BR]][[note:UnitFormatsTable]]</Description>
    <ShortDesc>Sets low-level unit values in Vectorworks. </ShortDesc>
    <Comments>Sets low-level unit values. If only one of the values is desired to change, GetUnits should be called first, and the values retrieved from that call should be passed back into SetUnits. If a standard unit with default values is desired, the Units procedure should be used, not this one. If a standard unit with some modified values is desired, the PrimaryUnit procedure should be called, not this one.[[BR]][[BR]][sd 8/18/98]</Comments>
    <Example>[[name]](4096,64,3,1.0,'"','sq ft');</Example>
    <ID>184</ID>
    <IDName>procSetUnits</IDName>
    <SpecialOverride>GetSetUnits</SpecialOverride>
    <InternalFunctionName>GetSetUnits</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>fraction</Name>
        <Type>longMode</Type>
        <Desc>Stored accuracy for the document.</Desc>
      </Param>
      <Param>
        <Name>display</Name>
        <Type>longMode</Type>
        <Desc>Minimum display accuracy for the document.</Desc>
      </Param>
      <Param>
        <Name>format</Name>
        <Type>intMode</Type>
        <Desc>Unit format style.</Desc>
      </Param>
      <Param>
        <Name>upi</Name>
        <Type>realMode</Type>
        <Desc>Units per inch.</Desc>
      </Param>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Unit label for displayed values</Desc>
      </Param>
      <Param>
        <Name>squareName</Name>
        <Type>stringMode</Type>
        <Desc>Squared unit label for displayed values.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVCenter</Name>
    <Version>600</Version>
    <Category>View / Zoom</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the Vectorworks document view center.[[BR]]</Description>
    <ShortDesc>Sets the view center of the active document.</ShortDesc>
    <Example>SetVCenter(2,4);[[BR]]</Example>
    <ID>538</ID>
    <IDName>procSetVCenter</IDName>
    <SpecialOverride>SetViewCenter</SpecialOverride>
    <InternalFunctionName>SetViewCenter</InternalFunctionName>
    <ModernName>SetViewCenter</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewCenter</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinates of document view center.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetView</Name>
    <Version>100</Version>
    <Category>View / Zoom</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the view of a Vectorworks document. The projection must be non-plan to modify the view.[[BR]][[BR]]</Description>
    <ShortDesc>Sets the 3D document view orientation.</ShortDesc>
    <Example>SetView(45d,30d,30d,0,2,2);[[BR]]</Example>
    <ID>329</ID>
    <IDName>procSetView</IDName>
    <SpecialOverride>View3D</SpecialOverride>
    <InternalFunctionName>View3D</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>xAngle</Name>
        <Type>angleMode</Type>
        <Desc>X axis rotation angle.</Desc>
      </Param>
      <Param>
        <Name>yAngle</Name>
        <Type>angleMode</Type>
        <Desc>Y axis rotation angle.</Desc>
      </Param>
      <Param>
        <Name>zAngle</Name>
        <Type>angleMode</Type>
        <Desc>Z axis rotation angle.</Desc>
      </Param>
      <Param>
        <Name>xDistance</Name>
        <Type>distanceMode</Type>
        <Desc>X coordinate of view center.</Desc>
      </Param>
      <Param>
        <Name>yDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Y coordinate of view center.</Desc>
      </Param>
      <Param>
        <Name>zDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Z coordinate of view center.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWallWidth</Name>
    <Version>600</Version>
    <OldVersion>1200</OldVersion>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the default wall width of the document.[[BR]]</Description>
    <ShortDesc>Sets the active wall width of the document. This function is obsolete. Use SetWallPrefStyle instead.</ShortDesc>
    <ID>536</ID>
    <IDName>procSetWallWidth</IDName>
    <SpecialOverride>SetWallWidth</SpecialOverride>
    <InternalFunctionName>SetWallWidth</InternalFunctionName>
    <ModernName>SetActWallWidth</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>widthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>New default wall width.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetZoom</Name>
    <Version>600</Version>
    <Category>View / Zoom</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the zoom factor of the active Vectorworks document.[[BR]]</Description>
    <ShortDesc>Sets the view zoom of the active document.</ShortDesc>
    <ID>537</ID>
    <IDName>procSetZoom</IDName>
    <SpecialOverride>SetZoomFactor</SpecialOverride>
    <InternalFunctionName>SetZoomFactor</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>zoomfactor</Name>
        <Type>longMode</Type>
        <Desc>Zoom percentage setting.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetZVals</Name>
    <Version>400</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the Z (layer base elevation) and delta Z (layer thickness) for the active layer. </Description>
    <ShortDesc>Sets the Z (base elevation) and delta Z (layer thickness) values for the active layer.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   baseElevation, thickness :REAL;[[BR]]BEGIN[[BR]]   Layer('Test Layer');[[BR]]   baseElevation := 1;[[BR]]   thickness := 3;[[BR]]   SetZVals(baseElevation, thickness);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>499</ID>
    <IDName>procSetZVals</IDName>
    <SpecialOverride>GetSetZVals</SpecialOverride>
    <InternalFunctionName>GetSetZVals</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>zDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Layer base elevation (above document ground plane).</Desc>
      </Param>
      <Param>
        <Name>deltaZDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Layer thickness.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Shift</Name>
    <Version>100</Version>
    <Category>User Interactive</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>[[name]] returns TRUE if the Shift key was depressed during the last user event. This function operates with the MouseDown, KeyDown, AutoKey, GetPt, GetPtL, GetLine, and GetRect calls.</Description>
    <ShortDesc>Returns TRUE if the Shift key was pressed.</ShortDesc>
    <ID>403</ID>
    <IDName>funcShift</IDName>
    <InternalFunctionName>MP_Shift</InternalFunctionName>
    <ModernName>ShiftKey</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>ShowClass</Name>
    <Version>100</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Sets the visibility of the specified class to normal (visible) status.</Description>
    <ShortDesc>Sets the specified class to visible.</ShortDesc>
    <SeeAlso>HideClass</SeeAlso>
    <Example>[[name]]('Dimension');[[BR]]</Example>
    <ID>334</ID>
    <IDName>procShowClass</IDName>
    <InternalFunctionName>MP_ShowClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ShowLayer</Name>
    <Version>100</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Procedure ShowLayer sets the visibility status of the active layer to visible. Newly created layers always defaulted to the Show mode.[[BR]]</Description>
    <ShortDesc>Sets the active layer to visible.</ShortDesc>
    <Example>Layer('Future Construction');[[BR]]ShowLayer;[[BR]]</Example>
    <ID>161</ID>
    <IDName>procShowLayer</IDName>
    <InternalFunctionName>MP_ShowLayer</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Sin</Name>
    <Version>100</Version>
    <Category>Math - General</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the sine of the specified value. The base value is assumed to represent an angle in radians.</Description>
    <ShortDesc>Returns the sine of the specified value.</ShortDesc>
    <ID>231</ID>
    <IDName>funcSin</IDName>
    <InternalFunctionName>MP_Sin</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>v</Name>
        <Type>realMode</Type>
        <Desc>Numeric value for which to find the sine.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SingleTolerance</Name>
    <Version>400</Version>
    <Category>Dimensions</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] is used with dimensioning procedures to define a tolerance for the most recently created dimension.</Description>
    <ShortDesc>Defines a single tolerance for the most recently created dimension.</ShortDesc>
    <Example>LinearDim(-2",2",1",2",-3",0,771,770,0.75);[[BR]]SingleTolerance(True,False,'approx. ','',1/16");[[BR]]</Example>
    <ID>513</ID>
    <IDName>procSingleTolerance</IDName>
    <SpecialOverride>SingleTolerance</SpecialOverride>
    <InternalFunctionName>SingleTolerance</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>showVal</Name>
        <Type>boolMode</Type>
        <Desc>Dimension text display flag.</Desc>
      </Param>
      <Param>
        <Name>boxText</Name>
        <Type>boolMode</Type>
        <Desc>Boxed text display flag.</Desc>
      </Param>
      <Param>
        <Name>leader</Name>
        <Type>stringMode</Type>
        <Desc>Dimension leader text string.</Desc>
      </Param>
      <Param>
        <Name>trailer</Name>
        <Type>stringMode</Type>
        <Desc>Dimension trailer text string.</Desc>
      </Param>
      <Param>
        <Name>limDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Limit tolerance string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Smooth</Name>
    <Version>100</Version>
    <Category>Objects - Polys</Category>
    <Type>Procedure</Type>
    <Description>Procedure Smooth sets the smoothing type of newly created polyline or polygon objects.[[BR]][[BR]][[note:SmoothTypeTable]]</Description>
    <ShortDesc>Sets the smoothing type of newly created polyline or polygon objects.</ShortDesc>
    <Example>[[name]](2);[[BR]]Poly(0,0,-0.5,1,0.5,2);[[BR]][[BR]]</Example>
    <ID>160</ID>
    <IDName>procSmooth</IDName>
    <InternalFunctionName>MP_Smooth</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>smoothType</Name>
        <Type>intMode</Type>
        <Desc>Smoothing style.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Snap</Name>
    <Version>100</Version>
    <OldVersion>800</OldVersion>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Obsolete procedure.[[BR]]</Description>
    <ShortDesc>Obsolete procedure.</ShortDesc>
    <SeeAlso>SetConstrain, SetPrefInt</SeeAlso>
    <Comments>Deleted this obsolete function as of 9.0.0b7 - PCP 12-21-2000[[BR]][[BR]]Sets the state of the "Snap To Grid" and "Snap To Object" constraint as well as the "Snap To Loci" preference.[[BR]][[BR]][sd 8/18/98]</Comments>
    <ID>182</ID>
    <IDName>procSnap</IDName>
    <InternalFunctionName>MP_Snap</InternalFunctionName>
    <Params>
      <Param>
        <Name>gridSnap</Name>
        <Type>boolMode</Type>
        <Desc>Snap to Grid constraint.</Desc>
      </Param>
      <Param>
        <Name>objectSnap</Name>
        <Type>boolMode</Type>
        <Desc>Snap to Object constraint.</Desc>
      </Param>
      <Param>
        <Name>locusSnap</Name>
        <Type>boolMode</Type>
        <Desc>Snap to Locus constraint.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Space</Name>
    <Version>100</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] writes a space to the current output file.</Description>
    <ShortDesc>Writes a space character to the current output file.</ShortDesc>
    <Example>Space(5);[[BR]]{write 5 spaces to the output file}</Example>
    <ID>222</ID>
    <IDName>procSpace</IDName>
    <InternalFunctionName>MP_Space</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>n</Name>
        <Type>intMode</Type>
        <Desc>Number of spaces.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SprdAlign</Name>
    <Version>100</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Procedure SprdAlign determines the alignment setting within a worksheet cell. [[BR]][[BR]][[note:CellAlignTable]][[BR]]</Description>
    <ShortDesc>Sets the active alignment of worksheet cells when loaded.</ShortDesc>
    <Comments>OBSOLETE for Version 9: see new SetWSCellAlignment. [VML 01/09/01]</Comments>
    <Example>[[name]](2);[[BR]]LoadCell(3,3,'Cell 1,1');[[BR]]</Example>
    <ID>122</ID>
    <IDName>procSprdAlign</IDName>
    <InternalFunctionName>MP_SprdAlign</InternalFunctionName>
    <ModernName>CellAlign</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>align</Name>
        <Type>intMode</Type>
        <Desc>Text alignment within worksheet cell.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SprdBorder</Name>
    <Version>100</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] determines the border settings for cells within the active worksheet.[[BR]]</Description>
    <ShortDesc>Sets the border style of worksheet cells when loaded.</ShortDesc>
    <Comments>OBSOLETE for Version 9: see new SetWSCellBorder. [VML 01/09/01]</Comments>
    <Example>[[name]](TRUE,FALSE,TRUE,FALSE);[[BR]]LoadCell(1,1,'This is a string');[[BR]]</Example>
    <ID>123</ID>
    <IDName>procSprdBorder</IDName>
    <SpecialOverride>GetSprdBorder</SpecialOverride>
    <InternalFunctionName>GetSprdBorder</InternalFunctionName>
    <ModernName>WorksheetBorder</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>top</Name>
        <Type>boolMode</Type>
        <Desc>Top border on-off setting.</Desc>
      </Param>
      <Param>
        <Name>left</Name>
        <Type>boolMode</Type>
        <Desc>Left border on-off setting.</Desc>
      </Param>
      <Param>
        <Name>bot</Name>
        <Type>boolMode</Type>
        <Desc>Bottom border on-off setting.</Desc>
      </Param>
      <Param>
        <Name>right</Name>
        <Type>boolMode</Type>
        <Desc>Right border on-off setting.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SprdFormat</Name>
    <Version>100</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] determines the number format for cells within the active worksheet.[[BR]][[BR]]Values for [[p:3]] and [[p:4]] may not exceed 8 characters.[[BR]][[BR]][[note:CellFormatTable]][[BR]][[BR]]</Description>
    <ShortDesc>Sets the active numeric format of worksheet cells when loaded.</ShortDesc>
    <Comments>OBSOLETE for Version 9: see new SetWSCellNumberFormat. [VML 01/09/01]</Comments>
    <Example>[[name]](2,2,'$','');[[BR]]LoadCell(1,1,'=500 * 3.25');[[BR]]</Example>
    <ID>124</ID>
    <IDName>procSprdFormat</IDName>
    <SpecialOverride>GetSprdFormat</SpecialOverride>
    <InternalFunctionName>GetSprdFormat</InternalFunctionName>
    <ModernName>WorksheetNumFormat</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>numForm</Name>
        <Type>intMode</Type>
        <Desc>Numeric format of cell.</Desc>
      </Param>
      <Param>
        <Name>acc</Name>
        <Type>intMode</Type>
        <Desc>Numeric accuracy setting.</Desc>
      </Param>
      <Param>
        <Name>ldr</Name>
        <Type>stringMode</Type>
        <Desc>String prefix for cell.</Desc>
      </Param>
      <Param>
        <Name>trailr</Name>
        <Type>stringMode</Type>
        <Desc>String suffix for cell.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SprdSheet</Name>
    <Version>100</Version>
    <OldVersion>800</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Obsolete procedure.[[BR]]</Description>
    <ShortDesc>Obsolete procedure. See NewSprdSheet.</ShortDesc>
    <SeeAlso>NewSprdSheet</SeeAlso>
    <Comments>Deleted this obsolete function as of 9.0.0b7 - PCP 12-21-2000[[BR]]OBSOLETE: see new CreateWS and ShowWS. [VML 01/09/01]</Comments>
    <ID>121</ID>
    <IDName>procSprdSheet</IDName>
    <SpecialOverride>GetSprdSheet</SpecialOverride>
    <InternalFunctionName>GetSprdSheet</InternalFunctionName>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>Insertion point coordinates of worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Number of rows in worksheet.</Desc>
      </Param>
      <Param>
        <Name>col</Name>
        <Type>intMode</Type>
        <Desc>Number of columns in worksheet.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SprdSize</Name>
    <Version>100</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the number of rows and columns in the referenced worksheet.</Description>
    <ShortDesc>Returns the size of the referenced worksheet.</ShortDesc>
    <Comments>OBSOLETE for Version 9: see new GetWSRowColumnCount. [VML 01/09/01]</Comments>
    <ID>353</ID>
    <IDName>procSprdSize</IDName>
    <SpecialOverride>GetProcSprdSize</SpecialOverride>
    <InternalFunctionName>GetProcSprdSize</InternalFunctionName>
    <ModernName>WorksheetSize</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intVarMode</Type>
        <Desc>Returns row size of worksheet.</Desc>
      </Param>
      <Param>
        <Name>col</Name>
        <Type>intVarMode</Type>
        <Desc>Returns column size of worksheet.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SprdWidth</Name>
    <Version>100</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] specifies the width of cells in a worksheet when loaded.[[BR]]</Description>
    <ShortDesc>Sets the width of worksheet cells when loaded.</ShortDesc>
    <Comments>OBSOLETE for Version 9: see new SetWSColumnWidth. [VML 01/09/01]</Comments>
    <Example>[[name]](7);[[BR]]LoadCell(1,1,'Cell 1,1');[[BR]]</Example>
    <ID>125</ID>
    <IDName>procSprdWidth</IDName>
    <SpecialOverride>GetSprdWidth</SpecialOverride>
    <InternalFunctionName>GetSprdWidth</InternalFunctionName>
    <ModernName>SetColumnWidth</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>width</Name>
        <Type>realMode</Type>
        <Desc>Width of worksheet cell (0-255 characters).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Sqr</Name>
    <Version>100</Version>
    <Category>Math - General</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the square of the specified value.</Description>
    <ShortDesc>Returns the square of v.</ShortDesc>
    <ID>230</ID>
    <IDName>funcSqr</IDName>
    <InternalFunctionName>MP_Sqr</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>v</Name>
        <Type>realMode</Type>
        <Desc>Value to square.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Sqrt</Name>
    <Version>100</Version>
    <Category>Math - General</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the square root of the specified value.</Description>
    <ShortDesc>Returns the square root of v.</ShortDesc>
    <ID>235</ID>
    <IDName>funcSqrt</IDName>
    <InternalFunctionName>MP_Sqrt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>v</Name>
        <Type>realMode</Type>
        <Desc>Value for which to find the square root.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SrndArea</Name>
    <Version>100</Version>
    <Category>Graphic Calculation</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] when given a point, returns the area of the smallest polygon bounded by the selected objects.</Description>
    <ShortDesc>Returns the area of the smallest polygon bounded by a selection of objects</ShortDesc>
    <Comments>Given a point, returns the area of the smallest polygon bounded by the selected objects.  Returns nil if none can be found. [[BR]][[BR]][sd 8/18/98]</Comments>
    <ID>467</ID>
    <IDName>funcSrndArea</IDName>
    <SpecialOverride>MPGetSurrArea</SpecialOverride>
    <InternalFunctionName>MPGetSurrArea</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinates of reference point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Str2Num</Name>
    <Version>100</Version>
    <Category>Strings</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the specified string as a numeric value.</Description>
    <ShortDesc>Returns the specified string as a numeric value.</ShortDesc>
    <SeeAlso>ValidNumStr</SeeAlso>
    <Example>numValue:=[[name]]('235.44');[[BR]]</Example>
    <ID>247</ID>
    <IDName>funcStr2Num</IDName>
    <SpecialOverride>GetStr2Num</SpecialOverride>
    <InternalFunctionName>GetStr2Num</InternalFunctionName>
    <ModernName>StringToNum</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>s</Name>
        <Type>stringMode</Type>
        <Desc>Source string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>StrDialog</Name>
    <ChangedDate>2017:07:05T17:15:00</ChangedDate>
    <Version>100</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Function [[name]], displays a dialog box which requests the user to enter a string value.[[BR]]</Description>
    <ShortDesc>Displays a dialog box that requests the user to input a string.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   request, default, result :STRING;[[BR]]BEGIN[[BR]]   request := 'Enter some text...';[[BR]]   default := 'the default value';[[BR]]   result := StrDialog(request, default);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>204</ID>
    <IDName>funcStrDialog</IDName>
    <SpecialOverride>GetFuncStrDialog</SpecialOverride>
    <InternalFunctionName>GetFuncStrDialog</InternalFunctionName>
    <ModernName>StringDialog</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>request</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Dialog user prompt string.</Desc>
      </Param>
      <Param>
        <Name>default</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Default value for input field.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SubtractSolid</Name>
    <Version>700</Version>
    <Category>Objects - Solids</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] creates a new solid subtraction object from the referenced source objects.[[BR]][[BR]][[note:SolidsResultsTable]]</Description>
    <ShortDesc>Creates a solid subtraction from the referenced objects.</ShortDesc>
    <ID>593</ID>
    <IDName>funcSubtractSolid</IDName>
    <InternalFunctionName>MP_SubtractSolid</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj1</Name>
        <Type>handleMode</Type>
        <Desc>Handle to source object for subtract operation.</Desc>
      </Param>
      <Param>
        <Name>obj2</Name>
        <Type>handleMode</Type>
        <Desc>Handle to source object for subtract operation.</Desc>
      </Param>
      <Param>
        <Name>newSolid</Name>
        <Type>handleVarMode</Type>
        <Desc>Handle to resultant object from subtract operation.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Symbol</Name>
    <Version>100</Version>
    <Category>Objects - Symbols</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] places a symbol in the document at the specified coordinate location.</Description>
    <ShortDesc>Inserts a symbol into a document according to specified parameters.</ShortDesc>
    <ID>127</ID>
    <IDName>procSymbol</IDName>
    <SpecialOverride>GetSymbol</SpecialOverride>
    <InternalFunctionName>GetSymbol</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>symbolName</Name>
        <Type>stringMode</Type>
        <Desc>Name of symbol.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinates of symbol insertion point.</Desc>
      </Param>
      <Param>
        <Name>rotationAngle</Name>
        <Type>angleMode</Type>
        <Desc>Rotation angle of symbol, in degrees.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SymDefNum</Name>
    <Version>100</Version>
    <Category>Objects - Symbols</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the number of symbol definitions within the active document.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the number of symbol definitions in the active document.</ShortDesc>
    <ID>301</ID>
    <IDName>funcSymDefNum</IDName>
    <InternalFunctionName>MP_SymDefNum</InternalFunctionName>
    <ModernName>NumSymDefs</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Tab</Name>
    <Version>100</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>Procedure Tab writes a tab character to the current output file.</Description>
    <ShortDesc>Writes a tab character to the current output file.</ShortDesc>
    <Example>Tab(2);[[BR]]{writes two tabs to the output file}</Example>
    <ID>221</ID>
    <IDName>procTab</IDName>
    <InternalFunctionName>MP_Tab</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>n</Name>
        <Type>intMode</Type>
        <Desc>Number of tab characters to be written to file.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Tan</Name>
    <Version>100</Version>
    <Category>Math - General</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the tangent of the specified value.</Description>
    <ShortDesc>Returns the tangent of the specified value.</ShortDesc>
    <ID>284</ID>
    <IDName>funcTan</IDName>
    <InternalFunctionName>MP_Tan</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>v</Name>
        <Type>realMode</Type>
        <Desc>Angle, in radians.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>TargetSprdSheet</Name>
    <Version>800</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] selects the referenced worksheet as the active worksheet for the document. The worksheet is not opened onscreen.</Description>
    <ShortDesc>Selects the referenced worksheet for editing.</ShortDesc>
    <Comments>This selects a spreadsheet for use by the script.  It does not open the spreadsheet. [sd 8/18/98][[BR]]OBSOLETE for Version 9: see new SetTopVisibleWS. [VML 01/09/01]</Comments>
    <ID>597</ID>
    <IDName>procTargetSprdSheet</IDName>
    <SpecialOverride>ProcTargetSprdSheet</SpecialOverride>
    <InternalFunctionName>ProcTargetSprdSheet</InternalFunctionName>
    <ModernName>TargetWorksheet</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>TextFace</Name>
    <Version>100</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the active text style of a Vectorworks document.[[BR]][[BR]]The text style may be one or a combination of the available styles, and should be enclosed in brackets. To specify multiple styles, each style should be separated by a comma.</Description>
    <ShortDesc>Sets the active text style for the document.</ShortDesc>
    <Comments>Make sure the docs indicate that the face must appear in set notation - check it out [PCP]</Comments>
    <Example>TextFace([Italic]);[[BR]]{set the active text style to Italic}[[BR]][[BR]]TextFace([Bold,Outline]);[[BR]]{set the active text style to bold outline}</Example>
    <ID>164</ID>
    <IDName>procTextFace</IDName>
    <InternalFunctionName>MP_TextFace</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>s</Name>
        <Type>styleMode</Type>
        <Desc>Style setting for document.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>TextFlip</Name>
    <Version>100</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] flips newly created text vertically or horizontally. Parameter [[p:1]] specifies the flip effect to be applied to the text.[[BR]][[BR]][[note:TextFlipTable]][[BR]]</Description>
    <ShortDesc>Sets the flip effect to be applied to new text.</ShortDesc>
    <Example>TextFlip(1);[[BR]]CreateText('Sample text string');</Example>
    <ID>165</ID>
    <IDName>procTextFlip</IDName>
    <InternalFunctionName>MP_TextFlip</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>FlipType</Name>
        <Type>intMode</Type>
        <Desc>Text flip setting for text.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>TextFont</Name>
    <Version>100</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the active font for the document.</Description>
    <ShortDesc>Sets the active font of the document.</ShortDesc>
    <Example>TextFont(GetFontID('Times'));</Example>
    <ID>166</ID>
    <IDName>procTextFont</IDName>
    <InternalFunctionName>MP_TextFont</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>fontID</Name>
        <Type>intMode</Type>
        <Desc>Font ID setting for document.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>TextJust</Name>
    <Version>100</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the active text justification for a Vectorworks document. [[BR]][[BR]][[note:TextHorizontalAlignTable]][[BR]][[fig:textlocus.gif]]</Description>
    <ShortDesc>Sets the active text justification of the document.</ShortDesc>
    <ID>167</ID>
    <IDName>procTextJust</IDName>
    <InternalFunctionName>MP_TextJust</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>justify</Name>
        <Type>intMode</Type>
        <Desc>Justification setting for document.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>TextOrigin</Name>
    <Version>100</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] is used to specify the origin point (location) of a newly created text object.[[BR]][[BR]]The position of the actual text with respect to the origin is determined by the current vertical and horizontal text justification modes.[[BR]][[BR]][[fig:textlocus.gif]]</Description>
    <ShortDesc>Specifies the insertion point of a new text string.</ShortDesc>
    <SeeAlso>MoveTo</SeeAlso>
    <ID>133</ID>
    <IDName>procTextOrigin</IDName>
    <InternalFunctionName>MP_TextOrigin</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinates of text origin.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>TextRotate</Name>
    <Version>100</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the angle of a new text object.</Description>
    <ShortDesc>Sets the rotation angle of a new text object.</ShortDesc>
    <Example>TextRotate(45);[[BR]]TextOrigin(0",0");[[BR]]CreateText('Rotated string');</Example>
    <ID>168</ID>
    <IDName>procTextRotate</IDName>
    <InternalFunctionName>MP_TextRotate</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>Rotation</Name>
        <Type>realMode</Type>
        <Desc>Rotation angle, in degrees, for text.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>TextSize</Name>
    <Version>100</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the active text size of a Vectorworks document.[[BR]][[BR]]Text size is specified in points (1 point = 1/72"). If 0 is specified, then the font size will default to 12 pt text.</Description>
    <ShortDesc>Sets the active text size of the document.</ShortDesc>
    <Comments>The size parameter is now a REAL so fractional point sizes can be specified. This should be fully compatible with existing VectorScript code. [9/14/98 - PCP] [[BR]][[BR]]Text size is in page-space and does not take drawing scale into account.  [9/14/98 - PCP] </Comments>
    <Example>TextSize(18);[[BR]]{set the active text size to 18 point}</Example>
    <ID>169</ID>
    <IDName>procTextSize</IDName>
    <InternalFunctionName>MP_TextSize</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>size</Name>
        <Type>realMode</Type>
        <Desc>Point size of text.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>TextSpace</Name>
    <Version>100</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the active spacing for a Vectorworks document. [[BR]][[BR]][[note:TextSpacingTable]][[BR]]</Description>
    <ShortDesc>Sets the active text spacing for the document.</ShortDesc>
    <Example>TextSpace(4);[[BR]]{set the active leading to double space}</Example>
    <ID>170</ID>
    <IDName>procTextSpace</IDName>
    <InternalFunctionName>MP_TextSpace</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>spacing</Name>
        <Type>intMode</Type>
        <Desc>Spacing style for text.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Trunc</Name>
    <Version>100</Version>
    <Category>Math - General</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Truncates the decimal portion of the specified REAL number, returning the result as a LONGINT value.[[BR]][[BR]]Note that direct assignment of a REAL to a LONGINT will result in rounding the REAL to the &lt;i&gt;nearest&lt;/i&gt; LONGINT, whereas Trunc always "rounds down" (if the number is positive).[[BR]]</Description>
    <ShortDesc>Converts a REAL to a LONGINT by dropping the fractional part.</ShortDesc>
    <ID>227</ID>
    <IDName>funcTrunc</IDName>
    <InternalFunctionName>MP_Trunc</InternalFunctionName>
    <ModernName>RealToLong</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>v</Name>
        <Type>realMode</Type>
        <Desc>Real value to truncate.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Ungroup</Name>
    <Version>100</Version>
    <Category>Objects - Groups</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] ungroups selected objects in a Vectorworks document.When [[name]] is called, any selected group objects will be destroyed, reverting to the original component objects.[[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Ungroups selected object(s).</ShortDesc>
    <ID>120</ID>
    <IDName>procUngroup</IDName>
    <SpecialOverride>Ungroup</SpecialOverride>
    <InternalFunctionName>Ungroup</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>UnionRect</Name>
    <Version>100</Version>
    <Category>Graphic Calculation</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns a rectangle based on the boundary enclosing the two specified rectangles.[[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Returns a union of the two specified rectangular areas.</ShortDesc>
    <Example>[[name]](0,0,3,3,3,3,5,5,x1,y1,x2,y2);</Example>
    <ID>392</ID>
    <IDName>procUnionRect</IDName>
    <SpecialOverride>MPUnionRect</SpecialOverride>
    <InternalFunctionName>MPUnionRect</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p1</Name>
        <Type>globPtMode</Type>
        <Desc>Top left coordinate of rectangle 1.</Desc>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>globPtMode</Type>
        <Desc>Bottom right coordinate of rectangle 1.</Desc>
      </Param>
      <Param>
        <Name>p3</Name>
        <Type>globPtMode</Type>
        <Desc>Top left coordinate of rectangle 2.</Desc>
      </Param>
      <Param>
        <Name>p4</Name>
        <Type>globPtMode</Type>
        <Desc>Bottom right coordinate of rectangle 2.</Desc>
      </Param>
      <Param>
        <Name>p5</Name>
        <Type>globPtInOutMode</Type>
        <Desc>Top left coordinate of boundary rectangle.</Desc>
      </Param>
      <Param>
        <Name>p6</Name>
        <Type>globPtInOutMode</Type>
        <Desc>Bottom right coordinate of boundary rectangle.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Units</Name>
    <Version>100</Version>
    <Category>Units</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] specifies a standard units setting for the active document. [[BR]][[BR]][[note:UnitSettingTable]][[BR]]</Description>
    <ShortDesc>Specifies a standard units setting for the active document</ShortDesc>
    <ID>183</ID>
    <IDName>procUnits</IDName>
    <SpecialOverride>GetUnits</SpecialOverride>
    <InternalFunctionName>GetUnits</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>i</Name>
        <Type>intMode</Type>
        <Desc>Standard units setting index value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>UprString</Name>
    <Version>100</Version>
    <Category>Strings</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] converts all characters in the specified string to upper case.[[BR]][[BR]]</Description>
    <ShortDesc>Converts the specified string to upper case.</ShortDesc>
    <Example>revisedString := 'vectorworks';[[BR]][[name]](revisedString);[[BR]]{Sets revisedString equal to 'VECTORWORKS'}</Example>
    <ID>366</ID>
    <IDName>procUprString</IDName>
    <InternalFunctionName>MP_UprString</InternalFunctionName>
    <ModernName>UpperString</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>str</Name>
        <Type>eCharDynarrayInOutMode</Type>
        <Desc>Source string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ValidAngStr</Name>
    <Version>100</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns TRUE if the specified value can be converted into a numeric angle value. If TRUE, the value (in decimal degrees) of the string is returned.[[BR]]</Description>
    <ShortDesc>Returns if specified string can be converted into a angle value.</ShortDesc>
    <Result>Returns TRUE if the specified string can be converted into a angle value.</Result>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	str :STRING;[[BR]]	value :REAL;[[BR]]BEGIN[[BR]]	str := StrDialog('Enter the angle:', 'N10E');[[BR]]	IF ValidAngStr(str, value) THEN Message(value);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>455</ID>
    <IDName>funcValidAngStr</IDName>
    <InternalFunctionName>MP_ValidAngStr</InternalFunctionName>
    <ModernName>ValidAngleString</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>str</Name>
        <Type>stringMode</Type>
        <Desc>String value to be checked for angle validity.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>rVarMode</Type>
        <Desc>Returns numeric angle value converted from input string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ValidNumStr</Name>
    <Version>100</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns TRUE if the specified string can be converted into a numeric value. If TRUE, the numeric value is returned.</Description>
    <ShortDesc>Returns if specified string can be converted into a numeric value.</ShortDesc>
    <Result>Returns TRUE if specified string can be converted into a numeric value.</Result>
    <Example>CASE Item OF[[BR]]{// OK Button //}[[BR]]1:BEGIN[[BR]]  IF [[name]](GetField(4),value) THEN BEGIN[[BR]]    Done:=TRUE;[[BR]]    replaceValue:= GetField(6);[[BR]]					[[BR]]    IF ItemSel(9) THEN textMode:=2;[[BR]]    IF ItemSel(10) THEN textMode:=4;[[BR]]    IF ItemSel(11) THEN textMode:=8;[[BR]]    IF ItemSel(12) THEN layerMode:=16;[[BR]]    IF ItemSel(13) THEN layerMode:=32;[[BR]]    IF ItemSel(14) THEN caseMode:=1;[[BR]]  END[[BR]]  ELSE SysBeep;[[BR]]END;[[BR]]</Example>
    <ID>448</ID>
    <IDName>funcValidNumStr</IDName>
    <InternalFunctionName>MP_ValidNumStr</InternalFunctionName>
    <ModernName>ValidNumString</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>str</Name>
        <Type>stringMode</Type>
        <Desc>String value to be checked for numeric validity.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>rVarMode</Type>
        <Desc>Numeric value converted from input string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>VDelete</Name>
    <Version>100</Version>
    <Category>View / Zoom</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] deletes the specified saved view.</Description>
    <ShortDesc>Deletes the specified saved view.</ShortDesc>
    <Example>[[name]]('Detail A-A');[[BR]]</Example>
    <ID>389</ID>
    <IDName>procVDelete</IDName>
    <InternalFunctionName>MP_VDelete</InternalFunctionName>
    <ModernName>DeleteView</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Name of view to be deleted.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>VRestore</Name>
    <Version>100</Version>
    <Category>View / Zoom</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] restores the specified saved view (i.e., sheet name).[[BR]]</Description>
    <ShortDesc>Sets the current view to the specified saved view.</ShortDesc>
    <ID>388</ID>
    <IDName>procVRestore</IDName>
    <InternalFunctionName>MP_VRestore</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Name of view to be displayed.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>VSave</Name>
    <Version>100</Version>
    <Category>View / Zoom</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] saves the current Vectorworks document view.[[BR]]</Description>
    <ShortDesc>Saves the current view.</ShortDesc>
    <ID>387</ID>
    <IDName>procVSave</IDName>
    <InternalFunctionName>MP_VSave</InternalFunctionName>
    <ModernName>SaveView</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Name of view to save.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Wait</Name>
    <Version>100</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] delays execution in VectorScript for a specified number of seconds.[[BR]][[BR]]When paused, a VectorScript routine stops at the point where [[name]] is encountered.[[BR]][[BR]]</Description>
    <ShortDesc>Pauses VectorScript command execution for the specified number of seconds.</ShortDesc>
    <Example>Wait(3);[[BR]]{pauses execution for 3 seconds}</Example>
    <ID>379</ID>
    <IDName>procWait</IDName>
    <SpecialOverride>GetProcWait</SpecialOverride>
    <InternalFunctionName>GetProcWait</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>seconds</Name>
        <Type>intMode</Type>
        <Desc>Number of seconds to pause script execution.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Wall</Name>
    <Version>400</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a wall object in a Vectorworks document. The wall will adopt the current default settings for walls when created.[[BR]]</Description>
    <ShortDesc>Creates a wall from (x1,y1) to (x2,y2)</ShortDesc>
    <SeeAlso>RoundWall</SeeAlso>
    <Comments>[sd 8/18/98]</Comments>
    <ID>501</ID>
    <IDName>procWall</IDName>
    <SpecialOverride>GetWall</SpecialOverride>
    <InternalFunctionName>GetWall</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p1</Name>
        <Type>globPtMode</Type>
        <Desc>Start point of wall.</Desc>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>globPtMode</Type>
        <Desc>End point of wall.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WallCap</Name>
    <Version>400</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a wall cap on a newly created wall object.[[BR]][[BR]]Specifying nonzero values for the cap offset values will create angled wall caps.[[BR]][[BR]]</Description>
    <ShortDesc>Sets a wall cap on the most recently created wall object.</ShortDesc>
    <Example>Wall(0,0,7',0);[[BR]]WallCap(True, True, False, 1.0', 0.0);[[BR]]{sets the cap status of the starting cap of the wall as flat cap, bevelled, with the right side extending 1' beyond the wall end point}</Example>
    <ID>505</ID>
    <IDName>procWallCap</IDName>
    <SpecialOverride>MPWallCap</SpecialOverride>
    <InternalFunctionName>MPWallCap</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>atStart</Name>
        <Type>boolMode</Type>
        <Desc>Start-end location of wall cap.</Desc>
      </Param>
      <Param>
        <Name>closed</Name>
        <Type>boolMode</Type>
        <Desc>Controls display status of cap.</Desc>
      </Param>
      <Param>
        <Name>round</Name>
        <Type>boolMode</Type>
        <Desc>Specifies flat or round cap.</Desc>
      </Param>
      <Param>
        <Name>rightOffDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Right extension of wall line beyond end point.</Desc>
      </Param>
      <Param>
        <Name>leftOffDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Left extension of wall line beyond end point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WallHeight</Name>
    <ChangedDate>2011:05:16T16:30:00</ChangedDate>
    <Version>600</Version>
    <OldVersion Mode="AsWarning">1700</OldVersion>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the wall heights of the referenced wall object.[[BR]]</Description>
    <ShortDesc>Returns the start and end heights of the referenced wall.</ShortDesc>
    <ID>554</ID>
    <IDName>procWallHeight</IDName>
    <SpecialOverride>WallHeight</SpecialOverride>
    <InternalFunctionName>WallHeight</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>wallHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to wall.</Desc>
      </Param>
      <Param>
        <Name>startHt</Name>
        <Type>rVarMode</Type>
        <Desc>Returns start height of wall.</Desc>
      </Param>
      <Param>
        <Name>endHt</Name>
        <Type>rVarMode</Type>
        <Desc>Returns end height of wall.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WallPeak</Name>
    <Version>400</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Creates a wall peak of the specified height at a specified distance from the wall start point.[[BR]][[BR]]There is no error checking of the distance or peak height parameters; it is left to the programmer to ensure that the parameter values are valid.[[BR]]</Description>
    <ShortDesc>Creates a wall peak in the most recently created wall object.</ShortDesc>
    <Example>SetZVal(0',8');[[BR]]Wall(0,0,7,0);[[BR]]WallPeak(3'-6",9'-0");[[BR]]{creates a 9' wall peak 3'-6" from the start point of the wall}[[BR]]</Example>
    <ID>506</ID>
    <IDName>procWallPeak</IDName>
    <SpecialOverride>MPWallPeak</SpecialOverride>
    <InternalFunctionName>MPWallPeak</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>alongDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Location of peak (measured from wall start point).</Desc>
      </Param>
      <Param>
        <Name>heightDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Elevation of wall peak.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WallTo</Name>
    <Version>400</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a wall object in a Vectorworks document. [[name]] begins the wall at the current graphics pen position, with the end point at the specified location.[[BR]][[BR]]To explicitly set the start point of the wall, [[name]] must be preceded by either Procedure MoveTo, LineTo, Wall, or [[name]]. The procedure automatically performs a join/cleanup operation an intersection if the previous procedure was a wall creation procedure.</Description>
    <ShortDesc>Creates a wall from the current pen position to (pX,pY).</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	x1, y1, x2, y2 :REAL;[[BR]]	resourceID :LONGINT;[[BR]]	wallStyleCnt :INTEGER;[[BR]]	wallStyleName :STRING;[[BR]]	wallStyleHand :HANDLE;[[BR]]BEGIN[[BR]]	resourceID := BuildResourceList(127, 113, '', wallStyleCnt);[[BR]]	IF wallStyleCnt &gt; 0 THEN BEGIN[[BR]]		wallStyleName := GetNameFromResourceList(resourceID, 1);[[BR]]		AlrtDialog(wallStyleName);[[BR]]		wallStyleHand := ImportResourceToCurrentFile(resourceID, 1);[[BR]]		SetWallPrefStyle(wallStyleName);[[BR]]	END ELSE BEGIN[[BR]]		SetWallWidth(3.5");[[BR]]	END;[[BR]]	GetPt(x1, y1);[[BR]]	GetPtL(x1, y1, x2, y2);[[BR]]	MoveTo(x1, y1);[[BR]]	WallTo(x2, y2);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>502</ID>
    <IDName>procWallTo</IDName>
    <SpecialOverride>GetWallTo</SpecialOverride>
    <InternalFunctionName>GetWallTo</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>End point of wall.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WallWidth</Name>
    <Version>600</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the wall width of the referenced wall object.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the width of the referenced wall.</ShortDesc>
    <SeeAlso>GetWallThickness,HWallWidth</SeeAlso>
    <ID>553</ID>
    <IDName>funcWallWidth</IDName>
    <SpecialOverride>WallWidth</SpecialOverride>
    <InternalFunctionName>WallWidth</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>wallHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to wall.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>YNDialog</Name>
    <ChangedDate>2017:07:05T17:15:00</ChangedDate>
    <Version>100</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] displays a dialog box which requests the user to select a Yes or No value. If the user selects the Yes button in the dialog box, the value returned by [[name]] is TRUE; if the user selects No, the function returns FALSE.[[BR]][[BR]]</Description>
    <ShortDesc>Displays a dialog box which requests the user to select a Yes or No value.</ShortDesc>
    <Example>Answer := [[name]]('Do you wish to continue');[[BR]]</Example>
    <ID>205</ID>
    <IDName>funcYNDialog</IDName>
    <SpecialOverride>GetFuncYNDialog</SpecialOverride>
    <InternalFunctionName>GetFuncYNDialog</InternalFunctionName>
    <ModernName>YesNoDialog</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>s</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Dialog user prompt string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DSelectAll</Name>
    <Version>100</Version>
    <Category>Selection</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] deselects all selected visible objects on the active layer of a Vectorworks document. If Layer Options is set to Show-Snap-Modify Others, then [[name]] will deselect all selected visible objects within the document.[[BR]][[BR]]</Description>
    <ShortDesc>Deselects all objects on active layers.</ShortDesc>
    <ID>101</ID>
    <IDName>procDSelectAll</IDName>
    <InternalFunctionName>MP_DSelectAll</InternalFunctionName>
    <ModernName>DeselectAll</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
  </Item>

  <Item>
    <Name>ClosePoly</Name>
    <Version>100</Version>
    <Category>Objects - Polys</Category>
    <Type>Procedure</Type>
    <Description>Procedures [[name]] set the polygon creation mode for polygon objects created in VectorScript to closed. To turn this mode off, use Procedure OpenPoly; the two modes used in conjunction will act as a toggle for the feature.[[BR]][[BR]]</Description>
    <ShortDesc>Sets the polygon drawing mode to closed polygons.</ShortDesc>
    <Example>[[name]];[[BR]]Poly(0,0,1,1,1,-1);[[BR]]{creates a closed 3 sided polygon}</Example>
    <ID>146</ID>
    <IDName>procClosePoly</IDName>
    <InternalFunctionName>MP_ClosePoly</InternalFunctionName>
    <ModernName>ClosePolyMode</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>OpenPoly</Name>
    <Version>100</Version>
    <Category>Objects - Polys</Category>
    <Type>Procedure</Type>
    <Description>Procedures [[name]] set the polygon creation mode for polygon objects created in VectorScript to open. To turn this mode off, use Procedure ClosePoly; the two modes used in conjunction will act as a toggle for the feature.[[BR]][[BR]]</Description>
    <ShortDesc>Sets the polygon drawing mode to open polygons.</ShortDesc>
    <Example>[[name]];[[BR]]Poly(0,0,1,1,1,-1);[[BR]]{creates a open 3 sided polygon}</Example>
    <ID>147</ID>
    <IDName>procOpenPoly</IDName>
    <InternalFunctionName>MP_OpenPoly</InternalFunctionName>
    <ModernName>OpenPolyMode</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>LckObjs</Name>
    <Version>100</Version>
    <Category>General Edit</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] locks the selected objects. When an object is locked, it[[BR]]may be copied or duplicated, but it may not be changed in any other way.[[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Locks the selected object(s).</ShortDesc>
    <Example>SelectObj((C='Structure To Remain'));[[BR]][[name]];</Example>
    <ID>156</ID>
    <IDName>procLckObjs</IDName>
    <InternalFunctionName>MP_LckObjs</InternalFunctionName>
    <ModernName>LockSelObj</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>UnLckObjs</Name>
    <Version>100</Version>
    <Category>General Edit</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] unlocks the selected objects.</Description>
    <ShortDesc>Unlocks the selected object(s).</ShortDesc>
    <Example>SelectObj((C='Structure To Remain'));[[BR]][[name]];</Example>
    <ID>157</ID>
    <IDName>procUnLckObjs</IDName>
    <InternalFunctionName>MP_UnLckObjs</InternalFunctionName>
    <ModernName>UnlockSelObj</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Absolute</Name>
    <Version>100</Version>
    <Category>Command</Category>
    <Type>Procedure</Type>
    <Description>Sets the point designation method for VectorScript procedure calls. When this mode is active, all points specified in procedure calls are assumed to be coordinate locations within the document.[[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Sets the point designation method of VectorScript.</ShortDesc>
    <Example>[[name]];[[BR]]ClosePoly;[[BR]]Poly(0,0,1,1,1,2,2,2,2,0);[[BR]]</Example>
    <ID>171</ID>
    <IDName>procAbsolute</IDName>
    <InternalFunctionName>MP_Absolute</InternalFunctionName>
    <ModernName>AbsoluteCoordMode</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Relative</Name>
    <Version>100</Version>
    <Category>Command</Category>
    <Type>Procedure</Type>
    <Description>Sets the point designation method for VectorScript procedure calls. [[BR]][[BR]]When this mode is active, all points specified in procedure calls are assumed to be X-Y offsets from the current graphics pen location. For example, the point designation (0,2) will move the graphics pen two vertical units away from its present location.[[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Sets the point designation method of VectorScript.</ShortDesc>
    <Example>[[name]];[[BR]]ClosePoly;[[BR]]Poly(0,0,1,1,1,2,2,2,2,0);[[BR]]</Example>
    <ID>172</ID>
    <IDName>procRelative</IDName>
    <InternalFunctionName>MP_Relative</InternalFunctionName>
    <ModernName>RelativeCoordMode</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>FlipHor</Name>
    <Version>100</Version>
    <Category>General Edit</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] horizontally mirrors selected objects about the center of the object(s). This procedure produces the same effect as the command 'Flip Horizontal' .[[BR]][[BR]]</Description>
    <ShortDesc>Flips selected object(s) horizontally.</ShortDesc>
    <ID>187</ID>
    <IDName>procFlipHor</IDName>
    <InternalFunctionName>MP_FlipHor</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>FlipVer</Name>
    <Version>100</Version>
    <Category>General Edit</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] vertically mirrors selected objects about the center of the[[BR]]object(s). This procedure produce the same effect as the command 'Flip Vertical'.[[BR]]</Description>
    <ShortDesc>Flips selected object(s) vertically.</ShortDesc>
    <ID>188</ID>
    <IDName>procFlipVer</IDName>
    <InternalFunctionName>MP_FlipVer</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Forward</Name>
    <Version>100</Version>
    <Category>General Edit</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] moves the selected objects up one level in the onscreen object stacking order.[[BR]][[BR]]Objects in the document are drawn in the order in which they are created, with newer objects drawn on top of previously created objects. It is sometimes necessary to adjust this drawing, or stacking, order in order to make objects visible or create a desired effect.[[BR]][[BR]][[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Moves selected object(s) forward in the object stacking order.</ShortDesc>
    <SeeAlso>HMoveForward</SeeAlso>
    <ID>189</ID>
    <IDName>procForward</IDName>
    <InternalFunctionName>MP_Forward</InternalFunctionName>
    <ModernName>SendForward</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Backward</Name>
    <Version>100</Version>
    <Category>General Edit</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] moves the selected objects down one level in the onscreen object stacking order.[[BR]]</Description>
    <ShortDesc>Moves selected object(s) backward in the object stacking order.</ShortDesc>
    <ID>190</ID>
    <IDName>procBackward</IDName>
    <InternalFunctionName>MP_Backward</InternalFunctionName>
    <ModernName>SendBackward</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>MoveFront</Name>
    <Version>100</Version>
    <Category>General Edit</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] moves the selected objects to the front (top) of the onscreen object stacking order.[[BR]]</Description>
    <ShortDesc>Moves selected object(s) to the front of the object stacking order.</ShortDesc>
    <ID>191</ID>
    <IDName>procMoveFront</IDName>
    <InternalFunctionName>MP_MoveFront</InternalFunctionName>
    <ModernName>SendToFront</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>MoveBack</Name>
    <Version>100</Version>
    <Category>General Edit</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] moves the selected objects to the back (bottom) of the onscreen object stacking order.[[BR]][[BR]]</Description>
    <ShortDesc>Moves selected object(s) to the rear of the object stacking order.</ShortDesc>
    <ID>192</ID>
    <IDName>procMoveBack</IDName>
    <InternalFunctionName>MP_MoveBack</InternalFunctionName>
    <ModernName>SendToBack</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>SysBeep</Name>
    <Version>100</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] uses the current system prompt sound to alert the user.[[BR]][[BR]]</Description>
    <ShortDesc>Invokes the system beep.</ShortDesc>
    <ID>198</ID>
    <IDName>procSysBeep</IDName>
    <InternalFunctionName>MP_SysBeep</InternalFunctionName>
    <ModernName>Beep</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>ClrMessage</Name>
    <Version>100</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] closes the message palette.[[BR]][[BR]]</Description>
    <ShortDesc>Closes the message palette.</ShortDesc>
    <ID>384</ID>
    <IDName>procClrMessage</IDName>
    <InternalFunctionName>MP_ClrMessage</InternalFunctionName>
    <ModernName>CloseMessagePal</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Suppress</Name>
    <Version>100</Version>
    <OldVersion>800</OldVersion>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Obsolete. Unsupported.</Description>
    <ShortDesc>Obsolete.</ShortDesc>
    <Comments>Deleted this obsolete function as of 9.0.0b7 - PCP 12-21-2000[[BR]][[BR]]In MiniCAD 7 and prior, this would allow MiniPascal execution errors to be suppressed, but I dou't think it ever worked. It is now obsolete. </Comments>
    <ID>396</ID>
    <IDName>procSuppress</IDName>
    <InternalFunctionName>MP_Suppress</InternalFunctionName>
    <LowLevel>True</LowLevel>
  </Item>

  <Item>
    <Name>Update</Name>
    <Version>100</Version>
    <OldVersion>800</OldVersion>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Obsolete. Unsupported.</Description>
    <ShortDesc>Obsolete.</ShortDesc>
    <Comments>Deleted this obsolete function as of 9.0.0b7 - PCP 12-21-2000[[BR]][[BR]]Obsolete - old custom dialog code.</Comments>
    <ID>456</ID>
    <IDName>procUpdate</IDName>
    <InternalFunctionName>MP_Update</InternalFunctionName>
  </Item>

  <Item>
    <Name>PushAttrs</Name>
    <Version>400</Version>
    <Category>Command</Category>
    <Type>Procedure</Type>
    <Description>Stores current attribute, tool, text, and constraint settings for later retrieval as the document default settings. Document settings can be modified as needed after using this call, and the stored settings can be restored with a call to PopAttrs.  Calling this function more than once (nested) is allowed.  The settings will be placed on a stack, and will be retrieved by calls to PopAttrs in the correct sequence. [[BR]]</Description>
    <ShortDesc>Saves the current document attributes state for retrieval.</ShortDesc>
    <SeeAlso>PopAttrs</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]BEGIN[[BR]]  PushAttrs;[[BR]]  PenFore(215);[[BR]]  PenBack(5);[[BR]]  PenPat(25);[[BR]]  PenSize(42);[[BR]]  PenPat(25);[[BR]]  SetConstrain('q');[[BR]]  CallTool(-201);[[BR]]  PopAttrs;[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>518</ID>
    <IDName>procPushAttrs</IDName>
    <InternalFunctionName>MP_PushAttrs</InternalFunctionName>
    <ModernName>PushAttributes</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>PopAttrs</Name>
    <Version>400</Version>
    <Category>Command</Category>
    <Type>Procedure</Type>
    <Description>Restores the attribute, tool, and constraint settings saved by an earlier call to PushAttrs.[[BR]]</Description>
    <ShortDesc>Retrieves the saved document attributes state stored by PushAttrs.</ShortDesc>
    <SeeAlso>PushAttrs;</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]BEGIN[[BR]]  PushAttrs;[[BR]]  PenFore(215);[[BR]]  PenBack(5);[[BR]]  PenPat(25);[[BR]]  PenSize(42);[[BR]]  PenPat(25);[[BR]]  SetConstrain('q');[[BR]]  CallTool(-201);[[BR]]  PopAttrs;[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>519</ID>
    <IDName>procPopAttrs</IDName>
    <InternalFunctionName>MP_PopAttrs</InternalFunctionName>
    <ModernName>PopAttributes</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Run</Name>
    <Version>100</Version>
    <Category>Command</Category>
    <Type>Procedure</Type>
    <Description>Initiates the execution of a VectorScript command by signalling the VectorScript interpreter to execute the script source code. [[BR]][[BR]]The procedure takes a single parameter, which is the name of the VectorScript command as defined at the beginning of the source code listing.[[BR]][[BR]]</Description>
    <ShortDesc>Initiates the execution of a script..</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]BEGIN[[BR]]	Sysbeep;[[BR]]	Sysbeep;[[BR]]	Sysbeep;[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>374</ID>
    <IDName>procRun</IDName>
    <InternalFunctionName>MP_Run</InternalFunctionName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>userProcMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Poly</Name>
    <Version>100</Version>
    <Category>Objects - Polys</Category>
    <Type>Procedure</Type>
    <Description>Procedure Poly creates a polygon object in the document. Vertices of the polygon are specified by a parameter list of x1,y1 through xn,yn, which correspond to the coordinate locations of each vertex.[[BR]][[BR]]</Description>
    <ShortDesc>Draws a polygon with specified vertices.</ShortDesc>
    <Example>[[name]](0,0,-0.5,1,0.5,1.5,2,1,1,-0.5);[[BR]]</Example>
    <ID>113</ID>
    <IDName>procPoly</IDName>
    <InternalFunctionName>MP_Poly</InternalFunctionName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>anyPt</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NoAngleVar</Name>
    <Version>100</Version>
    <Category>Command</Category>
    <Type>Procedure</Type>
    <Description>Sets the angle designation method in VectorScript. When called, VectorScript will treat language symbols which can be interpreted as direction angles (e.g., N, S, NW, SE) as as angles, rather than as variables.[[BR]]</Description>
    <ShortDesc>Disables angle variable support.</ShortDesc>
    <Example>procedure test;[[BR]]var[[BR]]	S : Real;[[BR]][[BR]]begin[[BR]]	[[name]];[[BR]]	S := 30;[[BR]]	LineTo(3", #S);[[BR]]	{ The 'S' will be treated as the direction 'South'  }[[BR]]	{ and line will be drawn on 270 degree angle. }[[BR]][[BR]]end;[[BR]]run(test);[[BR]]</Example>
    <ID>174</ID>
    <IDName>procNoAngleVar</IDName>
    <InternalFunctionName>MP_NoAngleVar</InternalFunctionName>
    <ModernName>AngleVarModeOff</ModernName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
  </Item>

  <Item>
    <Name>WriteLn</Name>
    <Version>100</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] outputs the specified data to an ASCII text file. The variable length parameter list specifies the data to be written to the file. [[BR]][[BR]]Parameters may be any valid data type, and data types may be mixed in a single call to the procedure. A carriage return is appended to the end of the line of data, so that the file pointer is at the beginning of a new line in the file, and any data written to the file after the procedure call will be on the new line.[[BR]][[BR]][[note:WriteLnFormatNote]][[BR]]</Description>
    <ShortDesc>Writes a line of data to a text file. Uses character encoding and line ending appropriate for platform on which the script is running.  This allows the text file to be viewed by an external text editor on that platform.</ShortDesc>
    <SeeAlso>WriteLnMac</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]CONST[[BR]]	Vendor = 'ACME';[[BR]]	Price = 123.45;[[BR]]	Tax = 1.07;[[BR]]BEGIN[[BR]]	ReWrite('Output.txt');[[BR]]	WriteLn('Mfr/Cost: ', Vendor, '/', Price + Tax);[[BR]]	Close('Output.txt');[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>212</ID>
    <IDName>procWriteLn</IDName>
    <InternalFunctionName>MP_WriteLn</InternalFunctionName>
    <ModernName>WriteLine</ModernName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
    <Params>
      <Param>
        <Name>z</Name>
        <Type>anyMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Write</Name>
    <Version>100</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] outputs the specified data to an ASCII text file. The variable length parameter list specifies the data to be written to the file. [[BR]][[BR]]Parameters may be any valid data type, and data types may be mixed in a single call to the procedure. [[name]] leaves the file pointer positioned at the end of the last data value written to the file; any data subsequently written to the file will be appended to the end of this value.[[BR]][[BR]][[note:WriteLnFormatNote]]</Description>
    <ShortDesc>Writes data to a text file. Uses character encoding appropriate for platform on which the script is running. This allows the text file to be viewed by an external text editor on that platform.</ShortDesc>
    <Example>[[name]](Value1);</Example>
    <ID>213</ID>
    <IDName>procWrite</IDName>
    <InternalFunctionName>MP_Write</InternalFunctionName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
    <Params>
      <Param>
        <Name>z</Name>
        <Type>anyMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BeginText</Name>
    <Version>100</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedures [[name]] creates a new text object in a Vectorworks document. All text specified between calls to [[name]] and EndText will be part of the new text object.[[BR]]Text may be specified in single quotes, or variables may be used..[[BR]][[BR]]To specify the insertion point of the new text object, use TextOrigin.[[BR]]</Description>
    <ShortDesc>Creates a new text object.</ShortDesc>
    <Example>{ Create a multiple line text object at 0,0 }[[BR]]TextFont(GetFontID('Monaco'));[[BR]]TextSize(24);[[BR]]TextOrigin(0,0);[[BR]]BeginText;[[BR]]'This multiple line text block [[BR]]is in 24pt Monaco and was created[[BR]]by a VectorScript.'[[BR]]EndText;[[BR]]</Example>
    <ID>134</ID>
    <IDName>procBeginText</IDName>
    <InternalFunctionName>MP_BeginText</InternalFunctionName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
  </Item>

  <Item>
    <Name>ReadLn</Name>
    <Version>100</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] will read data from a currently open text file. The variable length parameter list returns the read data in the specified parameters.[[BR]][[BR]]Supported data types include INTEGER, REAL, LONGINT, CHAR or STRING. If the procedure encounters an EOF(end-of-file) marker, an error is generated. [[name]] positions the file position pointer to the beginning of a new line after the procedure is called.[[BR]][[BR]][[name]] will detect tabs as delimiters, allowing multiple string values to be assigned to variables.[[BR]][[BR]]</Description>
    <ShortDesc>Reads data from the currently open text file and moves to the beginning of the next line of data.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   fileName, value1, value2, value3 :STRING; [[BR]]   major, minor, maintenance, platform :INTEGER;[[BR]]BEGIN[[BR]]   GetVersion(major, minor, maintenance, platform);[[BR]]   IF platform = 1 THEN BEGIN[[BR]]      fileName := '/Example.txt';[[BR]]   END ELSE BEGIN[[BR]]      fileName := 'C:\Example.txt';[[BR]]   END;[[BR]]   Open(fileName);[[BR]]   ReadLn(value1, value2, value3);[[BR]]   Close(fileName);[[BR]]   AlrtDialog(lineOfText);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>216</ID>
    <IDName>procReadLn</IDName>
    <InternalFunctionName>MP_ReadLn</InternalFunctionName>
    <ModernName>ReadLine</ModernName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
    <Params>
      <Param>
        <Name>z</Name>
        <Type>anyVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Read</Name>
    <Version>100</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] will read data from a currently open text file. The variable length parameter list returns the read data in the specified parameters.Supported data types include INTEGER, REAL, LONGINT, CHAR or STRING. [[BR]][[BR]]Non STRING data values must be separated by a tab or space to be correctly read into variables. If the procedure encounters an EOF(end-of-file) marker, an error is generated. [[name]] does not position the file position pointer to the beginning of a new line after the procedure is called.[[BR]][[BR]][[name]] will detect tabs as delimiters, allowing multiple string values to be assigned to variables.</Description>
    <ShortDesc>Reads data from the currently open text file.</ShortDesc>
    <ID>215</ID>
    <IDName>procRead</IDName>
    <InternalFunctionName>MP_Read</InternalFunctionName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
    <Params>
      <Param>
        <Name>z</Name>
        <Type>anyVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Poly3D</Name>
    <Version>100</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a three dimensional polygon in a Vectorworks document. The vertices of the polygon are specified by a list of parameters x1, y1, z1 through xn, yn, and zn, which specify the coordinate locations of each vertex.[[BR]][[BR]]</Description>
    <ShortDesc>Creates a 3 dimensional polygon with vertices at(x1,y1,z1) thru (xn,yn,zn).</ShortDesc>
    <Example>Poly3D(1,1,0,1.5,1.5,1,2.5,1.5,1,);</Example>
    <ID>114</ID>
    <IDName>procPoly3D</IDName>
    <InternalFunctionName>MP_Poly3D</InternalFunctionName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>anyD3Pt</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Message</Name>
    <Version>100</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] displays a floating message palette onscreen. Parameters z1 thru zN specify the values to be displayed in the palette. Parameters can be any supported data type or variables.[[BR]][[BR]]If [[name]] is called and the palette is already displayed, the value in the palette will be replaced by the new information. [[BR]]</Description>
    <ShortDesc>Displays a floating message palette with specified message. Takes any valid data type.</ShortDesc>
    <Example>Message('Hello, world');[[BR]][[BR]]Message('The Number of objects was :',theNumber);[[BR]]{displays a string using the variable value}</Example>
    <ID>383</ID>
    <IDName>procMessage</IDName>
    <InternalFunctionName>MP_Message</InternalFunctionName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
    <Params>
      <Param>
        <Name>z</Name>
        <Type>anyMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ForEachObject</Name>
    <Version>100</Version>
    <Category>Criteria</Category>
    <Type>Procedure</Type>
    <Description>Calls a user defined procedure to operate on each object matching the specified search criteria. [[BR]][[BR]]The procedure subroutine specified by the callback parameter must have one parameter of type HANDLE, which is passed the handle to an object by the [[name]] call.[[BR]][[BR]]</Description>
    <ShortDesc>Executes the specified subroutine on any object matching the specified search criteria.</ShortDesc>
    <Example>PROCEDURE PickRect;[[BR]][[BR]]PROCEDURE SelectThem(h :HANDLE);[[BR]]BEGIN[[BR]]	SetSelect(h);[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]	ForEachObject(SelectThem, T=RECT);[[BR]]END;[[BR]]RUN(PickRect);[[BR]]</Example>
    <ID>473</ID>
    <IDName>procForEachObject</IDName>
    <SpecialOverride>CHECKFOREACHOBJECT(procForEachObject, userProcMode, criteriaMode);</SpecialOverride>
    <Implemented>True</Implemented>
    <ImplementationDetails>Special</ImplementationDetails>
    <Params>
      <Param>
        <Name>callback</Name>
        <Type>userProcMode</Type>
        <Desc>Name of action procedure to be applied to matching objects</Desc>
      </Param>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria for locating objects.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EndText</Name>
    <Version>100</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] completes creation of a new text object.</Description>
    <ShortDesc>Completes creation of a new text object.</ShortDesc>
    <SeeAlso>BeginText, CreateText</SeeAlso>
    <ID>135</ID>
    <IDName>procEndText</IDName>
    <InternalFunctionName>MP_EndText</InternalFunctionName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
  </Item>

  <Item>
    <Name>AngleVar</Name>
    <Version>100</Version>
    <Category>Command</Category>
    <Type>Procedure</Type>
    <Description>Sets the angle designation method in VectorScript. When called, VectorScript will treat language symbols which can be interpreted as direction angles (e.g., N, S, NW, SE) as variables rather than angles.[[BR]][[BR]]</Description>
    <ShortDesc>Enables angle variable support.</ShortDesc>
    <Example>procedure test;[[BR]]var[[BR]]	S : Real;[[BR]][[BR]]begin[[BR]]	[[name]];[[BR]]	S := 30;[[BR]]	LineTo(3", #S);[[BR]]	{ The 'S' will be treated as a variable }[[BR]]	{ and line will be drawn on 30 degree angle. }[[BR]][[BR]]end;[[BR]]run(test);[[BR]]</Example>
    <ID>173</ID>
    <IDName>procAngleVar</IDName>
    <InternalFunctionName>MP_AngleVar</InternalFunctionName>
    <ModernName>AngleVarModeOn</ModernName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
  </Item>

  <Item>
    <Name>Ord</Name>
    <Version>100</Version>
    <Category>Strings</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the corresponding ASCII number of the specified character value. Parameter [[name]] specifies the character.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the ASCII code of the specified character.</ShortDesc>
    <SeeAlso>Chr</SeeAlso>
    <Example>PROCEDURE Main;[[BR]]VAR[[BR]]	str :STRING;[[BR]]	cnt :INTEGER;[[BR]]BEGIN[[BR]]	str := GetText(FSActLayer);[[BR]]	FOR cnt := 1 TO Len(str) DO[[BR]]		AlrtDialog(Concat(Ord(Copy(str, cnt, 1))));[[BR]]END;[[BR]]RUN(Main);</Example>
    <ID>239</ID>
    <IDName>funcOrd</IDName>
    <InternalFunctionName>MP_Ord</InternalFunctionName>
    <ModernName>CharToCode</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>v</Name>
        <Type>charMode</Type>
        <Desc>ASCII character.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EvalStr</Name>
    <Version>100</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Evaluates whether an object meets the specified search criteria. [[BR]][[BR]]When used with record criteria, it will determine whether a specific record is attached to the object; if used with record-field criteria, it will return the value of the field as a STRING.[[BR]][[BR]]</Description>
    <ShortDesc>Evaluates whether an object meets the specified search criteria. </ShortDesc>
    <Result>If the criteria is a record-field criteria, the procedure will return the value contained within the field. All other criteria return the TRUE-FALSE state of the criteria condition.</Result>
    <Example>dataValue:= [[name]](handleToObject,('Part Info'.'Serial No.'));</Example>
    <ID>472</ID>
    <IDName>funcEvalStr</IDName>
    <InternalFunctionName>MP_EvalStr</InternalFunctionName>
    <ModernName>EvalString</ModernName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle of object to which the search criteria will be applied.</Desc>
      </Param>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Eval</Name>
    <Version>100</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Evaluates whether an object meets the specified search criteria. [[BR]][[BR]]When used with record criteria, it will determine whether a specific record is attached to the object; if used with record-field criteria, it will return the value of the field as a REAL value.[[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Evaluates whether an object meets the specified search criteria.</ShortDesc>
    <Result>If the criteria is a record-field criteria, the procedure will return the value contained within the field. All other criteria return the TRUE-FALSE state of the criteria condition. </Result>
    <Example>hasRecord:=Eval(handleToObject,(R IN ['Part Info']);</Example>
    <ID>471</ID>
    <IDName>funcEval</IDName>
    <InternalFunctionName>MP_Eval</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle of object to which the search criteria will be applied.</Desc>
      </Param>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Concat</Name>
    <Version>100</Version>
    <Category>Strings</Category>
    <Type>Function</Type>
    <ReturnType>DYNARRAY[] of CHAR</ReturnType>
    <Description>Function [[name]] combines, or concatenates, all the specified parameters in order and returns the resultant string.[[BR]][[BR]]</Description>
    <ShortDesc>Concatenates and returns the specified strings as a single string.</ShortDesc>
    <Example>newStr:=[[name]]('A','sample','string');</Example>
    <ID>243</ID>
    <IDName>funcConcat</IDName>
    <InternalFunctionName>MP_Concat</InternalFunctionName>
    <ModernName>AddStrings</ModernName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
    <Params>
      <Param>
        <Name>txt</Name>
        <Type>anyCharDynarray</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Chr</Name>
    <Version>100</Version>
    <Category>Strings</Category>
    <Type>Function</Type>
    <ReturnType>CHAR</ReturnType>
    <Description>Function [[name]] returns the ASCII character corresponding to the specified numeric code. The ASCII code value must be between 1 and 255.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the character equivalent to the specified ASCII code.</ShortDesc>
    <SeeAlso>Ord</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	cnt :INTEGER;[[BR]]	str :STRING;[[BR]]BEGIN[[BR]]	FOR cnt := 128 TO 255 DO BEGIN[[BR]]		str := Concat(str, Chr(cnt));[[BR]]		IF cnt MOD 32 = 0 THEN str := Concat(str, Chr(13));[[BR]]	END;[[BR]]	AlrtDialog(str);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>240</ID>
    <IDName>funcChr</IDName>
    <InternalFunctionName>MP_Chr</InternalFunctionName>
    <ModernName>CodeToChar</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>v</Name>
        <Type>intMode</Type>
        <Desc>ASCII numeric identifier code.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDashStyle</Name>
    <Version>400</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a new linestyle in a Vectorworks document. Parameter swt defines whether the linestyle will be scaled with thickness, and parameter numPairs specifies the number of length pairs defining the linestyle.[[BR]][[BR]]The linestyle is defined by up to five black/white length pairs, which are specified in parameters b1,w1 through b5,w5. The minimum length of any given black or white parameter is 1 point, or 1/72 of an inch, and the line specification must be in pairs.[[BR]][[BR]]</Description>
    <ShortDesc>Creates a new active linestyle.</ShortDesc>
    <Example>SetDashStyle(True,0,1",1/4",1/4",1/4");</Example>
    <ID>512</ID>
    <IDName>procSetDashStyle</IDName>
    <SpecialOverride>CHECKDASHSTYLE(procSetDashStyle);</SpecialOverride>
    <Implemented>True</Implemented>
    <ImplementationDetails>Special</ImplementationDetails>
    <Params>
      <Param>
        <Name>swt</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>numPairs</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>pair1</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair2</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair3</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair4</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair5</Name>
        <Type>tdPtMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Ang2Vec</Name>
    <Version>100</Version>
    <Category>Math - Vectors</Category>
    <Type>Function</Type>
    <ReturnType>VECTOR</ReturnType>
    <Description>Returns a 2-dimensional vector that is defined by the specified polar angle and length values.[[BR]][[BR]]</Description>
    <ShortDesc>Returns a vector that is defined by the specified angle and length values.</ShortDesc>
    <Result>Returns a 2-dimensional vector.</Result>
    <ID>409</ID>
    <IDName>funcAng2Vec</IDName>
    <InternalFunctionName>MP_Ang2Vec</InternalFunctionName>
    <ModernName>PolarToVec</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>angleR</Name>
        <Type>realMode</Type>
        <Desc>The angle of the vector (in degrees).</Desc>
      </Param>
      <Param>
        <Name>Length</Name>
        <Type>realMode</Type>
        <Desc>The length of the vector.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AngBVec</Name>
    <Version>100</Version>
    <Category>Math - Vectors</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the positive angle between the two specified vectors, in the range of 0~180 degrees.[[BR]][[BR]]When used with 3D vectors, the angle returned will be in a plane defined by the two vectors.</Description>
    <ShortDesc>Returns the positive angle between the two specified vectors, in the range of 0~180 degrees.</ShortDesc>
    <Result>Returns a REAL value which is the angle (in degrees) between the two vectors.</Result>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	pt1, pt2, pt3, pt4 :VECTOR;[[BR]]BEGIN[[BR]]	GetPt(pt1.x, pt1.y);[[BR]]	GetPtL(pt1.x, pt1.y, pt2.x, pt2.y);[[BR]]	GetPtL(pt2.x, pt2.y, pt3.x, pt3.y);[[BR]]	MoveTo(pt1.x, pt1.y);[[BR]]	LineTo(pt2.x, pt2.y);[[BR]]	LineTo(pt3.x, pt3.y);[[BR]]	pt4 := (pt1 + pt3) / 2;[[BR]]	TextOrigin(pt4.x, pt4.y);[[BR]]	CreateText(Concat(AngBVec(pt1 - pt2, pt3 - pt2)));[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>429</ID>
    <IDName>funcAngBVec</IDName>
    <InternalFunctionName>MP_AngBVec</InternalFunctionName>
    <ModernName>AngleBetween</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>v1</Name>
        <Type>vecMode</Type>
        <Desc>First vector to be compared.</Desc>
      </Param>
      <Param>
        <Name>v2</Name>
        <Type>vecMode</Type>
        <Desc>Second vector to be compared.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Comp</Name>
    <Version>100</Version>
    <Category>Math - Vectors</Category>
    <Type>Procedure</Type>
    <Description>Returns the components of a comparison of two vectors.[[BR]][[BR]]The vector component of [[p:1]] along [[p:2]] in [[p:3]], and the vector component of [[p:1]] orthogonal to [[p:2]] in [[p:4]].[[BR]]</Description>
    <ShortDesc>Returns the components of a comparison of two vectors.</ShortDesc>
    <ID>408</ID>
    <IDName>procComp</IDName>
    <InternalFunctionName>MP_Comp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>v1</Name>
        <Type>vecMode</Type>
        <Desc>Comparison vector 1.</Desc>
      </Param>
      <Param>
        <Name>v2</Name>
        <Type>vecMode</Type>
        <Desc>Comparison vector 2</Desc>
      </Param>
      <Param>
        <Name>v3</Name>
        <Type>vecInOutMode</Type>
        <Desc>Component of vector 1 along vector 2</Desc>
      </Param>
      <Param>
        <Name>v4</Name>
        <Type>vecInOutMode</Type>
        <Desc>Component of vector 1 orthogonal to vector 2.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Norm</Name>
    <Version>100</Version>
    <Category>Math - Vectors</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the length, or magnitude, of the specified vector.</Description>
    <ShortDesc>Returns the length of the specified vector.</ShortDesc>
    <Result>A REAL value which is the length of the vector.</Result>
    <SeeAlso>Distance</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	vec :VECTOR;[[BR]]BEGIN[[BR]]	vec.x := 1;[[BR]]	vec.y := 1.732050807;[[BR]]	Message(Norm(vec));[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>406</ID>
    <IDName>funcNorm</IDName>
    <InternalFunctionName>MP_Norm</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>Vec</Name>
        <Type>vecMode</Type>
        <Desc>Vector to be measured.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Perp</Name>
    <Version>100</Version>
    <Category>Math - Vectors</Category>
    <Type>Function</Type>
    <ReturnType>VECTOR</ReturnType>
    <Description>Returns a vector which is perpendicular to the specified vector. The resultant vector will have the same magnitude as the source vector, and their scalar product will be zero. The direction of the return vector will equal Vec2Ang(Vec) - 90.</Description>
    <ShortDesc>Returns a vector which is perpendicular to the specified vector.</ShortDesc>
    <Result>Returns a VECTOR.</Result>
    <ID>407</ID>
    <IDName>funcPerp</IDName>
    <InternalFunctionName>MP_Perp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>Vec</Name>
        <Type>vecMode</Type>
        <Desc>Source vector.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>UnitVec</Name>
    <Version>100</Version>
    <Category>Math - Vectors</Category>
    <Type>Function</Type>
    <ReturnType>VECTOR</ReturnType>
    <Description>Returns the standard unit vector of the specified vector.</Description>
    <ShortDesc>Returns the standard unit vector of the specified vector.</ShortDesc>
    <Result>Returns a VECTOR.</Result>
    <ID>411</ID>
    <IDName>funcUnitVec</IDName>
    <InternalFunctionName>MP_UnitVec</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>Vect</Name>
        <Type>vecMode</Type>
        <Desc>Source vector.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Vec2Ang</Name>
    <Version>100</Version>
    <Category>Math - Vectors</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the angle, in degrees, of the specified vector. If [[p:1]] is a 3D vector, Vec2Ang will return the 3D angle between [[p:1]] and the X axis. If [[p:1]] is {0,0,0}, Vec2Ang returns -90.[[BR]]</Description>
    <ShortDesc>Returns the angle of the specified vector.</ShortDesc>
    <Result>Returns the angle of the specified vector in degrees.</Result>
    <ID>410</ID>
    <IDName>funcVec2Ang</IDName>
    <InternalFunctionName>MP_Vec2Ang</InternalFunctionName>
    <ModernName>VecAngle</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>Vect</Name>
        <Type>vecMode</Type>
        <Desc>Source vector.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>MenuItem</Name>
    <Version>100</Version>
    <OldVersion>100</OldVersion>
    <Category>Command</Category>
    <Type>Procedure</Type>
    <Description>Obsolete.</Description>
    <ShortDesc>Obsolete. Unimplemented.</ShortDesc>
    <SeeAlso>DoMenuTextByName</SeeAlso>
    <Comments>Obsolete. Unimplemented.[[BR]][[BR]][sd  8/18/98]</Comments>
    <ID>223</ID>
    <IDName>procMenuItem</IDName>
    <InternalFunctionName>MP_MenuItem</InternalFunctionName>
    <LowLevel>True</LowLevel>
  </Item>

  <Item>
    <Name>Angle</Name>
    <Version>100</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the angle value of a line segment or an arc. If more than one line segment or arc matches the search criteria, the function will return the sum of the matching objects' angle values.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the angles of the objects matching the search criteria.</ShortDesc>
    <Result>If an object matches the search criteria but is not a line segment or an arc, the value 0(zero) is returned.</Result>
    <Example>aValue:=Angle(N='LineSeg');</Example>
    <IDName>funcAngle</IDName>
    <InternalFunctionName>MP_Angle</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Area</Name>
    <ChangedDate>2011:01:03T12:51:00</ChangedDate>
    <Version>100</Version>
    <OldVersion>1250</OldVersion>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the area of an object. If more than one object matches the search criteria, the function will return the sum of all the matching object areas.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the area of the objects matching the search criteria.  This function is obsolete.  Use CriteriaArea or AreaN instead.</ShortDesc>
    <Example>totalA:=Area((C='Plywood')and(L='First'));[[BR]]{returns the area of all objects in class 'Plywood' on layer 'First'}</Example>
    <IDName>funcAreaLegacy</IDName>
    <InternalFunctionName>MP_Area</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BotBound</Name>
    <ChangedDate>2011:01:03T11:53:00</ChangedDate>
    <Version>100</Version>
    <OldVersion>1700</OldVersion>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the y-coordinate of the bounding box (bottom right corner) of an object matching the search criteria. If more than one object matches the search criteria, the function will return the bottom value of the last matching object found.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the y-coordinate value of thebottom right corner of the object matching the search criteria.</ShortDesc>
    <Example>BotBValue:=[[name]](N='MyRect');[[BR]]</Example>
    <IDName>funcBotBoundLegacy</IDName>
    <InternalFunctionName>MP_BotBound</InternalFunctionName>
    <ModernName>BottomBound</ModernName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Count</Name>
    <Version>100</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Counts all of the objects which match the search criteria.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the number of the objects matching the search criteria.</ShortDesc>
    <Example>CountValue := [[name]]((FP=4)and(T='Rect'));[[BR]]{counts all rectangles with a fillpat index of 4}</Example>
    <IDName>funcCount</IDName>
    <InternalFunctionName>MP_Count</InternalFunctionName>
    <ModernName>CountByCriteria</ModernName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DSelectObj</Name>
    <Version>100</Version>
    <Category>Criteria</Category>
    <Type>Procedure</Type>
    <Description>Deselects all objects which match the search criteria.[[BR]][[BR]]</Description>
    <ShortDesc>Deselects objects matching the search criteria.</ShortDesc>
    <Example>[[name]](S='Pine Tree');[[BR]]{deselects all 'Pine Tree' symbols}</Example>
    <IDName>procDSelectObj</IDName>
    <InternalFunctionName>MP_DSelectObj</InternalFunctionName>
    <ModernName>DeselectByCriteria</ModernName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Height</Name>
    <Version>100</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the height of an object. If more than one object matches the search criteria, the function will return the sum of all the matching object heights.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the height of the objects matching the search criteria.</ShortDesc>
    <Example>HeightValue:=Height(N='North Wall');</Example>
    <IDName>funcHeight</IDName>
    <InternalFunctionName>MP_Height</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LeftBound</Name>
    <ChangedDate>2011:01:03T11:53:00</ChangedDate>
    <Version>100</Version>
    <OldVersion>1700</OldVersion>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the x-coordinate of the bounding box (top left corner) of an object matching the search criteria. If more than one object matches the search criteria, the function will return the left value of the last matching object found.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the x-coordinate value of the top left corner of the object matching the search criteria.</ShortDesc>
    <Example>LeftBValue:=[[name]](N='MyRect');</Example>
    <IDName>funcLeftBoundLegacy</IDName>
    <InternalFunctionName>MP_LeftBound</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Length</Name>
    <ChangedDate>2011:01:03T11:53:00</ChangedDate>
    <Version>100</Version>
    <OldVersion>1700</OldVersion>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the length of an object. If more than one object matches the search criteria, the function will return the sum of all the matching object lengths.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the length of the objects matching the search criteria.</ShortDesc>
    <Example>LengthValue:=[[name]](C='CrossMembers');[[BR]]{returns the length of all objects in class 'CrossMembers'}</Example>
    <IDName>funcLengthLegacy</IDName>
    <InternalFunctionName>MP_Length</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ObjectType</Name>
    <Version>100</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the type identifier an object. If more than one object matches the search criteria, the type identifier of the last matching object will be returned.[[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Returns the object type of the objects matching the search criteria.</ShortDesc>
    <Example>TypeValue:=[[name]](N='Mystery Object');[[BR]]{returns the type of the object named 'Mystery Object'}</Example>
    <IDName>funcObjectType</IDName>
    <InternalFunctionName>MP_ObjectType</InternalFunctionName>
    <ModernName>GetTypeByCriteria</ModernName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Perim</Name>
    <ChangedDate>2011:01:03T11:55:00</ChangedDate>
    <Version>100</Version>
    <OldVersion>1700</OldVersion>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the perimeter of an object. If more than one object matches the search criteria, the function will return the sum of the matching objects' perimeters.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the perimeter of the objects matching the search criteria.</ShortDesc>
    <Example>PerimValue := Perim(C='Fence');[[BR]]{returns the total perimeter of all objects in the class 'Fence'}</Example>
    <IDName>funcPerimLegacy</IDName>
    <InternalFunctionName>MP_Perim</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RightBound</Name>
    <ChangedDate>2011:01:03T11:54:00</ChangedDate>
    <Version>100</Version>
    <OldVersion>1700</OldVersion>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the x-coordinate of the bounding box (bottom right corner) of an object matching the search criteria If more than one object matches the search criteria, the function will return the sum of the coordinates of all the matching objects.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the y-coordinate value of the bottom right corner of the object matching the search criteria.</ShortDesc>
    <Example>RightBValue:=RightBound(N='MyRect');[[BR]]</Example>
    <IDName>funcRightBoundLegacy</IDName>
    <InternalFunctionName>MP_RightBound</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SelectObj</Name>
    <Version>100</Version>
    <Category>Criteria</Category>
    <Type>Procedure</Type>
    <Description>Selects all objects which match the search criteria.[[BR]][[BR]]</Description>
    <ShortDesc>Selects objects matching the search criteria.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	red, green, blue, color :LONGINT;[[BR]]	criteria :STRING;[[BR]]BEGIN[[BR]]	red := 65535;[[BR]]	green := 0;[[BR]]	blue := 0;[[BR]]	RGBToColorIndex(red, green, blue, color);[[BR]]	Rect(0, 0, 1, 1);[[BR]]	SetPenFore(LNewObj, color);[[BR]]	DSelectAll;[[BR]]	criteria := Concat('(INSYMBOL &amp; INVIEWPORT &amp; (PF=', color, '))');[[BR]]	SelectObj(criteria);[[BR]]	Message(criteria);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <IDName>procSelectObj</IDName>
    <InternalFunctionName>MP_SelectObj</InternalFunctionName>
    <ModernName>SelectByCriteria</ModernName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>TopBound</Name>
    <ChangedDate>2011:01:03T11:54:00</ChangedDate>
    <Version>100</Version>
    <OldVersion>1700</OldVersion>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the y-coordinate of the bounding box (top left corner) of an object matching the search criteria. If more than one object matches the search criteria, the function will return the sum of the coordinates of all the matching objects.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the y-coordinate value of the top left corner of the object matching the search criteria.</ShortDesc>
    <Example>TopBValue:=TopBound(N='MyRect');</Example>
    <IDName>funcTopBoundLegacy</IDName>
    <InternalFunctionName>MP_TopBound</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Width</Name>
    <Version>100</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the width of an object matching the search criteria. If more than one object matches the search criteria, the function will return the sum of the matching object widths.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the width of the objects matching the search criteria.</ShortDesc>
    <Example>WidthValue:=Width(N='Box');</Example>
    <IDName>funcWidth</IDName>
    <InternalFunctionName>MP_Width</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>XCenter</Name>
    <ChangedDate>2011:05:16T16:30:00</ChangedDate>
    <Version>100</Version>
    <OldVersion>1700</OldVersion>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the x-coordinate of the center point of an object matching the serach criteria. If more than one object matches the search criteria, the function will return the sum of the coordinates of all the matching objects.[[BR]]</Description>
    <ShortDesc>Returns the x-coordinate value of the center of an object matching the search criteria.</ShortDesc>
    <Example>XCenValue:=XCenter(N='Board');[[BR]]{returns the x-coord of the center of the named object 'Board'}</Example>
    <IDName>funcXCenterLegacy</IDName>
    <InternalFunctionName>MP_XCenter</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>YCenter</Name>
    <ChangedDate>2011:05:16T16:30:00</ChangedDate>
    <Version>100</Version>
    <OldVersion>1700</OldVersion>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the y-coordinate of the center point of an object matching the serach criteria. If more than one object matches the search criteria, the function will return the sum of the coordinates of all the matching objects.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the Y center coordinate value of the objects matching the search criteria.</ShortDesc>
    <Example>YCenValue:=YCenter(N='Board');[[BR]]{returns the y-coord of the center of the named object 'Board'}</Example>
    <IDName>funcYCenterLegacy</IDName>
    <InternalFunctionName>MP_YCenter</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetHandle</Name>
    <Version>100</Version>
    <OldVersion>800</OldVersion>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Obsolete procedure.</Description>
    <ShortDesc>Obsolete procedure.</ShortDesc>
    <Comments>Deleted this obsolete function as of 9.0.0b7 - PCP 12-21-2000[[BR]]</Comments>
    <IDName>funcGetHandle</IDName>
    <InternalFunctionName>MP_GetHandle</InternalFunctionName>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Show</Name>
    <Version>100</Version>
    <Category>Criteria</Category>
    <Type>Procedure</Type>
    <Description>Displays any hidden or grayed objects matching the specified search criteria.</Description>
    <ShortDesc>Makes objects with the specified search criteria visible.</ShortDesc>
    <Comments>Makes objects with the specified search criteria visible if they are not already.[[BR]][[BR]][sd 8/18/98]</Comments>
    <Example>Show((C='Proposed Phase 2 Construction'));</Example>
    <IDName>procShow</IDName>
    <InternalFunctionName>MP_Show</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Hide</Name>
    <Version>100</Version>
    <Category>Criteria</Category>
    <Type>Procedure</Type>
    <Description>Hides any visible or grayed objects matching the specified search criteria.</Description>
    <ShortDesc>Makes objects with the specified search criteria invisible.</ShortDesc>
    <Comments>Makes objects with the specified search criteria invisible if they are not already[[BR]][[BR]][sd 8/18/98]</Comments>
    <Example>[[name]]((C='Proposed Phase 2 Construction'));</Example>
    <IDName>procHide</IDName>
    <InternalFunctionName>MP_Hide</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Bold</Name>
    <Version>100</Version>
    <Category>Text Style Constant</Category>
    <Type>Constant</Type>
    <ReturnType>INTEGER</ReturnType>
    <ID>1302</ID>
    <IDName>kVSBold</IDName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Italic</Name>
    <Version>100</Version>
    <Category>Text Style Constant</Category>
    <Type>Constant</Type>
    <ReturnType>INTEGER</ReturnType>
    <ID>1303</ID>
    <IDName>kVSItalic</IDName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Outline</Name>
    <Version>100</Version>
    <Category>Text Style Constant</Category>
    <Type>Constant</Type>
    <ReturnType>INTEGER</ReturnType>
    <ID>1304</ID>
    <IDName>kVSOutline</IDName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Shadow</Name>
    <Version>100</Version>
    <Category>Text Style Constant</Category>
    <Type>Constant</Type>
    <ReturnType>INTEGER</ReturnType>
    <ID>1305</ID>
    <IDName>kVSShadow</IDName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Underline</Name>
    <Version>100</Version>
    <Category>Text Style Constant</Category>
    <Type>Constant</Type>
    <ReturnType>INTEGER</ReturnType>
    <ID>1306</ID>
    <IDName>kVSUnderline</IDName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>LgCrossC</Name>
    <Version>100</Version>
    <Category>Cursor Constant</Category>
    <Type>Constant</Type>
    <ReturnType>INTEGER</ReturnType>
    <ID>1307</ID>
    <IDName>kVSLgCrossC</IDName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>HandC</Name>
    <Version>100</Version>
    <Category>Cursor Constant</Category>
    <Type>Constant</Type>
    <ReturnType>INTEGER</ReturnType>
    <ID>1308</ID>
    <IDName>kVSHandC</IDName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>ArrowC</Name>
    <Version>100</Version>
    <Category>Cursor Constant</Category>
    <Type>Constant</Type>
    <ReturnType>INTEGER</ReturnType>
    <ID>1309</ID>
    <IDName>kVSArrowC</IDName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>SmCrossC</Name>
    <Version>100</Version>
    <Category>Cursor Constant</Category>
    <Type>Constant</Type>
    <ReturnType>INTEGER</ReturnType>
    <ID>1310</ID>
    <IDName>kVSSmCrossC</IDName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>WatchC</Name>
    <Version>100</Version>
    <Category>Cursor Constant</Category>
    <Type>Constant</Type>
    <ReturnType>INTEGER</ReturnType>
    <ID>1311</ID>
    <IDName>kVSWatchC</IDName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>TextBarC</Name>
    <Version>100</Version>
    <Category>Cursor Constant</Category>
    <Type>Constant</Type>
    <ReturnType>INTEGER</ReturnType>
    <ID>1312</ID>
    <IDName>kVSTextBarC</IDName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetDashStyle</Name>
    <ChangedDate>2017:10:26T15:48:00</ChangedDate>
    <Version>500</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Deprecated - will generate error. Use GetDashStyleN instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use GetDashStyleN instead.</ShortDesc>
    <SeeAlso>GetDashStyleN</SeeAlso>
    <Comments>Deprecated - will generate error. Use GetDashStyleN instead.</Comments>
    <Example>currLS:=[[name]];</Example>
    <ID>525</ID>
    <IDName>funcGetDashStyle</IDName>
    <SpecialOverride>CHECKDASHSTYLE(funcGetDashStyle);</SpecialOverride>
    <Implemented>True</Implemented>
    <ImplementationDetails>Special</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>swt</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>numPairs</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>pair1</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair2</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair3</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair4</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair5</Name>
        <Type>tdPtMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GrayClass</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Sets the visibility of the specified class to grayed status.</Description>
    <ShortDesc>Sets the class visibility to grayed.</ShortDesc>
    <Comments>[sd 8/18/98]</Comments>
    <Example>[[name]]('Phase 2 Construction');[[BR]]</Example>
    <ID>335</ID>
    <IDName>procGrayClass</IDName>
    <InternalFunctionName>MP_GrayClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetFolderPath</Name>
    <ChangedDate>2017:04:04T14:08:00</ChangedDate>
    <Version>800</Version>
    <Category>File I/O</Category>
    <Type>Function</Type>
    <ReturnType>DYNARRAY[] of CHAR</ReturnType>
    <Description>Function GetFolderPath returns the full path to the requested folder independent of localized folder names. [[BR]][[BR]][[note:FolderPath]][[BR]]</Description>
    <ShortDesc>Returns the full path to the requested folder independent of localized folder names.</ShortDesc>
    <Comments>[sd 8/18/98]</Comments>
    <Example>PROCEDURE Example;[[BR]]BEGIN[[BR]]	AlrtDialog(GetFolderPath(12));[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>599</ID>
    <IDName>funcGetFolderPath</IDName>
    <SpecialOverride>FuncGetFolderPath</SpecialOverride>
    <InternalFunctionName>FuncGetFolderPath</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>whichPath</Name>
        <Type>intMode</Type>
        <Desc>Path constant.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SaveSheet</Name>
    <Version>800</Version>
    <Category>View / Zoom</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] saves current view, page, class, and layer settings in a new sheet with a specified name.   The saveView, saveClass and saveLayer parameters can be used to selectively not save an aspect of the view.  Also after the sheet is created, the SetObjectVariableBoolean function can be used to control whether to utilize the view, page, class or layer settings.</Description>
    <ShortDesc>Saves the current view, page, class, and layer settings in a new sheet.</ShortDesc>
    <Comments>Saves the current view,  page, class, and layer settings in a new sheet with the given name. The saveView, saveClass, and saveLayer booleans can be used to selectively not save an aspect of the view.[[BR]][[BR]][sd 8/18/98]</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	savedViewHandle  :HANDLE;[[BR]]	ovSheetSaveView	  :BOOLEAN;[[BR]]	ovSheetSavePage	  :BOOLEAN;[[BR]]	ovSheetSaveClass :BOOLEAN;[[BR]]	ovSheetSaveLayer :BOOLEAN;[[BR]]BEGIN[[BR]]	savedViewHandle := GetObject('Untitled View');[[BR]]	IF savedViewHandle &lt;&gt; NIL THEN BEGIN[[BR]]		ovSheetSaveView  := GetObjectVariableBoolean(savedViewHandle, 450);[[BR]]		ovSheetSavePage  := GetObjectVariableBoolean(savedViewHandle, 451);[[BR]]		ovSheetSaveClass := GetObjectVariableBoolean(savedViewHandle, 452);[[BR]]		ovSheetSaveLayer := GetObjectVariableBoolean(savedViewHandle, 453);[[BR]]		AlrtDialog(Concat([[BR]]			'handle type: ', GetType(savedViewHandle), Chr(13),[[BR]]			'save view: ',  ovSheetSaveView,  Chr(13),[[BR]]			'save page: ',  ovSheetSavePage,  Chr(13),[[BR]]			'save class: ', ovSheetSaveClass, Chr(13),[[BR]]			'save layer: ', ovSheetSaveLayer));[[BR]]	END;[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>600</ID>
    <IDName>procSaveSheet</IDName>
    <SpecialOverride>ProcSaveSheet</SpecialOverride>
    <InternalFunctionName>ProcSaveSheet</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Name of saved sheet.</Desc>
      </Param>
      <Param>
        <Name>saveView</Name>
        <Type>boolMode</Type>
        <Desc>Saves view settings.</Desc>
      </Param>
      <Param>
        <Name>saveClass</Name>
        <Type>boolMode</Type>
        <Desc>Saves class settings.</Desc>
      </Param>
      <Param>
        <Name>saveLayer</Name>
        <Type>boolMode</Type>
        <Desc>Saves layer settings.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetSymbolOptions</Name>
    <Version>800</Version>
    <OldVersion>850</OldVersion>
    <Category>Objects - Symbols</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the insert and break options for the specified symbol. [[BR]][[BR]][[note:SymInsertOptionTable]]</Description>
    <ShortDesc>Sets the insert and break options for a specified symbol</ShortDesc>
    <Comments>Deleted this obsolete function as of 9.0.0b7 - PCP 12-21-2000[[BR]][[BR]]Sets the insert and break options for the master symbol named &lt;name&gt;. [[BR]][[BR]]The insertMode options are:[[BR]]0 = insert on the center line of the wall[[BR]]1 = insert on the edge of the wall[[BR]][[BR]]The breakMode options are:[[BR]]1 = Full break with caps, both edges of the wall are broken and cap lines close off the two broken portions of the wall.[[BR]]2 = Full break with no caps, both edges of the wall  are broken and there are no cap lines.[[BR]]3 = Half break, for edge insertions only, wall edge is broken on the same edge that the symbol is inserted on.[[BR]]4 = No break, there is no break in the wall, the symbol is drawn on top of the wall.[[BR]][[BR]]See also Get SymbolOptions[[BR]][[BR]][sd 8/18/98]</Comments>
    <ID>601</ID>
    <IDName>procSetSymbolOptions</IDName>
    <SpecialOverride>ProcSetSymbolOptions</SpecialOverride>
    <InternalFunctionName>ProcSetSymbolOptions</InternalFunctionName>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Name of symbol.</Desc>
      </Param>
      <Param>
        <Name>insertMode</Name>
        <Type>intMode</Type>
        <Desc>Insertion mode of symbol.</Desc>
      </Param>
      <Param>
        <Name>breakMode</Name>
        <Type>intMode</Type>
        <Desc>Break mode for inserted symbol.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSymbolOptions</Name>
    <Version>800</Version>
    <OldVersion>850</OldVersion>
    <Category>Objects - Symbols</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the insert and break options for the specified symbol. [[BR]][[BR]][[note:SymInsertOptionTable]]</Description>
    <ShortDesc>Returns insertion options from a specified symbol.</ShortDesc>
    <Comments>Deleted this obsolete function as of 9.0.0b7 - PCP 12-21-2000[[BR]][[BR]]Gets the insertion options from the master symbol named &lt;name&gt;.[[BR]][[BR]]See SetSymbolOptions.[[BR]][[BR]][8/18/98]</Comments>
    <ID>602</ID>
    <IDName>procGetSymbolOptions</IDName>
    <SpecialOverride>ProcGetSymbolOptions</SpecialOverride>
    <InternalFunctionName>ProcGetSymbolOptions</InternalFunctionName>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Name of symbol.</Desc>
      </Param>
      <Param>
        <Name>insertMode</Name>
        <Type>intVarMode</Type>
        <Desc>Returns insertion mode of symbol.</Desc>
      </Param>
      <Param>
        <Name>breakMode</Name>
        <Type>intVarMode</Type>
        <Desc>Returns break mode of inserted symbol.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddSymToWallEdge</Name>
    <Version>800</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] inserts a symbol in the referenced wall using the specified parameters to define placement. [[BR]][[BR]][[note:SymbolAlignTable]]</Description>
    <ShortDesc>Inserts a symbol in a wall according to specified parameters.</ShortDesc>
    <Comments>Inserts a symbol in a wall either on the centerline, or on the edge. All parameters are used as input.[[BR]][[BR]]h = handle to the wall we are inserting into.[[BR]]alongDistance = distance along the wall from the wall starting point to the symbols insertion point.[[BR]]heightDistance = height of the symbol in 3D[[BR]]flip = sets the orientation[[BR]]right = sets the orientaion[[BR]]symbolName = the name of master symbol that gets inserted in the wall[[BR]]insertMode = 0 for centerline, 1 for left edge, 2 for right edge[[BR]][sd 8/18/98]</Comments>
    <ID>603</ID>
    <IDName>procAddSymToWallEdge</IDName>
    <SpecialOverride>ProcAddSymToWallEdge</SpecialOverride>
    <InternalFunctionName>ProcAddSymToWallEdge</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to wall.</Desc>
      </Param>
      <Param>
        <Name>alongDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Offset distance from wall start of insertion point.</Desc>
      </Param>
      <Param>
        <Name>heightDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Elevation of symbol.</Desc>
      </Param>
      <Param>
        <Name>flip</Name>
        <Type>boolMode</Type>
        <Desc>Flip orientation of symbol.</Desc>
      </Param>
      <Param>
        <Name>right</Name>
        <Type>boolMode</Type>
        <Desc>Left-right orientation of symbol.</Desc>
      </Param>
      <Param>
        <Name>symbolName</Name>
        <Type>stringMode</Type>
        <Desc>Name of symbol to be inserted.</Desc>
      </Param>
      <Param>
        <Name>insertMode</Name>
        <Type>intMode</Type>
        <Desc>Edge insertion mode.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>UndoOff</Name>
    <Version>800</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] clears the undo table and suspends undo for the remainder of the VectorScript procedure. The undo system resumes after the procedure is completed.</Description>
    <ShortDesc>Clears the undo table and suspends undo for the remainder of the script. It is sometimes advisable to precede UndoOff with a NonUndoableActionOK call to allow the user a chance to back out of the operation.</ShortDesc>
    <ID>605</ID>
    <IDName>procUndoOff</IDName>
    <SpecialOverride>UndoOff</SpecialOverride>
    <InternalFunctionName>UndoOff</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>CreateSphere</Name>
    <Version>800</Version>
    <Category>Objects - Solids</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] creates a new sphere object in a Vectorworks document.</Description>
    <ShortDesc>Creates a 3D sphere object.</ShortDesc>
    <Result>The function returns a handle to the new sphere object.</Result>
    <Comments>[sd 8/18/98]</Comments>
    <ID>607</ID>
    <IDName>funcCreateSphere</IDName>
    <SpecialOverride>FuncCreateSphere</SpecialOverride>
    <InternalFunctionName>FuncCreateSphere</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>center</Name>
        <Type>d3PtMode</Type>
        <Desc>Center point of sphere.</Desc>
      </Param>
      <Param>
        <Name>radiusDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Radius of sphere.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateHemisphere</Name>
    <Version>800</Version>
    <Category>Objects - Solids</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] creates a new hemisphere object in a Vectorworks document. [[BR]]</Description>
    <ShortDesc>Creates a 3D hemisphere</ShortDesc>
    <Result>The function returns a handle to the new hemisphere object.</Result>
    <Comments>[sd 8/18/98]</Comments>
    <ID>608</ID>
    <IDName>funcCreateHemisphere</IDName>
    <SpecialOverride>FuncCreateHemisphere</SpecialOverride>
    <InternalFunctionName>FuncCreateHemisphere</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>center</Name>
        <Type>d3PtMode</Type>
        <Desc>Center point of hemisphere.</Desc>
      </Param>
      <Param>
        <Name>top</Name>
        <Type>d3PtMode</Type>
        <Desc>Top point of hemisphere.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateCone</Name>
    <Version>800</Version>
    <Category>Objects - Solids</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a 3D cone object in a Vectorworks document.</Description>
    <ShortDesc>Creates a 3D cone</ShortDesc>
    <Result>The function returns a handle to the new cone object.</Result>
    <Comments>[sd 8/18/98]</Comments>
    <ID>609</ID>
    <IDName>funcCreateCone</IDName>
    <SpecialOverride>FuncCreateCone</SpecialOverride>
    <InternalFunctionName>FuncCreateCone</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>center</Name>
        <Type>d3PtMode</Type>
        <Desc>Center point of cone.</Desc>
      </Param>
      <Param>
        <Name>tip</Name>
        <Type>d3PtMode</Type>
        <Desc>Tip point of cone.</Desc>
      </Param>
      <Param>
        <Name>radiusDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Radius of cone base.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDrawingSizeRect</Name>
    <Version>800</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Returns  the top left and bottom right coordinates of a rectangle surrounding the entire area of the document containing objects.</Description>
    <ShortDesc>Returns  the top left and bottom right coordinates of the entire drawing</ShortDesc>
    <Comments>Returns  the top left and bottom right coordinates of a rectangle surrounding the entire drawing.[[BR]][[BR]][sd 8/18/98]</Comments>
    <ID>2015</ID>
    <IDName>procGetDrawingSizeRect</IDName>
    <InternalFunctionName>MP_GetDrawingSizeRect</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p1</Name>
        <Type>globPtVarMode</Type>
        <Desc>Returns top left coordinate of drawing rectangle.</Desc>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>globPtVarMode</Type>
        <Desc>Returns bottom right coordinate of drawing rectangle.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetZoom</Name>
    <Version>800</Version>
    <Category>View / Zoom</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the percentage of the zoom factor in the current document view.</Description>
    <ShortDesc>Returns the percentage of the zoom factor in the current view.</ShortDesc>
    <Comments>Returns the percentage of the zoom factor in the current view. (100.0 would be the value if no zooming was done).[[BR]][[BR]][sd 8/18/98]</Comments>
    <ID>2016</ID>
    <IDName>funcGetZoom</IDName>
    <InternalFunctionName>MP_GetZoom</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetVCenter</Name>
    <Version>800</Version>
    <Category>View / Zoom</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the Vectorworks document coordinates at the center of the drawing window. </Description>
    <ShortDesc>Returns the point at the center of the drawing window</ShortDesc>
    <Comments>Returns the point which is in the center of the drawing window.[[BR]][[BR]][sd 8/18/98]</Comments>
    <Example>PROCEDURE GetWindowSizeProc;[[BR]]CONST[[BR]]	kLeftPaletteMargin    = 54;[[BR]]	kRightPaletteMargin   = 176;[[BR]]	kScrollMargin         = 18;[[BR]]	kTopDocumentMargin    = 48;[[BR]]	kRulerMargin          = 16;[[BR]]	kBottomDocumentMargin = 50;[[BR]]VAR[[BR]]	ViewCenterX, ViewCenterY       :REAL;[[BR]]	ViewWidth, ViewHeight          :REAL;[[BR]]	ScnX1, ScnY1, ScnX2, ScnY2     :REAL;[[BR]]	ViewX1, ViewY1, ViewX2, ViewY2 :REAL;[[BR]]	LayerScale                     :REAL;[[BR]]	TopBottomMargin                :REAL;[[BR]]	LeftRightMargin                :REAL;[[BR]]BEGIN[[BR]]	LayerScale := GetLScale(ActLayer);[[BR]]	GetVCenter(ViewCenterX, ViewCenterY);[[BR]]	GetScreen(ScnX1, ScnY1, ScnX2, ScnY2);[[BR]]	TopBottomMargin := kTopDocumentMargin + kBottomDocumentMargin;[[BR]]	LeftRightMargin := 0;[[BR]]	IF GetPref(22) THEN begin {Left Palette Margin Turned On}[[BR]]		LeftRightMargin := LeftRightMargin + kLeftPaletteMargin;[[BR]]	END;[[BR]]	IF GetPref(23) THEN begin {Right Palette Margin Turned On}[[BR]]		LeftRightMargin := LeftRightMargin + kRightPaletteMargin;[[BR]]	END;[[BR]]	IF GetPref(6) THEN BEGIN {Show Rulers}[[BR]]		TopBottomMargin := TopBottomMargin + kRulerMargin;[[BR]]		LeftRightMargin := LeftRightMargin + kRulerMargin;[[BR]]	END;[[BR]]	IF GetPref(7) THEN BEGIN {Show Scroll Bars}[[BR]]		TopBottomMargin := TopBottomMargin + kScrollMargin;[[BR]]		LeftRightMargin := LeftRightMargin + kScrollMargin;[[BR]]	END;[[BR]]	ViewWidth  := (ScnX2 - LeftRightMargin) * LayerScale / (72 * GetZoom / 100);[[BR]]	ViewHeight := (ScnY2 - TopBottomMargin) * LayerScale / (72 * GetZoom / 100);[[BR]]	ViewX1 := ViewCenterX - (ViewWidth  / 2) {+ (LeftRightMargin / 2)};[[BR]]	ViewX2 := ViewCenterX + (ViewWidth  / 2) {- (LeftRightMargin / 2)};[[BR]]	ViewY1 := ViewCenterY + (ViewHeight / 2) {- (TopBottomMargin / 2)};[[BR]]	ViewY2 := ViewCenterY - (ViewHeight / 2) {+ (TopBottomMargin / 2)};[[BR]]	Rect(ViewX1, ViewY1, ViewX2, ViewY2);[[BR]]END;[[BR]]RUN(GetWindowSizeProc);[[BR]]</Example>
    <ID>2018</ID>
    <IDName>procGetVCenter</IDName>
    <InternalFunctionName>MP_GetVCenter</InternalFunctionName>
    <ModernName>GetViewCenter</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>center</Name>
        <Type>globPtVarMode</Type>
        <Desc>Returns view center point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsObjectFlipped</Name>
    <Version>800</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns the flip orientation of the specified 3D object. The function returns TRUE if the object is currently flipped.  [[BR]][[BR]]This function works for sweeps, extrudes, multiple extrudes, symbols, solids, layer references, and plug-in objects.</Description>
    <ShortDesc>Returns the flip orientation of 3D objects</ShortDesc>
    <SeeAlso>IsFlipped</SeeAlso>
    <Comments>Returns true if the object is currently flipped.  Works for sweeps, extrudes, mextrudes, symbols, solids, layer refs, and plug-in objects[[BR]][[BR]][sd 8/19/98][[BR]]</Comments>
    <Example>FUNCTION ObjFlippedInWall(objH, wallH :HANDLE) :BOOLEAN;[[BR]]BEGIN[[BR]]	ObjFlippedInWall := ((Trunc(GetSymRot(objH)) &lt;&gt; Trunc(HAngle(wallH))) = IsObjectFlipped(objH)); [[BR]]END;</Example>
    <ID>2019</ID>
    <IDName>funcIsObjectFlipped</IDName>
    <InternalFunctionName>MP_IsObjectFlipped</InternalFunctionName>
    <ModernName>GetObjectFlip</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDefaultTextSize</Name>
    <Version>800</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the default text size in points.[[BR]][[BR]][[note:PointSizeNote]]</Description>
    <ShortDesc>Returns the default text size in points</ShortDesc>
    <Comments>Returns the default text size in points.[[BR]][[BR]][sd  8/19/98]</Comments>
    <ID>2021</ID>
    <IDName>funcGetDefaultTextSize</IDName>
    <InternalFunctionName>MP_GetDefaultTextSize</InternalFunctionName>
    <ModernName>GetActTextSize</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetCustomObjectInfo</Name>
    <Version>800</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] is used within plug-in object scripts to determine information about the object. Only returns false if the object is corrupt.[[BR]][[BR]]</Description>
    <ShortDesc>A plug-in object script should call this function to get information about itself.</ShortDesc>
    <SeeAlso>IsNewCustomObject</SeeAlso>
    <Comments>[sd 8/19/98]</Comments>
    <ID>2022</ID>
    <IDName>funcGetCustomObjectInfo</IDName>
    <InternalFunctionName>MP_GetCustomObjectInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectName</Name>
        <Type>strVarMode</Type>
        <Desc>Returns the name of the object.</Desc>
      </Param>
      <Param>
        <Name>objectHand</Name>
        <Type>handleVarMode</Type>
        <Desc>Returns a handle to the plugin object in the drawing.</Desc>
      </Param>
      <Param>
        <Name>recordHand</Name>
        <Type>handleVarMode</Type>
        <Desc>Returns a handle to the record containing current parameter values.</Desc>
      </Param>
      <Param>
        <Name>wallHand</Name>
        <Type>handleVarMode</Type>
        <Desc>Returns a handle to a wall, (if this object is in a wall). </Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FFillColorByClass</Name>
    <Version>800</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether the global attributes are set to use the fill colors of the default class.</Description>
    <ShortDesc>Returns whether the global attributes are set to use the fill colors of the default class.</ShortDesc>
    <Comments>Returns whether the global attributes are set to use the fill colors of the default class.[[BR]][sd 8/19/98]</Comments>
    <Example>useClassFillCol:=[[name]];</Example>
    <ID>646</ID>
    <IDName>funcFFillColorByClass</IDName>
    <InternalFunctionName>MP_FFillColorByClass</InternalFunctionName>
    <ModernName>ActFillByClass</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>FFPatByClass</Name>
    <Version>800</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether the global attributes are set to use the fill pattern of the default class.</Description>
    <ShortDesc>Returns whether the global attributes are set to use the fill pattern of the default class.</ShortDesc>
    <Comments>Returns whether the global attributes are set to use the fill pattern of the default class.[[BR]][[BR]][sd 8/19/98]</Comments>
    <Example>useClassFPat:=[[name]];</Example>
    <ID>647</ID>
    <IDName>funcFFPatByClass</IDName>
    <InternalFunctionName>MP_FFPatByClass</InternalFunctionName>
    <ModernName>ActPatByClass</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>FLSByClass</Name>
    <Version>800</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether the global attributes are set to use the line style of the default class.</Description>
    <ShortDesc>Returns whether the global attributes are set to use the line style of the default class.</ShortDesc>
    <Comments>Returns whether the global attributes are set to use the line style of the default class.[[BR]][sd 8/19/98]</Comments>
    <Example>useClassLStyle:=[[name]];</Example>
    <ID>648</ID>
    <IDName>funcFLSByClass</IDName>
    <InternalFunctionName>MP_FLSByClass</InternalFunctionName>
    <ModernName>ActLineStyleByClass</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>FLWByClass</Name>
    <Version>800</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether the global attributes are set to use the line weight of the default class.</Description>
    <ShortDesc>Returns whether the global attributes are set to use the line weight of the default class.</ShortDesc>
    <Comments>Returns whether the global attributes are set to use the line weight of the default class.[[BR]][sd 8/19/98]</Comments>
    <Example>useClassLWidth:=[[name]];</Example>
    <ID>649</ID>
    <IDName>funcFLWByClass</IDName>
    <InternalFunctionName>MP_FLWByClass</InternalFunctionName>
    <ModernName>ActLineWeightByClass</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>FMarkerByClass</Name>
    <Version>800</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether the global attributes are set to use the arrow style of the default class.</Description>
    <ShortDesc>Returns whether the global attributes are set to use the arrow style of the default class.</ShortDesc>
    <Comments>Returns whether the global attributes are set to use the arrow style of the default class.[[BR]][sd 8/19/98]</Comments>
    <Example>useClassMarker:=[[name]];</Example>
    <ID>2001</ID>
    <IDName>funcFMarkerByClass</IDName>
    <InternalFunctionName>MP_FMarkerByClass</InternalFunctionName>
    <ModernName>ActMarkerByClass</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>FPenColorByClass</Name>
    <Version>800</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether the global attributes are set to use the pen colors of the default class.</Description>
    <ShortDesc>Returns whether the global attributes are set to use the pen colors of the default class.</ShortDesc>
    <Comments>Returns whether the global attributes are set to use the pen colors of the default class.[[BR]][sd 8/19/98]</Comments>
    <Example>useClassPenColor:=[[name]];</Example>
    <ID>2002</ID>
    <IDName>funcFPenColorByClass</IDName>
    <InternalFunctionName>MP_FPenColorByClass</InternalFunctionName>
    <ModernName>ActPenByClass</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>FillColorByClass</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Sets the default document fill colors to the fill colors of the active class.[[BR]][[BR]]</Description>
    <ShortDesc>Sets the document default settings to the fill colors of the active class.</ShortDesc>
    <SeeAlso>PenColorByClass, MarkerByClass, FPatByClass</SeeAlso>
    <Comments>Sets the global attributes to use the fill colors of the default class.[[BR]][sd 8/19/98]</Comments>
    <ID>640</ID>
    <IDName>procFillColorByClass</IDName>
    <InternalFunctionName>MP_FillColorByClass</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>FPatByClass</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Sets the default document fill pattern to the fill pattern of the active class.[[BR]]</Description>
    <ShortDesc>Sets the document default settings to the fill pattern of the active class.</ShortDesc>
    <SeeAlso>PenColorByClass, MarkerByClass, FillColorByClass</SeeAlso>
    <Comments>Sets the global attributes to use the fill pattern of the default class.[[BR]][sd 8/19/98]</Comments>
    <ID>641</ID>
    <IDName>procFPatByClass</IDName>
    <InternalFunctionName>MP_FPatByClass</InternalFunctionName>
    <ModernName>FillPatByClass</ModernName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>LSByClass</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Sets the default document line style to the line style of the active class.[[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Sets the document default settings to the line style of the active class.</ShortDesc>
    <Comments>Sets the global attributes to use the line style of the default class.[[BR]][sd 8/19/98]</Comments>
    <ID>642</ID>
    <IDName>procLSByClass</IDName>
    <InternalFunctionName>MP_LSByClass</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>LWByClass</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Sets the default document line weight to the line weight of the active class.[[BR]]</Description>
    <ShortDesc>Sets the document default settings to the line weight of the active class.</ShortDesc>
    <Comments>Sets the global attributes to use the line weight of the default class.[[BR]][sd 8/19/98]</Comments>
    <ID>643</ID>
    <IDName>procLWByClass</IDName>
    <InternalFunctionName>MP_LWByClass</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>MarkerByClass</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Sets the default document marker style to the marker style of the active class.[[BR]]</Description>
    <ShortDesc>Sets the document default settings to the arrow style of the active class.</ShortDesc>
    <Comments>Sets the global attributes to use the arrow style of the default class.[[BR]][sd 8/19/98]</Comments>
    <ID>644</ID>
    <IDName>procMarkerByClass</IDName>
    <InternalFunctionName>MP_MarkerByClass</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>PenColorByClass</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Sets the default document pen colors to the pen colors of the active class.[[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Sets the document default settings to the pen color of the default class.</ShortDesc>
    <SeeAlso>FillColorByClass</SeeAlso>
    <Comments>Sets the global attributes to use the pen color of the default class.[[BR]][sd 8/19/98]</Comments>
    <ID>645</ID>
    <IDName>procPenColorByClass</IDName>
    <InternalFunctionName>MP_PenColorByClass</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>IsFillColorByClass</Name>
    <Version>800</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether class fill colors are used for the referenced object.</Description>
    <ShortDesc>Returns whether the class fill colors are used for the referenced object.</ShortDesc>
    <Comments>Returns an indication of whether the class fill colors are used for the object referenced by h.[[BR]][sd 8/19/98]</Comments>
    <ID>2003</ID>
    <IDName>funcIsFillColorByClass</IDName>
    <InternalFunctionName>MP_IsFillColorByClass</InternalFunctionName>
    <ModernName>GetFillByClass</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsFPatByClass</Name>
    <Version>800</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] whether a class fill pattern is used for the referenced object.</Description>
    <ShortDesc>Returns whether a class fill pattern is used for  the referenced object.</ShortDesc>
    <Comments>Returns an indication of whether the class fill pattern is used for the object referenced by h.[[BR]][sd  8/19/98]</Comments>
    <ID>2004</ID>
    <IDName>funcIsFPatByClass</IDName>
    <InternalFunctionName>MP_IsFPatByClass</InternalFunctionName>
    <ModernName>GetPatByClass</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsLSByClass</Name>
    <Version>800</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether a class line style is used for the referenced object.</Description>
    <ShortDesc>Returns whether a class line style is used for the referenced object.</ShortDesc>
    <Comments>Returns an indication of whether the class line style is used for the object referenced by h.[[BR]][sd 8/19/98]</Comments>
    <ID>2005</ID>
    <IDName>funcIsLSByClass</IDName>
    <InternalFunctionName>MP_IsLSByClass</InternalFunctionName>
    <ModernName>GetLineStyleByClass</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsLWByClass</Name>
    <Version>800</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether a class line weight is used for the referenced object.</Description>
    <ShortDesc>Returns whether a class line weight is used for the referenced object.</ShortDesc>
    <Comments>Returns an indication of whether the class line weight is used for the object referenced by h.[[BR]][sd 8/19/98]</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   symDefHandle, h :HANDLE;[[BR]][[BR]]PROCEDURE AlertMe;[[BR]]BEGIN[[BR]]   Message(GetSDName(symDefHandle));[[BR]]   SetSelect(h);[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]   DSelectAll;[[BR]]   ClrMessage;[[BR]]   symDefHandle := FSymDef;[[BR]]   WHILE symDefHandle &lt;&gt; NIL DO BEGIN[[BR]]      h := FInSymDef(symDefHandle);[[BR]]      WHILE h &lt;&gt; NIL DO BEGIN[[BR]]         IF IsLWByClass(h) THEN AlertMe;[[BR]]         h := NextObj(h);[[BR]]      END;[[BR]]      symDefHandle := NextObj(symDefHandle);[[BR]]   END;[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2006</ID>
    <IDName>funcIsLWByClass</IDName>
    <InternalFunctionName>MP_IsLWByClass</InternalFunctionName>
    <ModernName>GetLineWeightByClass</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsMarkerByClass</Name>
    <Version>800</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether a class marker style is used for the referenced object.</Description>
    <ShortDesc>Returns whether a class marker style is used for the referenced object.</ShortDesc>
    <Comments>Returns an indication of whether the class arrow style is used for the object referenced by h.[[BR]][sd  8/19/98]</Comments>
    <ID>2007</ID>
    <IDName>funcIsMarkerByClass</IDName>
    <InternalFunctionName>MP_IsMarkerByClass</InternalFunctionName>
    <ModernName>GetMarkerByClass</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsPenColorByClass</Name>
    <Version>800</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether class pen colors are used for the referenced object.</Description>
    <ShortDesc>Returns whether class pen colors are used for the referenced object.</ShortDesc>
    <Comments>Returns an indication of whether the class pen colors are used for the object referenced by h.[[BR]][[BR]][sd 8/19/98]</Comments>
    <ID>2008</ID>
    <IDName>funcIsPenColorByClass</IDName>
    <InternalFunctionName>MP_IsPenColorByClass</InternalFunctionName>
    <ModernName>GetPenByClass</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetFillColorByClass</Name>
    <Version>800</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the referenced object to use the class attribute fill colors.</Description>
    <ShortDesc>Sets the referenced object to use the class attribute fill colors.</ShortDesc>
    <Comments>Sets so that the class fill colors are used for the object referenced by h.[[BR]][sd 8/19/98]</Comments>
    <ID>2009</ID>
    <IDName>procSetFillColorByClass</IDName>
    <InternalFunctionName>MP_SetFillColorByClass</InternalFunctionName>
    <ModernName>SetFillByClass</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetFPatByClass</Name>
    <Version>800</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the referenced object to use the class attribute fill pattern.</Description>
    <ShortDesc>Sets the referenced object to use the class attribute fill pattern.</ShortDesc>
    <Comments>Sets so that the class fill pattern is used for the object referenced by h.[[BR]][sd 8/19/98]</Comments>
    <ID>2010</ID>
    <IDName>procSetFPatByClass</IDName>
    <InternalFunctionName>MP_SetFPatByClass</InternalFunctionName>
    <ModernName>SetPatByClass</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLSByClass</Name>
    <Version>800</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the referenced object to use the class attribute line style.</Description>
    <ShortDesc>Sets the referenced object to use the class attribute line style.</ShortDesc>
    <Comments>Sets so that the class line style is used for the object referenced by h.[[BR]][sd 8/19/98]</Comments>
    <ID>2011</ID>
    <IDName>procSetLSByClass</IDName>
    <InternalFunctionName>MP_SetLSByClass</InternalFunctionName>
    <ModernName>SetLineStyleByClass</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLWByClass</Name>
    <Version>800</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the referenced object to use the class attribute line weight.</Description>
    <ShortDesc>Sets the referenced object to use the class attribute line weight.</ShortDesc>
    <Comments>Sets so that the class line weight is used for the object referenced by h.</Comments>
    <ID>2012</ID>
    <IDName>procSetLWByClass</IDName>
    <InternalFunctionName>MP_SetLWByClass</InternalFunctionName>
    <ModernName>SetLineWeightByClass</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetMarkerByClass</Name>
    <Version>800</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the referenced object to use the class attribute marker style.</Description>
    <ShortDesc>Sets the referenced object to use the class attribute marker style.</ShortDesc>
    <SeeAlso>SetObjArrow</SeeAlso>
    <Comments>Sets so that the class arrow style is used for the object referenced by h.</Comments>
    <ID>2013</ID>
    <IDName>procSetMarkerByClass</IDName>
    <InternalFunctionName>MP_SetMarkerByClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetPenColorByClass</Name>
    <Version>800</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the referenced object to use the class attribute pen colors.</Description>
    <ShortDesc>Sets the referenced object to use the class attribute pen colors.</ShortDesc>
    <Comments>Sets so that the class pen colors are used for the object referenced by h.</Comments>
    <ID>2014</ID>
    <IDName>procSetPenColorByClass</IDName>
    <InternalFunctionName>MP_SetPenColorByClass</InternalFunctionName>
    <ModernName>SetPenByClass</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClFillFore</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Returns the fill foreground color setting of the specified class. The color is returned as the RGB components of the color. RGB values are in the range of 0~65535.[[BR]]</Description>
    <ShortDesc>Returns the fill foreground color setting of a specified class</ShortDesc>
    <Comments>Returns the fill foreground color setting of the class named className in parameters colorRV, colorGV, and colorBV.</Comments>
    <Example>[[name]]('Grassy Cover',cRed,cGrn,cBlu);[[BR]]RGBToColorIndex(cRed,cGrn,cBlu,colorValue);[[BR]]</Example>
    <ID>625</ID>
    <IDName>procGetClFillFore</IDName>
    <InternalFunctionName>MP_GetClFillFore</InternalFunctionName>
    <ModernName>ClassFIllFore</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (red).</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (green).</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (blue).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClFillBack</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Returns the fill background color setting of the specified class. The color is returned as the three RGB components of the color. RGB values are in the range of 0~65535.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the fill background color setting of a specified class</ShortDesc>
    <Comments>Returns the fill background color setting of the class named className in parameters colorRV, colorGV, and colorBV.</Comments>
    <Example>[[name]]('Grassy Cover',cRed,cGrn,cBlu);[[BR]]RGBToColorIndex(cRed,cGrn,cBlu,colorValue);[[BR]]</Example>
    <ID>626</ID>
    <IDName>procGetClFillBack</IDName>
    <InternalFunctionName>MP_GetClFillBack</InternalFunctionName>
    <ModernName>ClassFillBack</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (red).</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (green).</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (blue).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClFPat</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Returns the fill or hatch pattern of the specified class. [[BR]][[BR]]A positive return value in a range of 0 to 71 is the index of the bitmap fill pattern of the class. A negative value is the negative of the fill pattern index (index * -1).[[BR]][[BR]][[note:FillPatTable]][[BR]][[BR]]</Description>
    <ShortDesc>Returns the fill or hatch pattern of a specified class. </ShortDesc>
    <Comments>Returns the fill pattern of the class named className.</Comments>
    <Example>pbFillStyl:= [[name]]('Grassy Cover');</Example>
    <ID>629</ID>
    <IDName>funcGetClFPat</IDName>
    <InternalFunctionName>MP_GetClFPat</InternalFunctionName>
    <ModernName>ClassFillPat</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClLS</Name>
    <ChangedDate>2017:10:26T09:39:00</ChangedDate>
    <Version>800</Version>
    <OldVersion Mode="AsError">1800</OldVersion>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Deprecated - will generate error. Use GetClLSN instead.[[BR]]Returns the line style of the specified class.[[BR]]</Description>
    <ShortDesc>Deprecated - will generate error. Use GetClLSN instead.</ShortDesc>
    <SeeAlso>GetClLSN </SeeAlso>
    <Comments>Deprecated - will generate error. Use GetClLSN instead. Original description was: Returns the line style of a specified class.</Comments>
    <Example>pbLineSty:= [[name]]('Property Bounds');</Example>
    <ID>630</ID>
    <IDName>funcGetClLS</IDName>
    <InternalFunctionName>MP_GetClLS</InternalFunctionName>
    <ModernName>ClassLineStyle</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClLW</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the line weight of the specified class.</Description>
    <ShortDesc>Returns the line weight of a specified class.</ShortDesc>
    <Comments>Returns the line weight of the class named className.</Comments>
    <Example>pbLineWt:= [[name]]('Property Bounds');</Example>
    <ID>631</ID>
    <IDName>funcGetClLW</IDName>
    <InternalFunctionName>MP_GetClLW</InternalFunctionName>
    <ModernName>ClassLineWeight</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClPenFore</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Returns the pen foreground color setting of the specified class. The color is returned as the three RGB components of the color. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Returns the pen foreground color  setting of a specified class</ShortDesc>
    <Comments>Returns the pen foreground color setting of the class named className in parameters colorRV, colorGV, and colorBV.</Comments>
    <Example>[[name]]('Grassy Cover',cRed,cGrn,cBlu);[[BR]]RGBToColorIndex(cRed,cGrn,cBlu,colorValue);[[BR]]</Example>
    <ID>627</ID>
    <IDName>procGetClPenFore</IDName>
    <InternalFunctionName>MP_GetClPenFore</InternalFunctionName>
    <ModernName>ClassPenFore</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (red).</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (green).</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (blue).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClPenBack</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Returns the pen background color setting of the specified class. The color is returned as the three RGB components of the color. RGB values are in the range of 0~65535.[[BR]]</Description>
    <ShortDesc>Returns the pen background color  setting of a specified class.</ShortDesc>
    <Comments>Returns the pen background color setting of the class named className in parameters colorRV, colorGV, and colorBV.</Comments>
    <ID>628</ID>
    <IDName>procGetClPenBack</IDName>
    <InternalFunctionName>MP_GetClPenBack</InternalFunctionName>
    <ModernName>ClassPenBack</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (red).</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (green).</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (blue).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClTextureC</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the wall center texture of the specified class.</Description>
    <ShortDesc>Returns the wall center texture of a specified class.</ShortDesc>
    <Comments>Returns the wall center textureof the class named className.</Comments>
    <ID>632</ID>
    <IDName>funcGetClTextureC</IDName>
    <InternalFunctionName>MP_GetClTextureC</InternalFunctionName>
    <ModernName>ClassTexWallCenter</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Class name.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClTextureD</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the roof dormer texture of the specified class.</Description>
    <ShortDesc>Returns the roof dormer texture of a specified class.</ShortDesc>
    <Comments>Returns the roof dormer texture of the class named className.</Comments>
    <ID>633</ID>
    <IDName>funcGetClTextureD</IDName>
    <InternalFunctionName>MP_GetClTextureD</InternalFunctionName>
    <ModernName>ClassTexDormer</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Class name.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClTextureG</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the generic texture of the specified class.</Description>
    <ShortDesc>Returns the generic texture of a specified class.</ShortDesc>
    <Comments>Returns the generic texture of the class named className.</Comments>
    <ID>634</ID>
    <IDName>funcGetClTextureG</IDName>
    <InternalFunctionName>MP_GetClTextureG</InternalFunctionName>
    <ModernName>ClassTexture</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Class name.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClTextureL</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the left side wall texture of the specified class. </Description>
    <ShortDesc>Returns the left side wall texture of a specified class.</ShortDesc>
    <Comments>Returns the wall left texture of the class named className.</Comments>
    <ID>635</ID>
    <IDName>funcGetClTextureL</IDName>
    <InternalFunctionName>MP_GetClTextureL</InternalFunctionName>
    <ModernName>ClassTexWallA</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Class name.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClTextureR</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the right side wall texture of the specified class.</Description>
    <ShortDesc>Returns the right side wall texture of a specified class.</ShortDesc>
    <Comments>Returns the wall right texture of the class named className.</Comments>
    <ID>636</ID>
    <IDName>funcGetClTextureR</IDName>
    <InternalFunctionName>MP_GetClTextureR</InternalFunctionName>
    <ModernName>ClassTexWallB</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Class name.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClTextureT</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the roof top texture of the specified class.</Description>
    <ShortDesc>Returns the roof-top texture of a specified class.</ShortDesc>
    <Comments>Returns the roof top texture of the class named className.</Comments>
    <ID>637</ID>
    <IDName>funcGetClTextureT</IDName>
    <InternalFunctionName>MP_GetClTextureT</InternalFunctionName>
    <ModernName>ClassTexRoof</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Class name.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClUseGraphic</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns whether the graphic attributes of the specified class will be used at object creation.</Description>
    <ShortDesc>Returns whether th graphic attributes of a class will be used at object creation.</ShortDesc>
    <Result>True indicates that this class is set to use its graphic attributes when objects are created in this class. False indicates that the objects created in this class will get default attributes from the default global attribute settings.</Result>
    <Comments>Returns whether the class is set to use its graphic attributes at object creation.</Comments>
    <ID>638</ID>
    <IDName>funcGetClUseGraphic</IDName>
    <InternalFunctionName>MP_GetClUseGraphic</InternalFunctionName>
    <ModernName>ClassUseAttributes</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClUseTexture</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether a classes' texture attributes will be used at object creation.</Description>
    <ShortDesc>Returns whether a classes texture attributes will be used at object creation</ShortDesc>
    <Comments>Returns whether the class is set to use its texture attributes at object creation.</Comments>
    <ID>639</ID>
    <IDName>funcGetClUseTexture</IDName>
    <InternalFunctionName>MP_GetClUseTexture</InternalFunctionName>
    <ModernName>ClassUseTex</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Class name.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClFillFore</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Sets the fill foreground color of the specified class. The color must be specified using the RGB components of the desired color. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Sets the fill foreground color of the specified class.</ShortDesc>
    <Comments>Changes the fill foreground color setting of the class named className.</Comments>
    <Example>ColorIndexToRGB(24,cRed,cGrn,cBlu);[[BR]][[name]]('Grassy Cover',cRed,cGrn,cBlu);</Example>
    <ID>610</ID>
    <IDName>procSetClFillFore</IDName>
    <InternalFunctionName>MP_SetClFillFore</InternalFunctionName>
    <ModernName>SetClassFillFore</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClFillBack</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Sets the fill background color of the specified class. The color must be specified using the RGB components of the desired color. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Sets the fill background color of the specified class.</ShortDesc>
    <Comments>Changes the fill background color setting of the class named className.</Comments>
    <Example>ColorIndexToRGB(98,cRed,cGrn,cBlu);[[BR]][[name]]('Grassy Cover',cRed,cGrn,cBlu);</Example>
    <ID>611</ID>
    <IDName>procSetClFillBack</IDName>
    <InternalFunctionName>MP_SetClFillBack</InternalFunctionName>
    <ModernName>SetClassFillBack</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClFPat</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Sets the fill pattern of the specified class.[[BR]][[BR]]To apply a bitmap fill pattern, use a positive value corresponding to the desired fill pattern index. To apply a vector fill, use the negative of the index of the vector fill (index * -1).[[BR]][[BR]][[note:FillPatTable]]</Description>
    <ShortDesc>Sets the fill pattern of a specified class. </ShortDesc>
    <Comments>Assigns a fill pattern to the class named className.</Comments>
    <Example>[[name]]('Grassy Cover',42);</Example>
    <ID>614</ID>
    <IDName>procSetClFPat</IDName>
    <InternalFunctionName>MP_SetClFPat</InternalFunctionName>
    <ModernName>SetClassFillPat</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
      <Param>
        <Name>fillpattern</Name>
        <Type>longMode</Type>
        <Desc>Fill pattern index value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClLS</Name>
    <ChangedDate>2017:10:26T09:40:00</ChangedDate>
    <Version>800</Version>
    <OldVersion Mode="AsError">1800</OldVersion>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Deprecated - will generate error. Use SetClLSN instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use SetClLSN instead.</ShortDesc>
    <SeeAlso>SetClLSN </SeeAlso>
    <Comments>Deprecated - will generate error. Use SetClLSN instead. Original description was: Sets the line style of a specified class.</Comments>
    <Example>[[name]]('Property Parcels',-4);</Example>
    <ID>615</ID>
    <IDName>procSetClLS</IDName>
    <InternalFunctionName>MP_SetClLS</InternalFunctionName>
    <ModernName>SetClassLineStyle</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
      <Param>
        <Name>LS</Name>
        <Type>intMode</Type>
        <Desc>Line style index value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClLW</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Sets the line weight of the specified class.</Description>
    <ShortDesc>Sets the line weight of a specified class.</ShortDesc>
    <Comments>Assigns the specified line style to the class named className.</Comments>
    <Example>[[name]]('To Be Demolished',28);</Example>
    <ID>616</ID>
    <IDName>procSetClLW</IDName>
    <InternalFunctionName>MP_SetClLW</InternalFunctionName>
    <ModernName>SetClassLineWeight</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
      <Param>
        <Name>LW</Name>
        <Type>intMode</Type>
        <Desc>Line weight value (in mils).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClPenFore</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Sets the pen foreground color of the specified class. The color must be specified using the RGB components of the desired color. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Sets the pen foreground  color of the specified class.</ShortDesc>
    <Comments>Changes the pen foreground color setting of the class named className.</Comments>
    <Example>ColorIndexToRGB(214,cRed,cGrn,cBlu);[[BR]][[name]]('Cold Water Supply',cRed,cGrn,cBlu);</Example>
    <ID>612</ID>
    <IDName>procSetClPenFore</IDName>
    <InternalFunctionName>MP_SetClPenFore</InternalFunctionName>
    <ModernName>SetClassPenFore</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClPenBack</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the pen background color of the specified class. The color must be specified using the RGB components of the desired color. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Sets the pen background color of the specified class.</ShortDesc>
    <Comments>Changes the pen background color setting of the class named className.</Comments>
    <Example>ColorIndexToRGB(214,cRed,cGrn,cBlu);[[BR]][[name]]('Cold Water Supply',cRed,cGrn,cBlu);</Example>
    <ID>613</ID>
    <IDName>procSetClPenBack</IDName>
    <InternalFunctionName>MP_SetClPenBack</InternalFunctionName>
    <ModernName>SetClassPenBack</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClTextureC</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the wall center texture of the specified class.</Description>
    <ShortDesc>Sets the wall center texture of a specified class.</ShortDesc>
    <Comments>Sets the wall center texture of the class named className.</Comments>
    <ID>617</ID>
    <IDName>procSetClTextureC</IDName>
    <InternalFunctionName>MP_SetClTextureC</InternalFunctionName>
    <ModernName>SetClassTexWallCenter</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Class name.</Desc>
      </Param>
      <Param>
        <Name>textureRef</Name>
        <Type>longMode</Type>
        <Desc>Texture reference index value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClTextureD</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the roof dormer texture of the specified class.</Description>
    <ShortDesc>Sets the roof dormer texture of a specified class.</ShortDesc>
    <Comments>Sets the roof dormer texture of the class named className.</Comments>
    <ID>618</ID>
    <IDName>procSetClTextureD</IDName>
    <InternalFunctionName>MP_SetClTextureD</InternalFunctionName>
    <ModernName>SetClassTexDormer</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Class name.</Desc>
      </Param>
      <Param>
        <Name>textureRef</Name>
        <Type>longMode</Type>
        <Desc>Texture reference index value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClTextureG</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the generic texture of the specified class.</Description>
    <ShortDesc>Sets the generic texture of a specified class</ShortDesc>
    <Comments>Sets the generic texture of the class named className.</Comments>
    <ID>619</ID>
    <IDName>procSetClTextureG</IDName>
    <InternalFunctionName>MP_SetClTextureG</InternalFunctionName>
    <ModernName>SetClassTex</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Class name.</Desc>
      </Param>
      <Param>
        <Name>textureRef</Name>
        <Type>longMode</Type>
        <Desc>Texture reference index value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClTextureL</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the left side wall texture of the specified class.</Description>
    <ShortDesc>Sets the left side wall texture of a specified class</ShortDesc>
    <Comments>Sets the wall left texture of the class named className.</Comments>
    <ID>620</ID>
    <IDName>procSetClTextureL</IDName>
    <InternalFunctionName>MP_SetClTextureL</InternalFunctionName>
    <ModernName>SetClassTexWallA</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Class name.</Desc>
      </Param>
      <Param>
        <Name>textureRef</Name>
        <Type>longMode</Type>
        <Desc>Texture reference index value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClTextureR</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the right side wall texture of the specified class.</Description>
    <ShortDesc>Sets the right side wall texture of a specified class</ShortDesc>
    <Comments>Sets the wall right texture of the class named className.</Comments>
    <ID>621</ID>
    <IDName>procSetClTextureR</IDName>
    <InternalFunctionName>MP_SetClTextureR</InternalFunctionName>
    <ModernName>SetClassTexWallB</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Class name.</Desc>
      </Param>
      <Param>
        <Name>textureRef</Name>
        <Type>longMode</Type>
        <Desc>Texture reference index value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClTextureT</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the roof top texture of the specified class.</Description>
    <ShortDesc>Sets the roof-top texture of a specified class</ShortDesc>
    <Comments>Sets the roof top texture of the class named className.</Comments>
    <ID>622</ID>
    <IDName>procSetClTextureT</IDName>
    <InternalFunctionName>MP_SetClTextureT</InternalFunctionName>
    <ModernName>SetClassTexRoof</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Class name.</Desc>
      </Param>
      <Param>
        <Name>textureRef</Name>
        <Type>longMode</Type>
        <Desc>Texture reference index value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClUseGraphic</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Toggles the document setting for using the graphic attributes of the specified class at object creation.</Description>
    <ShortDesc>Determines whether class graphic attributes are used at object creation.</ShortDesc>
    <Comments>Sets whether the class graphic attributes are used at object creation.</Comments>
    <Example>[[name]]('Forested Cover',TRUE);</Example>
    <ID>623</ID>
    <IDName>procSetClUseGraphic</IDName>
    <InternalFunctionName>MP_SetClUseGraphic</InternalFunctionName>
    <ModernName>SetClassUseAttributes</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
      <Param>
        <Name>use</Name>
        <Type>boolMode</Type>
        <Desc>Use graphic attributes on-off setting.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClUseTexture</Name>
    <Version>800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Toggles the document setting for using the texture attributes of the specified class at object creation.</Description>
    <ShortDesc>Determines whether class texture attributes are used at object creation.</ShortDesc>
    <Comments>Sets whether the class texture attributes are used at object creation.</Comments>
    <Example>[[name]]('Proposed Roof',TRUE);</Example>
    <ID>624</ID>
    <IDName>procSetClUseTexture</IDName>
    <InternalFunctionName>MP_SetClUseTexture</InternalFunctionName>
    <ModernName>SetClassUseTex</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
      <Param>
        <Name>use</Name>
        <Type>boolMode</Type>
        <Desc>Use texture attributes on-off setting.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetMaximumUndoEvents</Name>
    <Version>800</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the maximum number of undo events that can be stored in the undo table. Parameter [[p:1]] specifies the number of undos. Setting this value to zero effectively turns off undo.</Description>
    <ShortDesc>Sets the maximum number of undo events that can be stored in the undo table.</ShortDesc>
    <Comments>Sets the maximum number of undo events that can be stored in the undo table. Setting this to zero effectively turns off undo.</Comments>
    <ID>2031</ID>
    <IDName>procSetMaximumUndoEvents</IDName>
    <InternalFunctionName>MP_SetMaximumUndoEvents</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>events</Name>
        <Type>intMode</Type>
        <Desc>Number of undo events to store.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPrimaryUnitInfo</Name>
    <Version>800</Version>
    <Category>Units</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the primary units settings for the active document. [[BR]]</Description>
    <ShortDesc>Returns settings information for primary units</ShortDesc>
    <SeeAlso>GetRoundingBase</SeeAlso>
    <Comments>Returns settings information for primary units.</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	style              :INTEGER;[[BR]]	prec, dimPrec      :LONGINT;[[BR]]	format, angPrec    :INTEGER;[[BR]]	showMark, dispFrac :BOOLEAN;[[BR]]	major, minor, maintenance, platform :INTEGER;[[BR]]BEGIN[[BR]]	GetVersion(major, minor, maintenance, platform);[[BR]]	GetPrimaryUnitInfo(style, prec, dimPrec, format, angPrec, showMark, dispFrac);[[BR]][[BR]]	CASE major of[[BR]]		8: Case style of[[BR]]			0: AlrtDialog('Custom');[[BR]]			1: AlrtDialog('Old Style Feet/Inches');[[BR]]			2: AlrtDialog('Millimeter');[[BR]]			3: AlrtDialog('Centimeter');[[BR]]			4: AlrtDialog('Inches');[[BR]]			5: AlrtDialog('Meters');[[BR]]			6: AlrtDialog('Feet/Inches');[[BR]]			7: AlrtDialog('Feet');[[BR]]		END;[[BR]][[BR]]		9..11: Case style of[[BR]]			0: AlrtDialog('Custom');[[BR]]			1: AlrtDialog('Feet/Inches');[[BR]]			2: AlrtDialog('Feet');[[BR]]			3: AlrtDialog('Inches');[[BR]]			4: AlrtDialog('Millimeters');[[BR]]			5: AlrtDialog('Centimeters');[[BR]]			6: AlrtDialog('Meters');[[BR]]		END;[[BR]][[BR]]		12: Case style of[[BR]]			1: AlrtDialog('Feet and Inches');[[BR]]			2: AlrtDialog('Inches');[[BR]]			3: AlrtDialog('Feet');[[BR]]			4: AlrtDialog('Yards');[[BR]]			5: AlrtDialog('Miles');[[BR]]			6: AlrtDialog('Microns');[[BR]]			7: AlrtDialog('Millimeters');[[BR]]			8: AlrtDialog('Centimeters');[[BR]]			9: AlrtDialog('Meters');[[BR]]			10: AlrtDialog('Kilometers');[[BR]]			11: AlrtDialog('Degrees');[[BR]]		END;[[BR]][[BR]]	END;[[BR]]END; [[BR]]RUN(Example);</Example>
    <ID>2032</ID>
    <IDName>procGetPrimaryUnitInfo</IDName>
    <InternalFunctionName>MP_GetPrimaryUnitInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>style</Name>
        <Type>intVarMode</Type>
        <Desc>Returns active primary units style.</Desc>
      </Param>
      <Param>
        <Name>prec</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns display precision.</Desc>
      </Param>
      <Param>
        <Name>dimPrec</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns dimension precision.</Desc>
      </Param>
      <Param>
        <Name>format</Name>
        <Type>intVarMode</Type>
        <Desc>Returns decimal formatting.</Desc>
      </Param>
      <Param>
        <Name>angPrec</Name>
        <Type>intVarMode</Type>
        <Desc>Returns angular precision.</Desc>
      </Param>
      <Param>
        <Name>showMark</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns unit mark display setting.</Desc>
      </Param>
      <Param>
        <Name>dispFrac</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns fractional display setting.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSecondaryUnitInfo</Name>
    <Version>800</Version>
    <Category>Units</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the secondary unit parameters for the active document. [[BR]]</Description>
    <ShortDesc>Returns settings information for secondary units.</ShortDesc>
    <Comments>Returns settings information for secondary units.</Comments>
    <ID>2033</ID>
    <IDName>procGetSecondaryUnitInfo</IDName>
    <InternalFunctionName>MP_GetSecondaryUnitInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>style</Name>
        <Type>intVarMode</Type>
        <Desc>Returns active secondary units style.</Desc>
      </Param>
      <Param>
        <Name>dimPrec</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns dimension precision.</Desc>
      </Param>
      <Param>
        <Name>format</Name>
        <Type>intVarMode</Type>
        <Desc>Returns decimal formatting.</Desc>
      </Param>
      <Param>
        <Name>showMark</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns unit mark display setting.</Desc>
      </Param>
      <Param>
        <Name>dispFrac</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns fractional display setting.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCustomObjectChoice</Name>
    <Version>800</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Function [[name]] returns a choice string of the specified plug-in object popup menu or radio group parameter.  These parameters are displayed in the Object Info palette or the plug-in objects' creation dialog.[[BR]][[BR]][[note:CustomObjParamNote]][[BR]][[BR]]The choiceIndex parameter should be passed an integer between 1 and the number of choices, which can be determined by calling the NumCustomObjectChoices function.</Description>
    <ShortDesc>Returns a choice string for a plug-in object popup menu or radio group parameter.</ShortDesc>
    <Result>Returns associated string of specified choice list item.</Result>
    <SeeAlso>NumCustomObjectChoices</SeeAlso>
    <Comments>Call from CustomObject scripts only.  Returns a particular choice string for a popup menu or radio group parameter.</Comments>
    <Example>theChoice := GetCustomObjectChoice(objectName, 'PDINNER_MENU', 1);[[BR]]</Example>
    <ID>2034</ID>
    <IDName>funcGetCustomObjectChoice</IDName>
    <InternalFunctionName>MP_GetCustomObjectChoice</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectName</Name>
        <Type>stringMode</Type>
        <Desc>Name of the plugin object.</Desc>
      </Param>
      <Param>
        <Name>parameterName</Name>
        <Type>stringMode</Type>
        <Desc>String indicating which parameter.</Desc>
      </Param>
      <Param>
        <Name>choiceIndex</Name>
        <Type>intMode</Type>
        <Desc>Index of desired choice.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NumCustomObjectChoices</Name>
    <Version>800</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the number of choice strings for a specified popup menu or radio group parameter in a plug-in object. [[BR]][[BR]][[note:CustomObjParamNote]]</Description>
    <ShortDesc>Return number of choice strings for a particular popup menu or radio group parameter.</ShortDesc>
    <SeeAlso>GetCustomObjectChoice</SeeAlso>
    <Comments>Call from CustomObject scripts only.  Return number of choice strings for a particular popup menu or radio group parameter.</Comments>
    <Example>maxChoices := NumCustomObjectChoices(objName, 'PDINNER_MENU');</Example>
    <ID>2035</ID>
    <IDName>funcNumCustomObjectChoices</IDName>
    <InternalFunctionName>MP_NumCustomObjectChoices</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectName</Name>
        <Type>stringMode</Type>
        <Desc>Name of plugin object.</Desc>
      </Param>
      <Param>
        <Name>parameterName</Name>
        <Type>stringMode</Type>
        <Desc>String indicating which parameter</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NameUndoEvent</Name>
    <Version>800</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] names the undo event that is currently being built by VectorScript execution. Parameter [[p:1]] is the name of the undo event.</Description>
    <ShortDesc>Names the undo event that is currently being built.</ShortDesc>
    <Comments>Names the undo event that is currently being built.</Comments>
    <ID>2036</ID>
    <IDName>procNameUndoEvent</IDName>
    <InternalFunctionName>MP_NameUndoEvent</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>eventName</Name>
        <Type>stringMode</Type>
        <Desc>Name of undo event.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsTextureableObject</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether the referenced object supports texture mapping.</Description>
    <ShortDesc>Returns whether the referenced 3D object supports textures.</ShortDesc>
    <Result>Returns TRUE if object supports texture mapping.</Result>
    <Comments>This function returns true if the specified 3D object can have textures attached to it.</Comments>
    <ID>2038</ID>
    <IDName>funcIsTextureableObject</IDName>
    <InternalFunctionName>MP_IsTextureableObject</InternalFunctionName>
    <ModernName>Textureable</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjExpandTexture</Name>
    <ChangedDate>2009:01:28T11:43:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether the referenced objects' textures have been "expanded". When a texture is expanded, different components of an object can have different textures.[[BR]]</Description>
    <ShortDesc>Returns whether referenced object is displaying expanded textures.</ShortDesc>
    <Comments>This function returns true if the object's textures are expanded.  For example, if the object is a wall and this function returns true then there are three distinct textures applied to the left, center, and right polygons.</Comments>
    <ID>2039</ID>
    <IDName>funcGetObjExpandTexture</IDName>
    <InternalFunctionName>MP_GetObjExpandTexture</InternalFunctionName>
    <ModernName>GetExpandTexture</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjExpandTexture</Name>
    <ChangedDate>2009:01:28T11:43:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the "expanded" state of the referenced objects' texture. When a texture is expanded, different components of an object can have different textures.[[BR]]</Description>
    <ShortDesc>Sets whether an object's texture is expanded</ShortDesc>
    <Comments>Sets whether three or just a single texture is applied to this object (can be up to three for walls or two for roofs).</Comments>
    <ID>2040</ID>
    <IDName>procSetObjExpandTexture</IDName>
    <InternalFunctionName>MP_SetObjExpandTexture</InternalFunctionName>
    <ModernName>SetExpandTexture</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>expanded</Name>
        <Type>boolMode</Type>
        <Desc>Use expanded textures setting.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextureShininess</Name>
    <Version>800</Version>
    <OldVersion>900</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the shininess value of the referenced texture. The value is expressed as a percentage value with 0 equaling "Dull".</Description>
    <ShortDesc>Returns the degree of shine applied to a textured object when rendered</ShortDesc>
    <Comments>Percentage value - 0 equals 'Dull'</Comments>
    <ID>2041</ID>
    <IDName>funcGetTextureShininess</IDName>
    <InternalFunctionName>MP_GetTextureShininess</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>texture</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CalcVolume</Name>
    <Version>800</Version>
    <OldVersion>1250</OldVersion>
    <Category>Objects - Solids</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] calculates the volume of the referenced solid object. The function supports only valid solids objects.</Description>
    <ShortDesc>Calculates the volume of the referenced solid object.  This function is obsolete.  Use ObjVolume instead.</ShortDesc>
    <Comments>Calculates the volume of the given object if a valid solid.</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]        volume, area: REAL;[[BR]]BEGIN[[BR]]        IF FSActLayer &lt;&gt; NIL THEN BEGIN[[BR]]                volume := CalcVolume(FSActLayer);[[BR]]                area := CalcSurfaceArea(FSActLayer);[[BR]]                Message('Volume ', volume, ', surface area ', area);[[BR]]        END;[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2042</ID>
    <IDName>funcCalcVolume</IDName>
    <InternalFunctionName>MP_CalcVolume</InternalFunctionName>
    <ModernName>GetVolume</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>solidObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to solids object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CalcSurfaceArea</Name>
    <Version>800</Version>
    <OldVersion>1250</OldVersion>
    <Category>Objects - Solids</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] calculates the surface area of the referenced solid object. The function supports only valid solids objects.</Description>
    <ShortDesc>Calculates the surface area of the referenced solid.  This function is obsolete.  Use ObjSurfaceArea instead.</ShortDesc>
    <Comments>Calculates the volume of the given object if a valid solid.</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]        volume, area: REAL;[[BR]]BEGIN[[BR]]        IF FSActLayer &lt;&gt; NIL THEN BEGIN[[BR]]                volume := CalcVolume(FSActLayer);[[BR]]                area := CalcSurfaceArea(FSActLayer);[[BR]]                Message('Volume ', volume, ', surface area ', area);[[BR]]        END;[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2043</ID>
    <IDName>funcCalcSurfaceArea</IDName>
    <InternalFunctionName>MP_CalcSurfaceArea</InternalFunctionName>
    <ModernName>GetSurfaceArea</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>solidObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to solids object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextureShininess</Name>
    <Version>800</Version>
    <OldVersion>900</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the shininess value of the referenced texture. The value is expressed as a percentage value in a range of 0-100 with 0 equaling "Dull".[[BR]]</Description>
    <ShortDesc>Sets the degree of shine applied to a textured object when rendered</ShortDesc>
    <Comments>Percentage value - 0 equals dull</Comments>
    <ID>2044</ID>
    <IDName>procSetTextureShininess</IDName>
    <InternalFunctionName>MP_SetTextureShininess</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>texture</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture.</Desc>
      </Param>
      <Param>
        <Name>shininess</Name>
        <Type>intMode</Type>
        <Desc>Shininess setting for texture.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextureTransp</Name>
    <Version>800</Version>
    <OldVersion>900</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the degree of transparency applied to the referenced texture. It is expressed as a percentage with 0 creating an opaque texture.</Description>
    <ShortDesc>Returns the degree of transparency applied to a texture.</ShortDesc>
    <Comments>Percentage value - 0 equals opaque</Comments>
    <ID>2045</ID>
    <IDName>funcGetTextureTransp</IDName>
    <InternalFunctionName>MP_GetTextureTransp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>texture</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextureTransp</Name>
    <Version>800</Version>
    <OldVersion>900</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the degree of transparency applied to the referenced texture.  The transparency value is expressed in the range of 0-100, with 0 equaling opaque and 100 equaling transparent.</Description>
    <ShortDesc>Sets the degree of transparency applied to a texture when rendered</ShortDesc>
    <Comments>Percentage value - 0 equals opaque</Comments>
    <ID>2046</ID>
    <IDName>procSetTextureTransp</IDName>
    <InternalFunctionName>MP_SetTextureTransp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>texture</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture.</Desc>
      </Param>
      <Param>
        <Name>transparency</Name>
        <Type>intMode</Type>
        <Desc>Transparency setting for texture.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextureShader</Name>
    <Version>800</Version>
    <OldVersion>900</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the LightWorks internal property reference ID for the shader attached to the referenced texture.</Description>
    <ShortDesc>Returns LightWorks  property reference for shader attached to texture.</ShortDesc>
    <Comments>Returns LightWorks internal property ref for the shader attached to this texture.</Comments>
    <ID>2047</ID>
    <IDName>funcGetTextureShader</IDName>
    <InternalFunctionName>MP_GetTextureShader</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>texture</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextureShader</Name>
    <Version>800</Version>
    <OldVersion>900</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the LightWorks internal property reference ID for the shader attached to the referenced texture.</Description>
    <ShortDesc>Sets LightWorks property reference for shader attached to texture.</ShortDesc>
    <Comments>Sets the shader to a LightWorks internal property ref.</Comments>
    <ID>2048</ID>
    <IDName>procSetTextureShader</IDName>
    <InternalFunctionName>MP_SetTextureShader</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>texture</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture.</Desc>
      </Param>
      <Param>
        <Name>shaderIndex</Name>
        <Type>longMode</Type>
        <Desc>Shader ID value for texture.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextureBitmap</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns the bitmap object attached to the referenced texture.</Description>
    <ShortDesc>Returns the bitmap object attached to the shader record.</ShortDesc>
    <Result> If there is no texture applied to an object the function returns NIL.</Result>
    <Comments>Returns the bitmap object attached to the shader record, NIL if none</Comments>
    <ID>2049</ID>
    <IDName>funcGetTextureBitmap</IDName>
    <InternalFunctionName>MP_GetTextureBitmap</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>shaderRecord</Name>
        <Type>handleMode</Type>
        <Desc>Handle to shader record.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextureBitmap</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the bitmap object attached to the referenced texture. If no texture is desired then set [[p:2]] to NIL.</Description>
    <ShortDesc>Attached the texture bitmap to a shader record.</ShortDesc>
    <Comments>Sets the bitmap for a shader record, use NIL for no bitmap</Comments>
    <ID>2050</ID>
    <IDName>procSetTextureBitmap</IDName>
    <InternalFunctionName>MP_SetTextureBitmap</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>shaderRecord</Name>
        <Type>handleMode</Type>
        <Desc>Handle to shader record.</Desc>
      </Param>
      <Param>
        <Name>textureBitmap</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture bitmap.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexBitmapOrigin</Name>
    <Version>800</Version>
    <OldVersion>900</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the origin of the bitmap applied to the referenced texture bitmap. The origin is measured in pixels, with the top left corner as (0,0).[[BR]]</Description>
    <ShortDesc>Returns the origin of the bitmap applied to a texture.</ShortDesc>
    <Comments>Origin x and y are in pixels from paint node top left</Comments>
    <ID>2051</ID>
    <IDName>procGetTexBitmapOrigin</IDName>
    <InternalFunctionName>MP_GetTexBitmapOrigin</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureBitmap</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture bitmap.</Desc>
      </Param>
      <Param>
        <Name>originX</Name>
        <Type>intVarMode</Type>
        <Desc>Returns X coordinate of bitmap origin.</Desc>
      </Param>
      <Param>
        <Name>originY</Name>
        <Type>intVarMode</Type>
        <Desc>Returns Y coordinate of bitmap origin.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexBitmapOrigin</Name>
    <Version>800</Version>
    <OldVersion>900</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the origin of the bitmap applied to the referenced texture bitmap. The origin is measured in pixels, with the top left corner as (0,0).[[BR]]</Description>
    <ShortDesc>Sets the origin of the bitmap applied to a texture</ShortDesc>
    <Comments>Origin x and y are in pixels from paint node top left</Comments>
    <ID>2052</ID>
    <IDName>procSetTexBitmapOrigin</IDName>
    <InternalFunctionName>MP_SetTexBitmapOrigin</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureBitmap</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture bitmap.</Desc>
      </Param>
      <Param>
        <Name>originX</Name>
        <Type>intMode</Type>
        <Desc>X coordinate of bitmap origin.</Desc>
      </Param>
      <Param>
        <Name>originY</Name>
        <Type>intMode</Type>
        <Desc>Y coordinate of bitmap origin.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexBFeatureStart</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the "feature startpoint" of the referenced texture bitmap.   The point is expressed in pixels from the top left corner of the bitmap.</Description>
    <ShortDesc>Returns the feature startpoint of a texture bitmap.</ShortDesc>
    <Comments>X and y are in paint node pixels from top left</Comments>
    <ID>2053</ID>
    <IDName>procGetTexBFeatureStart</IDName>
    <InternalFunctionName>MP_GetTexBFeatureStart</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureBitmap</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture bitmap.</Desc>
      </Param>
      <Param>
        <Name>featureStartX</Name>
        <Type>intVarMode</Type>
        <Desc>Returns X coordinate of feature start point.</Desc>
      </Param>
      <Param>
        <Name>featureStartY</Name>
        <Type>intVarMode</Type>
        <Desc>Returns Y coordinate of feature start point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexBFeatureStart</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the "feature startpoint" of the referenced texture bitmap.  The point is expressed in pixels from the top left corner of the bitmap.</Description>
    <ShortDesc>Sets the feature startpoint of a texture bitmap</ShortDesc>
    <Comments>X and y are in paint node pixels from top left</Comments>
    <ID>2054</ID>
    <IDName>procSetTexBFeatureStart</IDName>
    <InternalFunctionName>MP_SetTexBFeatureStart</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureBitmap</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture bitmap.</Desc>
      </Param>
      <Param>
        <Name>featureStartX</Name>
        <Type>intMode</Type>
        <Desc>X coordinate of feature start point.</Desc>
      </Param>
      <Param>
        <Name>featureStartY</Name>
        <Type>intMode</Type>
        <Desc>Y coordinate of feature start point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexBFeatureEnd</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the "feature endpoint" of the referenced texture bitmap.  The point is expressed in pixels from the top left corner of the bitmap.[[BR]]</Description>
    <ShortDesc>Returns the feature endpoint of a texture bitmap</ShortDesc>
    <Comments>X and y are in paint node pixels from top left</Comments>
    <ID>2055</ID>
    <IDName>procGetTexBFeatureEnd</IDName>
    <InternalFunctionName>MP_GetTexBFeatureEnd</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureBitmap</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture bitmap.</Desc>
      </Param>
      <Param>
        <Name>featureEndX</Name>
        <Type>intVarMode</Type>
        <Desc>Returns X coordinate of feature end point.</Desc>
      </Param>
      <Param>
        <Name>featureEndY</Name>
        <Type>intVarMode</Type>
        <Desc>Returns Y coordinate of feature end point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexBFeatureEnd</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the "feature endpoint" of the referenced texture bitmap.  Parameters [[p:2]] and [[p:3]] specify the end point. The point is expressed in pixels from the top left corner of the bitmap.</Description>
    <ShortDesc>Sets the feature endpoint of a texture bitmap</ShortDesc>
    <Comments>X and y are in paint node pixels from top left</Comments>
    <ID>2056</ID>
    <IDName>procSetTexBFeatureEnd</IDName>
    <InternalFunctionName>MP_SetTexBFeatureEnd</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureBitmap</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture bitmap.</Desc>
      </Param>
      <Param>
        <Name>featureEndX</Name>
        <Type>intMode</Type>
        <Desc>X coordinate of feature end point.</Desc>
      </Param>
      <Param>
        <Name>featureEndY</Name>
        <Type>intMode</Type>
        <Desc>Y coordinate of feature end point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexBitFeatureSize</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the feature size of the referenced bitmap in real world inches.</Description>
    <ShortDesc>Returns feature size in real world inches.</ShortDesc>
    <Comments>Returns feature size in real-world inches</Comments>
    <ID>2057</ID>
    <IDName>funcGetTexBitFeatureSize</IDName>
    <InternalFunctionName>MP_GetTexBitFeatureSize</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureBitmap</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture bitmap.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexBitFeatureSize</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the feature size of the referenced bitmap. Parameter [[p:2]] specifies the size in real world inches.</Description>
    <ShortDesc>Sets the feature size in real world inches.</ShortDesc>
    <Comments>featureSize is in real-world inches</Comments>
    <ID>2058</ID>
    <IDName>procSetTexBitFeatureSize</IDName>
    <InternalFunctionName>MP_SetTexBitFeatureSize</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureBitmap</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture bitmap.</Desc>
      </Param>
      <Param>
        <Name>featureSize</Name>
        <Type>realMode</Type>
        <Desc>Feature size value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexBitRepHoriz</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether the referenced texture bitmap is set to repeat horizontally. </Description>
    <ShortDesc>Returns if a texture bitmap is set to repeat horizontally.</ShortDesc>
    <Result>The function returns TRUE if the texture bitmap is set to repeat. </Result>
    <Comments>Returns TRUE if this texture bitmap repeats horizontally.</Comments>
    <ID>2059</ID>
    <IDName>funcGetTexBitRepHoriz</IDName>
    <InternalFunctionName>MP_GetTexBitRepHoriz</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureBitmap</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture bitmap.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexBitRepHoriz</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]]  sets the horizontal repeat flag for the referenced texture bitmap.</Description>
    <ShortDesc>Sets horizontal repeat flag for referenced texture bitmap.</ShortDesc>
    <Comments>Sets the texture bitmap attribute to specify that it should repeat horizontally.</Comments>
    <ID>2060</ID>
    <IDName>procSetTexBitRepHoriz</IDName>
    <InternalFunctionName>MP_SetTexBitRepHoriz</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureBitmap</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture bitmap.</Desc>
      </Param>
      <Param>
        <Name>repeatHoriz</Name>
        <Type>boolMode</Type>
        <Desc>Horizontal tiling setting.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexBitRepVert</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether the referenced texture bitmap is set to repeat vertically.</Description>
    <ShortDesc>Returns if a texture bitmap is set to repeat vertically.</ShortDesc>
    <Result> The function returns TRUE if the texture bitmap is set to repeat. </Result>
    <Comments>Returns TRUE if this texture bitmap repeats vertically.</Comments>
    <ID>2061</ID>
    <IDName>funcGetTexBitRepVert</IDName>
    <InternalFunctionName>MP_GetTexBitRepVert</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureBitmap</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture bitmap.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexBitRepVert</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]]  sets the vertical repeat flag for the referenced texture bitmap. Parameter [[p:2]] toggles vertical tiling.</Description>
    <ShortDesc>Sets vertical repeat flag for referenced texture bitmap.</ShortDesc>
    <Comments>Sets the texture bitmap attribute to specify that it should repeat vertically</Comments>
    <ID>2062</ID>
    <IDName>procSetTexBitRepVert</IDName>
    <InternalFunctionName>MP_SetTexBitRepVert</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureBitmap</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture bitmap.</Desc>
      </Param>
      <Param>
        <Name>repeatVert</Name>
        <Type>boolMode</Type>
        <Desc>Vertical tiling setting.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexBitPaintNode</Name>
    <Version>800</Version>
    <OldVersion>1200</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns the paint node of the referenced texture bitmap.</Description>
    <ShortDesc>Obsolete as of version 12, use GetObjectVariableHandle(textureBitmap, 528) to return image node instead.</ShortDesc>
    <Comments>Returns the paint node that contains the texture bitmap's image bits</Comments>
    <ID>2063</ID>
    <IDName>funcGetTexBitPaintNode</IDName>
    <InternalFunctionName>MP_GetTexBitPaintNode</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureBitmap</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture bitmap.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexBitPaintNode</Name>
    <Version>800</Version>
    <OldVersion>1200</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the paint node of the referenced texture bitmap.</Description>
    <ShortDesc>Obsolete as of version 12, use SetObjectVariableHandle(textureBitmap, 528, imageNode) to set image node instead.</ShortDesc>
    <Comments>Sets the texture bitmap's image paint node</Comments>
    <ID>2064</ID>
    <IDName>procSetTexBitPaintNode</IDName>
    <InternalFunctionName>MP_SetTexBitPaintNode</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureBitmap</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture bitmap.</Desc>
      </Param>
      <Param>
        <Name>paintNode</Name>
        <Type>handleMode</Type>
        <Desc>Paint node for texture bitmap.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexSpaceKind</Name>
    <ChangedDate>2009:01:28T14:49:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the object type for texture mapping space.[[BR]][[BR]][[note:TextureSpaceTypeTable]]</Description>
    <ShortDesc>Returns the object type for the referenced texture mapping space.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Returns the kind of the texture mapping space; 0 = Plane space, 1 = Sphere, 2 = Cylinder, and 3 = Algorithmic (Perimeter or Roof)</Comments>
    <ID>2065</ID>
    <IDName>funcGetTexSpaceKind</IDName>
    <InternalFunctionName>MP_GetTexSpaceKind</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexSpaceKind</Name>
    <ChangedDate>2009:01:28T14:49:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the object type for referenced texture mapping space.[[BR]][[BR]][[note:TextureSpaceTypeTable]]</Description>
    <ShortDesc>Sets the object type for texture mapping space.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Sets the kind for the texture mapping space; 0 = Plane space, 1 = Sphere, 2 = Cylinder, and 3 = Algorithmic (Perimeter or Roof)</Comments>
    <ID>2066</ID>
    <IDName>procSetTexSpaceKind</IDName>
    <InternalFunctionName>MP_SetTexSpaceKind</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
      <Param>
        <Name>kind</Name>
        <Type>intMode</Type>
        <Desc>Texture mapping space type.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexSpaceOrientU</Name>
    <ChangedDate>2009:01:28T14:50:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the vector that describes the u-axis of the referenced texture (from world space to texture space).</Description>
    <ShortDesc>Returns the vector that describes the u-axis of the texture.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Returns the vector that describes the u-axis of the texture (from world space to texture space)</Comments>
    <ID>2067</ID>
    <IDName>procGetTexSpaceOrientU</IDName>
    <InternalFunctionName>MP_GetTexSpaceOrientU</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
      <Param>
        <Name>uXAxis</Name>
        <Type>rVarMode</Type>
        <Desc>Returns u-axis vector X component.</Desc>
      </Param>
      <Param>
        <Name>uYAxis</Name>
        <Type>rVarMode</Type>
        <Desc>Returns u-axis vector Y component.</Desc>
      </Param>
      <Param>
        <Name>uZAxis</Name>
        <Type>rVarMode</Type>
        <Desc>Returns u-axis vector Z component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexSpaceOrientU</Name>
    <ChangedDate>2009:01:28T14:50:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] specifies the vector that describes the u-axis of the referenced texture (from world space to texture space).</Description>
    <ShortDesc>Sets the u-axis for the texture space (from world space to texture space)  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Sets the u-axis for the texture space (from world space to texture space)</Comments>
    <ID>2068</ID>
    <IDName>procSetTexSpaceOrientU</IDName>
    <InternalFunctionName>MP_SetTexSpaceOrientU</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
      <Param>
        <Name>uXAxis</Name>
        <Type>realMode</Type>
        <Desc>Sets u-axis vector X component.</Desc>
      </Param>
      <Param>
        <Name>uYAxis</Name>
        <Type>realMode</Type>
        <Desc>Sets u-axis vector Y component.</Desc>
      </Param>
      <Param>
        <Name>uZAxis</Name>
        <Type>realMode</Type>
        <Desc>Sets u-axis vector Z component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexSpaceOrientV</Name>
    <ChangedDate>2009:01:28T14:50:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the vector that describes the v-axis of the referenced texture (from world space to texture space).</Description>
    <ShortDesc>Returns the vector that describes the v-axis of the texture.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Returns the vector that describes the v-axis of the texture (from world space to texture space)</Comments>
    <ID>2069</ID>
    <IDName>procGetTexSpaceOrientV</IDName>
    <InternalFunctionName>MP_GetTexSpaceOrientV</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
      <Param>
        <Name>vXAxis</Name>
        <Type>rVarMode</Type>
        <Desc>Returns v-axis vector X component.</Desc>
      </Param>
      <Param>
        <Name>vYAxis</Name>
        <Type>rVarMode</Type>
        <Desc>Returns v-axis vector Y component.</Desc>
      </Param>
      <Param>
        <Name>vZAxis</Name>
        <Type>rVarMode</Type>
        <Desc>Returns v-axis vector Z component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexSpaceOrientW</Name>
    <ChangedDate>2009:01:28T14:50:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the vector that describes the w-axis of the referenced texture (from world space to texture space).</Description>
    <ShortDesc>Returns the vector that describes the w-axis of the texture  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Returns the vector that describes the w-axis of the texture (from world space to texture space)</Comments>
    <ID>2070</ID>
    <IDName>procGetTexSpaceOrientW</IDName>
    <InternalFunctionName>MP_GetTexSpaceOrientW</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
      <Param>
        <Name>wXAxis</Name>
        <Type>rVarMode</Type>
        <Desc>Returns w-axis vector X component.</Desc>
      </Param>
      <Param>
        <Name>wYAxis</Name>
        <Type>rVarMode</Type>
        <Desc>Returns w-axis vector Y component.</Desc>
      </Param>
      <Param>
        <Name>wZAxis</Name>
        <Type>rVarMode</Type>
        <Desc>Returns w-axis vector Z component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexSpaceOrientV</Name>
    <ChangedDate>2009:01:28T14:50:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] specifies the vector that describes the v-axis of the referenced texture (from world space to texture space).</Description>
    <ShortDesc>Sets the v-axis for the texture space (from world space to texture space)  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Sets the v-axis for the texture space (from world space to texture space)</Comments>
    <ID>2071</ID>
    <IDName>procSetTexSpaceOrientV</IDName>
    <InternalFunctionName>MP_SetTexSpaceOrientV</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
      <Param>
        <Name>vXAxis</Name>
        <Type>realMode</Type>
        <Desc>Sets v-axis vector X component.</Desc>
      </Param>
      <Param>
        <Name>vYAxis</Name>
        <Type>realMode</Type>
        <Desc>Sets v-axis vector Y component.</Desc>
      </Param>
      <Param>
        <Name>vZAxis</Name>
        <Type>realMode</Type>
        <Desc>Sets v-axis vector Z component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexSpaceOrientW</Name>
    <ChangedDate>2009:01:28T14:50:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] specifies the vector that describes the w-axis of the referenced texture (from world space to texture space).</Description>
    <ShortDesc>Sets the w-axis for the texture space.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Sets the w-axis for the texture space (from world space to texture space)</Comments>
    <ID>2072</ID>
    <IDName>procSetTexSpaceOrientW</IDName>
    <InternalFunctionName>MP_SetTexSpaceOrientW</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
      <Param>
        <Name>wXAxis</Name>
        <Type>realMode</Type>
        <Desc>Sets w-axis vector X component.</Desc>
      </Param>
      <Param>
        <Name>wYAxis</Name>
        <Type>realMode</Type>
        <Desc>Sets w-axis vector Y component.</Desc>
      </Param>
      <Param>
        <Name>wZAxis</Name>
        <Type>realMode</Type>
        <Desc>Sets w-axis vector Z component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexSpaceOrigin</Name>
    <ChangedDate>2009:01:28T14:50:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the offset of the referenced texture space that takes coordinates from world space to texture space.</Description>
    <ShortDesc>Returns the offset that takes coordinates from world space to texture space.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Returns the offset that takes coordinates from world space to texture space</Comments>
    <ID>2073</ID>
    <IDName>procGetTexSpaceOrigin</IDName>
    <InternalFunctionName>MP_GetTexSpaceOrigin</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
      <Param>
        <Name>offset</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Returns texture space offset value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexSpaceOrigin</Name>
    <ChangedDate>2009:01:28T14:50:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the offset of the referenced texture space that takes coordinates from world space to texture space.</Description>
    <ShortDesc>Sets the offset that takes coordinates from world space to texture space.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Sets the offset that takes coordinates from world space to texture space</Comments>
    <ID>2074</ID>
    <IDName>procSetTexSpaceOrigin</IDName>
    <InternalFunctionName>MP_SetTexSpaceOrigin</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
      <Param>
        <Name>offset</Name>
        <Type>d3PtMode</Type>
        <Desc>Texture space offset value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexSpace2DOffset</Name>
    <ChangedDate>2009:01:28T14:50:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the 2D offset for the referenced texture space in real-world inches.</Description>
    <ShortDesc>Returns the 2D offset for a specified texture space in real-world inches.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Gets the 2D offset for this texture space in real-world inches.</Comments>
    <ID>2075</ID>
    <IDName>procGetTexSpace2DOffset</IDName>
    <InternalFunctionName>MP_GetTexSpace2DOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
      <Param>
        <Name>offsetU</Name>
        <Type>rVarMode</Type>
        <Desc>Returns texture offset U component.</Desc>
      </Param>
      <Param>
        <Name>offsetV</Name>
        <Type>rVarMode</Type>
        <Desc>returns texture offset V component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexSpace2DOffset</Name>
    <ChangedDate>2009:01:28T14:50:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the 2D offset for the referenced texture space in real-world inches.</Description>
    <ShortDesc>Sets the 2D offset for a texture space in real-world inches.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Sets the 2D offset for this texture space in real-world inches.</Comments>
    <ID>2076</ID>
    <IDName>procSetTexSpace2DOffset</IDName>
    <InternalFunctionName>MP_SetTexSpace2DOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
      <Param>
        <Name>offsetU</Name>
        <Type>realMode</Type>
        <Desc>Texture offset U component.</Desc>
      </Param>
      <Param>
        <Name>offsetV</Name>
        <Type>realMode</Type>
        <Desc>Texture offset V component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexSpace2DScale</Name>
    <ChangedDate>2009:01:28T14:50:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the 2D scale for the referenced texture space.</Description>
    <ShortDesc>Returns the 2D scale for a texture space.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Gets the 2D scale for this texture space as a multiple of a default size of 1.</Comments>
    <ID>2077</ID>
    <IDName>funcGetTexSpace2DScale</IDName>
    <InternalFunctionName>MP_GetTexSpace2DScale</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexSpace2DScale</Name>
    <ChangedDate>2009:01:28T14:50:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the 2D scale for the referenced texture space. Parameter [[p:2]] specifies the new scale value.</Description>
    <ShortDesc>Sets the 2D scale for a specified texture space  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Sets the 2D scale for this texture space as a multiple of a default size of 1.</Comments>
    <ID>2078</ID>
    <IDName>procSetTexSpace2DScale</IDName>
    <InternalFunctionName>MP_SetTexSpace2DScale</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
      <Param>
        <Name>scale</Name>
        <Type>realMode</Type>
        <Desc>Scale for texture space.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexSpace2DRot</Name>
    <ChangedDate>2009:01:28T14:50:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the rotation of the referenced texture space (in degrees).</Description>
    <ShortDesc>Returns rotation of a texture space.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Returns rotation in degrees</Comments>
    <ID>2079</ID>
    <IDName>funcGetTexSpace2DRot</IDName>
    <InternalFunctionName>MP_GetTexSpace2DRot</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexSpace2DRadius</Name>
    <ChangedDate>2009:01:28T14:49:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the radius of the referenced texture space for applicable mapping types.</Description>
    <ShortDesc>Returns the radius of the texture space for applicable mapping types.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>For applicable mapping types, gets the radius of the texture space.</Comments>
    <ID>2080</ID>
    <IDName>funcGetTexSpace2DRadius</IDName>
    <InternalFunctionName>MP_GetTexSpace2DRadius</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexSpace2DRot</Name>
    <ChangedDate>2009:01:28T14:51:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the rotation of the referenced texture space.</Description>
    <ShortDesc>Sets the rotation of a texture space.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Sets rotation in degrees</Comments>
    <ID>2081</ID>
    <IDName>procSetTexSpace2DRot</IDName>
    <InternalFunctionName>MP_SetTexSpace2DRot</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
      <Param>
        <Name>rotationDegrees</Name>
        <Type>realMode</Type>
        <Desc>Rotation of texture space(in degrees).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexSpace2DRadius</Name>
    <ChangedDate>2009:01:28T14:51:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the radius of the referenced texture space for applicable mapping types.</Description>
    <ShortDesc>Sets the radius of the texture space, for applicable mapping types.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>For applicable mapping types, sets the radius of the texture space.</Comments>
    <ID>2082</ID>
    <IDName>procSetTexSpace2DRadius</IDName>
    <InternalFunctionName>MP_SetTexSpace2DRadius</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
      <Param>
        <Name>radius</Name>
        <Type>realMode</Type>
        <Desc>Radius of texture space.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexSpaceStartCap</Name>
    <ChangedDate>2009:01:28T14:51:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether the start cap of an extrude or sweep is textured.</Description>
    <ShortDesc>Returns whether start cap of extrude or sweep is textured.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Returns whether start cap of extrude or sweep is textured</Comments>
    <ID>2083</ID>
    <IDName>funcGetTexSpaceStartCap</IDName>
    <InternalFunctionName>MP_GetTexSpaceStartCap</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexSpaceStartCap</Name>
    <ChangedDate>2009:01:28T14:51:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the texture status of a referenced sweep or extrude. </Description>
    <ShortDesc>Sets whether start cap of extrude or sweep is textured  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Sets whether start cap of extrude or sweep is textured</Comments>
    <ID>2084</ID>
    <IDName>procSetTexSpaceStartCap</IDName>
    <InternalFunctionName>MP_SetTexSpaceStartCap</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
      <Param>
        <Name>startCapTextured</Name>
        <Type>boolMode</Type>
        <Desc>Texture start cap status.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexSpaceEndCap</Name>
    <ChangedDate>2009:01:28T14:51:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether the end cap of the referenced extrude or sweep is textured.</Description>
    <ShortDesc>Returns whether end cap of extrude or sweep is textured.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Returns whether end cap of extrude or sweep is textured</Comments>
    <ID>2085</ID>
    <IDName>funcGetTexSpaceEndCap</IDName>
    <InternalFunctionName>MP_GetTexSpaceEndCap</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexSpaceEndCap</Name>
    <ChangedDate>2009:01:28T14:51:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure SetTexSpaceEndCap sets whether the end cap of a referenced extrude or sweep is textured.</Description>
    <ShortDesc>Sets whether end cap of extrude or sweep is textured.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Sets whether end cap of extrude or sweep is textured</Comments>
    <ID>2086</ID>
    <IDName>procSetTexSpaceEndCap</IDName>
    <InternalFunctionName>MP_SetTexSpaceEndCap</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
      <Param>
        <Name>endCapTextured</Name>
        <Type>boolMode</Type>
        <Desc>Texture end cap status.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexSpacePartID</Name>
    <ChangedDate>2009:01:28T14:51:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the parent of the referenced texture space in an expanded object (walls or roofs).[[BR]][[BR]][[note:TextureSpaceObjs]]</Description>
    <ShortDesc>Returns the parent of the referenced texture space.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Returns which part (0 = Primary, 1 = Secondary, 2 = Tertiary) of the object this space belongs to (for expanded walls and roofs).</Comments>
    <ID>2087</ID>
    <IDName>funcGetTexSpacePartID</IDName>
    <InternalFunctionName>MP_GetTexSpacePartID</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexSpacePartID</Name>
    <ChangedDate>2009:01:28T14:51:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the parent of the referenced texture space in an expanded object (walls or roofs).[[BR]][[BR]][[note:TextureSpaceObjs]]</Description>
    <ShortDesc>Sets expanded object (walls or roofs) parent of specified texture space.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Sets which part (0 = Primary, 1 = Secondary, 2 = Tertiary) of the object this space belongs to (for expanded walls and roofs).</Comments>
    <ID>2088</ID>
    <IDName>procSetTexSpacePartID</IDName>
    <InternalFunctionName>MP_SetTexSpacePartID</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
      <Param>
        <Name>partID</Name>
        <Type>intMode</Type>
        <Desc>Part ID of texture space parent.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateTexture</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] creates a new texture object with default values.</Description>
    <ShortDesc>Creates a new texture object.</ShortDesc>
    <Comments>Creates a new texture object handle with default values</Comments>
    <ID>2089</ID>
    <IDName>funcCreateTexture</IDName>
    <InternalFunctionName>MP_CreateTexture</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>EditTexture</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] opens the Edit Texture dialog for the referenced texture.</Description>
    <ShortDesc>Opens the Edit Texture dialog for a specified texture.</ShortDesc>
    <Comments>Brings up the Edit Texture dialog for this texture</Comments>
    <ID>2090</ID>
    <IDName>funcEditTexture</IDName>
    <InternalFunctionName>MP_EditTexture</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>texture</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextureRef</Name>
    <ChangedDate>2009:01:28T14:51:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1500</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the texture reference ID for the referenced object. The integer returned is the internal index of the texture node used by this object.  [[BR]][[BR]]</Description>
    <ShortDesc>NOTE: Use GetTextureRefN with version 2010 and above.</ShortDesc>
    <Comments>Returns the texture ref for this object, which is the internal index, or name, of the texture node used by this object.  The texture is specific to the partID part of the object (0 = Primary, 1 = Secondary, or 2 = Tertiary).  Walls can have three different textures and roofs can have two if they are 'expanded'.  Textures may be applied by class.  If resolveByClass is true then this function will return the texture ref for this object's class.</Comments>
    <ID>2091</ID>
    <IDName>funcGetTextureRef</IDName>
    <InternalFunctionName>MP_GetTextureRef</InternalFunctionName>
    <ModernName>GetTextureID</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>partID</Name>
        <Type>intMode</Type>
        <Desc>Identifies texture to be returned by part ID.</Desc>
      </Param>
      <Param>
        <Name>resolveByClass</Name>
        <Type>boolMode</Type>
        <Desc>Resolve texture reference by class.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextureRef</Name>
    <ChangedDate>2009:01:28T14:51:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1500</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Function [[name]] sets the texture reference ID for the referenced object.</Description>
    <ShortDesc>NOTE: Use SetTextureRefN with version 2010 and above.</ShortDesc>
    <Comments>See GetTextureRef</Comments>
    <ID>2092</ID>
    <IDName>procSetTextureRef</IDName>
    <InternalFunctionName>MP_SetTextureRef</InternalFunctionName>
    <ModernName>SetTextureID</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>textureRef</Name>
        <Type>longMode</Type>
        <Desc>Texture reference ID.</Desc>
      </Param>
      <Param>
        <Name>partID</Name>
        <Type>intMode</Type>
        <Desc>Part to be assigned texture reference.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ResolveByClassTextureRef</Name>
    <Version>800</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the internal index, or name, of the texture assigned to the referenced object. [[BR]][[BR]]Primary, secondary, or tertiary texture assignments can be returned for objects that support multiple textures, such as roofs or walls. For objects that do not support multiple textures, pass 0 to the [[p:2]] parameter.[[BR]][[BR]][[note:ClassTextureRefTable]]</Description>
    <ShortDesc>Looks up a specified object's class and returns the class' texture ref.</ShortDesc>
    <SeeAlso>SetTextureRef,GetTextureRef</SeeAlso>
    <Comments>If the texture ref for an object is set to -1, it will use the texture of its class.  This routine will look up the object's class and return the class' texture ref.</Comments>
    <Example>textureID:=[[name]](handleToObject,0);</Example>
    <ID>2093</ID>
    <IDName>funcResolveByClassTextureRef</IDName>
    <InternalFunctionName>MP_ResolveByClassTextureRef</InternalFunctionName>
    <ModernName>GetTextureIDFromClass</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>partID</Name>
        <Type>intMode</Type>
        <Desc>Primary, secondary, or tertiary texture ID to be returned.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateTextureBitmap</Name>
    <Version>800</Version>
    <OldVersion>1010</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] creates a new default texture bitmap in a Vectorworks document.</Description>
    <ShortDesc>Creates a new default texture bitmap.</ShortDesc>
    <Comments>Creates a new default texture bitmap, with no paint node attached.  Texture bitmap's paint node should be attached before this texture bitmap is used by MiniCAD (SetTexBitPaintNode).</Comments>
    <ID>2094</ID>
    <IDName>funcCreateTextureBitmap</IDName>
    <InternalFunctionName>MP_CreateTextureBitmap</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>EditTextureBitmap</Name>
    <Version>800</Version>
    <OldVersion>900</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] opens the Edit Texture Bitmap dialog box to the referenced texture bitmap.  The function returns TRUE if texture bitmap was modified.</Description>
    <ShortDesc>Opens the Edit Texture Bitmap dialog for a specified texture bitmap. </ShortDesc>
    <Comments>Brings up the Edit Texture Bitmap dialog for this texture bitmap.  Returns true if texture bitmap was changed by the dialog.</Comments>
    <ID>2095</ID>
    <IDName>funcEditTextureBitmap</IDName>
    <InternalFunctionName>MP_EditTextureBitmap</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textureBitmap</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture bitmap.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextureSpace</Name>
    <ChangedDate>2009:01:28T14:51:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to the texture space attached to the referenced object(or object part).</Description>
    <ShortDesc>Returns the texture space attached to an object.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Returns the texture space attached to this object, with the same part ID as partID.  Walls may have three texture spaces attached to them if they have expanded textures, for example.</Comments>
    <Example>PROCEDURE Example; [[BR]]VAR[[BR]]	XAxis, YAxis, ZAxis :REAL; [[BR]]	hObj :HANDLE; [[BR]]BEGIN[[BR]]	hObj := GetTextureSpace(FSActLayer, 0); [[BR]]	GetTexSpaceOrientU(hObj, XAxis, YAxis, ZAxis); [[BR]]	Writeln('U', ' : ', XAxis, ' : ', YAxis, ' : ', ZAxis); [[BR]]	GetTexSpaceOrientV(hObj, XAxis, YAxis, ZAxis); [[BR]]	Writeln('V', ' : ', XAxis, ' : ', YAxis, ' : ', ZAxis); [[BR]]	GetTexSpaceOrientW(hObj, XAxis, YAxis, ZAxis); [[BR]]	Writeln('W', ' : ', XAxis, ' : ', YAxis, ' : ', ZAxis); [[BR]]END; [[BR]]RUN(Example); [[BR]]</Example>
    <ID>2096</ID>
    <IDName>funcGetTextureSpace</IDName>
    <InternalFunctionName>MP_GetTextureSpace</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>partID</Name>
        <Type>intMode</Type>
        <Desc>Part ID (pass 1 for non-supporting objects).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DeleteTextureSpace</Name>
    <ChangedDate>2009:01:28T14:46:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Function [[name]] deletes the texture space attached to the referenced object or object part.</Description>
    <ShortDesc>Removes the texture space from an object.  NOTE: Texture space routines are obsolete with version 2009, use the Set/Get TexMap routines instead.</ShortDesc>
    <Comments>Removes the texture space from this object.  To render textures correctly, an object must have both a non-zero texture ref and a texture space attached.  The reverse of this means that the texture ref for the object should be set to zero when this function is called.</Comments>
    <ID>2097</ID>
    <IDName>procDeleteTextureSpace</IDName>
    <InternalFunctionName>MP_DeleteTextureSpace</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>partID</Name>
        <Type>intMode</Type>
        <Desc>Part ID (pass 1 for non-supporting objects).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDefaultTextureSpace</Name>
    <ChangedDate>2009:01:28T14:46:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the texture space for the referenced object to the Vectorworks object defaults.</Description>
    <ShortDesc>Sets the default texture space for an object.  NOTE: Texture space routines are obsolete with version 2009, use SetDefaultTexMapN instead.</ShortDesc>
    <Comments>Sets texSpace to the default values for this type of object.</Comments>
    <ID>2098</ID>
    <IDName>procSetDefaultTextureSpace</IDName>
    <InternalFunctionName>MP_SetDefaultTextureSpace</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>texSpace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to texture space.</Desc>
      </Param>
      <Param>
        <Name>partID</Name>
        <Type>intMode</Type>
        <Desc>Part ID (pass 1 for non-supporting objects).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AttachDefaultTextureSpace</Name>
    <ChangedDate>2009:01:28T14:43:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] deletes any pre-existing space attached to the referenced object and creates a new one with the default object texture.</Description>
    <ShortDesc>Deletes any pre-existing space attached to the specified object.  NOTE: Texture space routines are obsolete with version 2009, use SetDefaultTexMapN instead.</ShortDesc>
    <Comments>Deletes any pre-existing space attached to the object (with the specified part ID), creates a new one with the default value for this type of object, and attaches the texture space to the object.</Comments>
    <ID>2099</ID>
    <IDName>procAttachDefaultTextureSpace</IDName>
    <InternalFunctionName>MP_AttachDefaultTextureSpace</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>partID</Name>
        <Type>intMode</Type>
        <Desc>Part ID (pass 1 for non-supporting objects).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EditTextureSpace</Name>
    <ChangedDate>2009:01:28T14:43:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1400</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] edits the mapping of a specified texture space for the referenced object. Calling this function opens the Edit Mapping dialog for textures.[[BR]][[BR]]</Description>
    <ShortDesc>Edits the mapping of a specified texture space.  NOTE: Texture space routines are obsolete with version 2009.</ShortDesc>
    <Result>Returns TRUE if the texture space was modified.</Result>
    <Comments>Brings up the Edit Mapping dialog for the space attached to the object.  Returns true if the texture space was changed by the dialog.</Comments>
    <ID>2100</ID>
    <IDName>funcEditTextureSpace</IDName>
    <InternalFunctionName>MP_EditTextureSpace</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>partID</Name>
        <Type>intMode</Type>
        <Desc>Part ID (pass 1 for non-supporting objects).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLayerAmbientInfo</Name>
    <Version>800</Version>
    <Category>Objects - Lights</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the attribute values for the ambient light object of the referenced layer.</Description>
    <ShortDesc>Returns the attributes of the ambient light of a layer.</ShortDesc>
    <Comments>brightness is a percentage value</Comments>
    <ID>2101</ID>
    <IDName>procGetLayerAmbientInfo</IDName>
    <InternalFunctionName>MP_GetLayerAmbientInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>layer</Name>
        <Type>handleMode</Type>
        <Desc>Handle to layer.</Desc>
      </Param>
      <Param>
        <Name>isOn</Name>
        <Type>boolVarMode</Type>
        <Desc>On-off status of ambient light.</Desc>
      </Param>
      <Param>
        <Name>brightness</Name>
        <Type>intVarMode</Type>
        <Desc>Brightness of ambient light.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLayerAmbientColor</Name>
    <Version>800</Version>
    <Category>Objects - Lights</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the color of the ambient light of the referenced layer. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Returns the color of the ambient light of a layer.</ShortDesc>
    <ID>2102</ID>
    <IDName>procGetLayerAmbientColor</IDName>
    <InternalFunctionName>MP_GetLayerAmbientColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>layer</Name>
        <Type>handleMode</Type>
        <Desc>Handle to layer.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLayerAmbientColor</Name>
    <Version>800</Version>
    <Category>Objects - Lights</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the color for the ambient light of the referenced layer. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Sets the color for the ambient light of a layer.</ShortDesc>
    <ID>2103</ID>
    <IDName>procSetLayerAmbientColor</IDName>
    <InternalFunctionName>MP_SetLayerAmbientColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>layer</Name>
        <Type>handleMode</Type>
        <Desc>Handle to layer.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>longMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>longMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>longMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLayerAmbientInfo</Name>
    <Version>800</Version>
    <Category>Objects - Lights</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the attribute values for the ambient light object of the referenced layer.</Description>
    <ShortDesc>Sets the attributes for a layer's ambient light.</ShortDesc>
    <Comments>brightness is a percentage value</Comments>
    <ID>2104</ID>
    <IDName>procSetLayerAmbientInfo</IDName>
    <InternalFunctionName>MP_SetLayerAmbientInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>layer</Name>
        <Type>handleMode</Type>
        <Desc>Handle to layer.</Desc>
      </Param>
      <Param>
        <Name>isOn</Name>
        <Type>boolMode</Type>
        <Desc>On-off status of ambient light</Desc>
      </Param>
      <Param>
        <Name>brightness</Name>
        <Type>intMode</Type>
        <Desc>Brightness of ambient light.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLightColorRGB</Name>
    <Version>701</Version>
    <Category>Objects - Lights</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the RGB color values for the referenced light object. </Description>
    <ShortDesc>Returns the RGB color settings for the referenced light object.</ShortDesc>
    <Comments>Color param range is 0..65535 -DLD 8/28/98</Comments>
    <ID>2105</ID>
    <IDName>procGetLightColorRGB</IDName>
    <InternalFunctionName>MP_GetLightColorRGB</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>light</Name>
        <Type>handleMode</Type>
        <Desc>Handle to light.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLightColorRGB</Name>
    <Version>701</Version>
    <Category>Objects - Lights</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the RGB color values for the referenced light object. </Description>
    <ShortDesc>Specifies the RGB color settings for the referenced light object.</ShortDesc>
    <Comments>Color param range is 0..65535 -DLD 8/28/98</Comments>
    <ID>2106</ID>
    <IDName>procSetLightColorRGB</IDName>
    <InternalFunctionName>MP_SetLightColorRGB</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>light</Name>
        <Type>handleMode</Type>
        <Desc>Handle to light.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>longMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>longMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>longMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSymBrightMult</Name>
    <Version>800</Version>
    <Category>Objects - Symbols</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the brightness multiplier of the referenced symbol.[[BR]][[BR]]The brightness multiplier is used for symbols that contains lights.  This value is a percentage of the symbol definition's light brightness.</Description>
    <ShortDesc>Returns the brightness multiplier of the referenced symbol.</ShortDesc>
    <Comments>This function returns the brightness multiplier used for symbols that contains lights.  This value is a percentage of the symbol definition's light brightness.</Comments>
    <ID>2107</ID>
    <IDName>funcGetSymBrightMult</IDName>
    <InternalFunctionName>MP_GetSymBrightMult</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>symbol</Name>
        <Type>handleMode</Type>
        <Desc>Handle to symbol.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetSymBrightMult</Name>
    <Version>800</Version>
    <Category>Objects - Symbols</Category>
    <Type>Procedure</Type>
    <Description>Function [[name]] sets the brightness multiplier for the referenced symbol.[[BR]][[BR]]The brightness multiplier is used for symbols that contains lights.  This value is a percentage of the symbol definition's light brightness.</Description>
    <ShortDesc>Sets the brightness multiplier of the referenced symbol.</ShortDesc>
    <Comments>This function sets the brightness multiplier used for symbols that contains lights.  This value is a percentage of the symbol definition's light brightness.</Comments>
    <ID>2108</ID>
    <IDName>procSetSymBrightMult</IDName>
    <InternalFunctionName>MP_SetSymBrightMult</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>symbol</Name>
        <Type>handleMode</Type>
        <Desc>Handle to symbol.</Desc>
      </Param>
      <Param>
        <Name>brightnessMultiplier</Name>
        <Type>intMode</Type>
        <Desc>Brightness multiplier for symbol.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NumVectorFills</Name>
    <Version>701</Version>
    <Category>Hatches / Vector Fills</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the number of vector fills in the active document.</Description>
    <ShortDesc>Returns the number of vector fills in the active document.</ShortDesc>
    <Comments>Returns with the number of vector fills in the active document.</Comments>
    <ID>2109</ID>
    <IDName>funcNumVectorFills</IDName>
    <InternalFunctionName>MP_NumVectorFills</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>VectorFillList</Name>
    <Version>701</Version>
    <Category>Hatches / Vector Fills</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Function [[name]] returns the name of the specified vector fill definition.</Description>
    <ShortDesc>Returns the name of the specified vector fill definition from the active document.</ShortDesc>
    <Comments>Returns the name of the specified hatch definition from the active document.</Comments>
    <ID>2110</ID>
    <IDName>funcVectorFillList</IDName>
    <InternalFunctionName>MP_VectorFillList</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>longMode</Type>
        <Desc>Index ID of vector fill (in a range of 1 - n).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DelVectorFill</Name>
    <Version>701</Version>
    <Category>Hatches / Vector Fills</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] deletes the specified vector fill definition.</Description>
    <ShortDesc>Deletes a specified vector fill definition.</ShortDesc>
    <Comments>Deletes the hatch definition that has the name 'vectorFillName'</Comments>
    <ID>2111</ID>
    <IDName>procDelVectorFill</IDName>
    <InternalFunctionName>MP_DelVectorFill</InternalFunctionName>
    <ModernName>DeleteVectorFill</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>vectorFillName</Name>
        <Type>stringMode</Type>
        <Desc>Name of vector fill.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BeginVectorFill</Name>
    <Version>701</Version>
    <OldVersion>800</OldVersion>
    <Category>Hatches / Vector Fills</Category>
    <Type>Procedure</Type>
    <Description>Obsolete procedure.</Description>
    <ShortDesc>Begins a vector fill definition.</ShortDesc>
    <SeeAlso>BeginVectorFillN, AddVectorFillLayer, EndVectorFill</SeeAlso>
    <Comments>Deleted this obsolete function as of 9.0.0b7 - PCP 12-21-2000[[BR]][[BR]]Begins a hatch definition.</Comments>
    <ID>2112</ID>
    <IDName>procBeginVectorFill</IDName>
    <InternalFunctionName>MP_BeginVectorFill</InternalFunctionName>
    <Params>
      <Param>
        <Name>vectorFillName</Name>
        <Type>stringMode</Type>
        <Desc>The name of the new vector fill.</Desc>
      </Param>
      <Param>
        <Name>pageSpace</Name>
        <Type>boolMode</Type>
        <Desc>Flag specifying page space or world space option.</Desc>
      </Param>
      <Param>
        <Name>rotateInWall</Name>
        <Type>boolMode</Type>
        <Desc>Flag specifying whether fill shuld be rotated in wall.</Desc>
      </Param>
      <Param>
        <Name>colorIndex</Name>
        <Type>intMode</Type>
        <Desc>Color index value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddVectorFillLayer</Name>
    <Version>701</Version>
    <Category>Hatches / Vector Fills</Category>
    <Type>Procedure</Type>
    <Description>Procedure AddVectorFillLayer is used to add layers to a vector fill definition. This procedure call should follow a call to BeginVectorFillN. [[BR]][[BR]]The input parameters for a vector fill layer match the inputs from the right side of the Vectorworks hatch editor dialog.[[BR]][[BR]][[note:ColorTableNote]][[BR]][[BR]]</Description>
    <ShortDesc>Adds a new  layer to a vector fill definition.</ShortDesc>
    <Comments>Follows a call to BeginVectorFill. The input for the layer match the input from the right side of the hatch editor dialog.</Comments>
    <Example>PROCEDURE CreateHatch;[[BR]]VAR[[BR]]	hatchName :STRING;[[BR]]BEGIN[[BR]]	hatchName := 'My New Hatch';[[BR]]	BeginVectorFillN(hatchName, TRUE, FALSE, 0);[[BR]]	AddVectorFillLayer(0, 0, 1, 1, 0.1767767, -0.1767767, 1, 1, 255);[[BR]]	EndVectorFill;[[BR]]END;[[BR]]RUN(CreateHatch);[[BR]][[BR]]</Example>
    <ID>2113</ID>
    <IDName>procAddVectorFillLayer</IDName>
    <InternalFunctionName>MP_AddVectorFillLayer</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>xStart</Name>
        <Type>realMode</Type>
        <Desc>X coordinate of fill origin.</Desc>
      </Param>
      <Param>
        <Name>yStart</Name>
        <Type>realMode</Type>
        <Desc>Y coordinate of fill origin.</Desc>
      </Param>
      <Param>
        <Name>xRepeat</Name>
        <Type>realMode</Type>
        <Desc>X coordinate of fill repeat origin.</Desc>
      </Param>
      <Param>
        <Name>yRepeat</Name>
        <Type>realMode</Type>
        <Desc>Y coordinate of fill repeat origin.</Desc>
      </Param>
      <Param>
        <Name>xOffset</Name>
        <Type>realMode</Type>
        <Desc>X coordinate of fill offset origin.</Desc>
      </Param>
      <Param>
        <Name>yOffset</Name>
        <Type>realMode</Type>
        <Desc>Y coordinate of fill offset origin.</Desc>
      </Param>
      <Param>
        <Name>dashFactor</Name>
        <Type>realMode</Type>
        <Desc>Dash factor of layer(percentage of fill line that is solid).</Desc>
      </Param>
      <Param>
        <Name>lineWeight</Name>
        <Type>intMode</Type>
        <Desc>Line weight of layer, in mils.</Desc>
      </Param>
      <Param>
        <Name>colorIndex</Name>
        <Type>intMode</Type>
        <Desc>Pen color of layer.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EndVectorFill</Name>
    <Version>701</Version>
    <Category>Hatches / Vector Fills</Category>
    <Type>Procedure</Type>
    <Description>Procedure EndVectorFill ends the vector fill creation process. This procedure call must follow the BeginVectorFillN call and a variable number of AddVectorFillLayer calls.[[BR]][[BR]]</Description>
    <ShortDesc>Ends the vector fill creation process.</ShortDesc>
    <Comments>Follows BeginVectorFill and a variable number AddVectorFillLayer calls.</Comments>
    <Example>BeginVectorFill('Sample Hatch',TRUE,FALSE,0);[[BR]]AddVectorFillLayer(0,0,1,1,0.5,-0.5,0.5,1,255);[[BR]]AddVectorFillLayer(0.5,0.5,-2,0,1,-1,0.5,1,1);[[BR]]EndVectorFill;[[BR]]</Example>
    <ID>2114</ID>
    <IDName>procEndVectorFill</IDName>
    <InternalFunctionName>MP_EndVectorFill</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetVectorFillDefault</Name>
    <Version>701</Version>
    <Category>Hatches / Vector Fills</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns TRUE if the the active document contains a default vector fill, and returns the name of the vector fill pattern.[[BR]][[BR]]</Description>
    <ShortDesc>ReturnsTRUE if the active document contains a default vector fill, and returns the name of that fill pattern.</ShortDesc>
    <Comments>Returns true if the the active document contains a default hatch.  vectorFillName contains a string with the name of the default hatch.</Comments>
    <ID>2115</ID>
    <IDName>funcGetVectorFillDefault</IDName>
    <InternalFunctionName>MP_GetVectorFillDefault</InternalFunctionName>
    <ModernName>ActVectorFill</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>vectorFillName</Name>
        <Type>strVarMode</Type>
        <Desc>Returns name of vector fill.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVectorFillDefault</Name>
    <Version>701</Version>
    <Category>Hatches / Vector Fills</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] sets the default vector fill pattern for the document. The function returns TRUE if the operation was successful.</Description>
    <ShortDesc>Returns if the active document's default hatch was succesfully set to a specified name</ShortDesc>
    <Comments>Returns true if the active document's default hatch was succesfully set to the hatch with the name specified by vectorFillName.  vectorFillName may retrun with a different name than passed in because there may be a name conflict.</Comments>
    <ID>2116</ID>
    <IDName>funcSetVectorFillDefault</IDName>
    <InternalFunctionName>MP_SetVectorFillDefault</InternalFunctionName>
    <ModernName>SetActVectorFill</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>vectorFillName</Name>
        <Type>stringMode</Type>
        <Desc>Name of vector fill.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVectorFill</Name>
    <Version>701</Version>
    <Category>Hatches / Vector Fills</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns if the referenced object has a vector fill assigned.</Description>
    <ShortDesc>Returns TRUE if referenced objecthas a vectorfill.</ShortDesc>
    <Comments>Returns true if the theObj has a vectorfill. hatchName holds the name of the vector fill that theObj has.</Comments>
    <ID>2117</ID>
    <IDName>funcGetVectorFill</IDName>
    <InternalFunctionName>MP_GetVectorFill</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theObj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>hatchName</Name>
        <Type>strVarMode</Type>
        <Desc>Returns name of assigned vector fill pattern.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVectorFill</Name>
    <Version>701</Version>
    <Category>Hatches / Vector Fills</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] assigns the specified vector fill to the referenced object. The function returns TRUE if the operation was successful.[[BR]]</Description>
    <ShortDesc>Assigns a vector fill to an object.</ShortDesc>
    <Comments>Returns true if theObj was assigned the hatch specified by hatchName.</Comments>
    <ID>2118</ID>
    <IDName>funcSetVectorFill</IDName>
    <InternalFunctionName>MP_SetVectorFill</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theObj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>hatchName</Name>
        <Type>stringMode</Type>
        <Desc>Name of vector fill to be assigned.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NonUndoableActionOK</Name>
    <Version>800</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] displays a dialog informing the user that the action that is about to be performed cannot be undone. If the user selects OK, the function returns TRUE. If the "Show Undo Warnings" preference is turned off, this function just returns TRUE and does not display a dialog. </Description>
    <ShortDesc>Posts a dialog informing the user that the action that is about to be performed is not undo-able. If the "Show Undo Warnings" preference is turned off, no dialog is presented and this function just returns true.</ShortDesc>
    <ID>2037</ID>
    <IDName>funcNonUndoableActionOK</IDName>
    <InternalFunctionName>MP_NonUndoableActionOK</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetTextLength</Name>
    <Version>800</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>[[name]] returns the string length of the referenced text object.</Description>
    <ShortDesc>Returns the string length of the referenced text object.</ShortDesc>
    <ID>2119</ID>
    <IDName>funcGetTextLength</IDName>
    <InternalFunctionName>MP_GetTextLength</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>TextHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetSprdSortSum</Name>
    <Version>800</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] specifies sorting and summation options for a database row in the referenced worksheet. For descending sorts, pass the column as a negative value. For no sort, pass 0 as the [[p:6]] column. </Description>
    <ShortDesc>Sets sorting and summation options for a database row.</ShortDesc>
    <Comments>Sets sorting and summation for a database row.  The sortCol1, sortCol2, and sortCol3 values specify the primary, secondary and tertiary sorts for the database row.  Pass a positive column for a descending sort; pass a negative column for an ascending sort.  For no sort,  pass 0 as the column.  Sum works the same way.[[BR]]OBSOLETE for Version 9: see new SetWSColumnOperators. [VML 01/09/01]</Comments>
    <ID>2120</ID>
    <IDName>procSetSprdSortSum</IDName>
    <InternalFunctionName>MP_SetSprdSortSum</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>sheetHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Worksheet database row index.</Desc>
      </Param>
      <Param>
        <Name>sortCol1</Name>
        <Type>intMode</Type>
        <Desc>Primary sort column index.</Desc>
      </Param>
      <Param>
        <Name>sortCol2</Name>
        <Type>intMode</Type>
        <Desc>Secondary sort column index.</Desc>
      </Param>
      <Param>
        <Name>sortCol3</Name>
        <Type>intMode</Type>
        <Desc>Tertiary sort column index.</Desc>
      </Param>
      <Param>
        <Name>sumCol</Name>
        <Type>intMode</Type>
        <Desc>Summation column.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSprdSortSum</Name>
    <Version>800</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns sorting and summation options for a database row in the referenced worksheet. </Description>
    <ShortDesc>Returns the sorting and summation options for a database row.</ShortDesc>
    <Comments>Gets sorting for a database row.  The sortCol1, sortCol2, and sortCol3 values specify the primary, secondary and tertiary sorts for the database row.  For descending sorts, a positive column is returned; for ascending sorts, a negative column is returned.  For no sort,  0 is returned.  Sum works the same way.[[BR]]OBSOLETE for Version 9: see new GetWSColumnOperators. [VML 01/09/01]</Comments>
    <ID>2121</ID>
    <IDName>procGetSprdSortSum</IDName>
    <InternalFunctionName>MP_GetSprdSortSum</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>sheetHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Worksheet database row index.</Desc>
      </Param>
      <Param>
        <Name>sortCol1</Name>
        <Type>intVarMode</Type>
        <Desc>Primary sort column index.</Desc>
      </Param>
      <Param>
        <Name>sortCol2</Name>
        <Type>intVarMode</Type>
        <Desc>Secondary sort column index.</Desc>
      </Param>
      <Param>
        <Name>sortCol3</Name>
        <Type>intVarMode</Type>
        <Desc>Tertiary sort column index.</Desc>
      </Param>
      <Param>
        <Name>sumCol</Name>
        <Type>intVarMode</Type>
        <Desc>Summation column.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Volume</Name>
    <ChangedDate>2011:01:03T12:51:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>1250</OldVersion>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the volume of the items matching the specified criteria. If more than one object matches the search criteria, the sum of all the volumes of the matching objects will be returned. [[BR]][[BR]][[name]] will return only return volumes on objects which support the solids modelling functions.</Description>
    <ShortDesc>Returns the volume of the items matching the current criteria.  This function is obsolete.  Use CriteriaVolume or VolumeN instead.</ShortDesc>
    <Comments>This function returns the volume of the items matching the current criteria.  It will return 0 for any objects that will not work with the solids modeling functions.</Comments>
    <Example>totalVol:=[[name]]((C='Empty Space'));</Example>
    <IDName>funcVolumeLegacy</IDName>
    <InternalFunctionName>MP_Volume</InternalFunctionName>
    <ModernName>GetVolumeByCriteria</ModernName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SurfaceArea</Name>
    <Version>800</Version>
    <OldVersion>1250</OldVersion>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the surface area of the items matching the specified criteria. If more than one object matches the search criteria, the sum of all the surface areas of the matching objects will be returned. [[BR]][[BR]][[name]] will return only return areas on objects which support the solids modelling functions.</Description>
    <ShortDesc>Returns the surface area of the items matching the current criteria.  This function is obsolete.  Use CriteriaSurfaceArea instead.</ShortDesc>
    <Comments>This function returns the volume of the items matching the current criteria.  It will return 0 for any objects that will not work with the solids modeling functions.</Comments>
    <Example>totalArea:=[[name]]((C='Empty Space'));</Example>
    <IDName>funcSurfaceAreaLegacy</IDName>
    <InternalFunctionName>MP_SurfaceArea</InternalFunctionName>
    <ModernName>GetSurfaceByCriteria</ModernName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsFlipped</Name>
    <Version>800</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the number of objects meeting the criteria that are flipped.</Description>
    <ShortDesc>Returns the number of objects meeting the criteria that are flipped.</ShortDesc>
    <SeeAlso>IsObjectFlipped</SeeAlso>
    <Comments>This function returns true? if the object matching the given criteria (such as a symbol is flipped.  Only certain types of objects can be flipped.[[BR]][[BR]]The change to criteria for this seems weird; does it accumulate the flipped states of the objects matching the criteria and return the sum?</Comments>
    <Example>PROCEDURE CountFlippedDoorSymbols;[[BR]]BEGIN[[BR]]  Message(IsFlipped(S='*Door*'));[[BR]]END;[[BR]]RUN(CountFlippedDoorSymbols);</Example>
    <IDName>funcIsFlipped</IDName>
    <InternalFunctionName>MP_IsFlipped</InternalFunctionName>
    <ModernName>GetFlipByCriteria</ModernName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsNewCustomObject</Name>
    <Version>800</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether the specified plug-in object is a new object, indicating that the object is being regenerated for the first time.[[BR]][[BR]][[BR]]New object status is useful in specifying initialization and setup data, as well as calling initialization specific subroutines. This function should only be called in plug-in objects.[[BR]][[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Returns true for new objects, meaning this is the first time the regeneration script is being called.</ShortDesc>
    <SeeAlso>GetCustomObjectInfo</SeeAlso>
    <Comments>Call from CustomObject scripts only.  Returns true for new objects, meaning this is the first time the regeneration script is being called.</Comments>
    <ID>2122</ID>
    <IDName>funcIsNewCustomObject</IDName>
    <InternalFunctionName>MP_IsNewCustomObject</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectName</Name>
        <Type>stringMode</Type>
        <Desc>Name of plugin object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextVerticalAlign</Name>
    <Version>800</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the vertical alignment of the referenced text object.[[BR]][[BR]][[note:TextVerticalAlignTable]]</Description>
    <ShortDesc>Returns the vertical alignment of the referenced text object.</ShortDesc>
    <Comments>Returns the vertical alignment of the referenced text object.</Comments>
    <ID>2123</ID>
    <IDName>funcGetTextVerticalAlign</IDName>
    <InternalFunctionName>MP_GetTextVerticalAlign</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>TextHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextVerticalAlign</Name>
    <ChangedDate>2010:06:01T14:08:00</ChangedDate>
    <Version>800</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the vertical alignment of the referenced text object. [[BR]][[BR]][[note:TextVerticalAlignTable]][[BR]][[BR]][[fig:textlocus.gif]]</Description>
    <ShortDesc>Sets the vertical alignment of the referenced text object.</ShortDesc>
    <SeeAlso>SetTextVertAlignN</SeeAlso>
    <Comments>Sets the vertical alignment of the referenced text object.</Comments>
    <ID>2124</ID>
    <IDName>procSetTextVerticalAlign</IDName>
    <InternalFunctionName>MP_SetTextVerticalAlign</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>TextHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
      <Param>
        <Name>verticalAlignment</Name>
        <Type>intMode</Type>
        <Desc>Vertical alignment setting for text.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>TextVerticalAlign</Name>
    <Version>800</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the active text vertical alignment of a Vectorworks document. [[BR]][[BR]][[note:TextVerticalAlignTable]][[BR]][[BR]][[fig:textlocus.gif]]</Description>
    <ShortDesc>Sets the active text vertical alignment of the document.</ShortDesc>
    <Comments>Sets the active text vertical alignment of the document.</Comments>
    <ID>2125</ID>
    <IDName>procTextVerticalAlign</IDName>
    <InternalFunctionName>MP_TextVerticalAlign</InternalFunctionName>
    <ModernName>SetActTextVertAlign</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>verticalAlignment</Name>
        <Type>intMode</Type>
        <Desc>Vertical alignment setting for document.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Name2Index</Name>
    <Version>800</Version>
    <Category>Object Names</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the internal index number for the specified object. </Description>
    <ShortDesc>Returns the internal index for the object associated with the specified name.</ShortDesc>
    <SeeAlso>SetSkylight,CreateSkylight,AddCavity</SeeAlso>
    <Comments>Returns the internal index for the object associated with the specified name.</Comments>
    <ID>2126</ID>
    <IDName>funcName2Index</IDName>
    <InternalFunctionName>MP_Name2Index</InternalFunctionName>
    <ModernName>NameToIndex</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Name of object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Index2Name</Name>
    <Version>800</Version>
    <Category>Object Names</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Function [[name]] returns the name of the object with specified index number.</Description>
    <ShortDesc>Returns the name of the object with the specified index number.</ShortDesc>
    <Comments>Returns the name of the object with the internal index specified.</Comments>
    <ID>2127</ID>
    <IDName>funcIndex2Name</IDName>
    <InternalFunctionName>MP_Index2Name</InternalFunctionName>
    <ModernName>IndexToName</ModernName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>longMode</Type>
        <Desc>Object index number.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPickObjectInfo</Name>
    <Version>800</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns a handle to an object found at a user selected point. [[BR]][[BR]]Parameter [[p:3]] returns a handle to a sub-selectable object (e.g., a symbol in a wall) if such an object exists. Parameter [[p:4]] is currently unused, and always returns 0.[[BR]][[BR]]</Description>
    <ShortDesc>Returns a handle to an object at a user selected point.</ShortDesc>
    <SeeAlso>PickObject, ForEachObjectAtPoint</SeeAlso>
    <Comments>same as PickObject except it return the sub-selected object, if any, and a message.  See Rich D. for more details.</Comments>
    <Example>WHILE NOT GetPickObjectInfo(pX,pY,hObject,hSymbol,dummyVar) DO BEGIN[[BR]]    GetPt(pX,pY);[[BR]]END;[[BR]]</Example>
    <ID>2128</ID>
    <IDName>funcGetPickObjectInfo</IDName>
    <InternalFunctionName>MP_GetPickObjectInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinate location to test for object.</Desc>
      </Param>
      <Param>
        <Name>h</Name>
        <Type>handleVarMode</Type>
        <Desc>Returns handle to object.</Desc>
      </Param>
      <Param>
        <Name>subH</Name>
        <Type>handleVarMode</Type>
        <Desc>Returns handle to sub selectable object.</Desc>
      </Param>
      <Param>
        <Name>message</Name>
        <Type>intVarMode</Type>
        <Desc>Resereved for future use. Specify a dummy INTEGER variable.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLightFalloff</Name>
    <Version>701</Version>
    <Category>Objects - Lights</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the fall off attributes for the referenced light object. [[BR]][[BR]][[note:LightFalloffTable]]</Description>
    <ShortDesc>Returns the fall off attributes for the referenced light.</ShortDesc>
    <Comments>Returns the falloff functions for the light.  0 = None, 1 = Normal, 2 = Smooth, 3 = Sharp (angular falloff only).</Comments>
    <ID>2129</ID>
    <IDName>procGetLightFalloff</IDName>
    <InternalFunctionName>MP_GetLightFalloff</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>light</Name>
        <Type>handleMode</Type>
        <Desc>Handle to light.</Desc>
      </Param>
      <Param>
        <Name>distFalloff</Name>
        <Type>intVarMode</Type>
        <Desc>Returns distance falloff value.</Desc>
      </Param>
      <Param>
        <Name>angFalloff</Name>
        <Type>intVarMode</Type>
        <Desc>Returns angular falloff value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLightFalloff</Name>
    <Version>701</Version>
    <Category>Objects - Lights</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the fall off attributes for the referenced light object.[[BR]][[BR]][[note:LightFalloffTable]]</Description>
    <ShortDesc>Sets the fall off attributes for the referenced light.</ShortDesc>
    <Comments>Sets the falloff functions for the light.  0 = None, 1 = Normal, 2 = Smooth, 3 = Sharp (angular falloff only).</Comments>
    <ID>2130</ID>
    <IDName>procSetLightFalloff</IDName>
    <InternalFunctionName>MP_SetLightFalloff</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>light</Name>
        <Type>handleMode</Type>
        <Desc>Handle to light.</Desc>
      </Param>
      <Param>
        <Name>distFalloff</Name>
        <Type>intMode</Type>
        <Desc>Distance falloff value.</Desc>
      </Param>
      <Param>
        <Name>angFalloff</Name>
        <Type>intMode</Type>
        <Desc>Angular falloff value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ContainsLight</Name>
    <Version>800</Version>
    <Category>Objects - Lights</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns TRUE if the referenced object contains a light.  This function works with container objects such as groups, symbols, layers, etc.</Description>
    <ShortDesc>Returns TRUE if the referenced container object contains a light.  </ShortDesc>
    <Comments>Returns true if object contains a light object in it.  This function works for container-type objects (groups, symbols, layers, etc.).</Comments>
    <ID>2131</ID>
    <IDName>funcContainsLight</IDName>
    <InternalFunctionName>MP_ContainsLight</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>containerObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateText</Name>
    <Version>800</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a new text object in a Vectorworks document. The text object is created using the current pen position and default attributes.</Description>
    <ShortDesc>Creates a new text object in the document.</ShortDesc>
    <SeeAlso>BeginText, EndText</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	Txt   :ARRAY [1..100] of STRING;[[BR]]	Outpt :DYNARRAY[] of CHAR;[[BR]]	i     :INTEGER;[[BR]]BEGIN[[BR]]	FOR i := 1 TO 5 DO txt[i] := 'asdf';[[BR]]	i := 2;[[BR]]	Outpt := Txt[1];[[BR]]	WHILE Txt[i] &lt;&gt; '' DO BEGIN[[BR]]		OutPt := Concat(Outpt, Chr(13), Txt[i]);[[BR]]		i := i + 1;[[BR]]	END;[[BR]]	Layer('Text');[[BR]]	CreateText(Outpt);[[BR]]	Layer('Layer-1');[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2132</ID>
    <IDName>procCreateText</IDName>
    <InternalFunctionName>MP_CreateText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theText</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Text string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetFontID</Name>
    <Version>800</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] converts the string name of an available font to a font ID which can be passed to other VectorScript routines.</Description>
    <ShortDesc>Converts the name of an available font to a font ID which can be passed to other VectorScript routines.</ShortDesc>
    <Comments>returns -1 if the requested font is not available</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	str :STRING;[[BR]]BEGIN[[BR]]	str := StrDialog('Enter the font name:', 'Arial');[[BR]]	AlrtDialog(Concat('The font ID is: ', GetFontID(str)));[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2133</ID>
    <IDName>funcGetFontID</IDName>
    <InternalFunctionName>MP_GetFontID</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>fontName</Name>
        <Type>stringMode</Type>
        <Desc>Name of installed font.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetFontName</Name>
    <Version>800</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Function [[name]] converts a system font ID to a font name.[[BR]][[BR]][[note:FontID]]</Description>
    <ShortDesc>Converts a system font ID to a font name.</ShortDesc>
    <Comments>returns "" if the FontID is not legal.</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	str :STRING;[[BR]]	cnt :INTEGER;[[BR]]BEGIN[[BR]]	FOR cnt := 0 to 10 DO str := Concat(str, Chr(13), GetFontName(cnt));[[BR]]	AlrtDialog(str);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2134</ID>
    <IDName>funcGetFontName</IDName>
    <InternalFunctionName>MP_GetFontName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>fontID</Name>
        <Type>intMode</Type>
        <Desc>Font ID value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPrefInt</Name>
    <Version>800</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the value of a numeric Vectorworks preference setting.[[BR]][[BR]][[note:PrefItemTableNote]][[BR]]</Description>
    <ShortDesc>Returns the value of a specified Vectorworks preference integer setting.</ShortDesc>
    <Result>The status of the requested preference. If the preference is a checkbox, then [[name]] returns TRUE or false. If it is a radio group or editable text item, then [[name]] returns an integer value representing that setting.</Result>
    <Comments>Returns the status of the specified preference item.  Used for preferences that return an Integer instead of a Boolean (see GetPref)</Comments>
    <Example>maxUndos:=GetPrefInt(17);[[BR]]</Example>
    <ID>2135</ID>
    <IDName>funcGetPrefInt</IDName>
    <InternalFunctionName>MP_GetPrefInt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>prefIndex</Name>
        <Type>intMode</Type>
        <Desc>Preference item constant.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetPrefInt</Name>
    <Version>800</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Function [[name]] sets the value of a numeric Vectorworks preference setting.[[BR]][[BR]][[note:PrefItemTableNote]][[BR]][[BR]]</Description>
    <ShortDesc>Sets the integer value of a specified preference.</ShortDesc>
    <Comments>Sets the value of the specified preference to the value passed.   Similar to SetPref() except it works on preferences for Integer values</Comments>
    <Example>SetPrefInt(17,FALSE);[[BR]]</Example>
    <ID>2136</ID>
    <IDName>procSetPrefInt</IDName>
    <InternalFunctionName>MP_SetPrefInt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Preference item constant.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>intMode</Type>
        <Desc>New value for preference.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Get3DOrientation</Name>
    <Version>800</Version>
    <Category>Objects - 3D</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns the 3D orientation of the referenced object.[[BR]][[BR]]If the object is mirrored, a reflection across the X-Y plane must be applied before rotating by the angles above in order to reproduce the object's orientation.</Description>
    <ShortDesc>Returns the 3D orientation of 3D objects which have an orientation. Returns FALSE for other objects.</ShortDesc>
    <Result>[[name]] returns TRUE if a valid 3D object was passed to the procedure.</Result>
    <ID>2137</ID>
    <IDName>funcGet3DOrientation</IDName>
    <InternalFunctionName>MP_Get3DOrientation</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to 3D object.</Desc>
      </Param>
      <Param>
        <Name>xRot</Name>
        <Type>rVarMode</Type>
        <Desc>Returns X rotation value.</Desc>
      </Param>
      <Param>
        <Name>yRot</Name>
        <Type>rVarMode</Type>
        <Desc>Returns Y rotation value.</Desc>
      </Param>
      <Param>
        <Name>zRot</Name>
        <Type>rVarMode</Type>
        <Desc>Returns Z rotation value.</Desc>
      </Param>
      <Param>
        <Name>isMirroredXY</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns mirror status of object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BeginVectorFillN</Name>
    <Version>800</Version>
    <Category>Hatches / Vector Fills</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a new vector fill definition in a Vectorworks document. The value of [[p:1]] will change only if the hatch name already exists.[[BR]][[BR]][[note:ColorTableNote]]</Description>
    <ShortDesc>Creates a new vector fill..</ShortDesc>
    <SeeAlso>AddVectorFillLayer, EndVectorFill</SeeAlso>
    <Comments>Begins a hatch definition.  vectorFillName will return with a different name if the input name already is being used in the document.[[BR]][[BR]]This is a new version of BeginVectorFill which returns the actual name of the hatch in the VAR STRING.</Comments>
    <Example>PROCEDURE CreateHatch;[[BR]]VAR[[BR]]	hatchName :STRING;[[BR]]BEGIN[[BR]]	hatchName := 'Default Hatch';[[BR]]	BeginVectorFillN(hatchName, TRUE, FALSE, 0);[[BR]]	AddVectorFillLayer(0,0,1,1,0.176776695,-0.176776695,1,1,255);[[BR]]	EndVectorFill;[[BR]]END;[[BR]]RUN(CreateHatch);[[BR]]</Example>
    <ID>2138</ID>
    <IDName>procBeginVectorFillN</IDName>
    <InternalFunctionName>MP_BeginVectorFillN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>vectorFillName</Name>
        <Type>stringInOutMode</Type>
        <Desc>Name of new vector fill pattern.</Desc>
      </Param>
      <Param>
        <Name>pageSpace</Name>
        <Type>boolMode</Type>
        <Desc>Sets page or world space for vector fill.</Desc>
      </Param>
      <Param>
        <Name>rotateInWall</Name>
        <Type>boolMode</Type>
        <Desc>Sets rotate in wall option for vector fill.</Desc>
      </Param>
      <Param>
        <Name>colorIndex</Name>
        <Type>intMode</Type>
        <Desc>Background color of vector fill.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DotProduct</Name>
    <Version>800</Version>
    <Category>Math - Vectors</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the dot product of the two specified vectors.[[BR]][[BR]]The dot product is also known as the scalar product of the two vectors, and is equivalent to the product of the magnitudes of the two vectors multiplied by the cosine of the angle between the two vectors.</Description>
    <ShortDesc>Returns the dot product of the two specified vectors.</ShortDesc>
    <Result>Returns the scalar, or dot, product of the vectors [[p:1]] and [[p:2]].</Result>
    <SeeAlso>AngBVec</SeeAlso>
    <Comments>This should be used in place of the bullet/yen operator for better cross-platform operability. - PCP</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	pt1, pt2, pt3, pt4 :VECTOR;[[BR]]	ang :REAL;[[BR]]BEGIN[[BR]]	GetPt(pt1.x, pt1.y);[[BR]]	GetPtL(pt1.x, pt1.y, pt2.x, pt2.y);[[BR]]	GetPtL(pt2.x, pt2.y, pt3.x, pt3.y);[[BR]]	MoveTo(pt1.x, pt1.y);[[BR]]	LineTo(pt2.x, pt2.y);[[BR]]	LineTo(pt3.x, pt3.y);[[BR]]	pt4 := (pt1 + pt3) / 2;[[BR]]	{Find the angle between the vectors.}[[BR]]	ang := Rad2Deg(ArcCos(DotProduct(UnitVec(pt1-pt2), UnitVec(pt3-pt2))));[[BR]]	TextOrigin(pt4.x, pt4.y);[[BR]]	CreateText(Concat(ang));[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2139</ID>
    <IDName>funcDotProduct</IDName>
    <InternalFunctionName>MP_DotProduct</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>v1</Name>
        <Type>vecMode</Type>
        <Desc>Source vector 1.</Desc>
      </Param>
      <Param>
        <Name>v2</Name>
        <Type>vecMode</Type>
        <Desc>Source vector 2.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextWrap</Name>
    <Version>800</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the text wrap mode of the referenced text object.</Description>
    <ShortDesc>Sets whether the text in the text object wraps to the margins.</ShortDesc>
    <Comments>If this is set to false, it will cause the margin width to be recomputed and the text block to be reformatted. If it is set to true, the width remains the same, and text will be wrapped to fit the current margin. Use SetTextWidth to change the margin.[[BR]]By default, text is created with wrapping set to false.[[BR]]</Comments>
    <ID>2140</ID>
    <IDName>procSetTextWrap</IDName>
    <InternalFunctionName>MP_SetTextWrap</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theText</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
      <Param>
        <Name>wrap</Name>
        <Type>boolMode</Type>
        <Desc>Text wrap setting for text.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextWrap</Name>
    <Version>800</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Procedure [[name]] returns the text wrap mode of the referenced text object. </Description>
    <ShortDesc>Returns the wrap mode of the text object.</ShortDesc>
    <ID>2141</ID>
    <IDName>funcGetTextWrap</IDName>
    <InternalFunctionName>MP_GetTextWrap</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theText</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextWidth</Name>
    <Version>800</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] Sets the text wrapping margin width of the referenced text object.   [[BR]][[BR]]A call to [[name]] automatically activates text wrapping.</Description>
    <ShortDesc>Sets the text wrapping margin width of the text object and implicitly turns on wrapping.</ShortDesc>
    <SeeAlso>GetTextWidth</SeeAlso>
    <Example>PROCEDURE Example;[[BR]][[BR]]FUNCTION IncreaseTextWidth(h :HANDLE) :BOOLEAN;[[BR]]BEGIN[[BR]]   SetTextWidth(h, GetTextWidth(h) * 1.2);[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]   ForEachObjectInLayer(IncreaseTextWidth, 2, 0, 4);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2142</ID>
    <IDName>procSetTextWidth</IDName>
    <InternalFunctionName>MP_SetTextWidth</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theText</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
      <Param>
        <Name>widthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Text wrapping margin setting for text.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextWidth</Name>
    <Version>800</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Procedure [[name]] returns the margin width of the referenced text object.</Description>
    <ShortDesc>Returns the margin width of a text object.</ShortDesc>
    <SeeAlso>SetTextWidth</SeeAlso>
    <Comments>For wrapped blocks, the margin width is that set by the user. For unwrapped blocks, it is computed by VW to be the width of the longest line.</Comments>
    <ID>2143</ID>
    <IDName>funcGetTextWidth</IDName>
    <InternalFunctionName>MP_GetTextWidth</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theText</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextSpace</Name>
    <Version>800</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the line spacing of the referenced text object.[[BR]][[BR]][[note:TextSpacingTable]]</Description>
    <ShortDesc>Sets the line spacing of the referenced text object.</ShortDesc>
    <Comments>Use SetTextLeading to set a custom line spacing.</Comments>
    <ID>2144</ID>
    <IDName>procSetTextSpace</IDName>
    <InternalFunctionName>MP_SetTextSpace</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theText</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
      <Param>
        <Name>spacing</Name>
        <Type>intMode</Type>
        <Desc>Line spacing for text.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextSpace</Name>
    <Version>800</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Procedure [[name]] returns the line spacing of the referenced text object.[[BR]][[BR]][[note:TextSpacingTable]]</Description>
    <ShortDesc>Returns the line spacing of the referenced text object.</ShortDesc>
    <ID>2145</ID>
    <IDName>funcGetTextSpace</IDName>
    <InternalFunctionName>MP_GetTextSpace</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theText</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextLeading</Name>
    <Version>800</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the line spacing of the referenced text object to a custom leading value (in points).</Description>
    <ShortDesc>Sets the line spacing of a text object to a custom leading value (in points).</ShortDesc>
    <ID>2146</ID>
    <IDName>procSetTextLeading</IDName>
    <InternalFunctionName>MP_SetTextLeading</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theText</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
      <Param>
        <Name>leading</Name>
        <Type>realMode</Type>
        <Desc>Custom leading value for text.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextLeading</Name>
    <Version>800</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Procedure [[name]] returns the custom leading value(in points) of the referenced text object.</Description>
    <ShortDesc>Returns the custom leading value of a text object (in points).</ShortDesc>
    <Comments>If a custom value was not set, this returns -1.0.</Comments>
    <ID>2147</ID>
    <IDName>funcGetTextLeading</IDName>
    <InternalFunctionName>MP_GetTextLeading</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theText</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>TextLeading</Name>
    <Version>800</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the default line spacing of Vectorworks to a custom leading value (in points). </Description>
    <ShortDesc>Sets the default line spacing to a custom leading value (in points).</ShortDesc>
    <ID>2148</ID>
    <IDName>procTextLeading</IDName>
    <InternalFunctionName>MP_TextLeading</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>leading</Name>
        <Type>realMode</Type>
        <Desc>Custom leading value for document.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextOrientation</Name>
    <Version>800</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the position and orientation attributes of the referenced text object.</Description>
    <ShortDesc>Returns the position and orientation attributes of the referenced text object.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   theText :HANDLE;[[BR]]   textOriginX, textOriginY, textAng :REAL;[[BR]]   textIsMirrored :BOOLEAN;[[BR]]BEGIN[[BR]]   theText := FSActLayer;[[BR]]   GetTextOrientation(theText, textOriginX, textOriginY, textAng, textIsMirrored);[[BR]]   Locus(textOriginX, textOriginY);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2149</ID>
    <IDName>procGetTextOrientation</IDName>
    <InternalFunctionName>MP_GetTextOrientation</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theText</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
      <Param>
        <Name>textOrigin</Name>
        <Type>globPtVarMode</Type>
        <Desc>Returns coordinates of text origin.</Desc>
      </Param>
      <Param>
        <Name>textAng</Name>
        <Type>rVarMode</Type>
        <Desc>Returns rotation angle of text.</Desc>
      </Param>
      <Param>
        <Name>textIsMirrored</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns mirror state of text.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextOrientation</Name>
    <Version>800</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the position and orientation attributes of the referenced text object.</Description>
    <ShortDesc>Sets the position and orientation attributes of the referenced text object.</ShortDesc>
    <ID>2150</ID>
    <IDName>procSetTextOrientation</IDName>
    <InternalFunctionName>MP_SetTextOrientation</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theText</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
      <Param>
        <Name>textOrigin</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinates of text object origin.</Desc>
      </Param>
      <Param>
        <Name>textAngle</Name>
        <Type>angleMode</Type>
        <Desc>Rotation angle for text object.</Desc>
      </Param>
      <Param>
        <Name>textIsMirrored</Name>
        <Type>boolMode</Type>
        <Desc>Mirroring setting for text object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateRoof</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] creates a new roof object in a Vectorworks document, returning a handle to the object. To define the roof object template, use AppendRoofEdge.[[BR]][[BR]][[note:RoofMiterStyleTable]]</Description>
    <ShortDesc>Create a roof object in a Vectorworks document.</ShortDesc>
    <SeeAlso>AppendRoofEdge</SeeAlso>
    <Comments>Use AppendRoofVertex() to define the roof plan.[[BR]]genGableWall: Create wall object on gable ends, otherwise no wall is created.[[BR]]bearingInset is where the weight of the roof rests on the wall.  This is an inset from the defining edge of the roof plan.[[BR]]miterType:  1: vertical miter, 2: horizontal miter, 3: double miter , 4: square miter[[BR]]vertMiter: Specifies vertical len of double miter.</Comments>
    <Example>roofHandle := CreateRoof(TRUE,5 1/2",5 1/2",4,0");[[BR]]AppendRoofEdge(roofHandle, -87'4",-38'4",#45d 0' 0" ,2'0",10'0");[[BR]]AppendRoofEdge(roofHandle, -30'2",-38'4",#45d 0' 0" ,2'0",10'0");[[BR]]AppendRoofEdge(roofHandle, -30'2",45'10",#45d 0' 0" ,2'0",10'0");[[BR]]AppendRoofEdge(roofHandle, -87'4",45'10",#45d 0' 0" ,2'0",10'0");[[BR]]</Example>
    <ID>2152</ID>
    <IDName>funcCreateRoof</IDName>
    <InternalFunctionName>MP_CreateRoof</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>genGableWall</Name>
        <Type>boolMode</Type>
        <Desc>Specifies gable roof generation.</Desc>
      </Param>
      <Param>
        <Name>bearingInsetDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Bearing inset distance of wall into roof.</Desc>
      </Param>
      <Param>
        <Name>roofThickDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Roof thickness.</Desc>
      </Param>
      <Param>
        <Name>miterType</Name>
        <Type>intMode</Type>
        <Desc>Miter style of roof.</Desc>
      </Param>
      <Param>
        <Name>vertMiterDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Vertical component for double miters.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetRoofAttributes</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns the attributes of the referenced roof object.[[BR]][[BR]][[note:RoofMiterStyleTable]][[BR]]</Description>
    <ShortDesc>Get the properties of the roof.</ShortDesc>
    <Comments>genGableWall: Set to true to have a wall created at gable ends of the roof.  Otherwise no object will be inserted.[[BR]]bearingInset  is where the weight of the roof rests on the wall.  This is an inset from the defining edge of the roof plan.[[BR]]miterType: Specify 1 for a vertical miter, 2 for horizontal miter, 3 for a double miter cut, and 4 for a square end miter cut.[[BR]]vertMiter: This is used only with the double miter type; it specifies the vertical length of the miter cut.</Comments>
    <Example>PROCEDURE Example;[[BR]]var[[BR]]	theRoof :HANDLE;[[BR]]	genGableWall :BOOLEAN; [[BR]]	bearingInset, roofThick :REAL; [[BR]]	miterType :INTEGER; [[BR]]	vertMiter :REAL;[[BR]]begin[[BR]]	theRoof := FSActLayer;[[BR]]	IF GetRoofAttributes(theRoof, genGableWall, bearingInset, roofThick, miterType, vertMiter)[[BR]]	THEN Message(genGableWall, ' ', bearingInset, ' ', roofThick, ' ', miterType, ' ', vertMiter);[[BR]]end;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2153</ID>
    <IDName>funcGetRoofAttributes</IDName>
    <InternalFunctionName>MP_GetRoofAttributes</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theRoof</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof object.</Desc>
      </Param>
      <Param>
        <Name>genGableWall</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns gable wall generation state.</Desc>
      </Param>
      <Param>
        <Name>bearingInset</Name>
        <Type>rVarMode</Type>
        <Desc>Returns bearing inset dimension.</Desc>
      </Param>
      <Param>
        <Name>roofThick</Name>
        <Type>rVarMode</Type>
        <Desc>Returns roof thickness.</Desc>
      </Param>
      <Param>
        <Name>miterType</Name>
        <Type>intVarMode</Type>
        <Desc>Returns miter style.</Desc>
      </Param>
      <Param>
        <Name>vertMiter</Name>
        <Type>rVarMode</Type>
        <Desc>Returns vertical miter dimension.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetRoofAttributes</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Function [[name]] sets the definition attributes of a roof object in a Vectorworks document. [[BR]][[BR]][[note:RoofMiterStyleTable]]</Description>
    <ShortDesc>Set the properties of the roof.</ShortDesc>
    <Comments>genGableWall: Set to true to have a wall created at gable ends of the roof.  Otherwise no object will be inserted.[[BR]]bearingInset  is where the weight of the roof rests on the wall.  This is an inset from the defining edge of the roof plan.[[BR]]miterType:  Specify 1 for a vertical miter, 2 for horizontal miter, 3 for a double miter cut, and 4 for a square end miter cut.  vertMiter: This is used only with the double miter type; it specifies the vertical length of the miter cut.</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	thickness :REAL;[[BR]]	str	:STRING;[[BR]][[BR]]PROCEDURE SetIt(h :HANDLE);[[BR]]BEGIN[[BR]]	IF GetObjectVariableInt(h, 172) = 1 THEN [[BR]]		SetObjectVariableReal(h, 170, thickness * 25.4);[[BR]]END;[[BR]][[BR]]PROCEDURE FindRoofFaces(h :HANDLE);[[BR]]VAR[[BR]]	temp_h :HANDLE;[[BR]]	roofObject :HANDLE; [[BR]]	genGableWall :BOOLEAN; [[BR]]	bearingInsetDistance, roofThickDistance :REAL; [[BR]]	miterType :INTEGER; [[BR]]	vertMiterDistance :REAL;[[BR]]BEGIN[[BR]]	IF GetType(h) = 71 THEN SetIt(h) ELSE[[BR]]	IF GetRoofAttributes(h, genGableWall, bearingInsetDistance, roofThickDistance, miterType, vertMiterDistance) THEN[[BR]]		SetRoofAttributes(h, genGableWall, bearingInsetDistance, thickness, miterType, vertMiterDistance);[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]	thickness := RealDialog('Enter desired thickness', '10');[[BR]]	str := Concat('((T=71) | (T=83)) &amp; (L=''', GetLName(ActLayer), ''')');[[BR]]	ForEachObject(FindRoofFaces, str);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2154</ID>
    <IDName>procSetRoofAttributes</IDName>
    <InternalFunctionName>MP_SetRoofAttributes</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof .</Desc>
      </Param>
      <Param>
        <Name>genGableWall</Name>
        <Type>boolMode</Type>
        <Desc>Sets gable roof generation mode.</Desc>
      </Param>
      <Param>
        <Name>bearingInsetDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Sets bearing inset distance.</Desc>
      </Param>
      <Param>
        <Name>roofThickDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Sets roof thickness.</Desc>
      </Param>
      <Param>
        <Name>miterType</Name>
        <Type>intMode</Type>
        <Desc>Sets miter style.</Desc>
      </Param>
      <Param>
        <Name>vertMiterDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Specifies vertical miter dimension.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetRoofEdge</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Procedure [[name]] returns the definition attributes of a roof edge for the referenced roof object.</Description>
    <ShortDesc>Returns roof edge characteristics for referenced roof object.</ShortDesc>
    <Comments>Vertices define the outline of the roof and its characteristics.  Vertices must progress in a counter clock wise direction, when viewed from a top view, otherwise the roof cannot be built.[[BR]][[BR]]index: Indexs have values between 1 and NVertices (See GetRoofVertices())[[BR]]edgePt: Coordinate point for this edge[[BR]]slope: pitch of this roof edge[[BR]]projection: eave overhang[[BR]]eaveHeight: eave height</Comments>
    <ID>2155</ID>
    <IDName>funcGetRoofEdge</IDName>
    <InternalFunctionName>MP_GetRoofEdge</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theRoof</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Index of roof edge (in a range of 1 - n).</Desc>
      </Param>
      <Param>
        <Name>vertexPt</Name>
        <Type>globPtVarMode</Type>
        <Desc>Returns coordinates of roof edge definition vertex.</Desc>
      </Param>
      <Param>
        <Name>slope</Name>
        <Type>rVarMode</Type>
        <Desc>Returns slope of roof edge.</Desc>
      </Param>
      <Param>
        <Name>projection</Name>
        <Type>rVarMode</Type>
        <Desc>Retunrs eave overhang dimension.</Desc>
      </Param>
      <Param>
        <Name>eaveHeight</Name>
        <Type>rVarMode</Type>
        <Desc>Returns eave height.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetRoofEdge</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the definition attributes of a roof edge for the referenced roof object.</Description>
    <ShortDesc>Sets roof edge characteristics for referenced roof object.</ShortDesc>
    <Comments>Vertices define the outline of the roof and its characteristics.  Vertices must progress in a counter clock wise direction, when viewed from a top view, otherwise the roof cannot be built.[[BR]][[BR]]index: Indexs have values between 1 and NVertices (See GetRoofVertices())[[BR]]edgePt: Coordinate point for this edge[[BR]]slope: pitch of this roof edge[[BR]]projection: eave overhang[[BR]]eaveHeight: eave height</Comments>
    <ID>2156</ID>
    <IDName>procSetRoofEdge</IDName>
    <InternalFunctionName>MP_SetRoofEdge</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Index of roof edge.</Desc>
      </Param>
      <Param>
        <Name>vertexPt</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinates of roof edge vertex.</Desc>
      </Param>
      <Param>
        <Name>edgeAngle</Name>
        <Type>angleMode</Type>
        <Desc>Roof slope.</Desc>
      </Param>
      <Param>
        <Name>projectionDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Eave overhang.</Desc>
      </Param>
      <Param>
        <Name>eaveHeightDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Eave height.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveRoofEdge</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] removes the specified roof edge from the referenced roof object. </Description>
    <ShortDesc>Remove a vertex and associated attributes from a roof object.</ShortDesc>
    <ID>2157</ID>
    <IDName>funcRemoveRoofEdge</IDName>
    <InternalFunctionName>MP_RemoveRoofEdge</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Index of roof edge to be removed.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateSkylight</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] creates a new skylight in the referenced roof object.</Description>
    <ShortDesc>Create a skylight in the referenced roof object.</ShortDesc>
    <Example>skylightID:=[[name]](roofHandle);[[BR]]SetSkylight(roofHandle,skylightID,6,13'8",2'1",Name2Index('dh2436'));[[BR]]</Example>
    <ID>2158</ID>
    <IDName>funcCreateSkylight</IDName>
    <InternalFunctionName>MP_CreateSkylight</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSkylight</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Function [[name]] returns the definition attributes of a specified skylight in the referenced roof object.</Description>
    <ShortDesc>Returns attributes of a skylight in the referenced roof object.</ShortDesc>
    <SeeAlso>Index2Name</SeeAlso>
    <Comments>skylightID: Identifier for this skylight.  Value is returned by CreateSkylight().[[BR]]edgeIndex: Index to which roof face this skylight is placed.  Value is one based.[[BR]]cornerOffset: Top/Plan distance from vertex referenced by 'edgeIndex' to center of skylight.  This distance is parallel to the roof outline as defined by: vertex[edgeindex+1] - vertex[edgeIndex].[[BR]]perpOffset: Top/Plan distance from roof outline to center of skylight.[[BR]]symName: Skylight symbol to place in the roof.</Comments>
    <Example>[[name]](roofHandle,skylightID,edgeID,cOff,pOff,symID);[[BR]]symbolName:=Index2Name(symID);</Example>
    <ID>2159</ID>
    <IDName>procGetSkylight</IDName>
    <InternalFunctionName>MP_GetSkylight</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>skylightID</Name>
        <Type>intMode</Type>
        <Desc>Index of skylight element.</Desc>
      </Param>
      <Param>
        <Name>edgeIndex</Name>
        <Type>intVarMode</Type>
        <Desc>Index of roof edge associated with skylight.</Desc>
      </Param>
      <Param>
        <Name>cornerOffset</Name>
        <Type>rVarMode</Type>
        <Desc>Offset of skylight from corner.</Desc>
      </Param>
      <Param>
        <Name>perpOffset</Name>
        <Type>rVarMode</Type>
        <Desc>Offset of skylight from roof edge.</Desc>
      </Param>
      <Param>
        <Name>symName</Name>
        <Type>lngVarMode</Type>
        <Desc>Name of skylight symbol.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetSkylight</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Function [[name]] sets the definition attributes of a skylight in the referenced roof object.</Description>
    <ShortDesc>Set attributes of a specified skylight.</ShortDesc>
    <SeeAlso>Name2Index</SeeAlso>
    <Comments>skylightID: Identifier for this skylight.  Value is returned by CreateSkylight().[[BR]]edgeIndex: Index to which roof face this skylight is placed.  Value is one based.[[BR]]cornerOffset: Top/Plan distance from vertex referenced by 'edgeIndex' to center of skylight.  This distance is parallel to the roof outline as defined by: vertex[edgeindex+1] - vertex[edgeIndex].[[BR]]perpOffset: Top/Plan distance from roof outline to center of skylight.[[BR]]symName: Skylight symbol to place in the roof.</Comments>
    <Example>skylightID:=CreateSkylight(roofHandle);[[BR]][[name]](roofHandle,skylightID,6,13'8",2'1",Name2Index('dh2436'));[[BR]]</Example>
    <ID>2160</ID>
    <IDName>procSetSkylight</IDName>
    <InternalFunctionName>MP_SetSkylight</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>skylightID</Name>
        <Type>intMode</Type>
        <Desc>Index of skylight element.</Desc>
      </Param>
      <Param>
        <Name>edgeIndex</Name>
        <Type>intMode</Type>
        <Desc>Index of roof edge associated with skylight.</Desc>
      </Param>
      <Param>
        <Name>cornerOffsetDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Offset of skylight from corner.</Desc>
      </Param>
      <Param>
        <Name>perpOffsetDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Offset of skylight from roof edge.</Desc>
      </Param>
      <Param>
        <Name>symName</Name>
        <Type>longMode</Type>
        <Desc>Name of skylight symbol.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateTrapeziumDormer</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] creates a trapezium dormer in the referenced roof object.</Description>
    <ShortDesc>Creates a trapezium style dormer.</ShortDesc>
    <Comments>This only creates the object, SetDormerAttributes() &amp; SetTrapeziumAttributes() must still be called to define the attributes of the dormer.</Comments>
    <Example>roofHandle := CreateRoof(TRUE,5 1/2",5 1/2",4,9.52627");[[BR]]AppendRoofEdge(roofHandle,-77'10",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",21'4.81922",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle, -77'10",21'4.81922",#45°0'0",2'0",10'0");[[BR]]trapID:=CreateTrapeziumDormer(roofHandle);[[BR]]SetTrapeziumAttributes(roofHandle,trapID,TRUE,6'0",10'0",TRUE,6'0",#0°0'0",#0°0'0",#8°0'0");[[BR]]SetDormerAttributes(roofHandle,trapID,3,18'4",TRUE,3'0",63,FALSE,3'0");[[BR]]SetDormerThick(roofHandle, 2",1.83333");[[BR]]</Example>
    <ID>2161</ID>
    <IDName>funcCreateTrapeziumDormer</IDName>
    <InternalFunctionName>MP_CreateTrapeziumDormer</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTrapeziumAttributes</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the attributes of a trapezium dormer in the referenced roof.</Description>
    <ShortDesc>Returns the attributes of a trapezium style dormer.</ShortDesc>
    <Comments>This will fail if the dormerID identifies a dormer of a different style, or the dormerID is not valid.[[BR]][[BR]]dormerID: Identifies the dormer for which to retrieve the information.[[BR]][[BR]]useHeight: true if the next value is the height of the dormer, if false, next value is the depth (front to back) of the dormer.[[BR]]heightDepthValue: size of the dormer, either by height or depth; determined by previous parameter.[[BR]][[BR]]bottomWidth: dimension of bottom front edge of the dormer, left to right.[[BR]][[BR]]useTopWidth: true if using a dimension to set the width of the dormer roof.  False if the top width of the dormer is determined by the left and right slope.  The topWidth is exclusive of leftSlope &amp; rightSlope.[[BR]]twOrLSlope: dimension of the roof of the dormer if previous param is true, or slope of left dormer wall if false.[[BR]]rightSlope: angle of right dormer wall.[[BR]]topSlope: angle of the roof of the dormer.</Comments>
    <ID>2162</ID>
    <IDName>procGetTrapeziumAttributes</IDName>
    <InternalFunctionName>MP_GetTrapeziumAttributes</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>dormerID</Name>
        <Type>intMode</Type>
        <Desc>Index of dormer element.</Desc>
      </Param>
      <Param>
        <Name>useHeight</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns if height setting was used to created dormer.</Desc>
      </Param>
      <Param>
        <Name>heightDepth</Name>
        <Type>rVarMode</Type>
        <Desc>Returns height or depth value.</Desc>
      </Param>
      <Param>
        <Name>bottomWidth</Name>
        <Type>rVarMode</Type>
        <Desc>Returns bottom width.</Desc>
      </Param>
      <Param>
        <Name>useTopWidth</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether top width was used to create dormer.</Desc>
      </Param>
      <Param>
        <Name>topWidth</Name>
        <Type>rVarMode</Type>
        <Desc>Returns top width.</Desc>
      </Param>
      <Param>
        <Name>leftSlope</Name>
        <Type>rVarMode</Type>
        <Desc>Returns left slope of dormer roof.</Desc>
      </Param>
      <Param>
        <Name>rightSlope</Name>
        <Type>rVarMode</Type>
        <Desc>Returns right slope of dormer roof.</Desc>
      </Param>
      <Param>
        <Name>topSlope</Name>
        <Type>rVarMode</Type>
        <Desc>Returns top slope of dormer roof.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTrapeziumAttributes</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the attributes of a trapezium dormer in the referenced roof. </Description>
    <ShortDesc>Sets trapezium dormer attributes.</ShortDesc>
    <Comments>dormerID: Identifies the which dormer for which to set the values.[[BR]][[BR]]useHeight: Set to true if the next value is the height of the dormer, otherwise set to false if the next value is the depth (front to back) of the dormer.[[BR]]heightDepthValue: Size of the dormer, either by height or depth; determined by previous parameter.[[BR]][[BR]]bottomWidth: Dimension of bottom front edge of the dormer, left to right.[[BR]][[BR]]useTopWidth: True if using a dimension to set the width of the dormer roof.  False if the top width of the dormer is determined by the left and right slope.  The topWidth is exclusive of leftSlope &amp; rightSlope.[[BR]]twOrLSlope: dimension of the roof of the dormer if previous param is true, or slope of left dormer wall if false.[[BR]]rightSlope: Angle of right dormer wall.[[BR]][[BR]]topSlope: Angle of the roof of the dormer.</Comments>
    <Example>roofHandle := CreateRoof(TRUE,5 1/2",5 1/2",4,9.52627");[[BR]]AppendRoofEdge(roofHandle,-77'10",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",21'4.81922",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle, -77'10",21'4.81922",#45°0'0",2'0",10'0");[[BR]]trapID:=CreateTrapeziumDormer(roofHandle);[[BR]]SetTrapeziumAttributes(roofHandle,trapID,TRUE,6'0",10'0",TRUE,6'0",#0°0'0",#0°0'0",#8°0'0");[[BR]]SetDormerAttributes(roofHandle,trapID,3,18'4",TRUE,3'0",63,FALSE,3'0");[[BR]]SetDormerThick(roofHandle, 2",1.83333");[[BR]]</Example>
    <ID>2163</ID>
    <IDName>procSetTrapeziumAttributes</IDName>
    <InternalFunctionName>MP_SetTrapeziumAttributes</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>dormerID</Name>
        <Type>intMode</Type>
        <Desc>Index of dormer element.</Desc>
      </Param>
      <Param>
        <Name>useHeight</Name>
        <Type>boolMode</Type>
        <Desc>Use height setting to create dormer element.</Desc>
      </Param>
      <Param>
        <Name>heightDpthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Height/depth distance.</Desc>
      </Param>
      <Param>
        <Name>bottomWidthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Bottom width.</Desc>
      </Param>
      <Param>
        <Name>useTopWidth</Name>
        <Type>boolMode</Type>
        <Desc>Use top width to create dormer element.</Desc>
      </Param>
      <Param>
        <Name>topWidthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Top width.</Desc>
      </Param>
      <Param>
        <Name>leftAngle</Name>
        <Type>angleMode</Type>
        <Desc>Left roof slope.</Desc>
      </Param>
      <Param>
        <Name>rightAngle</Name>
        <Type>angleMode</Type>
        <Desc>Right roof slope.</Desc>
      </Param>
      <Param>
        <Name>topAngle</Name>
        <Type>angleMode</Type>
        <Desc>Top roof slope.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateGableDormer</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] creates a gable dormer in the referenced roof object.</Description>
    <ShortDesc>Creates a gable dormer.</ShortDesc>
    <Comments>This only creates the object, SetDormerAttributes() &amp; SetGableAttributes() must still be called to define the attributes of the dormer.</Comments>
    <Example>roofHandle:=CreateRoof(TRUE,5 1/2",5 1/2",4,9.52627");[[BR]]AppendRoofEdge(roofHandle,-77'10",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",21'4.81922",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-77'10",21'4.81922",#45°0'0" ,2'0",10'0");[[BR]]gabID:=CreateGableDormer(roofHandle);[[BR]]SetGableAttributes(roofHandle,gabID,TRUE,6'0",10'0",2'0",#45°0'0",#45°0'0");[[BR]]SetDormerAttributes(roofHandle,gabID,3,18'4",TRUE,3'0",63,FALSE,[[BR]]3'0");[[BR]]SetDormerThick(roofHandle, 2",1.83333");[[BR]]</Example>
    <ID>2164</ID>
    <IDName>funcCreateGableDormer</IDName>
    <InternalFunctionName>MP_CreateGableDormer</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetGableAttributes</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the attributes of a gable dormer in the referenced roof. </Description>
    <ShortDesc>Returns the attributes of a gable style dormer.</ShortDesc>
    <Comments>  This will fail if the dormerID identifies a dormer of a different style, or the dormerID is not valid.[[BR]][[BR]]dormerID: Identifies the dormer for which to retrieve the information.[[BR]][[BR]]useHeight: Set to true if the next value is the height of the dormer, if false, next value is the depth (front to back) of the dormer.[[BR]]heightDepthValue: Size of the dormer, either by height or depth; determined by previous parameter.[[BR]][[BR]]bottomWidth: Dimension of bottom front edge of the dormer, left to right.[[BR]][[BR]]leftSlope: Angle of left dormer roof.[[BR]]rightSlope: Angle of right dormer roof.[[BR]][[BR]]overhang: Distance roof projects past dormer walls.</Comments>
    <ID>2165</ID>
    <IDName>procGetGableAttributes</IDName>
    <InternalFunctionName>MP_GetGableAttributes</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>dormerID</Name>
        <Type>intMode</Type>
        <Desc>Index of dormer element.</Desc>
      </Param>
      <Param>
        <Name>useHeight</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns if height setting was used to created dormer.</Desc>
      </Param>
      <Param>
        <Name>heightDepth</Name>
        <Type>rVarMode</Type>
        <Desc>Returns height or depth value.</Desc>
      </Param>
      <Param>
        <Name>bottomWidth</Name>
        <Type>rVarMode</Type>
        <Desc>Returns bottom width.</Desc>
      </Param>
      <Param>
        <Name>overhang</Name>
        <Type>rVarMode</Type>
        <Desc>Returns overhang width.</Desc>
      </Param>
      <Param>
        <Name>leftSlope</Name>
        <Type>rVarMode</Type>
        <Desc>Returns left roof slope of dormer element.</Desc>
      </Param>
      <Param>
        <Name>rightSlope</Name>
        <Type>rVarMode</Type>
        <Desc>Returns right roof slope of dormer element.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetGableAttributes</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the attributes of a gable dormer in the referenced roof. </Description>
    <ShortDesc>Sets the attributes of a gable style dormer.</ShortDesc>
    <Comments>dormerID: Identifies the dormer for which to set the information.[[BR]][[BR]]useHeight: Set to true if the next value is the height of the dormer, if false, next value is the depth (front to back) of the dormer.[[BR]]heightDepthValue: Size of the dormer, either by height or depth; determined by previous parameter.[[BR]][[BR]]bottomWidth: Dimension of bottom front edge of the dormer, left to right.[[BR]][[BR]]leftSlope: Angle of left dormer roof.[[BR]]rightSlope: Angle of right dormer roof.[[BR]][[BR]]overhang: Distance roof projects past dormer walls.</Comments>
    <Example>roofHandle:=CreateRoof(TRUE,5 1/2",5 1/2",4,9.52627");[[BR]]AppendRoofEdge(roofHandle,-77'10",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",21'4.81922",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-77'10",21'4.81922",#45°0'0" ,2'0",10'0");[[BR]]gabID:=CreateGableDormer(roofHandle);[[BR]]SetGableAttributes(roofHandle,gabID,TRUE,6'0",10'0",2'0",#45°0'0",#45°0'0");[[BR]]SetDormerAttributes(roofHandle,gabID,3,18'4",TRUE,3'0",63,FALSE,[[BR]]3'0");[[BR]]SetDormerThick(roofHandle, 2",1.83333");[[BR]]</Example>
    <ID>2166</ID>
    <IDName>procSetGableAttributes</IDName>
    <InternalFunctionName>MP_SetGableAttributes</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>dormerID</Name>
        <Type>intMode</Type>
        <Desc>Index of dormer element.</Desc>
      </Param>
      <Param>
        <Name>useHeight</Name>
        <Type>boolMode</Type>
        <Desc>Use height setting to create dormer element.</Desc>
      </Param>
      <Param>
        <Name>heightDepthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Height/depth distance.</Desc>
      </Param>
      <Param>
        <Name>bottomWidthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Bottom width.</Desc>
      </Param>
      <Param>
        <Name>overhangDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Overhang distance.</Desc>
      </Param>
      <Param>
        <Name>leftAngle</Name>
        <Type>angleMode</Type>
        <Desc>Slope of left roof.</Desc>
      </Param>
      <Param>
        <Name>rightAngle</Name>
        <Type>angleMode</Type>
        <Desc>Slope of right roof.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateShedDormer</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] creates a shed dormer in the referenced roof object.</Description>
    <ShortDesc>Creates a shed style dormer.</ShortDesc>
    <Comments>This only creates the object, SetDormerAttributes() &amp; SetShedAttributes() must still be called to define the attributes of the dormer.</Comments>
    <Example>roofHandle := CreateRoof(TRUE,5 1/2",5 1/2",4,9.52627");[[BR]]AppendRoofEdge(roofHandle,-77'10",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",21'4.81922",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-77'10",21'4.81922",#45°0'0" ,2'0",10'0");[[BR]]shedID:=CreateShedDormer(roofHandle);[[BR]]SetShedAttributes(roofHandle,shedID,TRUE,6'0",10'0",2'0",#8°0'0");[[BR]]SetDormerAttributes(roofHandle,shedID,3,18'4",TRUE,3'0",63,FALSE, 3'0");[[BR]]SetDormerThick(roofHandle, 2",1.83333");[[BR]]</Example>
    <ID>2167</ID>
    <IDName>funcCreateShedDormer</IDName>
    <InternalFunctionName>MP_CreateShedDormer</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetShedAttributes</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the attributes of a shed dormer in the referenced roof. </Description>
    <ShortDesc>Returns the attributes of a shed style dormer.</ShortDesc>
    <Comments>This will fail if the dormerID identifies a dormer of a different style, or the dormerID is not valid.[[BR]][[BR]]dormerID: Identifies the dormer for which to retrieve the information.[[BR]][[BR]]useHeight: Set to true if the next value is the height of the dormer, if false, next value is the depth (front to back) of the dormer.[[BR]]heightDepthValue: Size of the dormer, either by height or depth; determined by previous parameter.[[BR]][[BR]]bottomWidth: Dimension of bottom front edge of the dormer, left to right.[[BR]][[BR]]topSlope: Angle of dormer roof.[[BR]][[BR]]overhang: Distance roof projects past dormer walls.</Comments>
    <ID>2168</ID>
    <IDName>procGetShedAttributes</IDName>
    <InternalFunctionName>MP_GetShedAttributes</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>dormerID</Name>
        <Type>intMode</Type>
        <Desc>Index of dormer element.</Desc>
      </Param>
      <Param>
        <Name>useHeight</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns if height setting was used to created dormer.</Desc>
      </Param>
      <Param>
        <Name>heightDepth</Name>
        <Type>rVarMode</Type>
        <Desc>Returns height or depth value.</Desc>
      </Param>
      <Param>
        <Name>bottomWidth</Name>
        <Type>rVarMode</Type>
        <Desc>Returns bottom width.</Desc>
      </Param>
      <Param>
        <Name>overhang</Name>
        <Type>rVarMode</Type>
        <Desc>Returns overhang distance.</Desc>
      </Param>
      <Param>
        <Name>topSlope</Name>
        <Type>rVarMode</Type>
        <Desc>Returns top slope of dormer roof.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetShedAttributes</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the attributes of a shed dormer in the referenced roof. </Description>
    <ShortDesc>Set the attributes of a shed style dormer.</ShortDesc>
    <Comments>dormerID: Identifies the dormer for which to set the information.[[BR]][[BR]]useHeight: true if the next value is the height of the dormer, if false, next value is the depth (front to back) of the dormer[[BR]]heightDepthValue: size of the dormer, either by height or depth; determined by previous parameter.[[BR]][[BR]]bottomWidth: Dimension of bottom front edge of the dormer, left to right.[[BR]][[BR]]topSlope: Angle of dormer roof.[[BR]][[BR]]overhang: Distance roof projects past dormer walls.</Comments>
    <Example>roofHandle := CreateRoof(TRUE,5 1/2",5 1/2",4,9.52627");[[BR]]AppendRoofEdge(roofHandle,-77'10",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",21'4.81922",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-77'10",21'4.81922",#45°0'0" ,2'0",10'0");[[BR]]shedID := CreateShedDormer(roofHandle);[[BR]]SetShedAttributes(roofHandle,shedID,TRUE,6'0",10'0",2'0",#8°0'0");[[BR]]SetDormerAttributes(roofHandle,shedID,3,18'4",TRUE,3'0",63,FALSE, 3'0");[[BR]]SetDormerThick(roofHandle, 2",1.83333");[[BR]]</Example>
    <ID>2169</ID>
    <IDName>procSetShedAttributes</IDName>
    <InternalFunctionName>MP_SetShedAttributes</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>dormerID</Name>
        <Type>intMode</Type>
        <Desc>Index of dormer element.</Desc>
      </Param>
      <Param>
        <Name>useHeight</Name>
        <Type>boolMode</Type>
        <Desc>Use height setting to create dormer element.</Desc>
      </Param>
      <Param>
        <Name>heightDepthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Height/depth distance.</Desc>
      </Param>
      <Param>
        <Name>bottomWidthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Bottom width.</Desc>
      </Param>
      <Param>
        <Name>overhangDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Overhang distance.</Desc>
      </Param>
      <Param>
        <Name>topAngle</Name>
        <Type>angleMode</Type>
        <Desc>Top angle of dormer element.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateHipDormer</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] creates a hip dormer in the referenced roof object.</Description>
    <ShortDesc>Creates a hip style dormer.</ShortDesc>
    <Comments>This only creates the object, SetDormerAttributes() &amp; SetHipAttributes() must still be called to define the attributes of the dormer.[[BR]][[BR]]object: is the roof object into which to add the dormer.</Comments>
    <Example>roofHandle := CreateRoof(TRUE,5 1/2",5 1/2",4,9.52627");[[BR]]AppendRoofEdge(roofHandle,-77'10",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",21'4.81922",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle, -77'10",21'4.81922",#45°0'0",2'0",10'0");[[BR]]hID := CreateHipDormer(roofHandle);[[BR]]SetHipAttributes(roofHandle, hID,TRUE,6'0",10'0",2'0",#45°0'0",#45°0'0",#45°0'0");[[BR]]SetDormerAttributes(roofHandle,hID,3,18'4",TRUE,3'0",63,FALSE,3'0");[[BR]]SetDormerThick(roofHandle, 2",1.83333");[[BR]]</Example>
    <ID>2170</ID>
    <IDName>funcCreateHipDormer</IDName>
    <InternalFunctionName>MP_CreateHipDormer</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetHipAttributes</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the attributes of a hip dormer in the referenced roof. </Description>
    <ShortDesc>Returns the attributes of a hip style dormer.</ShortDesc>
    <Comments>This will fail if the dormerID identifies a dormer of a different style, or the dormerID is not valid.[[BR]][[BR]]dormerID: Identifies the dormer for which to retrieve the information.[[BR]][[BR]]useHeight: true if the next value is the height of the dormer, if false, next value is the depth (front to back) of the dormer[[BR]]heightDepthValue: size of the dormer, either by height or depth; determined by previous parameter[[BR]][[BR]]bottomWidth: Dimension of bottom front edge of the dormer, left to right.[[BR]][[BR]]leftSlope: Angle of left dormer roof.[[BR]]rightSlope: Angle of right dormer roof.[[BR]]frontSlope: Angle of the front dormer roof face.[[BR]][[BR]]overhang: Distance roof projects past dormer walls.</Comments>
    <ID>2171</ID>
    <IDName>procGetHipAttributes</IDName>
    <InternalFunctionName>MP_GetHipAttributes</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>dormerID</Name>
        <Type>intMode</Type>
        <Desc>Index of dormer element.</Desc>
      </Param>
      <Param>
        <Name>useHeight</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns if height setting was used to created dormer.</Desc>
      </Param>
      <Param>
        <Name>heightDepth</Name>
        <Type>rVarMode</Type>
        <Desc>Returns height or depth value.</Desc>
      </Param>
      <Param>
        <Name>bottomWidth</Name>
        <Type>rVarMode</Type>
        <Desc>Returns bottom width.</Desc>
      </Param>
      <Param>
        <Name>overhang</Name>
        <Type>rVarMode</Type>
        <Desc>Returns overhang distance.</Desc>
      </Param>
      <Param>
        <Name>leftSlope</Name>
        <Type>rVarMode</Type>
        <Desc>Returns slope of left roof.</Desc>
      </Param>
      <Param>
        <Name>rightSlope</Name>
        <Type>rVarMode</Type>
        <Desc>Returns slope of right roof.</Desc>
      </Param>
      <Param>
        <Name>frontSlope</Name>
        <Type>rVarMode</Type>
        <Desc>Returns slope of front roof.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetHipAttributes</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the attributes of a hip dormer in the referenced roof. </Description>
    <ShortDesc>Sets the attributes of a hip style dormer.</ShortDesc>
    <Comments>dormerID: Identifies the dormer for which to set the information.[[BR]][[BR]]useHeight: Set to true if the next value is the height of the dormer, if false, next value is the depth (front to back) of the dormer.[[BR]]heightDepthValue: Size of the dormer, either by height or depth; determined by previous parameter.[[BR]][[BR]]bottomWidth: Dimension of bottom front edge of the dormer, left to right.[[BR]][[BR]]leftSlope: Angle of left dormer roof.[[BR]]rightSlope: Angle of right dormer roof.[[BR]]frontSlope: Angle of the front dormer roof face.[[BR]][[BR]]overhang: Distance roof projects past dormer walls.</Comments>
    <Example>roofHandle := CreateRoof(TRUE,5 1/2",5 1/2",4,9.52627");[[BR]]AppendRoofEdge(roofHandle,-77'10",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",21'4.81922",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-77'10",21'4.81922",#45°0'0",2'0",10'0");[[BR]]hipID := CreateHipDormer(roofHandle);[[BR]]SetHipAttributes(roofHandle, hipID,TRUE,6'0",10'0",2'0",#45°0'0",#45°0'0",#45°0'0");[[BR]]SetDormerAttributes(roofHandle, hipID, 3,18'4",TRUE,3'0",63,FALSE,3'0");[[BR]]SetDormerThick(roofHandle, 2",1.83333");[[BR]]</Example>
    <ID>2172</ID>
    <IDName>procSetHipAttributes</IDName>
    <InternalFunctionName>MP_SetHipAttributes</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>dormerID</Name>
        <Type>intMode</Type>
        <Desc>Index of dormer element.</Desc>
      </Param>
      <Param>
        <Name>useHeight</Name>
        <Type>boolMode</Type>
        <Desc>Use height setting to create dormer element.</Desc>
      </Param>
      <Param>
        <Name>heightDepthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Height/depth distance.</Desc>
      </Param>
      <Param>
        <Name>bottomWidthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Bottom width.</Desc>
      </Param>
      <Param>
        <Name>overhangDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Overhang distance.</Desc>
      </Param>
      <Param>
        <Name>leftAngle</Name>
        <Type>angleMode</Type>
        <Desc>Slope of left roof of dormer.</Desc>
      </Param>
      <Param>
        <Name>rightAngle</Name>
        <Type>angleMode</Type>
        <Desc>Slope of right roof of dormer.</Desc>
      </Param>
      <Param>
        <Name>frontAngle</Name>
        <Type>angleMode</Type>
        <Desc>Slope of front roof of dormer.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateBatDormer</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] creates a bat dormer in the referenced roof object.</Description>
    <ShortDesc>Creates a bat style dormer.</ShortDesc>
    <Comments>This only creates the object, SetDormerAttributes() &amp; SetBatAttributes() must still be called to define the attributes of the dormer.[[BR]][[BR]]</Comments>
    <Example>roofHandle := CreateRoof(TRUE,5 1/2",5 1/2",4,9.52627");[[BR]]AppendRoofEdge(roofHandle,-77'10",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",21'4.81922",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-77'10",21'4.81922",#45°0'0",2'0",10'0");[[BR]]batID := CreateBatDormer(roofHandle);[[BR]]SetBatAttributes(roofHandle,batID,TRUE,5'0",10'0",4'0",6'3",2'0",#8°0'0");[[BR]]SetDormerAttributes(roofHandle,batID,3,18'4",TRUE,3'0",63,FALSE,3'0");[[BR]]SetDormerThick(roofHandle, 2",1.83333");[[BR]]</Example>
    <ID>2173</ID>
    <IDName>funcCreateBatDormer</IDName>
    <InternalFunctionName>MP_CreateBatDormer</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetBatAttributes</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the attributes of a bat dormer in the referenced roof. </Description>
    <ShortDesc>Returns the attributes of a bat style dormer.</ShortDesc>
    <Comments>This will fail if the dormerID identifies a dormer of a different style, or the dormerID is not valid.[[BR]][[BR]]dormerID: Identifies the dormer for which to retrieve the information.[[BR]][[BR]]useHeight: Set to true if the next value is the height of the dormer, if false, next value is the depth (front to back) of the dormer.[[BR]]heightDepthValue: Size of the dormer, either by height or depth; determined by previous parameter.[[BR]][[BR]]bottomWidth: Dimension of bottom front edge of the dormer, left to right.[[BR]]baseHeight: Dimension of the bottom half of the dormer.[[BR]]topWidth: Dimension of the roof of the dormer.[[BR]][[BR]]topSlope: Angle of the dormer roof.[[BR]][[BR]]controlPoint: The distance from the side to where the curve starts.  Must be less than (bottomWidth - topWidth) / 2.</Comments>
    <ID>2174</ID>
    <IDName>procGetBatAttributes</IDName>
    <InternalFunctionName>MP_GetBatAttributes</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>dormerID</Name>
        <Type>intMode</Type>
        <Desc>Index of dormer element.</Desc>
      </Param>
      <Param>
        <Name>useHeight</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns if height setting was used to created dormer.</Desc>
      </Param>
      <Param>
        <Name>heightDepth</Name>
        <Type>rVarMode</Type>
        <Desc>Returns height or depth value.</Desc>
      </Param>
      <Param>
        <Name>bottomWidth</Name>
        <Type>rVarMode</Type>
        <Desc>Returns bottom width.</Desc>
      </Param>
      <Param>
        <Name>topWidth</Name>
        <Type>rVarMode</Type>
        <Desc>Returns top width.</Desc>
      </Param>
      <Param>
        <Name>baseHeight</Name>
        <Type>rVarMode</Type>
        <Desc>Returns base height.</Desc>
      </Param>
      <Param>
        <Name>controlPoint</Name>
        <Type>rVarMode</Type>
        <Desc>Returns the control point offset.</Desc>
      </Param>
      <Param>
        <Name>topSlope</Name>
        <Type>rVarMode</Type>
        <Desc>Returns the slope of the bat roof.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetBatAttributes</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the attributes of a bat dormer in the referenced roof. </Description>
    <ShortDesc>Set the attributes of a bat style dormer.</ShortDesc>
    <Comments>dormerID: Identifies the dormer for which to set the information.[[BR]][[BR]]useHeight: Set to true if the next value is the height of the dormer, if false, next value is the depth (front to back) of the dormer.[[BR]]heightDepthValue: Size of the dormer, either by height or depth; determined by previous parameter.[[BR]][[BR]]bottomWidth: Dimension of bottom front edge of the dormer, left to right..[[BR]]topWidth: Dimension of the roof of the dormer.[[BR]]baseHeight: Dimension of the bottom half of the dormer.[[BR]][[BR]]topSlope: Angle of the dormer roof.[[BR]][[BR]]controlPoint: The distance from the side to where the curve starts.  Must be less than (bottomWidth - topWidth) / 2.</Comments>
    <Example>roofHandle := CreateRoof(TRUE,5 1/2",5 1/2",4,9.52627");[[BR]]AppendRoofEdge(roofHandle,-77'10",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",21'4.81922",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-77'10",21'4.81922",#45°0'0",2'0",10'0");[[BR]]batID := CreateBatDormer(roofHandle);[[BR]]SetBatAttributes(roofHandle,batID,TRUE,5'0",10'0",4'0",6'3",2'0",#8°0'0");[[BR]]SetDormerAttributes(roofHandle,batID,3,18'4",TRUE,3'0",63,FALSE,3'0");[[BR]]SetDormerThick(roofHandle, 2",1.83333");[[BR]]</Example>
    <ID>2175</ID>
    <IDName>procSetBatAttributes</IDName>
    <InternalFunctionName>MP_SetBatAttributes</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>dormerID</Name>
        <Type>intMode</Type>
        <Desc>Index of dormer element.</Desc>
      </Param>
      <Param>
        <Name>useHeight</Name>
        <Type>boolMode</Type>
        <Desc>Use height setting to create dormer element.</Desc>
      </Param>
      <Param>
        <Name>heightDepthValueDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Height/depth distance.</Desc>
      </Param>
      <Param>
        <Name>bottomWidthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Bottom width.</Desc>
      </Param>
      <Param>
        <Name>topWidthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Top width.</Desc>
      </Param>
      <Param>
        <Name>baseHeightDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Base height of bat.</Desc>
      </Param>
      <Param>
        <Name>controlPointDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Offset distance of control point.</Desc>
      </Param>
      <Param>
        <Name>topAngle</Name>
        <Type>angleMode</Type>
        <Desc>Slope of bat roof.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveRoofElement</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] removes the specified roof element from the referenced roof. </Description>
    <ShortDesc>Removes a dormer or skylight from a roof object.</ShortDesc>
    <Comments>id is the value returned from Create...Dormer() or CreateSkylight() routine.</Comments>
    <ID>2176</ID>
    <IDName>procRemoveRoofElement</IDName>
    <InternalFunctionName>MP_RemoveRoofElement</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>id</Name>
        <Type>intMode</Type>
        <Desc>Index of dormer element.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AppendRoofEdge</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Function [[name]] creates a new edge in the referenced roof object.</Description>
    <ShortDesc>Creates an edge component in a roof object.</ShortDesc>
    <Comments>Vertex is appended to the end of the list of vertices.  Vertices define the outline of the roof.  Vertices must progress in a counter clock wise direction, when viewed from a top view, otherwise the roof cannot be built.[[BR]][[BR]]edgePt: Coordinate point for this edge[[BR]]slope: pitch of this roof edge[[BR]]projection: eave overhang[[BR]]eaveHeight: eave height</Comments>
    <Example>roofHandle := CreateRoof(TRUE,5 1/2",5 1/2",4,9.52627");[[BR]]AppendRoofEdge(roofHandle,-77'10",-25'3.18078",#45d0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",-25'3.18078",#45d0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",21'4.81922",#45d0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-77'10",21'4.81922",#45d0'0",2'0",10'0");[[BR]]shedID := CreateShedDormer(roofHandle);[[BR]]SetShedAttributes(roofHandle,shedID,TRUE,6'0",10'0",2'0",#8d0'0");[[BR]]SetDormerAttributes(roofHandle, shedID, 3,18'4",TRUE,3'0",63,FALSE,3'0");[[BR]]SetDormerThick(roofHandle, 2",1.83333");[[BR]]</Example>
    <ID>2177</ID>
    <IDName>procAppendRoofEdge</IDName>
    <InternalFunctionName>MP_AppendRoofEdge</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theRoof</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>edgePt</Name>
        <Type>globPtMode</Type>
        <Desc>Definition point of roof edge.</Desc>
      </Param>
      <Param>
        <Name>slopeAngle</Name>
        <Type>angleMode</Type>
        <Desc>Slope of roof edge.</Desc>
      </Param>
      <Param>
        <Name>projectionDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Eave overhang.</Desc>
      </Param>
      <Param>
        <Name>eaveHeightDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Eave height.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetRoofVertices</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the number of roof edges in the referenced roof object.</Description>
    <ShortDesc>Returns the number of roof edges in a roof object.</ShortDesc>
    <ID>2178</ID>
    <IDName>funcGetRoofVertices</IDName>
    <InternalFunctionName>MP_GetRoofVertices</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumRoofElements</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the number of roof elements (dormers and skylights) in the referenced roof object.</Description>
    <ShortDesc>Returns the number of dormers and skylights in a roof object.</ShortDesc>
    <ID>2179</ID>
    <IDName>funcGetNumRoofElements</IDName>
    <InternalFunctionName>MP_GetNumRoofElements</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDormerAttributes</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the attributes of a roof element in the referenced roof. </Description>
    <ShortDesc>Get dormer attrs</ShortDesc>
    <SeeAlso>Index2Name</SeeAlso>
    <Comments>This will fail if the dormerID identifies a skylight, or dormerID is not valid.[[BR]][[BR]]dormerID: Identifies the dormer for which to retrieve the information.[[BR]]edgeIndex: Index to which roof face this skylight is placed.  Value is one based.[[BR]][[BR]]cornerOffset: Distance from the vertex to the center of the dormer.[[BR]]isPerpOffset: Determines the meaning of the next parameter.  Set to true for the value to be the plan distance from the outline to the front of the dormer.  Set to false for offsetValue to set the distance from the top of the dormer to the bearing height.[[BR]]perpOrHeightOffset: Either the distance from the outline to the front of the dormer, or from the dormer roof to the floor.[[BR]][[BR]]symName: Symbol to place in the dormer, this is the window.[[BR]]centerSymbol: Set to true to vertically center the symbol in the dormer.  Doing so causes the next parameter to be ignored.[[BR]]Set to false to offset the symbol from the top of the dormer using the next parameter.[[BR]]symOffset: Distance from top of the dormer to symbol insertion point.[[BR]]</Comments>
    <ID>2180</ID>
    <IDName>procGetDormerAttributes</IDName>
    <InternalFunctionName>MP_GetDormerAttributes</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>dormerID</Name>
        <Type>intMode</Type>
        <Desc>Index of dormer element.</Desc>
      </Param>
      <Param>
        <Name>edgeIndex</Name>
        <Type>intVarMode</Type>
        <Desc>Index of roof edge.</Desc>
      </Param>
      <Param>
        <Name>cornerOffset</Name>
        <Type>rVarMode</Type>
        <Desc>Returns offset from roof edge corner.</Desc>
      </Param>
      <Param>
        <Name>isPerpOffset</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether perpendicular offset was used.</Desc>
      </Param>
      <Param>
        <Name>perpOrHeightOffset</Name>
        <Type>rVarMode</Type>
        <Desc>Returns perpendicualr or height offset.</Desc>
      </Param>
      <Param>
        <Name>symName</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns index of dormer symbol.</Desc>
      </Param>
      <Param>
        <Name>centerSymbol</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether symbol was centered.</Desc>
      </Param>
      <Param>
        <Name>symOffset</Name>
        <Type>rVarMode</Type>
        <Desc>Returns symbol offset distance.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDormerAttributes</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the attributes of a roof element in the referenced roof. </Description>
    <ShortDesc>Sets dormer attributes.</ShortDesc>
    <Comments>This will fail if the dormerID identifies a skylight, or dormerID is not valid.[[BR]][[BR]]dormerID: Identifies the dormer for which to set the information.[[BR]]edgeIndex: Index to which roof face this dormer is placed.  Value is one based.[[BR]][[BR]]cornerOffset: Distance from the vertex to the center of the dormer.[[BR]]isPerpOffset: Determines the meaning of the next parameter.  Set to true for the value to be the plan distance from the outline to the front of the dormer.  Set to false for offsetValue to set the distance from the top of the dormer to the bearing height.[[BR]]perpOrHeightOffset: Either the distance from the outline to the front of the dormer, or from the dormer roof to the floor.[[BR]][[BR]]symName: Symbol to place in the dormer, this is the window.[[BR]]centerSymbol: Set to true to vertically center the symbol in the dormer.  Doing so causes the next parameter to be ignored.[[BR]]Set to false to offset the symbol from the top of the dormer using the next parameter.[[BR]]symOffset: Distance from top of the dormer to symbol insertion point.</Comments>
    <Example>roofHandle := CreateRoof(TRUE,5 1/2",5 1/2",4,9.52627");[[BR]]AppendRoofEdge(roofHandle,-77'10",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",21'4.81922",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-77'10",21'4.81922",#45°0'0",2'0",10'0");[[BR]]shedID := CreateShedDormer(roofHandle);[[BR]]SetShedAttributes(roofHandle,shedID,TRUE,6'0",10'0",2'0",#8°0'0");[[BR]]SetDormerAttributes(roofHandle, shedID, 3,18'4",TRUE,3'0",63,FALSE,3'0");[[BR]]SetDormerThick(roofHandle, 2",1.83333");[[BR]]</Example>
    <ID>2181</ID>
    <IDName>procSetDormerAttributes</IDName>
    <InternalFunctionName>MP_SetDormerAttributes</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>dormerID</Name>
        <Type>intMode</Type>
        <Desc>Index of dormer element.</Desc>
      </Param>
      <Param>
        <Name>edgeIndex</Name>
        <Type>intMode</Type>
        <Desc>Index of roof edge.</Desc>
      </Param>
      <Param>
        <Name>cornerOffsetDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Corner offset distance.</Desc>
      </Param>
      <Param>
        <Name>isPerpOffset</Name>
        <Type>boolMode</Type>
        <Desc>Specifies perpendicular or height offset.</Desc>
      </Param>
      <Param>
        <Name>perpOrHeightOffsetDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Perpendicular or height offset distance.</Desc>
      </Param>
      <Param>
        <Name>symName</Name>
        <Type>longMode</Type>
        <Desc>Index of dormer symbol.</Desc>
      </Param>
      <Param>
        <Name>centerSymbol</Name>
        <Type>boolMode</Type>
        <Desc>Specifies if symbol is centered.</Desc>
      </Param>
      <Param>
        <Name>symOffsetDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Symbol offset distance.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Random</Name>
    <Version>800</Version>
    <Category>Math - General</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Procedure [[name]] returns a random number between 0.0 and 1.0.</Description>
    <ShortDesc>Generates a random number between 0.0 and 1.0</ShortDesc>
    <Comments>Generates a random number between 0.0 and 1.0</Comments>
    <ID>2182</ID>
    <IDName>funcRandom</IDName>
    <InternalFunctionName>MP_Random</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>StdRead</Name>
    <Version>800</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] will read data from a currently open text file. The variable length parameter list returns the read data in the specified parameters.[[BR]][[BR]]Supported data types include INTEGER, REAL, LONGINT, CHAR or STRING. Non STRING data values must be separated by a tab or space to be correctly read into variables. If the procedure encounters an EOF(end-of-file) marker, an error is generated. [[name]] does not position the file position pointer to the beginning of a new line after the procedure is called.[[BR]][[BR]][[name]] reads data according to the Pascal language standard. This differs from the Read procedure found in VectorScript primarily when reading STRING data. [[name]] will read all characters, including tabs and spaces, as a single string value. Read will detect tabs as delimiters, allowing multiple string values to be assigned to variables.</Description>
    <ShortDesc>Reads data from the currently open text file.</ShortDesc>
    <Example>GetFile(fName);[[BR]]IF NOT DidCancel THEN BEGIN[[BR]]Open(fName);[[BR]][[name]](partID,partName);[[BR]]END;</Example>
    <ID>2183</ID>
    <IDName>procStdRead</IDName>
    <InternalFunctionName>MP_StdRead</InternalFunctionName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
    <Params>
      <Param>
        <Name>z</Name>
        <Type>anyVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>StdReadLn</Name>
    <Version>800</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] will read data from a currently open text file. The variable length parameter list returns the read data in the specified parameters.[[BR]][[BR]]Supported data types include INTEGER, REAL, LONGINT, CHAR or STRING. Non STRING data values must be separated by a tab or space to be correctly read into variables. If the procedure encounters an EOF(end-of-file) marker, an error is generated. [[name]] positions the file position pointer to the beginning of a new line after the procedure is called.[[BR]][[BR]][[name]] reads data according to the Pascal language standard. This differs from the ReadLn procedure found in VectorScript primarily when reading STRING data. [[name]] will read all characters, including tabs and spaces, as a single string value. ReadLn will detect tabs as delimiters, allowing multiple string values to be assigned to variables.[[BR]][[BR]]</Description>
    <ShortDesc>Reads data from a currently open text file.</ShortDesc>
    <Example>GetFile(fName);[[BR]]IF NOT DidCancel THEN BEGIN[[BR]]Open(fName);[[BR]][[name]](partID,partName);[[BR]]END;</Example>
    <ID>2184</ID>
    <IDName>procStdReadLn</IDName>
    <InternalFunctionName>MP_StdReadLn</InternalFunctionName>
    <ModernName>StdReadLine</ModernName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
    <Params>
      <Param>
        <Name>z</Name>
        <Type>anyVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDormerThick</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets dormer roof and wall thicknesses for the referenced roof. </Description>
    <ShortDesc>Sets dormer roof and bearing wall thicknesses.</ShortDesc>
    <Example>roofHandle := CreateRoof(TRUE,5 1/2",5 1/2",4,9.52627");[[BR]]AppendRoofEdge(roofHandle,-77'10",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",-25'3.18078",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-41'2",21'4.81922",#45°0'0",2'0",10'0");[[BR]]AppendRoofEdge(roofHandle,-77'10",21'4.81922",#45°0'0",2'0",10'0");[[BR]]shedID := CreateShedDormer(roofHandle);[[BR]]SetShedAttributes(roofHandle,shedID,TRUE,6'0",10'0",2'0",#8°0'0");[[BR]]SetDormerAttributes(roofHandle, shedID, 3,18'4",TRUE,3'0",63,FALSE,3'0");[[BR]]SetDormerThick(roofHandle, 2",1.83333");[[BR]]</Example>
    <ID>2185</ID>
    <IDName>procSetDormerThick</IDName>
    <InternalFunctionName>MP_SetDormerThick</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof.</Desc>
      </Param>
      <Param>
        <Name>wallThickDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Wall thickness of dormer.</Desc>
      </Param>
      <Param>
        <Name>roofThickDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Roof thickness of dormer.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDormerThick</Name>
    <Version>800</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns dormer roof and wall thicknesses for the referenced roof. </Description>
    <ShortDesc>Return wall and roof thicknesses for a specified dormer.</ShortDesc>
    <ID>2186</ID>
    <IDName>procGetDormerThick</IDName>
    <InternalFunctionName>MP_GetDormerThick</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to dormer.</Desc>
      </Param>
      <Param>
        <Name>wallThick</Name>
        <Type>rVarMode</Type>
        <Desc>Returns dormer wall thickness.</Desc>
      </Param>
      <Param>
        <Name>roofThick</Name>
        <Type>rVarMode</Type>
        <Desc>Returns dormer roof thickness.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetSingularConstraint</Name>
    <Version>900</Version>
    <Category>Parametric Constraints</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Applies a parametric constraint to the referenced object. The geometry of the constraint is defined by the specified object vertices. [[BR]][[BR]][[note:ConstrainType]]</Description>
    <ShortDesc>Applies a parametric constraint to the referenced object.</ShortDesc>
    <Result>Returns a BOOLEAN value indicating whether the constraint was applied successfully.</Result>
    <Comments>Sets a constraint of type typeOfConstraint on the object h.  The valid values for typeOfConstraint are  4 (vertical), 5 (horizontal), 8 (distance), 9 (vertical distance), 10 (horizontal distance) and 11 (radius).  vertexA and vertexB indicate which vertices of the object define the geometry to be constrained.  A value of -1 indicates that a vertex parameter is not applicable.  It returns false if the constraint cannot be set.</Comments>
    <ID>2190</ID>
    <IDName>funcSetSingularConstraint</IDName>
    <InternalFunctionName>MP_SetSingularConstraint</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>typeOfConstraint</Name>
        <Type>intMode</Type>
        <Desc>Type of constraint to be applied.</Desc>
      </Param>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object accepting constraint.</Desc>
      </Param>
      <Param>
        <Name>vertexA</Name>
        <Type>intMode</Type>
        <Desc>Vertex defining the constraint geometry.</Desc>
      </Param>
      <Param>
        <Name>vertexB</Name>
        <Type>intMode</Type>
        <Desc>Vertex defining the constraint geometry.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetBinaryConstraint</Name>
    <Version>900</Version>
    <Category>Parametric Constraints</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Applies a binary parametric constraint to the referenced objects. The geometry of the constraint is defined by the specified object vertices. [[BR]][[BR]][[note:BinaryConstrainType]][[BR]][[BR]]To apply a constraint to an object within a symbol, use GetClosestPt to obtain an index to the object and pass the index to either [[p:6]] to use it as the first object or [[p:7]] to use it as the second object. In all other instances, pass 0 to both these parameters.</Description>
    <ShortDesc>Applies a binary parametric constraint to the referenced objects.</ShortDesc>
    <Result>Returns a BOOLEAN value indicating whether the constraint was successfully applied.</Result>
    <Comments>Sets a constraint on h1 and h2 on the designated vertices.  Valid values for typeOfConstraint are 1 (coincident), 2 (colinear), 3 (parallel), 6 (tangent), 7 (concentric), 8 (distance), 9 (horizontal distance), 10 (vertical distance), 12 (angle) and 13 (perpendicular).  obj1VertA and obj1VertB indicate which vertices of the first object to use in the constraint, and obj2VertA and obj2VertB indicate which vertices of the second object to use.  A value of -1 indicates that a vertex parameter is not applicable. The containedObj fields are for an index into the list of a container object such as a symbol.  This can be obtained from the GetClosestPt function.</Comments>
    <ID>2191</ID>
    <IDName>funcSetBinaryConstraint</IDName>
    <InternalFunctionName>MP_SetBinaryConstraint</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>typeOfConstraint</Name>
        <Type>intMode</Type>
        <Desc>Type of constraint to be applied.</Desc>
      </Param>
      <Param>
        <Name>h1</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object accepting constraint.</Desc>
      </Param>
      <Param>
        <Name>h2</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object accepting constraint.</Desc>
      </Param>
      <Param>
        <Name>obj1VertA</Name>
        <Type>intMode</Type>
        <Desc>Vertex on first object defining constraint geometry.</Desc>
      </Param>
      <Param>
        <Name>obj1VertB</Name>
        <Type>intMode</Type>
        <Desc>Vertex on first object defining constraint geometry.</Desc>
      </Param>
      <Param>
        <Name>obj2VertA</Name>
        <Type>intMode</Type>
        <Desc>Vertex on second object defining constraint geometry.</Desc>
      </Param>
      <Param>
        <Name>obj2VertB</Name>
        <Type>intMode</Type>
        <Desc>Vertex on second object defining constraint geometry.</Desc>
      </Param>
      <Param>
        <Name>containedObj1</Name>
        <Type>longMode</Type>
        <Desc>Object index, obtained from the GetClosestPt function.</Desc>
      </Param>
      <Param>
        <Name>containedObj2</Name>
        <Type>longMode</Type>
        <Desc>Object index, obtained from the GetClosestPt function.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSingularConstraint</Name>
    <Version>900</Version>
    <Category>Parametric Constraints</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns the type of constraint applied to the referenced object.[[BR]][[BR]][[note:ConstrainType]]</Description>
    <ShortDesc>Returns the type of constraint applied to the referenced object.</ShortDesc>
    <Result>Returns a HANDLE to the constraint if exists, otherwise returns NIL.</Result>
    <ID>2192</ID>
    <IDName>funcGetSingularConstraint</IDName>
    <InternalFunctionName>MP_GetSingularConstraint</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>typeOfConstraint</Name>
        <Type>intMode</Type>
        <Desc>Type of constraint to be returned.</Desc>
      </Param>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>vertexA</Name>
        <Type>intMode</Type>
        <Desc>Vertex defining the constraint geometry.</Desc>
      </Param>
      <Param>
        <Name>vertexB</Name>
        <Type>intMode</Type>
        <Desc>Vertex defining the constraint geometry.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WritelnOnly</Name>
    <ChangedDate>2011:05:16T16:30:00</ChangedDate>
    <Version>800</Version>
    <OldVersion>850</OldVersion>
    <Category>File I/O</Category>
    <Type>Constant</Type>
    <Comments>This is a very special constant used internally by the parser. See the note for special (2) below as it applies to constants. - PCP[[BR]][[BR]]As of 8/27/99 this constant is not used any more ?</Comments>
    <ID>283</ID>
    <IDName>procWritelnOnly</IDName>
    <ImplementationDetails>Special</ImplementationDetails>
  </Item>

  <Item>
    <Name>HUngroup</Name>
    <Version>850</Version>
    <Category>Objects - Groups</Category>
    <Type>Procedure</Type>
    <Description>Decomposes the referenced group into component objects.</Description>
    <ShortDesc>Decomposes the referenced group into component objects.</ShortDesc>
    <ID>2194</ID>
    <IDName>procHUngroup</IDName>
    <InternalFunctionName>MP_HUngroup</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to group.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddSurface</Name>
    <Version>850</Version>
    <Category>Objects - 2D</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a new surface object by combining the two referenced surface objects. If the combination is successful (if the objects overlap), it deletes the original surface objects and returns the handle of the resultant object.[[BR]]</Description>
    <ShortDesc>Creates a new surface object by combining the two referenced surface objects. </ShortDesc>
    <Result>Returns a HANDLE to a new surface object.</Result>
    <SeeAlso>ClipSurface</SeeAlso>
    <Example>PROCEDURE AddSurfaceExample;[[BR]]VAR[[BR]]	h1, h2, h3 :HANDLE;[[BR]]BEGIN[[BR]]	DSelectAll;[[BR]]	CallTool(-203);[[BR]]	h1 := FSActLayer;[[BR]]	DSelectAll;[[BR]]	CallTool(-203);[[BR]]	h2 := FSActLayer;[[BR]]	h3 := AddSurface(h1, h2);[[BR]]	IF h3 &lt;&gt; nil THEN SetFPat(h3, 5);[[BR]]END;[[BR]]RUN(AddSurfaceExample);</Example>
    <ID>2195</ID>
    <IDName>funcAddSurface</IDName>
    <InternalFunctionName>MP_AddSurface</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>s1</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>s2</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IntersectSurface</Name>
    <Version>850</Version>
    <Category>Objects - 2D</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates new surface objects that are the intersection of  the two referenced surface objects. The original surface objects are not modified. The new objects get "inserted" into the drawing list, after s2, and before the next object after that.[[BR]]</Description>
    <ShortDesc>Returns the intersection of surfaces s1 and s2 leaving s1 and s2 unmodified.  If multiple intersecting surfaces exist, a group handle of those surfaces is returned.</ShortDesc>
    <Result>Returns a HANDLE to the new surface object, or to a group containing multiple surface objects.</Result>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	h1, h2, h3, h4 :HANDLE;[[BR]]	pt :VECTOR;[[BR]]BEGIN[[BR]]	h1 := NIL;[[BR]]	WHILE h1 = NIL DO BEGIN[[BR]]		Message('Pick the first object...');[[BR]]		GetPt(pt.x, pt.y);[[BR]]		h1 := PickObject(pt.x, pt.y);[[BR]]	END;[[BR]]	h2 := NIL;[[BR]]	WHILE h2 = NIL DO BEGIN[[BR]]		Message('Pick the second object...');[[BR]]		GetPt(pt.x, pt.y);[[BR]]		h2 := PickObject(pt.x, pt.y);[[BR]]	END; [[BR]][[BR]]	{Capture the handle of the next object.}[[BR]]   	h3 := NextObj(h2);[[BR]][[BR]]	{Now create the intersection surface(s).}[[BR]]	h4 := IntersectSurface(h1, h2);[[BR]][[BR]]	{Now find the intersection surface(s).}[[BR]]	WHILE h4 &lt;&gt; h3 DO BEGIN[[BR]]		SetFPat(h4, 3);[[BR]]		h4 := NextObj(h4);[[BR]]	END;[[BR]]	ClrMessage;[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2196</ID>
    <IDName>funcIntersectSurface</IDName>
    <InternalFunctionName>MP_IntersectSurface</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>s1</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>s2</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ClipSurface</Name>
    <Version>850</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Creates a new surface object by subtracting the intersection of surfaces [[p:1]] and [[p:2]] from [[p:1]].[[BR]]</Description>
    <ShortDesc>Creates a new surface object by subtracting the intersection of surfaces [[p:1]] and [[p:2]] from [[p:1]].</ShortDesc>
    <Example>PROCEDURE ClipSurfaceExample;[[BR]]VAR[[BR]]	h1, h2, h3 :HANDLE;[[BR]]BEGIN[[BR]]	DSelectAll;[[BR]]	CallTool(-203);[[BR]]	h1 := FSActLayer;[[BR]]	DSelectAll;[[BR]]	CallTool(-203);[[BR]]	h2 := FSActLayer;[[BR]]	ClipSurface(h1, h2);[[BR]]	h3 := PrevObj(h2);[[BR]]	IF h3 &lt;&gt; h1 THEN SetFPat(h3, 5);[[BR]]END;[[BR]]RUN(ClipSurfaceExample);[[BR]]</Example>
    <ID>2197</ID>
    <IDName>procClipSurface</IDName>
    <InternalFunctionName>MP_ClipSurface</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>s1</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>s2</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HMoveForward</Name>
    <Version>850</Version>
    <Category>Object Editing</Category>
    <Type>Procedure</Type>
    <Description>Move the referenced object forward in the object stacking order. If [[p:2]] is TRUE, the object will be moved to the front of the stacking order.</Description>
    <ShortDesc>Move the referenced object forward in the object stacking order. If [[p:2]] is TRUE, the object will be moved to the front of the stacking order.  If not -  the object will be moved in front of the next object in stacking order that it overlaps.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]BEGIN[[BR]]	HMoveForward(FSActLayer, FALSE);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2198</ID>
    <IDName>procHMoveForward</IDName>
    <InternalFunctionName>MP_HMoveForward</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>toFront</Name>
        <Type>boolMode</Type>
        <Desc>Move object to front of stacking order.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HMoveBackward</Name>
    <Version>850</Version>
    <Category>Object Editing</Category>
    <Type>Procedure</Type>
    <Description>Move the referenced object backward in the object stacking order. If [[p:2]] is TRUE, the object will be moved to the back of the stacking order.</Description>
    <ShortDesc>Move the referenced object backward in the object stacking order. If [[p:2]] is TRUE, the object will be moved to the back of the stacking order. If [[p:2]] is not true, the object will be moved in back of the next object in stacking order that it overlaps.</ShortDesc>
    <ID>2199</ID>
    <IDName>procHMoveBackward</IDName>
    <InternalFunctionName>MP_HMoveBackward</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>toBack</Name>
        <Type>boolMode</Type>
        <Desc>Move to back of stacking order.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetParent</Name>
    <Version>850</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns a handle to the parent container object of the referenced object. If the object does not have a container, a handle to the objects' layer will be returned.</Description>
    <ShortDesc>Returns a handle to the parent container object of the referenced object. If the object does not have a container, a handle to the objects' layer will be returned.</ShortDesc>
    <Result>Returns a HANDLE to the parent object or layer.</Result>
    <ID>2200</ID>
    <IDName>funcGetParent</IDName>
    <InternalFunctionName>MP_GetParent</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWallControlOffset</Name>
    <Version>850</Version>
    <OldVersion>1250</OldVersion>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the default wall control line offset value.</Description>
    <ShortDesc>Returns the wall control line offset value.</ShortDesc>
    <ID>2201</ID>
    <IDName>funcGetWallControlOffset</IDName>
    <InternalFunctionName>MP_GetWallControlOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>SetWallControlOffset</Name>
    <Version>850</Version>
    <OldVersion>1250</OldVersion>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Sets the default wall control line offset value.</Description>
    <ShortDesc>Sets wall control line offset value.</ShortDesc>
    <ID>2202</ID>
    <IDName>procSetWallControlOffset</IDName>
    <InternalFunctionName>MP_SetWallControlOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>offset</Name>
        <Type>realMode</Type>
        <Desc>New offset value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertSymbolInFolder</Name>
    <Version>850</Version>
    <Category>Objects - Symbols</Category>
    <Type>Procedure</Type>
    <Description>Inserts a symbol definition into the referenced symbol folder.</Description>
    <ShortDesc>Inserts a symbol definition into the referenced symbol folder.</ShortDesc>
    <ID>2203</ID>
    <IDName>procInsertSymbolInFolder</IDName>
    <InternalFunctionName>MP_InsertSymbolInFolder</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>targetFolder</Name>
        <Type>handleMode</Type>
        <Desc>Handle to symbol folder.</Desc>
      </Param>
      <Param>
        <Name>symbolDef</Name>
        <Type>handleMode</Type>
        <Desc>Handle to symbol definition.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLayerOptions</Name>
    <Version>850</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns layer visibility setting for the active document.[[BR]][[BR]][[note:LayerClassOptions]]</Description>
    <ShortDesc>Returns layer visibility setting for the active document.</ShortDesc>
    <Result>Returns an INTEGER indicating the layer visibility status of the document.</Result>
    <SeeAlso>SetLayerOptions</SeeAlso>
    <ID>2204</ID>
    <IDName>funcGetLayerOptions</IDName>
    <InternalFunctionName>MP_GetLayerOptions</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>SetLayerOptions</Name>
    <Version>850</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Sets layer visibility setting for the active document.[[BR]][[BR]][[note:LayerClassOptions]]</Description>
    <ShortDesc>Sets layer visibility setting for the active document.</ShortDesc>
    <SeeAlso>GetLayerOptions</SeeAlso>
    <ID>2205</ID>
    <IDName>procSetLayerOptions</IDName>
    <InternalFunctionName>MP_SetLayerOptions</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>layerOpts</Name>
        <Type>intMode</Type>
        <Desc>New layer visibility setting for document.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClassOptions</Name>
    <Version>850</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the class visibility setting for the active document.[[BR]][[BR]][[note:LayerClassOptions]]</Description>
    <ShortDesc>Returns the class visibility setting for the active document.</ShortDesc>
    <Result>An INTEGER value indicating the current class visibility setting for the document.</Result>
    <SeeAlso>SetClassOptions</SeeAlso>
    <ID>2206</ID>
    <IDName>funcGetClassOptions</IDName>
    <InternalFunctionName>MP_GetClassOptions</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>SetClassOptions</Name>
    <Version>850</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Sets class visibility setting for the active document.[[BR]][[BR]][[note:LayerClassOptions]]</Description>
    <ShortDesc>Sets class visibility setting for the active document.</ShortDesc>
    <ID>2207</ID>
    <IDName>procSetClassOptions</IDName>
    <InternalFunctionName>MP_SetClassOptions</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>classOpts</Name>
        <Type>intMode</Type>
        <Desc>New class visibility setting.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLayerByName</Name>
    <Version>850</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns a handle to the specified layer.</Description>
    <ShortDesc>Returns a handle to the specified layer.</ShortDesc>
    <Result>Returns a HANDLE to the layer.</Result>
    <ID>2208</ID>
    <IDName>funcGetLayerByName</IDName>
    <InternalFunctionName>MP_GetLayerByName</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>layerName</Name>
        <Type>stringMode</Type>
        <Desc>Name of layer.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RenameClass</Name>
    <Version>850</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Renames the specified class. [[BR]][[BR]]All objects assigned to the class being renamed are updated.</Description>
    <ShortDesc>Renames the specified class. </ShortDesc>
    <ID>2209</ID>
    <IDName>procRenameClass</IDName>
    <InternalFunctionName>MP_RenameClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Existing name of the class.</Desc>
      </Param>
      <Param>
        <Name>newName</Name>
        <Type>stringMode</Type>
        <Desc>New name for the class.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTickCount</Name>
    <Version>850</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Returns number of ticks (1/60th second) since system startup.</Description>
    <ShortDesc>Returns number of ticks (1/60th second) since system startup.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	tick1, tick2 :LONGINT;[[BR]]BEGIN[[BR]]	tick1 := GetTickCount;[[BR]]	ForEachObject(ResetObject, (T=86));[[BR]]	tick2 := GetTickCount;[[BR]]	Message('Seconds elapsed equals: ', (tick2 - tick1) / 60);[[BR]]END;[[BR]]Run(Example);</Example>
    <ID>2210</ID>
    <IDName>funcGetTickCount</IDName>
    <InternalFunctionName>MP_GetTickCount</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>CrossProduct</Name>
    <Version>850</Version>
    <Category>Math - Vectors</Category>
    <Type>Function</Type>
    <ReturnType>VECTOR</ReturnType>
    <Description>Returns the cross product of the two specified vectors.[[BR]][[BR]]The cross product is also known as the vector product of the two vectors. The result is a vector whose magnitude is equivalent to the product of the magnitudes of the two vectors multiplied by the sine of the smaller angle between the two vectors. The direction of the resultant vector is perpendicular to a plane formed by the two source vectors.</Description>
    <ShortDesc>Returns the cross product of the two specified vectors.</ShortDesc>
    <Result>Returns a VECTOR which is the cross product of [[p:1]] and [[p:2]].</Result>
    <Comments>This is provided for cross-platform compatibility.</Comments>
    <ID>2211</ID>
    <IDName>funcCrossProduct</IDName>
    <InternalFunctionName>MP_CrossProduct</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>v1</Name>
        <Type>vecMode</Type>
        <Desc>Source vector 1.</Desc>
      </Param>
      <Param>
        <Name>v2</Name>
        <Type>vecMode</Type>
        <Desc>Source vector 2.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLastFileErr</Name>
    <Version>850</Version>
    <Category>File I/O</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns an error code indicating whether an error occured during a file operation.[[BR]][[BR]]This function should be called after file I/O calls such as Open() or Rewrite().</Description>
    <ShortDesc>Returns an error code indicating whether an error occured during a file operation.</ShortDesc>
    <Example>UseDefaultFileErrorHandling(FALSE);[[BR]]Open(Concat(pathName, fileName));[[BR]]errorCode := GetLastFileErr;[[BR]]IF errorCode &lt;&gt; 0 THEN[[BR]]	CASE errorCode OF[[BR]]		 2: AlrtDialog(Concat('The file "', fileName, '" cannot be processed because the hard drive is full.'));[[BR]]		 4: AlrtDialog(Concat('End of file "',   fileName, '" reached prematurely.'));[[BR]]		 5: AlrtDialog(Concat('The file "', fileName, '" is locked.'));[[BR]]		 6: AlrtDialog(Concat('The file "', fileName, '" not found.'));[[BR]]		10: AlrtDialog(Concat('The file "', fileName, '" currently in use by another program.'));[[BR]]		13: AlrtDialog(Concat('The file path "', pathName, '" does not exist.'));[[BR]]		OTHERWISE AlrtDialog(Concat('The file "',fileName,'" has encountered an undetermined error.'));[[BR]]	END;[[BR]]</Example>
    <ID>2212</ID>
    <IDName>funcGetLastFileErr</IDName>
    <InternalFunctionName>MP_GetLastFileErr</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>UseDefaultFileErrorHandling</Name>
    <Version>850</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>Enables or disables file I/O alert dialogs.[[BR]][[BR]]Use this function with GetLastFileErr() to implement custom error handling for file operations.</Description>
    <ShortDesc>Enable or disable alert dialogs when File I/O errors occur.  </ShortDesc>
    <SeeAlso>GetLastFileErr</SeeAlso>
    <ID>2213</ID>
    <IDName>procUseDefaultFileErrorHandling</IDName>
    <InternalFunctionName>MP_UseDefaultFileErrorHandling</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>enable</Name>
        <Type>boolMode</Type>
        <Desc>Status of file error dialog usage.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetSymbolOptionsN</Name>
    <Version>850</Version>
    <Category>Objects - Symbols</Category>
    <Type>Procedure</Type>
    <Description>Sets the default class, insert  options, and break options for the specified symbol. [[BR]][[BR]][[note:SymInsertOptionTable]]</Description>
    <ShortDesc>Sets the default class, insert  options, and break options for the specified symbol. </ShortDesc>
    <Comments>Sets the insert and break options for the master symbol named &lt;name&gt;. [[BR]][[BR]]The insertMode options are:[[BR]]0 = insert on the center line of the wall[[BR]]1 = insert on the edge of the wall[[BR]][[BR]]The breakMode options are:[[BR]]1 = Full break with caps, both edges of the wall are broken and cap lines close off the two broken portions of the wall.[[BR]]2 = Full break with no caps, both edges of the wall  are broken and there are no cap lines.[[BR]]3 = Half break, for edge insertions only, wall edge is broken on the same edge that the symbol is inserted on.[[BR]]4 = No break, there is no break in the wall, the symbol is drawn on top of the wall.[[BR]][[BR]]See also Get SymbolOptions[[BR]][[BR]][sd 8/18/98][[BR]][[BR]]The className should specify the name of a class that exists in the parent document. After a class is set, all instances of[[BR]]this symbol will be marked as members of the class.</Comments>
    <ID>2214</ID>
    <IDName>procSetSymbolOptionsN</IDName>
    <InternalFunctionName>MP_SetSymbolOptionsN</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Name of symbol.</Desc>
      </Param>
      <Param>
        <Name>insertMode</Name>
        <Type>intMode</Type>
        <Desc>Insertion mode of symbol.</Desc>
      </Param>
      <Param>
        <Name>breakMode</Name>
        <Type>intMode</Type>
        <Desc>Break mode for symbol.</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Default class for symbol.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSymbolOptionsN</Name>
    <Version>850</Version>
    <Category>Objects - Symbols</Category>
    <Type>Procedure</Type>
    <Description>Returns default class, insert  options, and break options for the specified symbol. [[BR]][[BR]][[note:SymInsertOptionTable]]</Description>
    <ShortDesc>Returns default class, insert  options, and break options for the specified symbol. </ShortDesc>
    <Comments>Gets the insertion options from the master symbol named &lt;name&gt;.[[BR]][[BR]]See SetSymbolOptions.[[BR]][[BR]][8/18/98]</Comments>
    <ID>2215</ID>
    <IDName>procGetSymbolOptionsN</IDName>
    <InternalFunctionName>MP_GetSymbolOptionsN</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Name of symbol.</Desc>
      </Param>
      <Param>
        <Name>insertMode</Name>
        <Type>intVarMode</Type>
        <Desc>Returns insertion mode of symbol.</Desc>
      </Param>
      <Param>
        <Name>breakMode</Name>
        <Type>intVarMode</Type>
        <Desc>Returns break mode of symbol.</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>strVarMode</Type>
        <Desc>Default class of symbol.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSprdSortSumColumns</Name>
    <Version>850</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the sorting and summation options for a database row. </Description>
    <ShortDesc>Returns the sorting and summation options for a database row. </ShortDesc>
    <Comments>Gets sorting for a database row.  The sortCol1, sortCol2, and sortCol3 values specify the primary, secondary and tertiary sorts for the database row.  For descending sorts, a positive column is returned; for ascending sorts, a negative column is returned  For no sort,  0 is returned.  Sum works the same way.[[BR]]OBSOLETE for Version 9: see new GetWSColumnOperators. [VML 01/09/01]</Comments>
    <ID>2216</ID>
    <IDName>procGetSprdSortSumColumns</IDName>
    <InternalFunctionName>MP_GetSprdSortSumColumns</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>sheetHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Database row to be queried.</Desc>
      </Param>
      <Param>
        <Name>sortCol1</Name>
        <Type>intVarMode</Type>
        <Desc>Primary sort column.</Desc>
      </Param>
      <Param>
        <Name>sortCol2</Name>
        <Type>intVarMode</Type>
        <Desc>Secondary sort column.</Desc>
      </Param>
      <Param>
        <Name>sortCol3</Name>
        <Type>intVarMode</Type>
        <Desc>Tertiary sort column.</Desc>
      </Param>
      <Param>
        <Name>sumCol1</Name>
        <Type>intVarMode</Type>
        <Desc>Primary summation column.</Desc>
      </Param>
      <Param>
        <Name>sumCol2</Name>
        <Type>intVarMode</Type>
        <Desc>Secondary summation column.</Desc>
      </Param>
      <Param>
        <Name>sumCol3</Name>
        <Type>intVarMode</Type>
        <Desc>Tertiary summation column.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetSprdSortSumColumns</Name>
    <Version>850</Version>
    <OldVersion>900</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the sorting and summation options for a database row. </Description>
    <ShortDesc>Sets the sorting and summation options for a database row. </ShortDesc>
    <Comments>Sets sorting and summation for a database row.  The sortCol1, sortCol2, and sortCol3 values specify the primary, secondary and tertiary sorts for the database row.  Pass a positive column for a descending sort; pass a negative column for an ascending sort.  For no sort,  pass 0 as the column.  Sum works the same way.[[BR]]OBSOLETE for Version 9: see new SetWSColumnOperators. [VML 01/09/01]</Comments>
    <ID>2217</ID>
    <IDName>procSetSprdSortSumColumns</IDName>
    <InternalFunctionName>MP_SetSprdSortSumColumns</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>sheetHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Database row of worksheet.</Desc>
      </Param>
      <Param>
        <Name>sortCol1</Name>
        <Type>intMode</Type>
        <Desc>Primary sort column.</Desc>
      </Param>
      <Param>
        <Name>sortCol2</Name>
        <Type>intMode</Type>
        <Desc>Secondary sort column.</Desc>
      </Param>
      <Param>
        <Name>sortCol3</Name>
        <Type>intMode</Type>
        <Desc>Tertiary sort column.</Desc>
      </Param>
      <Param>
        <Name>sumCol1</Name>
        <Type>intMode</Type>
        <Desc>Primary summation column.</Desc>
      </Param>
      <Param>
        <Name>sumCol2</Name>
        <Type>intMode</Type>
        <Desc>Secondary summation column.</Desc>
      </Param>
      <Param>
        <Name>sumCol3</Name>
        <Type>intMode</Type>
        <Desc>Tertiary summation column.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>QTInitialize</Name>
    <Version>850</Version>
    <Category>Special - QuickTime</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Initializes QuickTime and returns the QuckTime version number.</Description>
    <ShortDesc>Initializes QuickTime and returns the version number. </ShortDesc>
    <Result>Returns the QuickTime version number. A value of 0 indicates QuickTime is not available.</Result>
    <Comments>We don't support QuickTime versions less than 3.0, so this function will return 0 in that scenario.</Comments>
    <ID>2218</ID>
    <IDName>funcQTInitialize</IDName>
    <InternalFunctionName>MP_QTInitialize</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>QTTerminate</Name>
    <Version>850</Version>
    <Category>Special - QuickTime</Category>
    <Type>Procedure</Type>
    <Description>Disables QuickTime and disposes of internal QuickTime data structures.</Description>
    <ShortDesc>Disables QuickTime and disposes of internal QuickTime data structures.</ShortDesc>
    <ID>2219</ID>
    <IDName>procQTTerminate</IDName>
    <InternalFunctionName>MP_QTTerminate</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>QTSetMovieOptions</Name>
    <ChangedDate>2017:03:08T18:12:00</ChangedDate>
    <Version>850</Version>
    <Category>Special - QuickTime</Category>
    <Type>Procedure</Type>
    <Description>Sets the QuickTime movie frame rate and key frame rate for the referenced movie stream. The standard QuickTime compression options dialog can also be optionally displayed.</Description>
    <ShortDesc>Sets the QuickTime movie frame rate and key frame rate. The standard QuickTime compression options dialog can also be optionally displayed.</ShortDesc>
    <ID>2220</ID>
    <IDName>procQTSetMovieOptions</IDName>
    <InternalFunctionName>MP_QTSetMovieOptions</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>movieRef</Name>
        <Type>intMode</Type>
        <Desc>Index of QuickTime movie stream.</Desc>
      </Param>
      <Param>
        <Name>frameRate</Name>
        <Type>realMode</Type>
        <Desc>Frame rate of movie.</Desc>
      </Param>
      <Param>
        <Name>keyFrameRate</Name>
        <Type>longMode</Type>
        <Desc>Key frame rate of movie.</Desc>
      </Param>
      <Param>
        <Name>useDlg</Name>
        <Type>boolMode</Type>
        <Desc>Display QuickTime comprssion options dialog.</Desc>
      </Param>
      <Param>
        <Name>useDlgPreview</Name>
        <Type>boolMode</Type>
        <Desc>Show dialog preview.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>QTGetMovieOptions</Name>
    <Version>850</Version>
    <Category>Special - QuickTime</Category>
    <Type>Procedure</Type>
    <Description>Retrieves the QuickTime movie frame rate and key frame rate for the referenced movie stream.</Description>
    <ShortDesc>Retrieves the QuickTime movie frame rate and key frame rate for the referenced movie stream.</ShortDesc>
    <ID>2221</ID>
    <IDName>procQTGetMovieOptions</IDName>
    <InternalFunctionName>MP_QTGetMovieOptions</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>movieRef</Name>
        <Type>intMode</Type>
        <Desc>Index of QuickTime movie stream.</Desc>
      </Param>
      <Param>
        <Name>frameRate</Name>
        <Type>rVarMode</Type>
        <Desc>Frame rate of movie</Desc>
      </Param>
      <Param>
        <Name>keyFrameRate</Name>
        <Type>lngVarMode</Type>
        <Desc>Key frame rate of movie.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>QTOpenMovieFile</Name>
    <ChangedDate>2017:04:14T10:38:00</ChangedDate>
    <Version>850</Version>
    <Category>Special - QuickTime</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Creates or opens a QuickTime movie file for writing.[[BR]][[BR]]</Description>
    <ShortDesc>Creates or opens a QuickTime movie file for writing.</ShortDesc>
    <Result>An INTEGER index value identifying the open movie stream. A value of -1 indicates the stream could not be opened.</Result>
    <ID>2222</ID>
    <IDName>funcQTOpenMovieFile</IDName>
    <InternalFunctionName>MP_QTOpenMovieFile</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>fileName</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Name of movie file.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>QTCloseMovieFile</Name>
    <Version>850</Version>
    <Category>Special - QuickTime</Category>
    <Type>Procedure</Type>
    <Description>Closes the specified QuickTime movie file.</Description>
    <ShortDesc>Closes the specified QuickTime movie file.</ShortDesc>
    <ID>2223</ID>
    <IDName>procQTCloseMovieFile</IDName>
    <InternalFunctionName>MP_QTCloseMovieFile</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>movieRef</Name>
        <Type>intMode</Type>
        <Desc>Index of QuickTime movie stream.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>QTWriteFrame</Name>
    <Version>850</Version>
    <Category>Special - QuickTime</Category>
    <Type>Procedure</Type>
    <Description>Captures the active document window and writes a frame to the specified QuickTime movie file.</Description>
    <ShortDesc>Captures the active document window and writes a frame to the specified QuickTime movie file.</ShortDesc>
    <Comments>This function will likely also draw to the screen as a pseudo-progress indicator.</Comments>
    <ID>2224</ID>
    <IDName>procQTWriteFrame</IDName>
    <InternalFunctionName>MP_QTWriteFrame</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>movieRef</Name>
        <Type>intMode</Type>
        <Desc>Index of QuickTime movie stream.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateCustomObject</Name>
    <Version>850</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a custom object instance at the specified location and angle of rotation. For the objectName, use the "internal" plug-in name (the one assigned in the plug-in editor), as opposed to the filename (which can be different).[[BR]]</Description>
    <ShortDesc>Creates a custom object instance at specified location and angle of rotation.</ShortDesc>
    <Result>Returns a HANDLE to the new object.</Result>
    <SeeAlso>CreateCustomObjectPath</SeeAlso>
    <ID>2225</ID>
    <IDName>funcCreateCustomObject</IDName>
    <InternalFunctionName>MP_CreateCustomObject</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectName</Name>
        <Type>stringMode</Type>
        <Desc>Name of object.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>Insertion point of object instance.</Desc>
      </Param>
      <Param>
        <Name>rotationAngle</Name>
        <Type>angleMode</Type>
        <Desc>Rotation angle (in degrees) of object instance.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ForEachObjectInLayer</Name>
    <Version>850</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Traverses through all objects according to specified search options and applies the specified action to each object.  The 'actionFunc' procedure should return false to continue with next object, or return true to stop the traversal.[[BR]][[BR]][[note:ForEachLayer]]</Description>
    <ShortDesc>Traverses through all objects according to specified search options and applies the specified action to each object.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]][[BR]]FUNCTION MakeItRed(h :HANDLE) :BOOLEAN;[[BR]]VAR[[BR]]	r, g, b :LONGINT;[[BR]]BEGIN[[BR]]	ColorIndexToRGB(7, r, g, b);[[BR]]	SetFillBack(h, r, g, b);[[BR]]END;[[BR]]	[[BR]]BEGIN[[BR]]	ForEachObjectInLayer(MakeItRed, 2, 0, 4);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2226</ID>
    <IDName>procForEachObjectInLayer</IDName>
    <SpecialOverride>CHECKFEOINLAYER(procForEachObjectInLayer, MP_FEOInLayer, userProcMode, intMode, intMode, intMode);</SpecialOverride>
    <Implemented>True</Implemented>
    <ImplementationDetails>Special</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>actionFunc</Name>
        <Type>userProcMode</Type>
        <Desc>Subroutine which performs operation on found objects.</Desc>
      </Param>
      <Param>
        <Name>objOptions</Name>
        <Type>intMode</Type>
        <Desc>Object selection option index.</Desc>
      </Param>
      <Param>
        <Name>travOptions</Name>
        <Type>intMode</Type>
        <Desc>Search options index.</Desc>
      </Param>
      <Param>
        <Name>layerOptions</Name>
        <Type>intMode</Type>
        <Desc>Layer selection option index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ForEachObjectInList</Name>
    <Version>850</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Processes all items in the specified list and and applies the specified action to each item.[[BR]][[BR]][[note:ForEachList]]</Description>
    <ShortDesc>Processes all items in the specified list and and applies the specified action to each item.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]CONST[[BR]]   pioName = 'Complex Window 2';[[BR]]   parameter = 'MeasureHeight';[[BR]]   value = 'Head of Window';[[BR]]   [[BR]]FUNCTION DoIt(h :HANDLE) :BOOLEAN;[[BR]]BEGIN[[BR]]   h := FInSymDef(h);[[BR]]   SetRField(h, pioName, parameter, value);[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]    ForEachObjectInList(DoIt, 0, 0, FSymDef);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2227</ID>
    <IDName>procForEachObjectInList</IDName>
    <SpecialOverride>CHECKFEOINLIST(procForEachObjectInList, MP_FEOInList, userProcMode, intMode, intMode, handleMode);</SpecialOverride>
    <Implemented>True</Implemented>
    <ImplementationDetails>Special</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>actionFunc</Name>
        <Type>userProcMode</Type>
        <Desc>Subroutine which performs operation on found objects.</Desc>
      </Param>
      <Param>
        <Name>objOptions</Name>
        <Type>intMode</Type>
        <Desc>Object selection option index.</Desc>
      </Param>
      <Param>
        <Name>travOptions</Name>
        <Type>intMode</Type>
        <Desc>Search options index.</Desc>
      </Param>
      <Param>
        <Name>list</Name>
        <Type>handleMode</Type>
        <Desc>Handle to first item in list.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Get2DPt</Name>
    <Version>850</Version>
    <Category>Object Info</Category>
    <Type>Procedure</Type>
    <Description>Returns the location of the specified vertex of a referenced object.</Description>
    <ShortDesc>Returns the location of the specified vertex of a referenced object.</ShortDesc>
    <ID>2228</ID>
    <IDName>procGet2DPt</IDName>
    <InternalFunctionName>MP_Get2DPt</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Index of vertex to be queried.</Desc>
      </Param>
      <Param>
        <Name>loc</Name>
        <Type>globPtVarMode</Type>
        <Desc>Coordinates of 2D vertex  location.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClosestPt</Name>
    <Version>850</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Returns the index number of the object closest to the specified location.  [[BR]][[BR]]The index value will return 0 if no vertex can be determined as closest, and will return -1 if the object does not support [[name]].[[BR]][[BR]]For container objects, [[name]] has distinct behaviors. For walls, if the closest vertex is[[BR]]is in a subobject, [[p:1]] will be set to a handle to the subobject. For symbols and plug-in objects, an index to the sub-object will be returned via parameter [[p:4]].[[BR]][[BR]][[name]] supports only 2D objects.</Description>
    <ShortDesc>Returns the vertex index of the object closest to the location.</ShortDesc>
    <Example>PROCEDURE GetClosestPtExample;[[BR]]VAR[[BR]]	obj :HANDLE; [[BR]]	ptX, ptY :REAL; [[BR]]	index :INTEGER; [[BR]]	containedObj :LONGINT;[[BR]]BEGIN[[BR]]	GetPt(ptX, ptY);[[BR]]	obj := PickObject(ptX, ptY);[[BR]]	GetClosestPt(obj, ptX, ptY, index, containedObj);[[BR]]	SetPenFore(obj, 65535, 0, 0);[[BR]]END;[[BR]]RUN(GetClosestPtExample);</Example>
    <ID>2229</ID>
    <IDName>procGetClosestPt</IDName>
    <InternalFunctionName>MP_GetClosestPt</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleInOutMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>pt</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinate location of comparison point.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intVarMode</Type>
        <Desc>Index to vertex.</Desc>
      </Param>
      <Param>
        <Name>containedObj</Name>
        <Type>lngVarMode</Type>
        <Desc>Index of sub-object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClosestSide</Name>
    <Version>850</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Returns the indices of the vertices that define the side closest to the specified location.  [[BR]][[BR]][[name]] supports only 2D objects.  If the object is unsupported, -1 will be returned as the index values.</Description>
    <ShortDesc>Returns the indices of the vertices that define the side closest to the specified location.</ShortDesc>
    <ID>2230</ID>
    <IDName>procGetClosestSide</IDName>
    <InternalFunctionName>MP_GetClosestSide</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>pt</Name>
        <Type>globPtMode</Type>
        <Desc>Coordinates of location.</Desc>
      </Param>
      <Param>
        <Name>index1</Name>
        <Type>intVarMode</Type>
        <Desc>Index of first vertex of closest side.</Desc>
      </Param>
      <Param>
        <Name>index2</Name>
        <Type>intVarMode</Type>
        <Desc>Index of second vertex of closest side.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetRField</Name>
    <Version>850</Version>
    <Category>Database / Record</Category>
    <Type>Function</Type>
    <ReturnType>DYNARRAY[] of CHAR</ReturnType>
    <Description>Returns string description of a value in the specified record field.</Description>
    <ShortDesc>Returns string description of a record field value.</ShortDesc>
    <Result>Returns the field value as a variable length string.</Result>
    <Comments>Returns a string interpretation of the field from the specified record</Comments>
    <Example>PROCEDURE Example;[[BR]][[BR]]FUNCTION WriteFieldValues(h :HANDLE) :BOOLEAN;[[BR]]VAR[[BR]]   cnt     :INTEGER;[[BR]]   recHand :HANDLE;[[BR]]   recName :STRING;[[BR]]   fldName :STRING;[[BR]]BEGIN[[BR]]   recName := GetName(GetRecord(h, NumRecords(h)));[[BR]]   recHand := GetObject(recName);[[BR]]   FOR cnt := 1 TO NumFields(recHand) DO BEGIN[[BR]]      fldName := GetFldName(recHand, cnt);[[BR]]      WriteLn(fldName, ': ', GetRField(h, recName, fldName));[[BR]]   END;[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]   ForEachObjectInLayer(WriteFieldValues, 2, 0, 4);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2231</ID>
    <IDName>funcGetRField</IDName>
    <InternalFunctionName>MP_GetRField</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>record</Name>
        <Type>stringMode</Type>
        <Desc>Name of record format.</Desc>
      </Param>
      <Param>
        <Name>field</Name>
        <Type>stringMode</Type>
        <Desc>Name of field to be queried.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPolylineVertex</Name>
    <Version>850</Version>
    <Category>Objects - Polys</Category>
    <Type>Procedure</Type>
    <Description>Returns information about the specified polyline vertex.[[BR]][[BR]]Note that [[p:2]] is 1-based for Polygons and Polylines, and 0-based for 3D Polylines.</Description>
    <ShortDesc>Returns information about the specified polyline vertex.</ShortDesc>
    <Comments>Retrieves information about a polyline vertex.  Vertex type constant values are 0 - Corner, 1 - Bezier, 2 - Cubic, 3 - Arc</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	obj        :HANDLE;[[BR]]	vertexNum  :INTEGER;[[BR]]	ptX, ptY   :REAL;[[BR]]	vertexType :INTEGER;[[BR]]	arcRadius  :REAL;[[BR]]BEGIN[[BR]]	obj := FSActLayer;[[BR]]	FOR vertexNum := 1 TO GetVertNum(obj) DO BEGIN[[BR]]		GetPolylineVertex(obj, vertexNum, ptX, ptY, vertexType, arcRadius);[[BR]]		TextOrigin(ptX, ptY);[[BR]]		CreateText(Concat('vNum: ', vertexNum, '  vType: ', vertexType, '  radius: ', arcRadius));[[BR]]	END;[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2232</ID>
    <IDName>procGetPolylineVertex</IDName>
    <InternalFunctionName>MP_GetPolylineVertex</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>vertexNum</Name>
        <Type>intMode</Type>
        <Desc>Index of vertex to be queried. </Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>globPtVarMode</Type>
        <Desc>X-Y coordinates of vertex.</Desc>
      </Param>
      <Param>
        <Name>vertexType</Name>
        <Type>intVarMode</Type>
        <Desc>Type of vertex.</Desc>
      </Param>
      <Param>
        <Name>arcRadius</Name>
        <Type>rVarMode</Type>
        <Desc>Radius of vertex corner (arc vertex only).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetPolylineVertex</Name>
    <Version>850</Version>
    <Category>Objects - Polys</Category>
    <Type>Procedure</Type>
    <Description>Sets the attributes of the specified polyline vertex to the specified values.</Description>
    <ShortDesc>Sets the attributes of the specified polyline vertex to the specified values.</ShortDesc>
    <Comments>Sets the specified vertex of the referenced polyline object.  Vertex type constant values are 0 - Corner, 1 - Bezier, 2 - Cubic, 3 - Arc</Comments>
    <Example>PROCEDURE Example;[[BR]]   {This will convert anything it can in the drawing to a polyline[[BR]]   (including rectangles, polygons, etc.), and then it will fillet[[BR]]   all of the corners with a radius of .015".}[[BR]]CONST[[BR]]   kFilletRadius = .015";[[BR]]VAR[[BR]]   cnt :INTEGER;[[BR]]   x, y :REAL;[[BR]]   vertexType :INTEGER;[[BR]]   vertexRadius :REAL;[[BR]]   criteria :STRING;[[BR]][[BR]]PROCEDURE FilletPolygon(h :HANDLE);[[BR]]BEGIN[[BR]]   h := ConvertToPolyline(h);[[BR]]   FOR cnt := 1 to GetVertNum(h) DO BEGIN[[BR]]      GetPolylineVertex(h, cnt, x, y, vertexType, vertexRadius);[[BR]]      SetPolylineVertex(h, cnt, x, y, 3, kFilletRadius, TRUE);[[BR]]   END;[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]   criteria := '(ALL)';[[BR]]   ForEachObject(FilletPolygon, criteria);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2233</ID>
    <IDName>procSetPolylineVertex</IDName>
    <InternalFunctionName>MP_SetPolylineVertex</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>vertexNum</Name>
        <Type>intMode</Type>
        <Desc>Index (1-based) of vertex to be modified.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>New X-Y coordinates of vertex.</Desc>
      </Param>
      <Param>
        <Name>vertexType</Name>
        <Type>intMode</Type>
        <Desc>Type of vertex.</Desc>
      </Param>
      <Param>
        <Name>arcRadiusDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Radius of vertex corner (arc vertex only).</Desc>
      </Param>
      <Param>
        <Name>recalcBounds</Name>
        <Type>boolMode</Type>
        <Desc>Recalculate object bounds.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPluginInfo</Name>
    <Version>850</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns the name and attached parameter record of the currently executing plug-in. Use with menu command or tool item plug-ins.</Description>
    <ShortDesc>Returns the name and attached parameter record of the currently executing plug-in.</ShortDesc>
    <Comments>Maybe a new function class of "Plug-ins" would be more appropriate than "Objects - Custom".</Comments>
    <ID>2234</ID>
    <IDName>funcGetPluginInfo</IDName>
    <InternalFunctionName>MP_GetPluginInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>pluginName</Name>
        <Type>strVarMode</Type>
        <Desc>Name of plug-in.</Desc>
      </Param>
      <Param>
        <Name>recordHand</Name>
        <Type>handleVarMode</Type>
        <Desc>Handle to parameter record of plug-in.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPluginFullName</Name>
    <Version>850</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns the full name of the currently executing plug-in.</Description>
    <ShortDesc>Returns the full name of the currently executing plug-in.</ShortDesc>
    <Comments>Maybe a new function class of "Plug-ins" would be more appropriate than "Objects - Custom".[[BR]][[BR]]Note that the name returned by the related function GetPluginInfo is the 20 character name used for the Plug-in's record.</Comments>
    <ID>2235</ID>
    <IDName>funcGetPluginFullName</IDName>
    <InternalFunctionName>MP_GetPluginFullName</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>DeleteConstraint</Name>
    <Version>900</Version>
    <Category>Parametric Constraints</Category>
    <Type>Procedure</Type>
    <Description>Removes a constraint from the referenced object in the document.</Description>
    <ShortDesc>Removes a constraint from the referenced object in the document.</ShortDesc>
    <ID>2236</ID>
    <IDName>procDeleteConstraint</IDName>
    <InternalFunctionName>MP_DeleteConstraint</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>constraint</Name>
        <Type>handleMode</Type>
        <Desc>Handle to constraint being deleted.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetBinaryConstraint</Name>
    <Version>900</Version>
    <Category>Parametric Constraints</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns a handle to a binary parametric constraint applied to the referenced objects.[[BR]][[BR]][[note:BinaryConstrainType]]</Description>
    <ShortDesc>Returns a handle to a binary parametric constraint applied to the referenced objects. </ShortDesc>
    <Result>Returns a HANDLE to the constraint if exists, otherwise returns NIL.</Result>
    <ID>2237</ID>
    <IDName>funcGetBinaryConstraint</IDName>
    <InternalFunctionName>MP_GetBinaryConstraint</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>constrType</Name>
        <Type>intMode</Type>
        <Desc>Type of constraint to be returned.</Desc>
      </Param>
      <Param>
        <Name>obj1</Name>
        <Type>handleMode</Type>
        <Desc>Handle to first object in constraint relationship.</Desc>
      </Param>
      <Param>
        <Name>obj2</Name>
        <Type>handleMode</Type>
        <Desc>Handle to second object in constraint relationship.</Desc>
      </Param>
      <Param>
        <Name>obj1VertA</Name>
        <Type>intMode</Type>
        <Desc>Vertex defining the constraint geometry of first object.</Desc>
      </Param>
      <Param>
        <Name>obj1VertB</Name>
        <Type>intMode</Type>
        <Desc>Vertex defining the constraint geometry of first object.</Desc>
      </Param>
      <Param>
        <Name>obj2VertA</Name>
        <Type>intMode</Type>
        <Desc>Vertex defining the constraint geometry of second object.</Desc>
      </Param>
      <Param>
        <Name>obj2VertB</Name>
        <Type>intMode</Type>
        <Desc>Vertex defining the constraint geometry of second object.</Desc>
      </Param>
      <Param>
        <Name>containedObj1</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>containedObj2</Name>
        <Type>longMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetConstraintValue</Name>
    <Version>900</Version>
    <Category>Parametric Constraints</Category>
    <Type>Procedure</Type>
    <Description>Sets the referenced dimensional constraint to a new value.</Description>
    <ShortDesc>Sets the referenced dimensional constraint to a new value.</ShortDesc>
    <ID>2238</ID>
    <IDName>procSetConstraintValue</IDName>
    <InternalFunctionName>MP_SetConstraintValue</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>constraint</Name>
        <Type>handleMode</Type>
        <Desc>Handle to constraint being modified.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>realMode</Type>
        <Desc>New value for the constraint.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateLayout</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Creates a new custom dialog layout. After the layout is created, control items for the dialog can be added to the layout.</Description>
    <ShortDesc>Creates a new custom dialog layout. </ShortDesc>
    <Result>Returns an index number identifying the new dialog layout.</Result>
    <Comments>Creates a dialog with a default button, cancel button, and a help box. If you do not want a button created then pass an empty string. You can place your own default button simply by creating a button with ID 1.</Comments>
    <Example>{ creates a new dialog layout }[[BR]]	lEditID := CreateLayout('Edit Layer',TRUE,'OK','Cancel');[[BR]][[BR]]	CreateGroupBox(lEditID,4,'',FALSE);[[BR]]	CreateStaticText(lEditID,5,'Layer Name:',-1);[[BR]]	CreateEditText(lEditID,6,'Layer-1',36);[[BR]][[BR]]	CreateGroupBox(lEditID,7,'Visibility',TRUE);[[BR]]	CreateRadioButton(lEditID,8,'Visible');[[BR]]	CreateRadioButton(lEditID,9,'Grayed');[[BR]]	CreateRadioButton(lEditID,10,'Hidden');[[BR]]	CreateStaticText( lEditID,11,'',6); [[BR]][[BR]]	CreateGroupBox(lEditID,12,'Options',TRUE);[[BR]]	CreateCheckBox(lEditID,13,'Use layer colors');[[BR]]	CreateCheckBox(lEditID,14,'Create link on model layer');[[BR]]</Example>
    <ID>2240</ID>
    <IDName>funcCreateLayout</IDName>
    <InternalFunctionName>MP_CreateLayout</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogTitle</Name>
        <Type>stringMode</Type>
        <Desc>Title of the dialog.</Desc>
      </Param>
      <Param>
        <Name>hasHelp</Name>
        <Type>boolMode</Type>
        <Desc>Enables help text for the dialog.</Desc>
      </Param>
      <Param>
        <Name>defaultButtonName</Name>
        <Type>stringMode</Type>
        <Desc>Text displayed in the default button of the dialog.</Desc>
      </Param>
      <Param>
        <Name>cancelButtonName</Name>
        <Type>stringMode</Type>
        <Desc>Text displayed in the cancel button of the dialog.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateCheckBox</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a check box control in a dialog layout.</Description>
    <ShortDesc>Create a checkbox for a dialog layout.</ShortDesc>
    <SeeAlso>SetBooleanItem,GetBooleanItem</SeeAlso>
    <Comments>[DWD 1/20/00]</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	dialog1 :INTEGER;[[BR]]	result  :INTEGER;[[BR]]PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]END;[[BR]]BEGIN[[BR]]	dialog1 := CreateLayout('Example Dialog', FALSE, 'OK', 'Cancel');[[BR]]	CreateCheckBox(dialog1, 4, 'Use layer colors');[[BR]]	SetFirstLayoutItem(dialog1, 4);[[BR]]	result := RunLayoutDialog(dialog1, Dialog_Handler);[[BR]]END;[[BR]]RUN(Example);[[BR]][[BR]]</Example>
    <ID>2241</ID>
    <IDName>procCreateCheckBox</IDName>
    <InternalFunctionName>MP_CreateCheckBox</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index that will identify the control item.</Desc>
      </Param>
      <Param>
        <Name>text</Name>
        <Type>stringMode</Type>
        <Desc>The display text for the control.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateEditText</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates an editable text field control in a dialog layout.</Description>
    <ShortDesc>Creates an editable text field control in a dialog layout.</ShortDesc>
    <SeeAlso>GetDlgCtrlWidthStdCh</SeeAlso>
    <Comments>[DWD 1/20/00]</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	dialog1 :INTEGER;[[BR]]	result  :INTEGER;[[BR]]PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]END;[[BR]]BEGIN[[BR]]	dialog1 := CreateLayout('Example Dialog', FALSE, 'OK', 'Cancel');[[BR]]	CreateEditText(dialog1, 4, 'default text', 16);[[BR]]	SetFirstLayoutItem(dialog1, 4);[[BR]]	result := RunLayoutDialog(dialog1, Dialog_Handler);[[BR]]END;[[BR]]RUN(Example);[[BR]][[BR]]</Example>
    <ID>2242</ID>
    <IDName>procCreateEditText</IDName>
    <InternalFunctionName>MP_CreateEditText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index that will identify the control item.</Desc>
      </Param>
      <Param>
        <Name>defaultText</Name>
        <Type>stringMode</Type>
        <Desc>The default display text for the control.</Desc>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>longMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateGroupBox</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a new group box control in a dialog layout.[[BR]][[BR]]The width of a group box is determined by the width of the longest control enclosed by the group box. The height of the group box is determined by the combined height of the enclosed controls.[[BR]][[BR]]While used primarily to contain and highlight related control items, group box controls can also be used to group controls for easier positioning. When used in this fashion, pass a blank string for the display text and set the frame display to FALSE.</Description>
    <ShortDesc>Create a group box for a dialog layout.</ShortDesc>
    <Comments>A group box with out frame is used for placing and moving groups of controls.[DWG 1/20/00]</Comments>
    <Example>{ creates a framed group box entitled "Options" }[[BR]]	CreateGroupBox(lEditID,12,'Options',TRUE);[[BR]][[BR]]	CreateCheckBox(lEditID,13,'Use layer colors');[[BR]]	CreateCheckBox(lEditID,14,'Create link on model layer');[[BR]]</Example>
    <ID>2243</ID>
    <IDName>procCreateGroupBox</IDName>
    <InternalFunctionName>MP_CreateGroupBox</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index that will identify the control item.</Desc>
      </Param>
      <Param>
        <Name>text</Name>
        <Type>stringMode</Type>
        <Desc>The display text for the control.</Desc>
      </Param>
      <Param>
        <Name>hasFrame</Name>
        <Type>boolMode</Type>
        <Desc>Displays a border for the group box.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateListBox</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a new list box control in a dialog layout.</Description>
    <ShortDesc>Creates a new list box control in a dialog layout.</ShortDesc>
    <SeeAlso>GetDlgCtrlWidthStdCh</SeeAlso>
    <Comments>[DWD 1/20/00]</Comments>
    <Example>{ draws a list box 25 characters wide and 7 rows high }[[BR]]CreateListBox(2,10,25,7);[[BR]]</Example>
    <ID>2244</ID>
    <IDName>procCreateListBox</IDName>
    <InternalFunctionName>MP_CreateListBox</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index that will identify the control item.</Desc>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>longMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
      <Param>
        <Name>heightInLines</Name>
        <Type>longMode</Type>
        <Desc>The height of the control in characters.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreatePullDownMenu</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a new pulldown menu control in a dialog layout.</Description>
    <ShortDesc>Creates a new pulldown menu control in a dialog layout.</ShortDesc>
    <SeeAlso>GetDlgCtrlWidthStdCh</SeeAlso>
    <Comments>[DWD 1/20/00]</Comments>
    <ID>2245</ID>
    <IDName>procCreatePullDownMenu</IDName>
    <InternalFunctionName>MP_CreatePullDownMenu</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index that will identify the control item.</Desc>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>longMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreatePushButton</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a new push button control in a dialog layout.</Description>
    <ShortDesc>Creates a new push button control in a dialog layout.</ShortDesc>
    <Comments>[DWD 1/20/00]</Comments>
    <ID>2246</ID>
    <IDName>procCreatePushButton</IDName>
    <InternalFunctionName>MP_CreatePushButton</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index that will identify the control item.</Desc>
      </Param>
      <Param>
        <Name>text</Name>
        <Type>stringMode</Type>
        <Desc>The display text for the control.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateRadioButton</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a new radio button control in a dialog layout.[[BR]][[BR]]Radio button groups can be created by defining two or more radio buttons with consecutive index values. When defined as a button group, VectorScript will handle selection-deselection of controls within the group.</Description>
    <ShortDesc>Creates a new radio button control in a dialog layout.</ShortDesc>
    <Comments>[DWD 1/20/00]</Comments>
    <Example>{ creates a radio button with the specified label }[[BR]]	CreateRadioButton(lEditID,8,'Visible');[[BR]][[BR]]	CreateRadioButton(lEditID,9,'Grayed');[[BR]]	CreateRadioButton(lEditID,10,'Hidden');[[BR]]	CreateStaticText( lEditID,11,'',6); [[BR]]</Example>
    <ID>2247</ID>
    <IDName>procCreateRadioButton</IDName>
    <InternalFunctionName>MP_CreateRadioButton</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index that will identify the control item.</Desc>
      </Param>
      <Param>
        <Name>text</Name>
        <Type>stringMode</Type>
        <Desc>The display text for the control.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateStaticText</Name>
    <ChangedDate>2012:03:06T15:07:00</ChangedDate>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a new static text field control in a dialog layout.[[BR]][[BR]]To allow the control to size automatically to the text width, pass -1 as the width parameter of the control.</Description>
    <ShortDesc>Creates a new static text field control in a dialog layout.</ShortDesc>
    <SeeAlso>CreateStyledStatic,GetDlgCtrlWidthStdCh</SeeAlso>
    <Comments>[DWD 1/20/00]</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   dialog1 :INTEGER;[[BR]]   result  :INTEGER;[[BR]]PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]END;[[BR]]BEGIN[[BR]]   dialog1 := CreateLayout('Example Dialog', FALSE, 'OK', 'Cancel');[[BR]]   CreateEditText(dialog1, 4, 'default text', 16);[[BR]]   CreateStaticText(dialog1, 5, 'default text', 16);[[BR]]   SetFirstLayoutItem(dialog1, 4);[[BR]]   SetBelowItem(dialog1, 4, 5, 0, 0);[[BR]]   result := RunLayoutDialog(dialog1, Dialog_Handler);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2248</ID>
    <IDName>procCreateStaticText</IDName>
    <InternalFunctionName>MP_CreateStaticText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index that will identify the control item.</Desc>
      </Param>
      <Param>
        <Name>text</Name>
        <Type>stringMode</Type>
        <Desc>The display text for the control.</Desc>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>longMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>VerifyLayout</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Checks a specified dialog layout for correct layout definition.</Description>
    <ShortDesc>Checks a specified dialog layout for correct layout definition.</ShortDesc>
    <Result>Returns FALSE if a problem was encountered defining the dialog, otherwise returns TRUE.</Result>
    <Comments>[DWD 1/20/00]</Comments>
    <Example>{verify the dialog layou is properly constructed}[[BR]]	dialogOK := VerifyLayout(lEditID);[[BR]][[BR]]	IF (dialogOK &amp; rsAvailable) THEN[[BR]]	BEGIN[[BR]]		lmtestResult := RunLayoutDialog(lEditID,DriveSplashDialog);[[BR]]	END;[[BR]]</Example>
    <ID>2249</ID>
    <IDName>funcVerifyLayout</IDName>
    <InternalFunctionName>MP_VerifyLayout</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout to be verified.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetFirstLayoutItem</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Initializes dialog control layout by placing the specified control item in the top left corner of the layout. All other controls in the layout are positioned relative to the control item placed with this function.</Description>
    <ShortDesc>Initializes dialog control layout by placing the specified control item in the top left corner of the layout.</ShortDesc>
    <Comments>[DWD 1/20/00]</Comments>
    <Example>{positions the first control in the dialog}[[BR]]SetFirstLayoutItem(lEditID,4);[[BR]][[BR]]SetFirstGroupItem(lEditID,4,5);	[[BR]]SetBelowItem(lEditID,4,6,0,0);[[BR]]SetFirstGroupItem(lEditID,6,7);[[BR]]SetBelowItem(lEditID,6,8,0,0);[[BR]]</Example>
    <ID>2250</ID>
    <IDName>procSetFirstLayoutItem</IDName>
    <InternalFunctionName>MP_SetFirstLayoutItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout being defined.</Desc>
      </Param>
      <Param>
        <Name>firstItemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the control item to be placed.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetFirstGroupItem</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Places the first item of a layout group into the specified group box control item. The control is inserted in the top left corner of the group box, and all other controls in the group are placed relative to this item.</Description>
    <ShortDesc>Inserts the first item of a layout group into the specified group box control item. </ShortDesc>
    <Comments>[DWD 1/20/00]</Comments>
    <Example>SetFirstLayoutItem(lEditID,4);[[BR]][[BR]]{inserts the first control in a group box}[[BR]]SetFirstGroupItem(lEditID,4,5);[[BR]]	[[BR]]SetBelowItem(lEditID,4,6,0,0);[[BR]]SetFirstGroupItem(lEditID,6,7);[[BR]]SetBelowItem(lEditID,6,8,0,0);[[BR]]</Example>
    <ID>2251</ID>
    <IDName>procSetFirstGroupItem</IDName>
    <InternalFunctionName>MP_SetFirstGroupItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout being defined.</Desc>
      </Param>
      <Param>
        <Name>groupID</Name>
        <Type>longMode</Type>
        <Desc>The index of the group box control accepting the first item.</Desc>
      </Param>
      <Param>
        <Name>firstItemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the control item to be placed in the group box.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetRightItem</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Places the specified control item to the right of a previously inserted control item.[[BR]]Additional positioning can be performed by specifying x- and y-offsets (in pixels) from the initial insert position.</Description>
    <ShortDesc>Places the specified control item to the right of a previously inserted control item.</ShortDesc>
    <Comments>Use the indent and lineSpacing sparingly.[DWD 1/20/00]</Comments>
    <ID>2252</ID>
    <IDName>procSetRightItem</IDName>
    <InternalFunctionName>MP_SetRightItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout being defined.</Desc>
      </Param>
      <Param>
        <Name>srcItemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the anchor control item.</Desc>
      </Param>
      <Param>
        <Name>rightItemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the control item being placed.</Desc>
      </Param>
      <Param>
        <Name>indent</Name>
        <Type>intMode</Type>
        <Desc>Left-right (x) control offset value.</Desc>
      </Param>
      <Param>
        <Name>lineSpacing</Name>
        <Type>intMode</Type>
        <Desc>Up-down (y) control offset value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetBelowItem</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Places the specified control item below a previously inserted control item. Additional positioning can be performed by specifying x- and y-offsets (in pixels) from the initial insert position. Indent is in number of characters. LineSpacing is in pixels.</Description>
    <ShortDesc>Places the specified control item below a previously inserted control item.</ShortDesc>
    <Comments>Use the indent and lineSpacing sparingly.[DWD 1/20/00]</Comments>
    <ID>2253</ID>
    <IDName>procSetBelowItem</IDName>
    <InternalFunctionName>MP_SetBelowItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout being defined.</Desc>
      </Param>
      <Param>
        <Name>srcItemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the anchor control item.</Desc>
      </Param>
      <Param>
        <Name>belowtItemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the control item being placed.</Desc>
      </Param>
      <Param>
        <Name>indent</Name>
        <Type>intMode</Type>
        <Desc>Left-right (x) control offset value.</Desc>
      </Param>
      <Param>
        <Name>lineSpacing</Name>
        <Type>intMode</Type>
        <Desc>Up-down (y) control offset value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AlignItemEdge</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Aligns the specified control item with other items having the same edge and alignment id values. To align several control items, call this function once for each item to be aligned using a common alignment id value.[[BR]][[BR]][[note:AlignItemEdgeOptions]][[BR]][[BR]]Right alignment of objects will use the object with the minimum pixel value as the alignment baseline. Bottom and left alignment of objects will use the object with the  maximum pixel value as the alignment baseline.[[BR]][[BR]]</Description>
    <ShortDesc>Aligns the specified control item with other items having the same edge and alignment indexes.</ShortDesc>
    <Comments>Aligns layout items with the same edge and alignID. whichEdge: 1=right, 2=bottom, 3=left; alignMode: resize=0, shift=1[[BR]][[BR]]Right aligned objects are lined up with the object with the minimum pixel value. Bottom and left aligned objects are lined up on the maximum pixel value.[DWD 1/20/00]</Comments>
    <Example>{aligns all items with the positioning ID of 99}[[BR]]	AlignItemEdge(lEditID,4,1,99,0);[[BR]]	AlignItemEdge(lEditID,6,1,99,0);[[BR]]</Example>
    <ID>2254</ID>
    <IDName>procAlignItemEdge</IDName>
    <InternalFunctionName>MP_AlignItemEdge</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout being defined.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the control item to be aligned.</Desc>
      </Param>
      <Param>
        <Name>whichEdge</Name>
        <Type>longMode</Type>
        <Desc>The control edge to be aligned.</Desc>
      </Param>
      <Param>
        <Name>alignID</Name>
        <Type>intMode</Type>
        <Desc>An arbitrary number used to identify the items to be aligned together.</Desc>
      </Param>
      <Param>
        <Name>alignMode</Name>
        <Type>intMode</Type>
        <Desc>Alignment mode of the operation</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetupDialogC</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Constant</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>A predefined constant value that is passed to the dialog event handler subroutine when a modern custom dialog is initially displayed onscreen.[[BR]][[BR]]This constant is usually used to determine when to execute dialog initialization and setup calls.</Description>
    <ShortDesc>A predefined constant value that is passed to the dialog event handler subroutine when a modern custom dialog is initially displayed onscreen.[[BR]]</ShortDesc>
    <Comments>[DWD 1/20/00]</Comments>
    <ID>12255</ID>
    <IDName>kVSSetupDialogC</IDName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>SetdownDialogC</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Constant</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>A predefined constant value that is passed to the dialog event handler subroutine when a modern custom dialog is dismissed.[[BR]][[BR]]This constant is usually used to determine when to execute dialog cleanup calls prior to exiting the dialog.</Description>
    <ShortDesc>This constant is passed to the event handler routine to signal dialog setdown.</ShortDesc>
    <SeeAlso>SetupDialogC</SeeAlso>
    <Comments>[DWD 1/20/00]</Comments>
    <ID>12256</ID>
    <IDName>kVSSetdownDialogC</IDName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>CreateControl</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a new extended dialog control item. Supported extended dialog controls include image, system color palette, and slider controls.[[BR]][[BR]][[note:ExtendedControlTypes]]</Description>
    <ShortDesc>This constant is passed to the event handler routine to signal dialog setdown.</ShortDesc>
    <Comments>[DWD 1/20/00]</Comments>
    <Example>{open the resource file containing the graphics for the dialog}[[BR]]rsAvailable:= SetVSResourceFile('Images');[[BR]]{creates a new image control}[[BR]] CreateControl(lEditID,5,1,'SplashImage',1010);[[BR]][[BR]]{Slider Control Example}[[BR]]PROCEDURE dialog1_Main;[[BR]]CONST[[BR]]	kSlider = 4;[[BR]]	kLabel  = 5;[[BR]]	kValue  = 6;[[BR]]VAR[[BR]]	dialog1   :INTEGER;[[BR]]	gSlider   :LONGINT;[[BR]][[BR]]PROCEDURE dialog1_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]	CASE item OF[[BR]]		kSlider:[[BR]]			BEGIN[[BR]]				GetControlData(dialog1, kSlider, gSlider);[[BR]]				SetField(kValue, Concat(gSlider));[[BR]]			END;[[BR]]	END;[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]	gSlider := 1000;[[BR]]	dialog1 := CreateLayout('Slider Control', False, 'OK', 'Cancel');[[BR]]	CreateControl     (dialog1, kSlider,  3, '', 1000);[[BR]]	CreateStaticText  (dialog1, kLabel,   'Slider Value:', -1);[[BR]]	CreateStaticText  (dialog1, kValue,   ' ', -1);[[BR]]	SetFirstLayoutItem(dialog1, kSlider);[[BR]]	SetBelowItem      (dialog1, kSlider,  kLabel,   0, 0);[[BR]]	SetRightItem      (dialog1, kLabel,   kValue,   0, 0);[[BR]]	IF RunLayoutDialog(dialog1, dialog1_Handler) = 1 THEN BEGIN[[BR]]	END;[[BR]]END;[[BR]]RUN(dialog1_Main);[[BR]]</Example>
    <ID>2257</ID>
    <IDName>procCreateControl</IDName>
    <InternalFunctionName>MP_CreateControl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index that will identify the control item.</Desc>
      </Param>
      <Param>
        <Name>controlKind</Name>
        <Type>longMode</Type>
        <Desc>The type of control item.</Desc>
      </Param>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>The display text of the control item.</Desc>
      </Param>
      <Param>
        <Name>data</Name>
        <Type>longMode</Type>
        <Desc>Initial data for the control item.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RunLayoutDialog</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Displays the specified dialog and initiates the dialog event loop. The dialog event loop is specified in a procedure subroutine that is passed as a parameter to the function.</Description>
    <ShortDesc>Displays the specified dialog and initiates the dialog event loop.</ShortDesc>
    <Result>Returns a LONGINT value indicating the button pressed to exit the dialog.</Result>
    <Comments>[DWD 1/20/00]</Comments>
    <ID>2258</ID>
    <IDName>funcRunLayoutDialog</IDName>
    <SpecialOverride>CHECKRUNLAYOUTDIALOG( funcRunLayoutDialog, MP_RunLayoutDialog, longMode, longMode, userProcMode);</SpecialOverride>
    <Implemented>True</Implemented>
    <ImplementationDetails>Special</ImplementationDetails>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog to be displayed.</Desc>
      </Param>
      <Param>
        <Name>callback</Name>
        <Type>userProcMode</Type>
        <Desc>The event loop subroutine for the dialog.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SortArray</Name>
    <Version>900</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Sorts a 1-dimension array into ascending order. If the array contains handles to records, the array can be sorted by the specified field number index. If the array is an array of structures, the fieldnumber argument denotes the element in the structure on which to sort.</Description>
    <ShortDesc>Sorts a 1-dimension array into ascending order. If the array contains handles to records, the array can be sorted by the specified field number index.</ShortDesc>
    <Comments>[richn 1/21/00][[BR]][[BR]]Sorts first numtosort elements of single-dimensional array  arraytosort into ascending order. If arraytosort is an array of records, it sorts on the fieldnumberth field of the record.</Comments>
    <ID>2259</ID>
    <IDName>procSortArray</IDName>
    <InternalFunctionName>MP_SortArray</InternalFunctionName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
    <Params>
      <Param>
        <Name>arraytosort</Name>
        <Type>arrayVarMode</Type>
      </Param>
      <Param>
        <Name>numtosort</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>fieldnumber</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClVectorFill</Name>
    <Version>900</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns the name of the hatch pattern setting of the specified class.[[BR]][[BR]]The function return value will be TRUE if the class uses a hatch pattern, and will be FALSE if the class does not use a hatch pattern.</Description>
    <ShortDesc>Returns the name of the hatch pattern setting of the specified class.</ShortDesc>
    <ID>2261</ID>
    <IDName>funcGetClVectorFill</IDName>
    <InternalFunctionName>MP_GetClVectorFill</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
      <Param>
        <Name>hatchName</Name>
        <Type>strVarMode</Type>
        <Desc>Name of active hatch pattern (if it exists).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClVectorFill</Name>
    <Version>900</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the class fill style to use the specified hatch pattern. The function return value will be TRUE if the operation was successful.</Description>
    <ShortDesc>Sets the class fill style to use the specified hatch pattern.</ShortDesc>
    <ID>2262</ID>
    <IDName>funcSetClVectorFill</IDName>
    <InternalFunctionName>MP_SetClVectorFill</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
      <Param>
        <Name>hatchName</Name>
        <Type>stringMode</Type>
        <Desc>Name of hatch pattern.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetControlData</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the data for the specified extended control item. [[BR]][[BR]]In image controls, for example, this call can be used to set the ID of the image resource being displayed.[[BR]][[BR]]This function can only be called from within the dialog event handler subroutine.</Description>
    <ShortDesc>Sets the data for the specified extended control item.</ShortDesc>
    <Comments>[DWD 1/20/00]</Comments>
    <ID>2263</ID>
    <IDName>procSetControlData</IDName>
    <InternalFunctionName>MP_SetControlData</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog control item.</Desc>
      </Param>
      <Param>
        <Name>data</Name>
        <Type>longMode</Type>
        <Desc>New data for the control item.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateCustomObjectPath</Name>
    <Version>850</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates an instance of the path custom object specified by the name argument.  The vertices of the path are translated in such a way that the first vertex will be placed at the origin of the plug-in's coordinate space.</Description>
    <ShortDesc>Creates an instance of the path custom object specified by the name argument.  </ShortDesc>
    <Result>Returns a HANDLE to the new path object.</Result>
    <Comments>Calls DefineCustomObject() first to either find the defining FormatNode or create it.  If it is created, the user will be presented with an initialization dialog.  Returns handle to Object.</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	h :HANDLE;[[BR]]BEGIN[[BR]]	CallTool(-204);[[BR]]	h := CreateCustomObjectPath('Cutting Plane', FSActLayer, nil);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2264</ID>
    <IDName>funcCreateCustomObjectPath</IDName>
    <InternalFunctionName>MP_CreateCustomObjectPath</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectName</Name>
        <Type>stringMode</Type>
        <Desc>Name of object.</Desc>
      </Param>
      <Param>
        <Name>path</Name>
        <Type>handleMode</Type>
        <Desc>Handle to new object path polygon.</Desc>
      </Param>
      <Param>
        <Name>profileGroup</Name>
        <Type>handleMode</Type>
        <Desc>Handle to new profile group object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCustomObjectPath</Name>
    <Version>850</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns a handle to the path polygon of a path custom object.</Description>
    <ShortDesc>Returns a handle to the path polygon of a path custom object.</ShortDesc>
    <Result>Returns a HANDLE to the path polygon.</Result>
    <SeeAlso>SetCustomObjectPath</SeeAlso>
    <ID>2265</ID>
    <IDName>funcGetCustomObjectPath</IDName>
    <InternalFunctionName>MP_GetCustomObjectPath</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHand</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCustomObjectProfileGroup</Name>
    <Version>850</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns a handle to the profile group of a path custom object.[[BR]][[BR]]A path object has two "containers" for storing subordinate objects: the path, and the profile. As an example, if a path object is going to do an extrude along path, it will store the path in the path container, and the shape to be extruded in the profile container. The code within the object will then supply the handles to the path and the profile to the CreateExtrudeAlongPath call. </Description>
    <ShortDesc>Returns a handle to the profile group of a path custom object.</ShortDesc>
    <Result>Returns a HANDLE to the profile group.</Result>
    <SeeAlso>SetCustomObjectProfileGroup</SeeAlso>
    <ID>2266</ID>
    <IDName>funcGetCustomObjectProfileGroup</IDName>
    <InternalFunctionName>MP_GetCustomObjectProfileGroup</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHand</Name>
        <Type>handleMode</Type>
        <Desc>Handle to path custom object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCustomObjectPath</Name>
    <Version>850</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Replaces the path of an existing path plug-in object.  The path is used as-is; no translation of vertices is performed.</Description>
    <ShortDesc>Replaces the path of an existing path plug-in object.</ShortDesc>
    <Result>Returns TRUE if the operation was successful.</Result>
    <SeeAlso>GetCustomObjectPath</SeeAlso>
    <ID>2267</ID>
    <IDName>funcSetCustomObjectPath</IDName>
    <InternalFunctionName>MP_SetCustomObjectPath</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHand</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>path</Name>
        <Type>handleMode</Type>
        <Desc>Handle to new path polygon.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCustomObjectProfileGroup</Name>
    <Version>850</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the profile group for a path custom object. </Description>
    <ShortDesc>Sets the profile group for a path custom object.</ShortDesc>
    <Result>Returns TRUE if the operation was successful.</Result>
    <SeeAlso>GetCustomObjectProfileGroup</SeeAlso>
    <ID>2268</ID>
    <IDName>funcSetCustomObjectProfileGroup</IDName>
    <InternalFunctionName>MP_SetCustomObjectProfileGroup</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHand</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>profileGroupHand</Name>
        <Type>handleMode</Type>
        <Desc>Handle to profile group.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetControlData</Name>
    <Version>850</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Returns information about the specified extended control item.</Description>
    <ShortDesc>Returns information about the specified extended control item.</ShortDesc>
    <Comments>[DWD 1/20/00]</Comments>
    <ID>2269</ID>
    <IDName>procGetControlData</IDName>
    <InternalFunctionName>MP_GetControlData</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index of dialog layout containing the control item.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>Index of the control item.</Desc>
      </Param>
      <Param>
        <Name>data</Name>
        <Type>lngVarMode</Type>
        <Desc>Current setting of the control.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPrefLongInt</Name>
    <Version>900</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Returns the value of a Vectorworks preference setting. Used with preference settings returning a LONGINT value.[[BR]][[BR]][[note:PrefItemTableNote]]</Description>
    <ShortDesc>Returns the value of a Vectorworks preference setting.</ShortDesc>
    <Result>Returns the value of the specified preference.[[BR]][[BR]]</Result>
    <Comments>Returns the status of the specified preference item.  Used for preferences that return a long integer instead of a Boolean (see GetPref)[[BR]][[BR]]The status of the requested preference. If the preference is a checkbox, then [[name]] returns TRUE or false. If it is a radio group or editable text item, then [[name]] returns an integer value representing that setting.</Comments>
    <Example>convertRes2D:= GetPrefLongInt(55);[[BR]]</Example>
    <ID>2270</ID>
    <IDName>funcGetPrefLongInt</IDName>
    <InternalFunctionName>MP_GetPrefLongInt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>prefIndex</Name>
        <Type>intMode</Type>
        <Desc>Preference item index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPrefReal</Name>
    <Version>900</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the value of a Vectorworks preference setting. Used with preference settings returning a REAL value.[[BR]][[BR]][[note:PrefItemTableNote]][[BR]]</Description>
    <ShortDesc>Returns the value of a Vectorworks preference setting.</ShortDesc>
    <Result>Returns the value of the specified preference.</Result>
    <Comments>Returns the status of the specified preference item.  Used for preferences that return a real instead of a Boolean (see GetPref)</Comments>
    <Example>upi:= GetPrefReal(152);[[BR]]</Example>
    <ID>2271</ID>
    <IDName>funcGetPrefReal</IDName>
    <InternalFunctionName>MP_GetPrefReal</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>prefIndex</Name>
        <Type>intMode</Type>
        <Desc>Preference item index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPrefString</Name>
    <Version>900</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Returns the value of a Vectorworks preference setting. Used with preference settings returning a STRING value.[[BR]][[BR]][[note:PrefItemTableNote]][[BR]]</Description>
    <ShortDesc>Returns the value of a Vectorworks preference setting.</ShortDesc>
    <Result>Returns the value of the specified preference.</Result>
    <Comments>Returns the status of the specified preference item.  Used for preferences that return a string instead of a Boolean (see GetPref)</Comments>
    <Example>unitmark:=GetPrefString(154);[[BR]]</Example>
    <ID>2272</ID>
    <IDName>funcGetPrefString</IDName>
    <InternalFunctionName>MP_GetPrefString</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>prefIndex</Name>
        <Type>intMode</Type>
        <Desc>Preference item index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetPrefLongInt</Name>
    <Version>900</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Sets the value of the specified Vectorworks preference setting. Used with preference settings requiring a LONGINT value.[[BR]][[BR]][[note:PrefItemTableNote]][[BR]][[BR]][[BR]]</Description>
    <ShortDesc>Sets the value of the specified Vectorworks preference setting.</ShortDesc>
    <Comments>Sets the value of the specified preference to the value passed.   Similar to SetPref() except it works on preferences for long integer values</Comments>
    <Example>SetPrefLongInt(55,128);[[BR]]</Example>
    <ID>2273</ID>
    <IDName>procSetPrefLongInt</IDName>
    <InternalFunctionName>MP_SetPrefLongInt</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Preference item index.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>longMode</Type>
        <Desc>New value for preference.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetPrefReal</Name>
    <Version>900</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Sets the value of the specified Vectorworks preference setting. Used with preference settings requiring a REAL value.[[BR]][[BR]][[note:PrefItemTableNote]][[BR]][[BR]]</Description>
    <ShortDesc>Sets the value of the specified Vectorworks preference setting.</ShortDesc>
    <Comments>Sets the value of the specified preference to the value passed.   Similar to SetPref() except it works on preferences for real values</Comments>
    <Example>SetPrefReal(68,144);[[BR]]</Example>
    <ID>2274</ID>
    <IDName>procSetPrefReal</IDName>
    <InternalFunctionName>MP_SetPrefReal</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Preference item index.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>realMode</Type>
        <Desc>New value for preference.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetPrefString</Name>
    <Version>900</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Sets the value of the specified Vectorworks preference setting. Used with preference settings requiring a STRING value.[[BR]][[BR]][[note:PrefItemTableNote]][[BR]][[BR]]</Description>
    <ShortDesc>Sets the value of the specified Vectorworks preference setting.</ShortDesc>
    <Comments>Sets the value of the specified preference to the value passed.   Similar to SetPref() except it works on preferences for string values</Comments>
    <Example>SetPrefString(154,'cubits');[[BR]]</Example>
    <ID>2275</ID>
    <IDName>procSetPrefString</IDName>
    <InternalFunctionName>MP_SetPrefString</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Preference item index.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>stringMode</Type>
        <Desc>New value for preference.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjectVariableBoolean</Name>
    <Version>900</Version>
    <Category>Object Info</Category>
    <Type>Procedure</Type>
    <Description>Sets the ON-OFF status of a Vectorworks object property.[[BR]][[BR]][[note:ObjSelectorNote]][[BR]][[BR]]</Description>
    <ShortDesc>Sets the ON-OFF status of a Vectorworks object property.</ShortDesc>
    <Example>SetObjectVariableBoolean(17,FALSE);[[BR]]</Example>
    <ID>2276</ID>
    <IDName>procSetObjectVariableBoolean</IDName>
    <InternalFunctionName>MP_SetObjectVariableBoolean</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Object property index.</Desc>
      </Param>
      <Param>
        <Name>status</Name>
        <Type>boolMode</Type>
        <Desc>New status for property.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjectVariableInt</Name>
    <Version>900</Version>
    <Category>Object Info</Category>
    <Type>Procedure</Type>
    <Description>Sets the value of a Vectorworks object property. Used with properties requiring an INTEGER value.[[BR]][[BR]][[note:ObjSelectorNote]]</Description>
    <ShortDesc>Sets the value of a Vectorworks object property.</ShortDesc>
    <Example>SetObjectVariableInt(h,1,2);[[BR]]</Example>
    <ID>2277</ID>
    <IDName>procSetObjectVariableInt</IDName>
    <InternalFunctionName>MP_SetObjectVariableInt</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Object property index.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>intMode</Type>
        <Desc>New value for property.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjectVariableLongInt</Name>
    <Version>900</Version>
    <Category>Object Info</Category>
    <Type>Procedure</Type>
    <Description>Sets the value of a Vectorworks object property. Used with properties requiring a LONGINT value.[[BR]][[BR]][[note:ObjSelectorNote]][[BR]][[BR]]</Description>
    <ShortDesc>Sets the value of a Vectorworks object property.</ShortDesc>
    <Example>SetPref(17,FALSE);[[BR]]</Example>
    <ID>2278</ID>
    <IDName>procSetObjectVariableLongInt</IDName>
    <InternalFunctionName>MP_SetObjectVariableLongInt</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Object property index.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>longMode</Type>
        <Desc>New value for property.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjectVariableReal</Name>
    <Version>900</Version>
    <Category>Object Info</Category>
    <Type>Procedure</Type>
    <Description>Sets the value of a Vectorworks object property. Used with properties requiring a REAL value.[[BR]][[BR]][[note:ObjSelectorNote]][[BR]][[BR]]</Description>
    <ShortDesc>Sets the value of a Vectorworks object property.</ShortDesc>
    <Example>SetPref(17,FALSE);[[BR]]</Example>
    <ID>2279</ID>
    <IDName>procSetObjectVariableReal</IDName>
    <InternalFunctionName>MP_SetObjectVariableReal</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Object property index.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>realMode</Type>
        <Desc>New value for property.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjectVariableString</Name>
    <Version>900</Version>
    <Category>Object Info</Category>
    <Type>Procedure</Type>
    <Description>Sets the value of a Vectorworks object property. Used with properties requiring a STRING value.[[BR]][[BR]][[note:ObjSelectorNote]][[BR]][[BR]]</Description>
    <ShortDesc>Sets the value of a Vectorworks object property.</ShortDesc>
    <Example>SetPref(17,FALSE);[[BR]]</Example>
    <ID>2280</ID>
    <IDName>procSetObjectVariableString</IDName>
    <InternalFunctionName>MP_SetObjectVariableString</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Object property index.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>New value for property.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjectVariableBoolean</Name>
    <Version>900</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns the ON-OFF status of a Vectorworks object property. [[BR]][[BR]][[note:ObjSelectorNote]]</Description>
    <ShortDesc>Returns the ON-OFF status of a Vectorworks object property.</ShortDesc>
    <Result>Returns a BOOLEAN value indicating the ON-OFF status of the property.</Result>
    <Example>castShadow:= GetObjectVariableBoolean(h,53);[[BR]]</Example>
    <ID>2281</ID>
    <IDName>funcGetObjectVariableBoolean</IDName>
    <InternalFunctionName>MP_GetObjectVariableBoolean</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Object property index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjectVariableInt</Name>
    <Version>900</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the value of a Vectorworks object property. Used with properties returning an INTEGER value.[[BR]][[BR]][[note:ObjSelectorNote]][[BR]][[BR]]</Description>
    <ShortDesc>Returns the value of a Vectorworks object property.</ShortDesc>
    <Result>Returns the value of the property as an INTEGER value.</Result>
    <Example>numCavities:= GetObjectVariableInt(h,199);[[BR]]</Example>
    <ID>2282</ID>
    <IDName>funcGetObjectVariableInt</IDName>
    <InternalFunctionName>MP_GetObjectVariableInt</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Object property index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjectVariableLongInt</Name>
    <Version>900</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Returns the value of a Vectorworks object property. Used with properties returning a LONGINT value.[[BR]][[BR]][[note:ObjSelectorNote]][[BR]][[BR]]</Description>
    <ShortDesc>Returns the value of a Vectorworks object property.</ShortDesc>
    <Result>Returns the value of the property as a LONGINT value.</Result>
    <Example>p:= GetObjectVariableLongInt(h,579);[[BR]]</Example>
    <ID>2283</ID>
    <IDName>funcGetObjectVariableLongInt</IDName>
    <InternalFunctionName>MP_GetObjectVariableLongInt</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Object property index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjectVariableReal</Name>
    <Version>900</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the value of a Vectorworks object property. Used with properties returning a REAL value. Always returns values in mm, regardless of document units.[[BR]][[BR]][[note:ObjSelectorNote]][[BR]][[BR]]</Description>
    <ShortDesc>Returns the value of a Vectorworks object property.</ShortDesc>
    <Result>Returns the value of the property as a REAL value.</Result>
    <Example>dim_offset:= GetObjectVariableReal(h,4);[[BR]]</Example>
    <ID>2284</ID>
    <IDName>funcGetObjectVariableReal</IDName>
    <InternalFunctionName>MP_GetObjectVariableReal</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Object property index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjectVariableString</Name>
    <Version>900</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>DYNARRAY[] of CHAR</ReturnType>
    <Description>Returns the value of a Vectorworks object property. Used with properties returning a STRING value.[[BR]][[BR]][[note:ObjSelectorNote]][[BR]][[BR]]</Description>
    <ShortDesc>Returns the value of a Vectorworks object property.</ShortDesc>
    <Result>Returns the value of the property as a STRING value.</Result>
    <Example>dimstdName:= GetObjectVariableString(h,27);[[BR]]</Example>
    <ID>2285</ID>
    <IDName>funcGetObjectVariableString</IDName>
    <InternalFunctionName>MP_GetObjectVariableString</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Object property index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>VerifyLibraryRoutine</Name>
    <Version>900</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Verifies that a procedure or function call located in a VectorScript extension is registered and available for use in scripts.[[BR]][[BR]]Call this function prior to using any call located in a VectorScript extension to ensure successful use of the call in a script.[[BR]][[BR]](A VectorScript extension is also known as an SDK Plug-in Library.  It is a plug-in that is developed using the Vectorworks SDK and the C++ language.  When installed in the Plug-ins folder it provides functions that may be called from VectorScript.  The [[name]] function allows the script to determine if the function is available.)</Description>
    <ShortDesc>Verifies that a function call located in a VectorScript extension is registered and available for use in scripts.</ShortDesc>
    <Result>Returns TRUE if the call is available, otherwise returns FALSE.</Result>
    <ID>2286</ID>
    <IDName>funcVerifyLibraryRoutine</IDName>
    <InternalFunctionName>MP_VerifyLibraryRoutine</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>routineName</Name>
        <Type>stringMode</Type>
        <Desc>Name of function call to be verified.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddWallBottomPeak</Name>
    <Version>900</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Adds a peak to the bottom of the referenced wall.</Description>
    <ShortDesc>Adds a peak to the bottom of the referenced wall.</ShortDesc>
    <Example>AddWallBottomPeak(h,24'0",2'6");</Example>
    <ID>2287</ID>
    <IDName>procAddWallBottomPeak</IDName>
    <InternalFunctionName>MP_AddWallBottomPeak</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>wallHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to wall.</Desc>
      </Param>
      <Param>
        <Name>offDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Offset distance of peak from wall start.</Desc>
      </Param>
      <Param>
        <Name>heightDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Height of peak.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NumWallPeaks</Name>
    <Version>900</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>integer</ReturnType>
    <Description>Returns the number of wall peaks (top and bottom) in the given wall.</Description>
    <ShortDesc>Returns the number of wall peaks (top and bottom) in the given wall.</ShortDesc>
    <Result>Returns the number of peaks in the wall.</Result>
    <Example>numPeaks:= NumWallPeaks(h);</Example>
    <ID>2288</ID>
    <IDName>funcNumWallPeaks</IDName>
    <InternalFunctionName>MP_NumWallPeaks</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>GetNumHoles</Name>
    <Version>900</Version>
    <Category>Objects - Polys</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns the number of openings in the referenced polyline.</Description>
    <ShortDesc>Returns the number of openings in the referenced polyline.</ShortDesc>
    <Result>Returns TRUE if the polyline contains openings, otherwise returns FALSE.</Result>
    <SeeAlso>GetHole</SeeAlso>
    <ID>2289</ID>
    <IDName>funcGetNumHoles</IDName>
    <InternalFunctionName>MP_GetNumHoles</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>inPolyline</Name>
        <Type>handleMode</Type>
        <Desc>Handle to polyline.</Desc>
      </Param>
      <Param>
        <Name>outNumHoles</Name>
        <Type>intVarMode</Type>
        <Desc>The number of openings in the polyline object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetHole</Name>
    <Version>900</Version>
    <Category>Objects - Polys</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns a handle to a polyline defining an opening within the referenced polyline.[[BR]][[BR]]The definition polyline can be edited or queried using the standard VectorScript polyline API functions.</Description>
    <ShortDesc>Returns a handle to a polyline defining an opening within the referenced polyline.</ShortDesc>
    <Result>Returns TRUE if the polyline contains openings, otherwise returns FALSE.</Result>
    <SeeAlso>GetNumHoles</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	inPolyline  :HANDLE;[[BR]]	outNumHoles :INTEGER;[[BR]]	inIndex     :INTEGER;[[BR]]	outHole     :HANDLE;[[BR]]	vertexNum   :INTEGER;[[BR]]	pX, pY      :REAL;[[BR]]	vertexType  :INTEGER;[[BR]]	arcRadius   :REAL;[[BR]]BEGIN[[BR]]	inPolyline := FSActLayer;[[BR]]	IF GetNumHoles(inPolyline, outNumHoles) THEN BEGIN[[BR]]		FOR inIndex := 1 TO outNumHoles DO BEGIN[[BR]]			if GetHole(inPolyline, inIndex, outHole) THEN BEGIN[[BR]]				FOR vertexNum := 1 TO GetVertNum(outHole) DO BEGIN[[BR]]					GetPolylineVertex(outHole, vertexNum, pX, pY, vertexType, arcRadius);[[BR]]					WriteLn('pX: ', pX, ' pY: ', pY);[[BR]]				END;[[BR]]			END;[[BR]]		END;[[BR]]	END;[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2290</ID>
    <IDName>funcGetHole</IDName>
    <InternalFunctionName>MP_GetHole</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>inOutsidePolyline</Name>
        <Type>handleMode</Type>
        <Desc>Handle to polyline.</Desc>
      </Param>
      <Param>
        <Name>inIndex</Name>
        <Type>intMode</Type>
        <Desc>Index number of opening definition polyline.</Desc>
      </Param>
      <Param>
        <Name>outHole</Name>
        <Type>handleVarMode</Type>
        <Desc>Handle to definition polyline.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetRoofElementType</Name>
    <Version>900</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Returns information on the specified roof element.  The dormer type value is one of the following: 1 for Trapezium Dormer, 2 for Saddle Dormer, 3 for Shed Dormer, 4 for Slope Dormer, 5 for Bat Dormer.</Description>
    <ShortDesc>Returns information on the specified roof element.</ShortDesc>
    <Comments>Get the type of roof object from id.[[BR]][[BR]]dormerID: Identifies the dormer for which to retrieve the information.[[BR]]edgeIndex: Index to which roof face this skylight or dormer is placed.  Value is one based.[[BR]][[BR]]isDormer: true if this object is a dormer, false if skylight[[BR]]dormerType: if it is a dormer then:[[BR]][[BR]]1 for Trapezium Dormer[[BR]]2 for Saddle Dormer[[BR]]3 for Shed Dormer[[BR]]4 for Slope Dormer[[BR]]5 for Bat Dormer</Comments>
    <ID>2291</ID>
    <IDName>procGetRoofElementType</IDName>
    <InternalFunctionName>MP_GetRoofElementType</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>roofObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof object.</Desc>
      </Param>
      <Param>
        <Name>dormerID</Name>
        <Type>intMode</Type>
        <Desc>Index of roof element.</Desc>
      </Param>
      <Param>
        <Name>edgeIndex</Name>
        <Type>intVarMode</Type>
        <Desc>Index of roof edge associated with roof element (1-based index).</Desc>
      </Param>
      <Param>
        <Name>isDormer</Name>
        <Type>boolVarMode</Type>
        <Desc>True if this element is a dormer, false if it is a skylight.</Desc>
      </Param>
      <Param>
        <Name>dormerType</Name>
        <Type>intVarMode</Type>
        <Desc>Type of dormer roof element.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetRoofFaceCoords</Name>
    <Version>900</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Returns the coordinates of the defining geometry of a roof face.</Description>
    <ShortDesc>Returns the coordinates of the defining geometry of a roof face.</ShortDesc>
    <Comments>Returns information about old-style roof objects (single roof faces).[[BR]][[BR]]Returns roof definition axis, upslope definition point.[[BR]][[BR]]See Also GetRoofFaceAttr() for additional roof face data</Comments>
    <Example>PROCEDURE GetRoofFaceCoordsExample;[[BR]][[BR]]PROCEDURE MarkCoords(h :HANDLE);[[BR]]VAR[[BR]]	beg_pt, end_pt, upslope_pt :VECTOR;[[BR]]	Z :REAL;[[BR]]BEGIN[[BR]]	IF GetObjectVariableInt(h, 172) = 1 THEN BEGIN[[BR]]		GetRoofFaceCoords(h, beg_pt.x, beg_pt.y, end_pt.x, end_pt.y, Z, upslope_pt.x, upslope_pt.y);[[BR]]		beg_pt     := beg_pt     * (25.4 / GetPrefReal(152));[[BR]]		end_pt     := end_pt     * (25.4 / GetPrefReal(152));[[BR]]		upslope_pt := upslope_pt * (25.4 / GetPrefReal(152));[[BR]]		Locus(beg_pt.x, beg_pt.y);[[BR]]		Locus(end_pt.x, end_pt.y);[[BR]]		Locus(upslope_pt.x, upslope_pt.y);[[BR]]	END;[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]	ForEachObject(MarkCoords, (T=71));[[BR]]END;[[BR]]RUN(GetRoofFaceCoordsExample);</Example>
    <ID>2292</ID>
    <IDName>procGetRoofFaceCoords</IDName>
    <InternalFunctionName>MP_GetRoofFaceCoords</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof face object.</Desc>
      </Param>
      <Param>
        <Name>axis1</Name>
        <Type>globPtVarMode</Type>
        <Desc>X-Y coordinates of first axis point.</Desc>
      </Param>
      <Param>
        <Name>axis2</Name>
        <Type>globPtVarMode</Type>
        <Desc>X-Y coordinates of second axis point.</Desc>
      </Param>
      <Param>
        <Name>Zaxis</Name>
        <Type>rVarMode</Type>
        <Desc>Elevation of roof axis.</Desc>
      </Param>
      <Param>
        <Name>upslope</Name>
        <Type>globPtVarMode</Type>
        <Desc>X-Y coordinates of roof upslope point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ClearWallPeaks</Name>
    <Version>900</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Removes all wall peaks from the referenced wall.</Description>
    <ShortDesc>Removes all wall peaks from the referenced wall.</ShortDesc>
    <Comments>remove all peaks in this wall</Comments>
    <ID>2293</ID>
    <IDName>procClearWallPeaks</IDName>
    <InternalFunctionName>MP_ClearWallPeaks</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to wall.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWallPeak</Name>
    <Version>900</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Returns the coordinates of a wall peak in the referenced wall.</Description>
    <ShortDesc>Returns the coordinates of a wall peak in the referenced wall.</ShortDesc>
    <Comments>Get xyz values of peak in wall</Comments>
    <ID>2294</ID>
    <IDName>procGetWallPeak</IDName>
    <InternalFunctionName>MP_GetWallPeak</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to wall.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Index of wall peak.</Desc>
      </Param>
      <Param>
        <Name>xPeak</Name>
        <Type>rVarMode</Type>
        <Desc>X-coordinate of wall peak.</Desc>
      </Param>
      <Param>
        <Name>yPeak</Name>
        <Type>rVarMode</Type>
        <Desc>Y-coordinate of wall peak.</Desc>
      </Param>
      <Param>
        <Name>zPeak</Name>
        <Type>rVarMode</Type>
        <Desc>Z-coordinate of wall peak.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumWallPeaks</Name>
    <Version>900</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the number of peaks in the referenced wall.</Description>
    <ShortDesc>Returns the number of peaks in the referenced wall.</ShortDesc>
    <Result>Returns the number of wall peaks.</Result>
    <Comments>return number of peaks in wall</Comments>
    <ID>2295</ID>
    <IDName>funcGetNumWallPeaks</IDName>
    <InternalFunctionName>MP_GetNumWallPeaks</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to wall.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateNurbsSurface</Name>
    <Version>900</Version>
    <Category>Objects - NURBS</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a new NURBS surface in the document. The surface has two directions, denoted u and v. The surface acts like a set of NURBS curves in each direction, with the number of control points and the degree specified in the parameter list. (Note that the degree parameters have to be lower than the numPts parameters.)[[BR]][[BR]]After creating the surface, you must set the location of each of the control points with NurbsSetPt3D, and when you are done call ResetBBox to make sure the bounding box is correct.</Description>
    <ShortDesc>Creates a new NURBS surface in the document.</ShortDesc>
    <Result>Returns a HANDLE to the newly created NURBS surface object if successful, otherwise returns NIL.</Result>
    <SeeAlso>NurbsSurfaceEvalPt</SeeAlso>
    <Comments>returns a handle to the newly created NURBS surface if it succeeds,  return NULL if it fails[[BR]][[BR]]Creates a NURBS surface with the number of control points and degrees as specified. Call NurbsSetPt3D() to set the control net</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	h :HANDLE;[[BR]]BEGIN[[BR]]	h := CreateNurbsSurface(3, 3, 1, 1);[[BR]]	NurbsSetPt3D(h, 0, 0, 0, 0, 0);[[BR]]	NurbsSetPt3D(h, 0, 1, 1, 0, 0);[[BR]]	NurbsSetPt3D(h, 0, 2, 2, 0, 0);[[BR]]	NurbsSetPt3D(h, 1, 0, 0, 1, 0);[[BR]]	NurbsSetPt3D(h, 1, 1, 1, 1, 1);[[BR]]	NurbsSetPt3D(h, 1, 2, 2, 1, 0);[[BR]]	NurbsSetPt3D(h, 2, 0, 0, 2, 0);[[BR]]	NurbsSetPt3D(h, 2, 1, 1, 2, 0);[[BR]]	NurbsSetPt3D(h, 2, 2, 2, 2, 0);[[BR]]	ResetBBox(h);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2296</ID>
    <IDName>funcCreateNurbsSurface</IDName>
    <InternalFunctionName>MP_CreateNurbsSurface</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>numUPts</Name>
        <Type>longMode</Type>
        <Desc>The number of definition points along the u-axis of the surface.</Desc>
      </Param>
      <Param>
        <Name>numVPts</Name>
        <Type>longMode</Type>
        <Desc>The number of definition points along the v-axis of the surface.</Desc>
      </Param>
      <Param>
        <Name>uDegree</Name>
        <Type>intMode</Type>
        <Desc>Degree of the NURBS curve in the u direction.</Desc>
      </Param>
      <Param>
        <Name>vDegree</Name>
        <Type>intMode</Type>
        <Desc>Degree of the NURBS curve in the v direction.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateNurbsCurve</Name>
    <Version>900</Version>
    <Category>Objects - NURBS</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a new NURBS curve in the document. </Description>
    <ShortDesc>Creates a new NURBS curve in the document.</ShortDesc>
    <Result>Returns a HANDLE to the new NURBS curve if successful, otherwise returns NIL.</Result>
    <Comments>CreateNurbsCurve returns a handle to the newly created NURBS curve, if successful[[BR]][[BR]]Creates a NURBS curve with a single fit or control point , if it succeeds, return nil if it fails</Comments>
    <Example>PROCEDURE NewNurbsCurve;[[BR]]VAR[[BR]]	nC :HANDLE;[[BR]]BEGIN[[BR]]	nC := CreateNurbsCurve(0, 0, 0, true, 2);[[BR]]	AddVertex3D(nC, 1, 1, 0);[[BR]]	AddVertex3D(nC, 2, 0, 0);[[BR]]END;[[BR]]RUN(NewNurbsCurve);[[BR]]</Example>
    <ID>2297</ID>
    <IDName>funcCreateNurbsCurve</IDName>
    <InternalFunctionName>MP_CreateNurbsCurve</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>first</Name>
        <Type>d3PtMode</Type>
        <Desc>Coordinates of the first point in the curve definiton.</Desc>
      </Param>
      <Param>
        <Name>byCtrlPts</Name>
        <Type>boolMode</Type>
        <Desc>Create curve by control points (not interpolation).</Desc>
      </Param>
      <Param>
        <Name>degree</Name>
        <Type>intMode</Type>
        <Desc>The degree of the NURBS curve.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NurbsCurveGetNumPieces</Name>
    <Version>900</Version>
    <Category>Objects - NURBS</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the number of pieces that compose the referenced NURBS curve.</Description>
    <ShortDesc>Returns the number of pieces that compose the referenced NURBS curve.</ShortDesc>
    <Result>An INTEGER count of the pieces composing the curve.</Result>
    <ID>2298</ID>
    <IDName>funcNurbsCurveGetNumPieces</IDName>
    <InternalFunctionName>MP_NurbsCurveGetNumPieces</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to NURBS curve.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NurbsGetNumPts</Name>
    <Version>900</Version>
    <Category>Objects - NURBS</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Returns the number of points for segment of the referenced NURBS curve, or the number of points of the referenced NURBS surface in the u- or v-direction.[[BR]][[BR]]For NURBS curves, the index indicates which segment of the curve is to be queried. The index is zero based (0 to number of segments - 1).[[BR]][[BR]]For NURBS surfaces, specify an index of 1 to indicate u-direction, and an index of 0 to indicate v-direction when querying the surface object.</Description>
    <ShortDesc>Returns the number of points for segment of the referenced NURBS curve, or the number of points of the referenced NURBS surface in the u- or v-direction.</ShortDesc>
    <Result>The number of control points as a LONGINT value.</Result>
    <Comments>this function will work for both nurbs curves and nurbs surfaces. </Comments>
    <ID>2299</ID>
    <IDName>funcNurbsGetNumPts</IDName>
    <InternalFunctionName>MP_NurbsGetNumPts</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to NURBS curve or surface.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>longMode</Type>
        <Desc>Index of curve segment (NURBS curve) or direction index (NURBS surface).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NurbsGetPt3D</Name>
    <Version>900</Version>
    <Category>Objects - NURBS</Category>
    <Type>Procedure</Type>
    <Description>Returns the coordinates of a point in the referenced NURBS curve or surface.[[BR]][[BR]]The index is zero based (0 to number of points - 1).</Description>
    <ShortDesc>Returns the coordinates of a point in the referenced NURBS curve or surface.</ShortDesc>
    <SeeAlso>NurbsCurveEvalPt,NurbsSurfaceEvalPt</SeeAlso>
    <Comments>this function will work for both nurbs curves and nurbs surfaces. [[BR]][[BR]]Gets the index2 vertex of the indexe1 piece of the given NURBS curve or the index1 U and index2 V control point of the surfaces.</Comments>
    <ID>2300</ID>
    <IDName>procNurbsGetPt3D</IDName>
    <InternalFunctionName>MP_NurbsGetPt3D</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to NURBS curve or surface.</Desc>
      </Param>
      <Param>
        <Name>index1</Name>
        <Type>longMode</Type>
        <Desc>Index of point in NURBS curve, or u-coordinate of point location in NURBS surface.</Desc>
      </Param>
      <Param>
        <Name>index2</Name>
        <Type>longMode</Type>
        <Desc>V-coordinate of point location in NURBS surface.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Coordinates of the control point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NurbsSetPt3D</Name>
    <Version>900</Version>
    <Category>Objects - NURBS</Category>
    <Type>Procedure</Type>
    <Description>Sets the coordinates of a point in the referenced NURBS curve or surface.[[BR]][[BR]]The index is zero based (0 to number of points - 1).[[BR]][[BR]]For a nurbs curve, index1 is the piece number of the nurbs curve. Index2 is the vertex number within that piece. NurbsCurveGetNumPieces will give you the number of pieces inside of the nurbs curve (1-based). NurbsGetNumPts will give you the number of points inside of a piece.</Description>
    <ShortDesc>Sets the coordinates of a point in the referenced NURBS curve or surface.</ShortDesc>
    <Comments>this function will work for both nurbs curves and nurbs surfaces.[[BR]][[BR]]set the indexed vertex of the indexed point of the given nurbs curve or the indexed (index2)control point of the surfaces in either the U (index 1= 1)or V(index1 =0) direction</Comments>
    <Example>See NurbsSurfaceEvalPt</Example>
    <ID>2301</ID>
    <IDName>procNurbsSetPt3D</IDName>
    <InternalFunctionName>MP_NurbsSetPt3D</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to NURBS curve or surface.</Desc>
      </Param>
      <Param>
        <Name>index1</Name>
        <Type>longMode</Type>
        <Desc>Index of point in NURBS curve, or u-coordinate of point location in NURBS surface.</Desc>
      </Param>
      <Param>
        <Name>index2</Name>
        <Type>longMode</Type>
        <Desc>V-coordinate of point location in NURBS surface.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>d3PtMode</Type>
        <Desc>New coordinates for the point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NurbsDelVertex</Name>
    <Version>900</Version>
    <Category>Objects - NURBS</Category>
    <Type>Procedure</Type>
    <Description>Deletes a point in the referenced NURBS curve or surface.[[BR]][[BR]]The index is zero based (0 to number of points - 1).</Description>
    <ShortDesc>Deletes a point in the referenced NURBS curve or surface.</ShortDesc>
    <Comments>this function will work for both nurbs curves and nurbs surfaces.DelObject should be used to completely remove a NURBS curve or surface from the drawing. It deletes the index2 point of the index1 piece for nurbs curve or It deletes an entire index2 row (index1 = 1) or column (index1 = 0)of points</Comments>
    <ID>2302</ID>
    <IDName>procNurbsDelVertex</IDName>
    <InternalFunctionName>MP_NurbsDelVertex</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to NURBS curve or surface.</Desc>
      </Param>
      <Param>
        <Name>index1</Name>
        <Type>longMode</Type>
        <Desc>Index of point in NURBS curve, or U-index of a point in NURBS surface.</Desc>
      </Param>
      <Param>
        <Name>index2</Name>
        <Type>longMode</Type>
        <Desc>V-index of point in NURBS surface.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NurbsGetWeight</Name>
    <Version>900</Version>
    <Category>Objects - NURBS</Category>
    <Type>Procedure</Type>
    <Description>Returns the weight of a point in a NURBS curve or surface.[[BR]][[BR]]For NURBS curves, [[p:2]] corresponds to the segment of the curve to be queried, and [[p:3]] corresponds to the index of the point in the segment.[[BR]][[BR]]For NURBS surfaces, [[p:2]] corresponds to the u-index and [[p:3]] corresponds to the v-index of the surface.[[BR]][[BR]]The index is zero based (0 to number of points - 1).</Description>
    <ShortDesc>Returns the weight of a point in a NURBS curve or surface.</ShortDesc>
    <Comments>this function will work for both nurbs curves and nurbs surfaces. </Comments>
    <ID>2303</ID>
    <IDName>procNurbsGetWeight</IDName>
    <InternalFunctionName>MP_NurbsGetWeight</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to NURBS curve or surface.</Desc>
      </Param>
      <Param>
        <Name>index1</Name>
        <Type>longMode</Type>
        <Desc>Segment of curve to be queried (NURBS curve), or u-index (NURBS surface).</Desc>
      </Param>
      <Param>
        <Name>index2</Name>
        <Type>longMode</Type>
        <Desc>Index of point (NURBS curve) or v-index (NURBS surface).</Desc>
      </Param>
      <Param>
        <Name>weight</Name>
        <Type>rVarMode</Type>
        <Desc>Weight of point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NurbsSetWeight</Name>
    <Version>900</Version>
    <Category>Objects - NURBS</Category>
    <Type>Procedure</Type>
    <Description>Sets the weight of a point in a NURBS curve or surface.[[BR]][[BR]]For NURBS curves, [[p:2]] corresponds to the segment of the curve to be queried, and [[p:3]] corresponds to the index of the point in the segment.[[BR]][[BR]]For NURBS surfaces, [[p:2]] corresponds to the u-index and [[p:3]] corresponds to the v-index of the surface.[[BR]][[BR]]The index is zero based (0 to number of points - 1).</Description>
    <ShortDesc>Sets the weight of a point in a NURBS curve or surface.</ShortDesc>
    <Comments>this function will work for both nurbs curves and nurbs surfaces</Comments>
    <ID>2304</ID>
    <IDName>procNurbsSetWeight</IDName>
    <InternalFunctionName>MP_NurbsSetWeight</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to NURBS curve or surface.</Desc>
      </Param>
      <Param>
        <Name>index1</Name>
        <Type>longMode</Type>
        <Desc>Segment of curve to be queried (NURBS curve), or u-index (NURBS surface).</Desc>
      </Param>
      <Param>
        <Name>index2</Name>
        <Type>longMode</Type>
        <Desc>Index of point (NURBS curve) or v-index (NURBS surface).</Desc>
      </Param>
      <Param>
        <Name>weight</Name>
        <Type>realMode</Type>
        <Desc>New weight of point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NurbsCurveType</Name>
    <Version>900</Version>
    <Category>Objects - NURBS</Category>
    <Type>Procedure</Type>
    <Description>Returns the curve type of a segment of the referenced NURBS curve.[[BR]][[BR]]The index is zero based (0 to number of segments - 1).</Description>
    <ShortDesc>Returns the curve type of a segment of the referenced NURBS curve.</ShortDesc>
    <Result>Returns a BOOLEAN indicating whether the curve is created by fit point (TRUE) or by control point (FALSE).</Result>
    <ID>2305</ID>
    <IDName>procNurbsCurveType</IDName>
    <InternalFunctionName>MP_NurbsCurveType</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to NURBS curve.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>longMode</Type>
        <Desc>Index of curve segment.</Desc>
      </Param>
      <Param>
        <Name>isByFit</Name>
        <Type>boolVarMode</Type>
        <Desc>Type of curve segment.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NurbsNumKnots</Name>
    <Version>900</Version>
    <Category>Objects - NURBS</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Returns the number of knots for the referenced NURBS curve or surface. If the object is a curve, then index indicates the segment of the curve to consider. If the object is a surface, then the index indicates the U direction (for index = 1) or the V direction (for index = 0).</Description>
    <ShortDesc>Returns the number of knots for the referenced NURBS curve or surface.</ShortDesc>
    <Comments>/this function will work for both nurbs curves and nurbs surfaces.[[BR]]returns the number of knots for the indexed piece of the given nurbs curve.  or number of U knot vector (index=1) or V knot vector (index=0) of the given nurbs surface</Comments>
    <Example>See NurbsSurfaceEvalPt</Example>
    <ID>2306</ID>
    <IDName>funcNurbsNumKnots</IDName>
    <InternalFunctionName>MP_NurbsNumKnots</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to NURBS curve or surface.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>longMode</Type>
        <Desc>Index of curve, or U/V choice for surface.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NurbsDegree</Name>
    <Version>900</Version>
    <Category>Objects - NURBS</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the degree of a segment in a NURBS curve or surface.[[BR]][[BR]]For NURBS curves, the index indicates which segment of the curve is to be queried. The index is zero based (0 to number of segments - 1).[[BR]][[BR]]For NURBS surfaces, specify an index of 1 to indicate u-direction, and an index of 0 to indicate v-direction when querying the surface object.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the degree of a segment in a NURBS curve or surface.</ShortDesc>
    <Result>The degree of the segment as an INTEGER value.</Result>
    <ID>2307</ID>
    <IDName>funcNurbsDegree</IDName>
    <InternalFunctionName>MP_NurbsDegree</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to NURBS curve or surface.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Index of curve segment (NURBS curve) or direction index (NURBS surface).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NurbsKnot</Name>
    <Version>900</Version>
    <Category>Objects - NURBS</Category>
    <Type>Procedure</Type>
    <Description>Returns the specified knot in a NURBS curve or surface.[[BR]][[BR]]For NURBS curves, [[p:2]] corresponds to the segment of the curve to be queried, and [[p:3]] corresponds to the knot in the segment.[[BR]][[BR]]For NURBS surfaces, [[p:2]] corresponds to the u- or v-direction of the surface (u=1, v=0), and [[p:3]] corresponds to the knot index. [[BR]][[BR]]The index is zero based (0 to number of knots - 1).</Description>
    <ShortDesc>Returns the specified knot in a NURBS curve or surface.</ShortDesc>
    <Comments>this function will work for both nurbs curves and nurbs surfaces</Comments>
    <Example>See NurbsSurfaceEvalPt</Example>
    <ID>2308</ID>
    <IDName>procNurbsKnot</IDName>
    <InternalFunctionName>MP_NurbsKnot</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to NURBS curve or surface.</Desc>
      </Param>
      <Param>
        <Name>index1</Name>
        <Type>longMode</Type>
        <Desc>Segment of curve to be queried (NURBS curve), or direction (NURBS surface).</Desc>
      </Param>
      <Param>
        <Name>index2</Name>
        <Type>longMode</Type>
        <Desc>Index of segment or direction knot.</Desc>
      </Param>
      <Param>
        <Name>knot</Name>
        <Type>rVarMode</Type>
        <Desc>Knot value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NurbsSetKnot</Name>
    <Version>900</Version>
    <Category>Objects - NURBS</Category>
    <Type>Procedure</Type>
    <Description>Sets the specified knot in a NURBS curve or surface.[[BR]][[BR]]For NURBS curves, [[p:2]] corresponds to a segment of the curve, and [[p:3]] corresponds to the knot in the segment.[[BR]][[BR]]For NURBS surfaces, [[p:2]] corresponds to the u- or v-direction of the surface and [[p:3]] corresponds to the knot.[[BR]][[BR]]The index is zero based (0 to number of knots - 1).</Description>
    <ShortDesc>Sets the specified knot in a NURBS curve or surface.</ShortDesc>
    <Comments>this function will work for both nurbs curves and nurbs surfaces</Comments>
    <ID>2309</ID>
    <IDName>procNurbsSetKnot</IDName>
    <InternalFunctionName>MP_NurbsSetKnot</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to NURBS curve or surface.</Desc>
      </Param>
      <Param>
        <Name>index1</Name>
        <Type>longMode</Type>
        <Desc>Segment of curve to be queried (NURBS curve), or direction (NURBS surface).</Desc>
      </Param>
      <Param>
        <Name>index2</Name>
        <Type>longMode</Type>
        <Desc>Index of segment or direction knot.</Desc>
      </Param>
      <Param>
        <Name>knot</Name>
        <Type>realMode</Type>
        <Desc>Knot value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateExtrudeAlongPath</Name>
    <ChangedDate>2013:07:23T14:03:00</ChangedDate>
    <Version>900</Version>
    <Category>Objects - 3D</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a new path extrude object in the document.  The profile defines the shape of the cross-section, and is extruded along the path to generate the resulting object.[[BR]][[BR]]The path argument must be a handle to a NURBS Curve object (type 111).  The profile argument must be a handle to an object of one of the following types: NURBS Curve, Polygon, Polyline, Arc, Rectangle, Rounded Rectangle, Line, Oval.[[BR]]</Description>
    <ShortDesc>Creates a new path extrude object in the document.</ShortDesc>
    <Result>Returns a HANDLE to the new path extrude if successful, otherwise returns NIL.</Result>
    <SeeAlso>ExtrudeAlongPath</SeeAlso>
    <Comments>The following objects are supported as profile objects:[[BR]][[BR]]Line               2[[BR]]Box                3[[BR]]Oval               4[[BR]]Polygon         5[[BR]]Arc                6[[BR]]Freehand       8[[BR]]R Rect           13[[BR]]Polyline        21[[BR]]3D Poly        25[[BR]]NURBS Curve 111[[BR]][[BR]][[BR]][[BR]]</Comments>
    <ID>2312</ID>
    <IDName>funcCreateExtrudeAlongPath</IDName>
    <InternalFunctionName>MP_CreateExtrudeAlongPath</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>pathHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the path object.</Desc>
      </Param>
      <Param>
        <Name>profileHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the profile object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateTaperedExtrude</Name>
    <Version>900</Version>
    <Category>Objects - 3D</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a new tapered extrude object in the document.</Description>
    <ShortDesc>Creates a new tapered extrude object in the document.</ShortDesc>
    <Result>Returns a HANDLE to the new tapered extrude if successful, otherwise returns NIL.</Result>
    <ID>2313</ID>
    <IDName>funcCreateTaperedExtrude</IDName>
    <InternalFunctionName>MP_CreateTaperedExtrude</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>profileH</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object defining profile geometry.</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>realMode</Type>
        <Desc>Taper angle of extrude (in degrees).</Desc>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>realMode</Type>
        <Desc>Height of extrude.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetRoofFaceAttrib</Name>
    <Version>900</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Returns information on the referenced roof face object.[[BR]][[BR]][[note:RoofMiterStyleTable]]</Description>
    <ShortDesc>Returns information on the referenced roof face object.</ShortDesc>
    <Comments>Returns information about old-style roof objects (single roof faces).[[BR]][[BR]]Returns slope, edge miter style, miter dimensions, and thickness of roof object.[[BR]][[BR]]See Also GetRoofFaceCoord() for additional roof face data</Comments>
    <Example>PROCEDURE Example;[[BR]][[BR]]PROCEDURE ShowRoofFaceAttrib(roofFace :HANDLE);[[BR]]VAR[[BR]]	roofRise, roofRun :REAL; [[BR]]	miterType, holeStyle :INTEGER; [[BR]]	vertPart, thickness :REAL;[[BR]]BEGIN[[BR]]	IF GetObjectVariableInt(roofFace, 172) = 1 THEN BEGIN[[BR]]		GetRoofFaceAttrib(roofFace, roofRise, roofRun, miterType, holeStyle, vertPart, thickness);[[BR]]		Message('roofRise: ', roofRise,[[BR]]			',  roofRun: ', roofRun,[[BR]]			',  miterType: ', miterType,[[BR]]			',  holeStyle: ', holeStyle,[[BR]]			',  vertPart: ', vertPart,[[BR]]			',  thickness: ', thickness);[[BR]]	END;[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]	ForEachObject(ShowRoofFaceAttrib, ((SEL=TRUE)&amp;(T=71)));[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2314</ID>
    <IDName>procGetRoofFaceAttrib</IDName>
    <InternalFunctionName>MP_GetRoofFaceAttrib</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>roofFace</Name>
        <Type>handleMode</Type>
        <Desc>Handle to roof face object.</Desc>
      </Param>
      <Param>
        <Name>roofRise</Name>
        <Type>rVarMode</Type>
        <Desc>Rise of roof.</Desc>
      </Param>
      <Param>
        <Name>roofRun</Name>
        <Type>rVarMode</Type>
        <Desc>Run of roof.</Desc>
      </Param>
      <Param>
        <Name>miterType</Name>
        <Type>intVarMode</Type>
        <Desc>Miter style of roof.</Desc>
      </Param>
      <Param>
        <Name>holeStyle</Name>
        <Type>intVarMode</Type>
        <Desc>Miter style of openings.</Desc>
      </Param>
      <Param>
        <Name>vertPart</Name>
        <Type>rVarMode</Type>
        <Desc>Vertical component of compound miters.</Desc>
      </Param>
      <Param>
        <Name>thickness</Name>
        <Type>rVarMode</Type>
        <Desc>Thickness of roof.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetArrayDimensions</Name>
    <Version>900</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Returns the dimensions of the specified array.</Description>
    <ShortDesc>Returns the dimensions of the specified array.</ShortDesc>
    <Comments>Works for both regular and dynamic arrays. Returns 0 for column dimensions of the array is 1-dimensional.</Comments>
    <ID>2315</ID>
    <IDName>procGetArrayDimensions</IDName>
    <InternalFunctionName>MP_GetArrayDimensions</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>arrayname</Name>
        <Type>arrayMode</Type>
        <Desc>Name of array.</Desc>
      </Param>
      <Param>
        <Name>rowStart</Name>
        <Type>intVarMode</Type>
        <Desc>Start row value.</Desc>
      </Param>
      <Param>
        <Name>rowEnd</Name>
        <Type>intVarMode</Type>
        <Desc>End row value.</Desc>
      </Param>
      <Param>
        <Name>columnStart</Name>
        <Type>intVarMode</Type>
        <Desc>Start column value.</Desc>
      </Param>
      <Param>
        <Name>columnEnd</Name>
        <Type>intVarMode</Type>
        <Desc>End column value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HasConstraint</Name>
    <Version>900</Version>
    <Category>Parametric Constraints</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns whether the referenced object has a parametric constraint .</Description>
    <ShortDesc>Returns whether the referenced object has a parametric constraint .</ShortDesc>
    <ID>2318</ID>
    <IDName>funcHasConstraint</IDName>
    <InternalFunctionName>MP_HasConstraint</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetViewVector</Name>
    <Version>900</Version>
    <Category>View / Zoom</Category>
    <Type>Procedure</Type>
    <Description>Sets the view direction of the active document.</Description>
    <ShortDesc>Sets the view direction of the active document.</ShortDesc>
    <ID>2320</ID>
    <IDName>procSetViewVector</IDName>
    <InternalFunctionName>MP_SetViewVector</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>location</Name>
        <Type>d3PtMode</Type>
        <Desc>3D coordinate of view origin.</Desc>
      </Param>
      <Param>
        <Name>target</Name>
        <Type>d3PtMode</Type>
        <Desc>3D coordinate of view target.</Desc>
      </Param>
      <Param>
        <Name>up</Name>
        <Type>d3PtMode</Type>
        <Desc>3D coordinate indicating camera up direction.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateEditInteger</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates an editable text field control for INTEGER and LONGINT values.[[BR]][[BR]][[name]] is intended specifically for entry of numeric values; the control returns values in a numeric format, and supports calculations within the control field.</Description>
    <ShortDesc>Creates an editable text field for INTEGER and LONGINT values.</ShortDesc>
    <SeeAlso>GetDlgCtrlWidthStdCh</SeeAlso>
    <Comments>Edits long ints, does math,  get and set values with get and set integer calls[DWD 11/20/00]</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	dialog1 :INTEGER;[[BR]]	result  :INTEGER;[[BR]]PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]END;[[BR]]BEGIN[[BR]]	dialog1 := CreateLayout('Example Dialog', FALSE, 'OK', 'Cancel');[[BR]]	CreateEditInteger(dialog1, 4, 123, 16);[[BR]]	SetFirstLayoutItem(dialog1, 4);[[BR]]	result := RunLayoutDialog(dialog1, Dialog_Handler);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2321</ID>
    <IDName>procCreateEditInteger</IDName>
    <InternalFunctionName>MP_CreateEditInteger</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index that will identify the control item.</Desc>
      </Param>
      <Param>
        <Name>defaultValue</Name>
        <Type>longMode</Type>
        <Desc>Default value for the field.</Desc>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>longMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateEditReal</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates an editable text field control for REAL values.[[BR]][[BR]][[name]] is intended specifically for entry of numeric values; the control returns values in a numeric format, and supports calculations within the control field.[[BR]][[BR]][[note:EditRealFieldTypes]]</Description>
    <ShortDesc>Creates an editable text field control for REAL values.</ShortDesc>
    <SeeAlso>GetDlgCtrlWidthStdCh</SeeAlso>
    <Comments>Edits reals, does math,  get and set values with get and set real calls. There are 5 edit real types: 1 - Real, regular old real type; 2 - Angle, vs input and output is always in degrees but the user can use what ever they want; 3 - Dimension, usually an offset this a distance that is not tied to the origin; 4 - 4- CoordinateX, this is an exact x location on the drawing; 5-CoordinateY, this is an exact y location on the drawing. There are separate x and y controls to account for changes the user may make to the origin. I think Z coordinates should use the offset mode, but I need to check with mark on this one.  Darick</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	dialog1 :INTEGER;[[BR]]	result  :INTEGER;[[BR]]PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]END;[[BR]]BEGIN[[BR]]	dialog1 := CreateLayout('Example Dialog', FALSE, 'OK', 'Cancel');[[BR]]	CreateEditReal(dialog1, 4, 3, 123, 16);[[BR]]	SetFirstLayoutItem(dialog1, 4);[[BR]]	result := RunLayoutDialog(dialog1, Dialog_Handler);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2322</ID>
    <IDName>procCreateEditReal</IDName>
    <InternalFunctionName>MP_CreateEditReal</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index that will identify the control item.</Desc>
      </Param>
      <Param>
        <Name>editRealType</Name>
        <Type>longMode</Type>
        <Desc>The type of REAL value being accepted.</Desc>
      </Param>
      <Param>
        <Name>defaultValue</Name>
        <Type>realMode</Type>
        <Desc>Default value for the field.</Desc>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>longMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetEditInteger</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns the numeric value from the specified INTEGER numeric edit field control.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the numeric value from the specified numeric edit field.</ShortDesc>
    <Result>A BOOLEAN value indicating the success of the operation.</Result>
    <Comments>does math, returns false for any error in conversion</Comments>
    <ID>2323</ID>
    <IDName>funcGetEditInteger</IDName>
    <InternalFunctionName>MP_GetEditInteger</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the control item.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>lngVarMode</Type>
        <Desc>The value contained in the field.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetEditReal</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns the numeric value from the specified REAL numeric edit field control.[[BR]]</Description>
    <ShortDesc>Returns the numeric value from the specified numeric edit field control.</ShortDesc>
    <Result>A BOOLEAN value indicating the success of the operation.</Result>
    <Comments>does math, handles units, returns false for any error in conversion. For an explanation of editRealType, see the CreateEditReal call</Comments>
    <Example>PROCEDURE Dialog_Handler(var item :LONGINT; data :LONGINT);[[BR]][[BR]]PROCEDURE InvalidValue(controlID :INTEGER);[[BR]]BEGIN[[BR]]	item := -1;[[BR]]	SelField(controlID);[[BR]]	SysBeep;[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]	CASE item OF[[BR]]	     	SetupDialogC: SetEditReal(dialogID, 11, 3, elevation);[[BR]]     		1: IF NOT(GetEditReal(dialogID, 11, 3, elevation)) [[BR]]                 THEN InvalidValue(11);[[BR]]	END;[[BR]]END;</Example>
    <ID>2324</ID>
    <IDName>funcGetEditReal</IDName>
    <InternalFunctionName>MP_GetEditReal</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the control item.</Desc>
      </Param>
      <Param>
        <Name>editRealType</Name>
        <Type>longMode</Type>
        <Desc>The type of REAL value being returned.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>rVarMode</Type>
        <Desc>The value contained in the field.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetEditInteger</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the numeric value of the specified INTEGER numeric edit field control.[[BR]]</Description>
    <ShortDesc>Sets the numeric value of the specified INTEGER numeric edit field control.</ShortDesc>
    <ID>2325</ID>
    <IDName>procSetEditInteger</IDName>
    <InternalFunctionName>MP_SetEditInteger</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the control item.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>longMode</Type>
        <Desc>The new value for the field.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetEditReal</Name>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the numeric value of the specified REAL numeric edit field control.[[BR]][[BR]][[note:EditRealFieldTypes]]</Description>
    <ShortDesc>Sets the numeric value of the specified REAL numeric edit field control.</ShortDesc>
    <ID>2326</ID>
    <IDName>procSetEditReal</IDName>
    <InternalFunctionName>MP_SetEditReal</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the control item.</Desc>
      </Param>
      <Param>
        <Name>editRealType</Name>
        <Type>longMode</Type>
        <Desc>The type of REAL value displayed in the field.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>realMode</Type>
        <Desc>The new value for the field.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVSResourceFile</Name>
    <ChangedDate>2017:04:14T10:36:00</ChangedDate>
    <Version>900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the active resource file for a script. The resource file is opened for the duration of script execution.[[BR]][[BR]]The name of the resource file should be specified without the file extension.</Description>
    <ShortDesc>Sets the active resource file for a script.</ShortDesc>
    <Result>A BOOLEAN value indicating the success of the file open operation.</Result>
    <SeeAlso>GetResourceString</SeeAlso>
    <Comments>Specify the file name without an extension. However, the file must exist in the plug-ins folder WITH an extension. Use .rsr on Windows and .rsrc on the Mac.</Comments>
    <ID>2327</ID>
    <IDName>funcSetVSResourceFile</IDName>
    <InternalFunctionName>MP_SetVSResourceFile</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>fileName</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The name of the resource file to be opened.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetResourceString</Name>
    <ChangedDate>2017:07:05T10:24:00</ChangedDate>
    <Version>900</Version>
    <Category>Strings</Category>
    <Type>Procedure</Type>
    <Description>Returns the specified resource string from a resource file.</Description>
    <ShortDesc>Returns the specified resource string from a resource file.</ShortDesc>
    <SeeAlso>SetVSResourceFile</SeeAlso>
    <ID>2328</ID>
    <IDName>procGetResourceString</IDName>
    <InternalFunctionName>MP_GetResourceString</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theString</Name>
        <Type>eCharDynarrayVarMode</Type>
        <Desc>The string contained within the resource.</Desc>
      </Param>
      <Param>
        <Name>id</Name>
        <Type>intMode</Type>
        <Desc>The ID of the resource.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the string resource.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FormatTextDialog</Name>
    <Version>900</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Procedure</Type>
    <Description>Displays the text formatting dialog and returns the selected text formatting options.[[BR]][[BR]][[note:TextStyleTable]][[BR]][[BR]][[note:FormatTextMask]]</Description>
    <ShortDesc>Displays text formatting dialog and returns the selected options</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR [[BR]]	font    :STRING; [[BR]]	style   :INTEGER;[[BR]]	size    :REAL;[[BR]]	spacing :INTEGER; [[BR]]	leading :REAL;[[BR]]	hAlign  :INTEGER;[[BR]]	vAlign  :INTEGER;[[BR]]	disable :INTEGER;[[BR]]BEGIN[[BR]]	{Set some dialog defaults.}[[BR]]	font := 'Arial';[[BR]]	style := 1;[[BR]]	size := 12;[[BR]]	spacing := 2;[[BR]][[BR]]	{Bit values for disableMask: [[BR]]         1: font[[BR]]         2: size[[BR]]         4: spacing[[BR]]         8: style[[BR]]        16: hAlign[[BR]]        32: vAlign}[[BR]]	disable := 32;[[BR]][[BR]]	{Now get the user's selections.}[[BR]]	FormatTextDialog(font, style, size, spacing, leading, hAlign, vAlign, disable);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2329</ID>
    <IDName>procFormatTextDialog</IDName>
    <InternalFunctionName>MP_FormatTextDialog</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>fontName</Name>
        <Type>stringInOutMode</Type>
        <Desc>The name of the selected font.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intInOutMode</Type>
        <Desc>The selected style options.  0 for plain text.  Bit 1 is on for bold, bit 2 for italic, bit 3 for underline, bit 4 for outline and bit 5 for shadow.</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>realInOutMode</Type>
        <Desc>The selected size (in points).</Desc>
      </Param>
      <Param>
        <Name>spacing</Name>
        <Type>intInOutMode</Type>
        <Desc>The selected spacing option.  0 for custom leading, 2 for single spacing, 3 for 1 1/2 spacing and 4 for double spacing.</Desc>
      </Param>
      <Param>
        <Name>leading</Name>
        <Type>realInOutMode</Type>
        <Desc>The selected leading value (in points) for custom spacing or -1 for a standard spacing.</Desc>
      </Param>
      <Param>
        <Name>hAlignment</Name>
        <Type>intInOutMode</Type>
        <Desc>The selected horizontal alignment options.  0 for general justify (used only on worksheets), 1 for left, 2 for center and 3 for right.</Desc>
      </Param>
      <Param>
        <Name>vAlignment</Name>
        <Type>intInOutMode</Type>
        <Desc>The selected vertical alignment options.  1 for top, 2 for top baseline, 3 for center, 4 for bottom baseline and 5 for bottom.</Desc>
      </Param>
      <Param>
        <Name>disableMask</Name>
        <Type>intMode</Type>
        <Desc>Disables controls and indicates for worksheet.  Bit 1 disables font name, bit 2 size, bit 3 spacing, bit 4 style, bit 5 h align, bit 6 v align and bit 7 worksheet.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateWS</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a new worksheet in a Vectorworks document.</Description>
    <ShortDesc>Creates a new worksheet in a Vectorworks document.</ShortDesc>
    <Result>Returns a HANDLE to the new worksheet.</Result>
    <Comments>Creates a new worksheet object with the specified name and number of rows and columns.[[BR]]If the name is in use, a legal available name based on the specified name will be used instead.[[BR]]The number of rows must be &gt;= 1 and &lt;= 4094.[[BR]]The number of columns must be &gt;= 1 and &lt;= 256.[[BR]]NOTE: To create an on-drawing worksheet object, pass a worksheet handle to CreateWSImage.</Comments>
    <ID>2330</ID>
    <IDName>funcCreateWS</IDName>
    <InternalFunctionName>MP_CreateWS</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>The name of the worksheet.</Desc>
      </Param>
      <Param>
        <Name>rows</Name>
        <Type>intMode</Type>
        <Desc>The number of rows in the worksheet.</Desc>
      </Param>
      <Param>
        <Name>columns</Name>
        <Type>intMode</Type>
        <Desc>The number of columns in the worksheet.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateWSImage</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates an in-document image of the specified worksheet. The specified point location is the top left corner of the image object.</Description>
    <ShortDesc>Creates an in-document image of the specified worksheet.</ShortDesc>
    <ID>2331</ID>
    <IDName>funcCreateWSImage</IDName>
    <InternalFunctionName>MP_CreateWSImage</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>location</Name>
        <Type>globPtMode</Type>
        <Desc>X-Y coordinate location of image object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RecalculateWS</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Recalculates all formulas for the referenced worksheet.</Description>
    <ShortDesc>Recalculates all formulas for the referenced worksheet.</ShortDesc>
    <ID>2332</ID>
    <IDName>procRecalculateWS</IDName>
    <InternalFunctionName>MP_RecalculateWS</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSImage</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns a handle to the on-drawing object (image) of the referenced worksheet.</Description>
    <ShortDesc>Returns a handle to the on-drawing object (image) of the referenced worksheet.</ShortDesc>
    <Result>Returns a HANDLE of the worksheet image object.</Result>
    <ID>2333</ID>
    <IDName>funcGetWSImage</IDName>
    <InternalFunctionName>MP_GetWSImage</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ShowWS</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the display status of the referenced worksheet.</Description>
    <ShortDesc>Sets the display status of the referenced worksheet.</ShortDesc>
    <ID>2334</ID>
    <IDName>procShowWS</IDName>
    <InternalFunctionName>MP_ShowWS</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>show</Name>
        <Type>boolMode</Type>
        <Desc>Desired display status of worksheet</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsWSVisible</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns display status of referenced worksheet.</Description>
    <ShortDesc>Returns display status of referenced worksheet.</ShortDesc>
    <Result>Returns a BOOLEAN indicating the current visibility of the worksheet.</Result>
    <ID>2335</ID>
    <IDName>funcIsWSVisible</IDName>
    <InternalFunctionName>MP_IsWSVisible</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSPlacement</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the on-screen location of the referenced worksheets' window.</Description>
    <ShortDesc>Returns the on-screen location of the referenced worksheets' window.</ShortDesc>
    <ID>2336</ID>
    <IDName>procGetWSPlacement</IDName>
    <InternalFunctionName>MP_GetWSPlacement</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>top</Name>
        <Type>intVarMode</Type>
        <Desc>X-coordinate of top left corner of worksheet window.</Desc>
      </Param>
      <Param>
        <Name>left</Name>
        <Type>intVarMode</Type>
        <Desc>Y-coordinate of top left corner of worksheet window.</Desc>
      </Param>
      <Param>
        <Name>bottom</Name>
        <Type>intVarMode</Type>
        <Desc>X-coordinate of bottom right corner of worksheet window.</Desc>
      </Param>
      <Param>
        <Name>right</Name>
        <Type>intVarMode</Type>
        <Desc>Y-coordinate of bottom right corner of worksheet window.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSPlacement</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the on-screen location and dimensions of the referenced worksheets' window.</Description>
    <ShortDesc>Sets the on-screen location and dimensions of the referenced worksheets' window.</ShortDesc>
    <ID>2337</ID>
    <IDName>procSetWSPlacement</IDName>
    <InternalFunctionName>MP_SetWSPlacement</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>top</Name>
        <Type>intMode</Type>
        <Desc>X-coordinate of top left corner of worksheet window.</Desc>
      </Param>
      <Param>
        <Name>left</Name>
        <Type>intMode</Type>
        <Desc>Y-coordinate of top left corner of worksheet window.</Desc>
      </Param>
      <Param>
        <Name>bottom</Name>
        <Type>intMode</Type>
        <Desc>X-coordinate of bottom right corner of worksheet window.</Desc>
      </Param>
      <Param>
        <Name>right</Name>
        <Type>intMode</Type>
        <Desc>Y-coordinate of bottom right corner of worksheet window.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSRowColumnCount</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the number of rows and columns in the referenced worksheet.</Description>
    <ShortDesc>Returns the number of rows and columns in the referenced worksheet.</ShortDesc>
    <ID>2338</ID>
    <IDName>procGetWSRowColumnCount</IDName>
    <InternalFunctionName>MP_GetWSRowColumnCount</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>numRows</Name>
        <Type>intVarMode</Type>
        <Desc>Number of rows in worksheet.</Desc>
      </Param>
      <Param>
        <Name>numColumns</Name>
        <Type>intVarMode</Type>
        <Desc>Number of columns in worksheet.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTopVisibleWS</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns a handle to topmost visible worksheet.</Description>
    <ShortDesc>Returns a handle to topmost visible worksheet.</ShortDesc>
    <Result>Returns a HANDLE to the worksheet whose window is at the top of the window stacking order.</Result>
    <ID>2339</ID>
    <IDName>funcGetTopVisibleWS</IDName>
    <InternalFunctionName>MP_GetTopVisibleWS</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>SetTopVisibleWS</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Brings the referenced worksheet to the front of any open worksheet windows.</Description>
    <ShortDesc>Brings the referenced worksheet to the front of any open worksheet windows.</ShortDesc>
    <ID>2340</ID>
    <IDName>procSetTopVisibleWS</IDName>
    <InternalFunctionName>MP_SetTopVisibleWS</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsWSCellNumber</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determines if a cell in the referenced worksheet contains a numeric value. The cell is referenced by its row-column position in the worksheet.</Description>
    <ShortDesc>Determines if a cell in the referenced worksheet contains a numeric value.</ShortDesc>
    <Result>A BOOLEAN value indicating whether the value is numeric.</Result>
    <ID>2341</ID>
    <IDName>funcIsWSCellNumber</IDName>
    <InternalFunctionName>MP_IsWSCellNumber</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column of cell to be queried</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsWSCellString</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determines if a cell in the referenced worksheet contains a string value. The cell is referenced by its row-column position in the worksheet.</Description>
    <ShortDesc>Determines if a cell in the referenced worksheet contains a string value. </ShortDesc>
    <Result>A BOOLEAN value indicating whether the value is a string.</Result>
    <ID>2342</ID>
    <IDName>funcIsWSCellString</IDName>
    <InternalFunctionName>MP_IsWSCellString</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column of cell to be queried.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSCellString</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the displayed string value of a cell in the referenced worksheet.</Description>
    <ShortDesc>Returns the displayed string value of a cell in the referenced worksheet.</ShortDesc>
    <Comments>Gets the specified worksheet cell's displayed string.[[BR]]If the cell contains a string, the displayed string IS that string.[[BR]]If the cell contains a number, the displayed string is that number PLUS any formatting applied to that number.[[BR]]Use IsWSCellString and/or MP_IsWSCellNumber to determine what type of value the cell actually contains. [[BR]]Use GetWSCellValue to retrieve actual numerical value without  formatting from a cell that contains a number.</Comments>
    <ID>2343</ID>
    <IDName>procGetWSCellString</IDName>
    <InternalFunctionName>MP_GetWSCellString</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>cellString</Name>
        <Type>strVarMode</Type>
        <Desc>The string value contained in the worksheet cell.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSCellValue</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the displayed numeric value of a cell in the referenced worksheet.</Description>
    <ShortDesc>Returns the displayed numeric value of a cell in the referenced worksheet.</ShortDesc>
    <ID>2344</ID>
    <IDName>procGetWSCellValue</IDName>
    <InternalFunctionName>MP_GetWSCellValue</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>cellValue</Name>
        <Type>rVarMode</Type>
        <Desc>Numeric value contained in worksheet cell.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSCellFormula</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the formula from a cell in the referenced worksheet.</Description>
    <ShortDesc>Returns the formula from a cell in the referenced worksheet.</ShortDesc>
    <ID>2345</ID>
    <IDName>procGetWSCellFormula</IDName>
    <InternalFunctionName>MP_GetWSCellFormula</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>formula</Name>
        <Type>strVarMode</Type>
        <Desc>Formula contained in worksheet cell.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellFormula</Name>
    <ChangedDate>2008:08:11T15:22:00</ChangedDate>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Inserts a formula into a cell of the referenced worksheet.[[BR]][[BR]][[name]] allows a formula to be inserted into a rectangular range of cells. To insert a formula into a single cell, specify identical values for the top/bottom and left/right range boundaries.[[BR]][[BR]][[name]] triggers a worksheet recalculation if the AutoRecalc flag is set.[[BR]]It is best to turn off that flag before using [[name]] repeatedly or in a loop and restore the flag after all operations are done (see GetWSAutoRecalcState and SetWSAutoRecalcState). [[BR]]At the end, the worksheet should be recalculated by calling RecalculateWS. </Description>
    <ShortDesc>Inserts a formula into a cell of the referenced worksheet.</ShortDesc>
    <SeeAlso>GetWSAutoRecalcState, SetWSAutoRecalcState</SeeAlso>
    <Comments>Sets specified formula string in specified worksheet cell(s).[[BR]]If the 0 column is specified, a database row is created and the formula set as the database row criteria.</Comments>
    <Example>{ inserts a formula into a single cell }[[BR]]SetWSCellFormula(h,4,2,4,2,'=3*2');[[BR]][[BR]]{ inserts a formula into a range of cells }[[BR]]SetWSCellFormula(h,1,1,2,10,'&lt;empty&gt;');[[BR]][[BR]]{ creates a database sub-row for the record 'Part Info' }[[BR]]SetWSCellFormula(h,2,0,2,0,'=DATABASE(R IN [''PART INFO''])');[[BR]][[BR]][[BR]]///////////////////////////////////////////////////////////////[[BR]][[BR]]{Save the current AutoRecalc state}[[BR]]state := GetWSAutoRecalcState(h);[[BR]][[BR]]{Turn off worksheet Auto Recalculation}[[BR]]SetWSAutoRecalcState(h,false);[[BR]][[BR]]FOR i := 1 TO numCols DO[[BR]]BEGIN[[BR]]SetWSCellFormula (h, 1, i, 1, i, Num2Str (0, i));[[BR]]SetWSCellFormula (h, 2, i, 2, i , Num2Str (0, i));[[BR]]END;[[BR]][[BR]]{Restore AutoRecalc state}[[BR]]SetWSAutoRecalcState(h, state);[[BR]][[BR]]{Now recalculate the worksheet}[[BR]]RecalculateWS(h);[[BR]]</Example>
    <ID>2346</ID>
    <IDName>procSetWSCellFormula</IDName>
    <InternalFunctionName>MP_SetWSCellFormula</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell insertion range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Leftmost column of cell insertion range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell insertion range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Rightmost column of cell insertion range.</Desc>
      </Param>
      <Param>
        <Name>formula</Name>
        <Type>stringMode</Type>
        <Desc>Formula to be inserted into cell range.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSCellAlignment</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the horizontal alignment setting of a cell in the referenced worksheet.</Description>
    <ShortDesc>Returns the horizontal alignment setting of a cell in the referenced worksheet.</ShortDesc>
    <Comments>Alignment constants:[[BR]]General  = 0[[BR]]Left         = 1[[BR]]Center    = 2[[BR]]Right      = 3</Comments>
    <ID>2347</ID>
    <IDName>procGetWSCellAlignment</IDName>
    <InternalFunctionName>MP_GetWSCellAlignment</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>cellAlignment</Name>
        <Type>intVarMode</Type>
        <Desc>Horizontal alignment index of cell.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellAlignment</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the horizontal alignment of a cell in the referenced worksheet.[[BR]][[BR]][[name]] allows a formula to be inserted into a rectangular range of cells. To set the alignment of a single cell, specify identical values for the top/bottom and left/right range boundaries.[[BR]][[BR]]Alignment index values for worksheet cells correspond to the horizontal alignment index values for text used by VectorScript.</Description>
    <ShortDesc>Sets the horizontal alignment of a cell in the referenced worksheet.</ShortDesc>
    <Comments>Horizontal alignment constants:[[BR]]General  = 0[[BR]]Left         = 1[[BR]]Center    = 2[[BR]]Right      = 3</Comments>
    <ID>2348</ID>
    <IDName>procSetWSCellAlignment</IDName>
    <InternalFunctionName>MP_SetWSCellAlignment</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Leftmost column of cell range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Rightmost column of cell range.</Desc>
      </Param>
      <Param>
        <Name>cellAlignment</Name>
        <Type>intMode</Type>
        <Desc>The new alignment index value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSCellNumberFormat</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the numeric formatting of a cell in the referenced worksheet.[[BR]][[BR]]Specific index values for numeric formats and accuracy are listed in the Appendix.</Description>
    <ShortDesc>Returns the numeric formatting of a cell in the referenced worksheet.</ShortDesc>
    <Comments>Number Format constants:[[BR]]style                       value                meaning of accuracy[[BR]]General                   = 0[[BR]]FixDecimal            = 1                       number of decimal places[[BR]]DecwCommas       = 2                      number of decimal places[[BR]]Scientific               = 3                       number of decimal places[[BR]]Fractional              = 4                       largest displayed denominator[[BR]]Dimension            = 5                       [[BR]]Angle                      = 6                       corresponds to angular accuracy in units dialog[[BR]]Date                         = 7                       [[BR]]Conditonal           = 8</Comments>
    <ID>2349</ID>
    <IDName>procGetWSCellNumberFormat</IDName>
    <InternalFunctionName>MP_GetWSCellNumberFormat</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intVarMode</Type>
        <Desc>Numeric format style index.</Desc>
      </Param>
      <Param>
        <Name>accuracy</Name>
        <Type>intVarMode</Type>
        <Desc>Numeric accuracy / secondary format index.</Desc>
      </Param>
      <Param>
        <Name>leaderString</Name>
        <Type>strVarMode</Type>
        <Desc>Leader string (where applicable).</Desc>
      </Param>
      <Param>
        <Name>trailerString</Name>
        <Type>strVarMode</Type>
        <Desc>Trailer string (where applicable).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellNumberFormat</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the numeric formatting of a cell in the referenced worksheet.[[BR]][[BR]][[name]] allows numeric formatting to be set for a rectangular range of cells. To set the formatting of a single cell, specify identical values for the top/bottom and left/right range boundaries.[[BR]][[BR]][[note:WorksheetNumberFormatTable]][[BR]]</Description>
    <ShortDesc>Sets the numeric formatting of a cell in the referenced worksheet.</ShortDesc>
    <Comments>Number Format constants:[[BR]]style                       value                meaning of accuracy[[BR]]General                   = 0[[BR]]FixDecimal            = 1                       number of decimal places[[BR]]DecwCommas       = 2                      number of decimal places[[BR]]Scientific               = 3                       number of decimal places[[BR]]Fractional              = 4                       largest displayed denominator[[BR]]Dimension            = 5                       [[BR]]Angle                      = 6                       corresponds to angular accuracy in units dialog[[BR]]Date                         = 7                       [[BR]]Conditonal           = 8</Comments>
    <ID>2350</ID>
    <IDName>procSetWSCellNumberFormat</IDName>
    <InternalFunctionName>MP_SetWSCellNumberFormat</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Leftmost column of cell range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Rightmost column of cell range.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
        <Desc>Numeric format style index.</Desc>
      </Param>
      <Param>
        <Name>accuracy</Name>
        <Type>intMode</Type>
        <Desc>Numeric accuracy / secondary format index.</Desc>
      </Param>
      <Param>
        <Name>leaderString</Name>
        <Type>stringMode</Type>
        <Desc>Leader string (where applicable).</Desc>
      </Param>
      <Param>
        <Name>trailerString</Name>
        <Type>stringMode</Type>
        <Desc>Trailer string (where applicable).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSRowHeight</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the height of a row in the referenced worksheet.</Description>
    <ShortDesc>Returns the height of a row in the referenced worksheet.</ShortDesc>
    <ID>2351</ID>
    <IDName>procGetWSRowHeight</IDName>
    <InternalFunctionName>MP_GetWSRowHeight</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row to be queried.</Desc>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>intVarMode</Type>
        <Desc>Height of row (in pixels).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSColumnWidth</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the width of a column in the referenced worksheet.</Description>
    <ShortDesc>Returns the width of a column in the referenced worksheet.</ShortDesc>
    <ID>2352</ID>
    <IDName>procGetWSColumnWidth</IDName>
    <InternalFunctionName>MP_GetWSColumnWidth</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column to be queried.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>intVarMode</Type>
        <Desc>Width of column (in pixels).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSColumnWidth</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the width of a column in the referenced worksheet.[[BR]][[BR]][[name]] allows width to be set for a range of columns. To set the width of a single worksheet column, specify identical values for the left/right column range boundaries.[[BR]]</Description>
    <ShortDesc>Sets the specified width for the specified worksheet columns.</ShortDesc>
    <ID>2353</ID>
    <IDName>procSetWSColumnWidth</IDName>
    <InternalFunctionName>MP_SetWSColumnWidth</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>fromColumn</Name>
        <Type>intMode</Type>
        <Desc>Leftmost column of column range.</Desc>
      </Param>
      <Param>
        <Name>toColumn</Name>
        <Type>intMode</Type>
        <Desc>Rightmost column of column range.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>intMode</Type>
        <Desc>New width of columns (in pixels).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSColumnOperators</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the sort and summarize column operators for a database row in the referenced worksheet.</Description>
    <ShortDesc>Returns the column operators for a database row in the referenced worksheet.</ShortDesc>
    <ID>2354</ID>
    <IDName>procGetWSColumnOperators</IDName>
    <InternalFunctionName>MP_GetWSColumnOperators</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row to be queried.</Desc>
      </Param>
      <Param>
        <Name>sort1</Name>
        <Type>intVarMode</Type>
        <Desc>Primary sort column.</Desc>
      </Param>
      <Param>
        <Name>sort2</Name>
        <Type>intVarMode</Type>
        <Desc>Secondary sort column.</Desc>
      </Param>
      <Param>
        <Name>sort3</Name>
        <Type>intVarMode</Type>
        <Desc>Tertiary sort column.</Desc>
      </Param>
      <Param>
        <Name>sum1</Name>
        <Type>intVarMode</Type>
        <Desc>Primary summarize column.</Desc>
      </Param>
      <Param>
        <Name>sum2</Name>
        <Type>intVarMode</Type>
        <Desc>Secondary summarize column.</Desc>
      </Param>
      <Param>
        <Name>sum3</Name>
        <Type>intVarMode</Type>
        <Desc>Tertiary summarize column.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSColumnOperators</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets sort and summarize column operators for a database row in the referenced worksheet.[[BR]][[BR]]</Description>
    <ShortDesc>Sets column operators for a database row in the referenced worksheet.</ShortDesc>
    <ID>2355</ID>
    <IDName>procSetWSColumnOperators</IDName>
    <InternalFunctionName>MP_SetWSColumnOperators</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row that will be assigned new sort/summarize operators.</Desc>
      </Param>
      <Param>
        <Name>sort1</Name>
        <Type>intMode</Type>
        <Desc>Primary sort column.</Desc>
      </Param>
      <Param>
        <Name>sort2</Name>
        <Type>intMode</Type>
        <Desc>Secondary sort column.</Desc>
      </Param>
      <Param>
        <Name>sort3</Name>
        <Type>intMode</Type>
        <Desc>Tertiary sort column.</Desc>
      </Param>
      <Param>
        <Name>sum1</Name>
        <Type>intMode</Type>
        <Desc>Primary summarize column.</Desc>
      </Param>
      <Param>
        <Name>sum2</Name>
        <Type>intMode</Type>
        <Desc>Secondary summarize column.</Desc>
      </Param>
      <Param>
        <Name>sum3</Name>
        <Type>intMode</Type>
        <Desc>Tertiary summarize column.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSCellTextFormat</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns text format settings for a cell in the referenced worksheet.[[BR]][[BR]][[note:TextStyleTable]]</Description>
    <ShortDesc>Returns text format settings for a cell in the referenced worksheet.</ShortDesc>
    <Comments>Text Format (style) constants:[[BR]]Plain              = 0[[BR]]Bold              = 1[[BR]]Italic             = 2[[BR]]Underline    = 4[[BR]]Outline         = 8[[BR]]Shadow       = 16[[BR]][[BR]]Note: Outline and Shadow only display on the Mac</Comments>
    <ID>2356</ID>
    <IDName>procGetWSCellTextFormat</IDName>
    <InternalFunctionName>MP_GetWSCellTextFormat</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>fontIndex</Name>
        <Type>intVarMode</Type>
        <Desc>Font index of cell text.</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>intVarMode</Type>
        <Desc>Font size of cell text.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intVarMode</Type>
        <Desc>Font style of cell text.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellTextFormat</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets text format settings for a cell in the referenced worksheet.[[BR]][[BR]][[name]] allows text formatting to be set for a rectangular range of cells. To set the formatting of a single cell, specify identical values for the top/bottom and left/right range boundaries.[[BR]][[BR]][[note:TextStyleTable]][[BR]]</Description>
    <ShortDesc>Sets text format settings for a cell in the referenced worksheet.</ShortDesc>
    <ID>2357</ID>
    <IDName>procSetWSCellTextFormat</IDName>
    <InternalFunctionName>MP_SetWSCellTextFormat</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Leftmost column of cell range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Rightmost column of cell range.</Desc>
      </Param>
      <Param>
        <Name>fontIndex</Name>
        <Type>intMode</Type>
        <Desc>Font index for cell text.</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>intMode</Type>
        <Desc>Font size for cell text.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
        <Desc>Font style for cell text.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSCellBorder</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the cell border of a cell in the referenced worksheet.</Description>
    <ShortDesc>Returns the cell border of a cell in the referenced worksheet.</ShortDesc>
    <ID>2358</ID>
    <IDName>procGetWSCellBorder</IDName>
    <InternalFunctionName>MP_GetWSCellBorder</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>top</Name>
        <Type>boolVarMode</Type>
        <Desc>Top border ON-OFF status.</Desc>
      </Param>
      <Param>
        <Name>left</Name>
        <Type>boolVarMode</Type>
        <Desc>Left border ON-OFF status.</Desc>
      </Param>
      <Param>
        <Name>bottom</Name>
        <Type>boolVarMode</Type>
        <Desc>Bottom border ON-OFF status.</Desc>
      </Param>
      <Param>
        <Name>right</Name>
        <Type>boolVarMode</Type>
        <Desc>Right border ON-OFF status.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellBorder</Name>
    <Version>900</Version>
    <OldVersion>1200</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the borders of a cell in the referenced worksheet.[[BR]][[BR]][[name]] allows text borders to be set for a rectangular range of cells. To set the border formatting of a single cell, specify identical values for the top/bottom and left/right range boundaries.[[BR]]</Description>
    <ShortDesc>Sets the borders of a cell in the referenced worksheet.</ShortDesc>
    <Comments>OBSOLETE  for Version 12: see new SetWSCellBorders. [HOT 07/12/05]</Comments>
    <ID>2359</ID>
    <IDName>procSetWSCellBorder</IDName>
    <InternalFunctionName>MP_SetWSCellBorder</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Leftmost column of cell range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Rightmost column of cell range.</Desc>
      </Param>
      <Param>
        <Name>top</Name>
        <Type>boolMode</Type>
        <Desc>Top border ON-OFF status.</Desc>
      </Param>
      <Param>
        <Name>left</Name>
        <Type>boolMode</Type>
        <Desc>Left border ON-OFF status.</Desc>
      </Param>
      <Param>
        <Name>bottom</Name>
        <Type>boolMode</Type>
        <Desc>Bottom border ON-OFF status.</Desc>
      </Param>
      <Param>
        <Name>right</Name>
        <Type>boolMode</Type>
        <Desc>Right border ON-OFF status.</Desc>
      </Param>
      <Param>
        <Name>outline</Name>
        <Type>boolMode</Type>
        <Desc>All borders ON-OFF status.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DeleteWSRows</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Deletes rows from the referenced worksheet.</Description>
    <ShortDesc>Deletes rows from the referenced worksheet.</ShortDesc>
    <ID>2360</ID>
    <IDName>procDeleteWSRows</IDName>
    <InternalFunctionName>MP_DeleteWSRows</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>startRow</Name>
        <Type>intMode</Type>
        <Desc>Start row of delete operation.</Desc>
      </Param>
      <Param>
        <Name>numRows</Name>
        <Type>intMode</Type>
        <Desc>Number of rows to be deleted.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertWSRows</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Inserts rows into a referenced worksheet.</Description>
    <ShortDesc>Inserts rows into a referenced worksheet.</ShortDesc>
    <ID>2361</ID>
    <IDName>procInsertWSRows</IDName>
    <InternalFunctionName>MP_InsertWSRows</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>beforeRow</Name>
        <Type>intMode</Type>
        <Desc>Insert location for new worksheet rows.</Desc>
      </Param>
      <Param>
        <Name>numRows</Name>
        <Type>intMode</Type>
        <Desc>Number of rows to insert.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DeleteWSColumns</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Deletes columns from the referenced worksheet.</Description>
    <ShortDesc>Deletes columns from the referenced worksheet.</ShortDesc>
    <ID>2362</ID>
    <IDName>procDeleteWSColumns</IDName>
    <InternalFunctionName>MP_DeleteWSColumns</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>startColumn</Name>
        <Type>intMode</Type>
        <Desc>Start column of delete operation.</Desc>
      </Param>
      <Param>
        <Name>numColumns</Name>
        <Type>intMode</Type>
        <Desc>Number of columns to delete.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertWSColumns</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Inserts columns into the referenced worksheet.</Description>
    <ShortDesc>Inserts columns into the referenced worksheet.</ShortDesc>
    <ID>2363</ID>
    <IDName>procInsertWSColumns</IDName>
    <InternalFunctionName>MP_InsertWSColumns</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>beforeColumn</Name>
        <Type>intMode</Type>
        <Desc>Insert location of new columns.</Desc>
      </Param>
      <Param>
        <Name>numColumns</Name>
        <Type>intMode</Type>
        <Desc>Number of columns to insert.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSSelection</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the current selection range of the referenced worksheet.[[BR]][[BR]]In addition to returning the selection range of a worksheet, [[name]] will also return the range of selected database subrows, where applicable.</Description>
    <ShortDesc>Returns the current selection range of the referenced worksheet.</ShortDesc>
    <ID>2364</ID>
    <IDName>procGetWSSelection</IDName>
    <InternalFunctionName>MP_GetWSSelection</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>currentCellRow</Name>
        <Type>intVarMode</Type>
        <Desc>Row of currently active cell.</Desc>
      </Param>
      <Param>
        <Name>currentCellColumn</Name>
        <Type>intVarMode</Type>
        <Desc>Column of currently active cell.</Desc>
      </Param>
      <Param>
        <Name>topRangeRow</Name>
        <Type>intVarMode</Type>
        <Desc>Top row of selection range.</Desc>
      </Param>
      <Param>
        <Name>leftRangeColumn</Name>
        <Type>intVarMode</Type>
        <Desc>Leftmost column of selection range.</Desc>
      </Param>
      <Param>
        <Name>topRangeSubrow</Name>
        <Type>intVarMode</Type>
        <Desc>Top row of of subrow selection range.</Desc>
      </Param>
      <Param>
        <Name>bottomRangeRow</Name>
        <Type>intVarMode</Type>
        <Desc>Bottom row of selection range.</Desc>
      </Param>
      <Param>
        <Name>rightRangeColumn</Name>
        <Type>intVarMode</Type>
        <Desc>Rightmost column of selection range.</Desc>
      </Param>
      <Param>
        <Name>bottomRangeSubrow</Name>
        <Type>intVarMode</Type>
        <Desc>Bottom row of subrow selection range.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSSelection</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the current selection range of the referenced worksheet.[[BR]][[BR]]In addition to setting the selection range of a worksheet, [[name]] will can also set the selection range of database subrows, where applicable.</Description>
    <ShortDesc>Sets the selection for the specified visible worksheet.</ShortDesc>
    <ID>2365</ID>
    <IDName>procSetWSSelection</IDName>
    <InternalFunctionName>MP_SetWSSelection</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>currentCellRow</Name>
        <Type>intMode</Type>
        <Desc>Row of currently active cell.</Desc>
      </Param>
      <Param>
        <Name>currentCellColumn</Name>
        <Type>intMode</Type>
        <Desc>Column of currently active cell.</Desc>
      </Param>
      <Param>
        <Name>topRangeRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of selection range.</Desc>
      </Param>
      <Param>
        <Name>leftRangeColumn</Name>
        <Type>intMode</Type>
        <Desc>Leftmost column of selection range.</Desc>
      </Param>
      <Param>
        <Name>topRangeSubrow</Name>
        <Type>intMode</Type>
        <Desc>Top row of of subrow selection range.</Desc>
      </Param>
      <Param>
        <Name>bottomRangeRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of selection range.</Desc>
      </Param>
      <Param>
        <Name>rightRangeColumn</Name>
        <Type>intMode</Type>
        <Desc>Rightmost column of selection range.</Desc>
      </Param>
      <Param>
        <Name>bottomRangeSubrow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of subrow selection range.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCurrentCell</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the active cell of the referenced worksheet.</Description>
    <ShortDesc>Sets the active cell of the referenced worksheet.</ShortDesc>
    <Comments>Sets the specified cell to be the worksheet's current cell. [[BR]]If specified cell is not contained within currently specified worksheet range, current selection is changed to single cell selection.</Comments>
    <ID>2366</ID>
    <IDName>procSetWSCurrentCell</IDName>
    <InternalFunctionName>MP_SetWSCurrentCell</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>currentCellRow</Name>
        <Type>intMode</Type>
        <Desc>Row of active cell.</Desc>
      </Param>
      <Param>
        <Name>currentCellColumn</Name>
        <Type>intMode</Type>
        <Desc>Column of active cell.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsValidWSCell</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns if a specified cell is within the valid range of the referenced worksheet.</Description>
    <ShortDesc>Returns if a specified cell is within the valid range of the referenced worksheet.</ShortDesc>
    <Result>A BOOLEAN value indicating whether the cell is in the valid range of the worksheet.</Result>
    <Comments>Determines if specified cell is valid for the specified worksheet.[[BR]]NOTE: A determination that a cell is valid only means that the specified cell falls within a range of 0 to the current number of worksheet rows and 0 to the current number of worksheet columns. A valid cell does not imply that every worksheet SDK function will accept that cell. The user should always  note any specific cell and cell range restrictions of a call they may use.</Comments>
    <ID>2367</ID>
    <IDName>funcIsValidWSCell</IDName>
    <InternalFunctionName>MP_IsValidWSCell</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row of target cell.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column of target cell.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsValidWSRange</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns whether the specified range is within the valid range of the referenced worksheet.</Description>
    <ShortDesc>Returns whether the specified range is within the valid range of the referenced worksheet.</ShortDesc>
    <Result>A BOOLEAN value indicating whether the range is valid.</Result>
    <Comments>Determines if specified range is valid for the specified worksheet.[[BR]]NOTE: A determination that a range is valid only means that the specified range falls within a range of 0 to the current number of worksheet rows and 0 to the current number of worksheet columns. A valid range does not imply that every worksheet SDK function will accept that range. The user should always  note any specific cell and cell range restrictions of a call they may use.</Comments>
    <ID>2368</ID>
    <IDName>funcIsValidWSRange</IDName>
    <InternalFunctionName>MP_IsValidWSRange</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of target range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Leftmost column of target range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of target range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Rightmost column of target range.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsWSDatabaseRow</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns whether a row in the referenced worksheet is a database row.</Description>
    <ShortDesc>Returns whether a row in the referenced worksheet is a database row.</ShortDesc>
    <Result>A BOOLEAN value indicating the database status of the targeted row.</Result>
    <ID>2369</ID>
    <IDName>funcIsWSDatabaseRow</IDName>
    <InternalFunctionName>MP_IsWSDatabaseRow</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>databaseRow</Name>
        <Type>intMode</Type>
        <Desc>Row to be queried.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsValidWSSubrowCell</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns whether a specified database subrow cell is in the valid range of displayed subrows.</Description>
    <ShortDesc>Returns whether a specified database subrow cell is in the valid range of displayed subrows.</ShortDesc>
    <Result>A BOOLEAN value indicating whether the subrow cell location is valid.</Result>
    <Comments>Determines if specified worksheet subrow cell is valid.[[BR]]WARNING: Because database subrow cells and their contents are dynamically created based on the current database of objects and the current critieria string any return values from this function are not guaranteed to be correct beyond this function call. Use this function carefully and at your own risk.</Comments>
    <ID>2370</ID>
    <IDName>funcIsValidWSSubrowCell</IDName>
    <InternalFunctionName>MP_IsValidWSSubrowCell</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Database row to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column to be queried.</Desc>
      </Param>
      <Param>
        <Name>subrow</Name>
        <Type>intMode</Type>
        <Desc>Index of subrow.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSSubrowCount</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns a count of displayed subrows for a specified database row.</Description>
    <ShortDesc>Returns a count of displayed subrows for a specified database row.</ShortDesc>
    <Comments>Gets the number of subrows associated with the specified worksheet database row.[[BR]]WARNING: Because database subrow cells and their contents are dynamically created based on the current database of objects and the current critieria string any return values from this function are not guaranteed to be correct beyond this function call. Use this function carefully and at your own risk.</Comments>
    <ID>2371</ID>
    <IDName>procGetWSSubrowCount</IDName>
    <InternalFunctionName>MP_GetWSSubrowCount</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>databaseRow</Name>
        <Type>intMode</Type>
        <Desc>Database row to be queried.</Desc>
      </Param>
      <Param>
        <Name>numSubrows</Name>
        <Type>intVarMode</Type>
        <Desc>Number of displayed subrows.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsWSSubrowCellNumber</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns whether a specified database subrow cell contains a numeric value.</Description>
    <ShortDesc>Returns whether a specified database subrow cell contains a numeric value.</ShortDesc>
    <Result>A BOOLEAN value indicating whether the cell contains a numeric value.</Result>
    <Comments>Determines if the specified worksheet subrow cell's contents is a numerical value.[[BR]]WARNING: Because database subrow cells and their contents are dynamically created based on the current database of objects and the current critieria string any return values from this function are not guaranteed to be correct beyond this function call. Use this function carefully and at your own risk.</Comments>
    <ID>2372</ID>
    <IDName>funcIsWSSubrowCellNumber</IDName>
    <InternalFunctionName>MP_IsWSSubrowCellNumber</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Database row to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column to be queried.</Desc>
      </Param>
      <Param>
        <Name>subrow</Name>
        <Type>intMode</Type>
        <Desc>Index of subrow to be queried.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsWSSubrowCellString</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns whether a specified database subrow cell contains a numeric value.</Description>
    <ShortDesc>Returns whether a specified database subrow cell contains a numeric value.</ShortDesc>
    <Result>A BOOLEAN value indicating whether the cell contains a string value.</Result>
    <Comments>Determines if the specified worksheet subrow cell's contents is a string value.[[BR]]WARNING: Because database subrow cells and their contents are dynamically created based on the current database of objects and the current critieria string any return values from this function are not guaranteed to be correct beyond this function call. Use this function carefully and at your own risk</Comments>
    <ID>2373</ID>
    <IDName>funcIsWSSubrowCellString</IDName>
    <InternalFunctionName>MP_IsWSSubrowCellString</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Database row to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column to be queried.</Desc>
      </Param>
      <Param>
        <Name>subrow</Name>
        <Type>intMode</Type>
        <Desc>Index of subrow to be queried.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSSubrowCellString</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the displayed string in a database subrow cell.</Description>
    <ShortDesc>Returns the displayed string in a database subrow cell.</ShortDesc>
    <Comments>Gets the specified worksheet subrow cell's displayed string.[[BR]]WARNING: Because database subrow cells and their contents are dynamically created based on the current database of objects and the current critieria string any return values from this function are not guaranteed to be correct beyond this function call. Use this function carefully and at your own risk.</Comments>
    <ID>2374</ID>
    <IDName>procGetWSSubrowCellString</IDName>
    <InternalFunctionName>MP_GetWSSubrowCellString</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Database row to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column to be queried.</Desc>
      </Param>
      <Param>
        <Name>subrow</Name>
        <Type>intMode</Type>
        <Desc>Index of subrow cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>cellString</Name>
        <Type>strVarMode</Type>
        <Desc>Display string of subrow cell.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSSubrowCellValue</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the displayed numeric value in a database subrow cell.</Description>
    <ShortDesc>Returns the displayed numeric value in a database subrow cell.</ShortDesc>
    <Comments>Gets the specified worksheet subrow cell's numerical value.[[BR]]WARNING: Because database subrow cells and their contents are dynamically created based on the current database of objects and the current critieria string any return values from this function are not guaranteed to be correct beyond this function call. Use this function carefully and at your own risk.</Comments>
    <ID>2375</ID>
    <IDName>procGetWSSubrowCellValue</IDName>
    <InternalFunctionName>MP_GetWSSubrowCellValue</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Database row to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column to be queried.</Desc>
      </Param>
      <Param>
        <Name>subrow</Name>
        <Type>intMode</Type>
        <Desc>Index of subrow cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>cellValue</Name>
        <Type>rVarMode</Type>
        <Desc>Display value of subrow cell.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ShowWSDialog</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Displays a worksheet preference or settings dialog for the active worksheet. [[BR]][[BR]]Settings or attributes modified by the dialog will be applied to the current selection range of the worksheet.[[BR]][[BR]][[note:WSDialogType]]</Description>
    <ShortDesc>Displays a worksheet preference or settings dialog for the active worksheet. </ShortDesc>
    <Comments>Dialog Type constants:[[BR]]Column Width		= 0[[BR]]Cell Border		= 1[[BR]]Number                        	= 2[[BR]]Preferences		= 3[[BR]]Print Setup		= 4[[BR]]Print			= 5[[BR]]Function			= 6[[BR]]Criteria			= 7[[BR]]Format Text		= 8[[BR]]Set Row Criteria		= 9[[BR]]Edit Row Criteria	                 = 10</Comments>
    <ID>2376</ID>
    <IDName>procShowWSDialog</IDName>
    <InternalFunctionName>MP_ShowWSDialog</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogType</Name>
        <Type>intMode</Type>
        <Desc>Index of dialog to be displayed.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ClearWSCell</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Clears content and resets attributes of a cell in the referenced worksheet.[[BR]][[BR]][[name]] allows a rectangular range of cells to be reset. To reset a single cell, specify identical values for the top/bottom and left/right range boundaries.[[BR]]</Description>
    <ShortDesc>Clears contents and attributes from specified worksheet cells.</ShortDesc>
    <ID>2377</ID>
    <IDName>procClearWSCell</IDName>
    <InternalFunctionName>MP_ClearWSCell</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Leftmost column of cell range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Rightmost column of cell range.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSFromImage</Name>
    <Version>900</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns a handle to the worksheet being displayed by a worksheet image object..</Description>
    <ShortDesc>Returns a handle to the worksheet being displayed by a worksheet image object.</ShortDesc>
    <ID>2378</ID>
    <IDName>funcGetWSFromImage</IDName>
    <InternalFunctionName>MP_GetWSFromImage</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheetImage</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet image object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetProduct</Name>
    <Version>900</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Identifies what NNA products and product packages are available in the current product installation.[[BR]][[BR]]Obsolete as of 10. Use GetEnabledModules instead.</Description>
    <ShortDesc>Identifies what NNA products and product packages are available in the current product installation.</ShortDesc>
    <SeeAlso>GetEnabledModules</SeeAlso>
    <Comments>Retrieves information that identifies what vertical market product (if any) is currently running, and which add-ons (modules) are currently available (if any).</Comments>
    <ID>2379</ID>
    <IDName>procGetProduct</IDName>
    <InternalFunctionName>MP_GetProduct</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>product</Name>
        <Type>intVarMode</Type>
        <Desc>Product index.</Desc>
      </Param>
      <Param>
        <Name>modules</Name>
        <Type>lngVarMode</Type>
        <Desc>Package index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WriteLnMac</Name>
    <Version>900</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>Writes a line of data to a text file using Macintosh character encoding for extended ASCII characters (128-255). This allows extended character data to be properly read and displayed by Vectorworks on Windows systems (Vectorworks by default uses Macintosh encoding for extended character values).[[BR]][[BR]]The line of data written to file is terminated with a return character combination appropriate for the platform on which the file is being written.[[BR]][[BR]]</Description>
    <ShortDesc>Writes a line of data to a text file using Macintosh character encoding. This allows the file to be read back in as a VectorScript on any platform.</ShortDesc>
    <SeeAlso>WriteLn</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]CONST[[BR]]	Vendor = 'ACME';[[BR]]	Price = 123.45;[[BR]]	Tax = 1.07;[[BR]]BEGIN[[BR]]	Open('Output.txt');[[BR]]	WriteLnMac('Mfr/Cost: ', Vendor, '/', Price + Tax);[[BR]]	Close('Output.txt');[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2380</ID>
    <IDName>procWriteLnMac</IDName>
    <InternalFunctionName>MP_WriteLnMac</InternalFunctionName>
    <ModernName>WriteLineMacEncoded</ModernName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>z</Name>
        <Type>anyMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WriteMac</Name>
    <Version>900</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>Outputs the specified data to an ASCII text file. The variable length parameter list specifies the data to be written to the file. [[BR]][[BR]]Parameters may be any valid data type, and data types may be mixed in a single call to the procedure. [[name]] leaves the file pointer positioned at the end of the last data value written to the file; any data subsequently written to the file will be appended to the end of this value.[[BR]][[BR]][[note:WriteLnFormatNote]]</Description>
    <ShortDesc>Writes data to a text file. Uses Macintosh character encoding. This allows the file to be read back in as a VectorScript on any platform.</ShortDesc>
    <Example>[[name]](Value1);</Example>
    <ID>2381</ID>
    <IDName>procWriteMac</IDName>
    <InternalFunctionName>MP_WriteMac</InternalFunctionName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>z</Name>
        <Type>anyMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NurbsCurveEvalPt</Name>
    <Version>950</Version>
    <Category>Objects - NURBS</Category>
    <Type>Procedure</Type>
    <Description>This procedure determines the point on the nurbs curve at the given u value in the indexed piece.[[BR]][[BR]]The index is zero based (0 to number of knots - 1). The u value can range from 0 to the value of the last knot in the curve segment.</Description>
    <ShortDesc>This procedure determines the point on the nurbs curve at the given U value in the indexed piece.</ShortDesc>
    <SeeAlso>NurbsKnot,NurbsNumKnots</SeeAlso>
    <ID>2382</ID>
    <IDName>procNurbsCurveEvalPt</IDName>
    <InternalFunctionName>MP_NurbsCurveEvalPt</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a NURBS curve.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>longMode</Type>
        <Desc>Segment of curve to be queried.</Desc>
      </Param>
      <Param>
        <Name>u</Name>
        <Type>realMode</Type>
        <Desc>Parameter between the minimum and maximum knot value.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Location of the u point on the curve.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NurbsSurfaceEvalPt</Name>
    <Version>950</Version>
    <Category>Objects - NURBS</Category>
    <Type>Procedure</Type>
    <Description>This procedure determines the point on the nurbs surface at the given u,v values.[[BR]][[BR]]The u vand v values can range from 0 to the value of the last knot in each direction.</Description>
    <ShortDesc>This procedure determines the point on the nurbs surface at the given U,V values.</ShortDesc>
    <SeeAlso>NurbsKnot,NurbsNumKnots</SeeAlso>
    <Example>PROCEDURE LocusSurface;[[BR]]{ Create a surface, then put loci on it }[[BR]]CONST[[BR]]    uMaxIndex   = 16;   { 17 points, 0 - 16 }[[BR]]    vMaxIndex   = 16;   { 17 points, 0 - 16 }[[BR]]    uDegree     = 3;    [[BR]]    vDegree     = 4;[[BR]]    xMin        = -3;[[BR]]    xMax        = 3;[[BR]]    yMin        = -3;[[BR]]    yMax        = 3;[[BR]]    zMax        = 3;[[BR]]    numLoci     = 17;[[BR]]VAR[[BR]]    surfaceH                : HANDLE;[[BR]]    x,y,z,u,v               : REAL;[[BR]]    i,j                     : INTEGER;[[BR]]    numKnotsU, numKnotsV    : INTEGER;[[BR]]    maxFoundU, maxFoundV    : REAL;[[BR]]    uStep, vStep            : REAL;[[BR]]BEGIN[[BR]]    { Create a Nurbs Surface }[[BR]]    [[BR]]    surfaceH := CreateNurbsSurface(uMaxIndex + 1, vMaxIndex + 1, uDegree, vDegree);[[BR]]    IF surfaceH &lt;&gt; NIL THEN BEGIN[[BR]]        FOR i := 0 TO uMaxIndex  DO BEGIN[[BR]]            FOR j := 0 TO vMaxIndex DO BEGIN[[BR]]                x := xMin + (xMax - xMin) * (i / uMaxIndex);[[BR]]                y := yMin + (yMax - yMin) * (j / vMaxIndex);[[BR]]                z := Cos(i - uMaxIndex / 2) *[[BR]]                     Cos(j - vMaxIndex / 2) * [[BR]]                     zMax / (1 + x*x + y*y);[[BR]]                NurbsSetPt3D(surfaceH, i, j, x,y,z);[[BR]]            END;[[BR]]        END;[[BR]]        ResetBBox(surfaceH);[[BR]]        [[BR]]        { Add Loci }[[BR]]        [[BR]]        { Find number of knots in each direction }[[BR]]        numKnotsU := NurbsNumKnots(surfaceH, 1);[[BR]]        numKnotsV := NurbsNumKnots(surfaceH, 0);[[BR]]        [[BR]]        { Find the u and v real values that correspond the knots with the [[BR]]          maximum u and v indices. }[[BR]]        NurbsKnot(surfaceH, 1, numKnotsU - 1, maxFoundU);       [[BR]]        NurbsKnot(surfaceH, 0, numKnotsV - 1, maxFoundV);       [[BR]]        [[BR]]        Message(numKnotsU, ' ', numKnotsV);[[BR]]        [[BR]]        { Create 3D loci along each direction }[[BR]]        uStep   := maxFoundU / (numLoci - 1);[[BR]]        vStep   := maxFoundV / (numLoci - 1);[[BR]]        [[BR]]        u := 0;[[BR]]        WHILE u &lt;= maxFoundU DO BEGIN[[BR]]            v := 0;[[BR]]            WHILE v &lt;= maxFoundV DO BEGIN[[BR]]                NurbsSurfaceEvalPt(surfaceH, u, v, x,y,z);[[BR]]                Locus3D(x,y,z);[[BR]]                v := v + vStep;[[BR]]            END;[[BR]]            u := u + uStep;[[BR]]        END;[[BR]]    [[BR]]        { Set View }[[BR]]        Projection(0,0,9.76,-4.88,4.88,4.88,-4.88);[[BR]]        SetView(#-45.0d,#-35.26438968275d,#-30.0d,0,0,0);[[BR]]        RedrawAll;[[BR]]    END;[[BR]]END;[[BR]]Run(LocusSurface);</Example>
    <ID>2383</ID>
    <IDName>procNurbsSurfaceEvalPt</IDName>
    <InternalFunctionName>MP_NurbsSurfaceEvalPt</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a NURBS surface.</Desc>
      </Param>
      <Param>
        <Name>u</Name>
        <Type>realMode</Type>
        <Desc>Parameter between the minimum and maximum knot value in U direction.</Desc>
      </Param>
      <Param>
        <Name>v</Name>
        <Type>realMode</Type>
        <Desc>Parameter between the minimum and maximum knot value in V direction.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Location of the u,v point on the surface.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetParameterVisibility</Name>
    <Version>1000</Version>
    <Category>Objects - Custom</Category>
    <Type>Procedure</Type>
    <Description>For plug-in objects, this procedure sets whether or not the specified parameter is visible on the Object Info Palette.  This routine is used inside plug-in object regeneration scripts to set their parameter visibility.  This visibility is an object instance property.</Description>
    <ShortDesc>For plug-in objects, this procedure determines whether or not the specified parameter is visible on the Object Info Palette.</ShortDesc>
    <ID>2384</ID>
    <IDName>procSetParameterVisibility</IDName>
    <InternalFunctionName>MP_SetParameterVisibility</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>inPlugin</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the currently executing plug-in object.</Desc>
      </Param>
      <Param>
        <Name>inParameterName</Name>
        <Type>stringMode</Type>
        <Desc>Name of parameter, as it appears in the plug-in editor's parameter list.</Desc>
      </Param>
      <Param>
        <Name>inSetVisible</Name>
        <Type>boolMode</Type>
        <Desc>The new visibility state for the parameter specified. </Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnableParameter</Name>
    <Version>1000</Version>
    <Category>Objects - Custom</Category>
    <Type>Procedure</Type>
    <Description>For plug-in objects, this procedure sets whether or not the specified parameter is enabled on the Object Info Palette.  This routine is used inside plug-in object regeneration scripts to set their parameter enable state.  This state is an object instance property.</Description>
    <ShortDesc>For plug-in objects, this procedure determines whether or not the specified parameter in the Object Info Palette is editable.</ShortDesc>
    <ID>2385</ID>
    <IDName>procEnableParameter</IDName>
    <InternalFunctionName>MP_EnableParameter</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>inPlugin</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the currently executing plug-in object.</Desc>
      </Param>
      <Param>
        <Name>inParameterName</Name>
        <Type>stringMode</Type>
        <Desc>Name of parameter, as it appears in the plug-in editor's parameter list.</Desc>
      </Param>
      <Param>
        <Name>inSetEnabled</Name>
        <Type>boolMode</Type>
        <Desc>Enabling flag.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPluginString</Name>
    <ChangedDate>2017:06:05T09:28:00</ChangedDate>
    <Version>1000</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>DYNARRAY[] of CHAR</ReturnType>
    <Description>Returns the string specified by stringIndex. The strings are created using the "Strings" button in the plug-in editor.</Description>
    <ShortDesc>Returns the string specified by stringIndex.</ShortDesc>
    <Result>The requested string.</Result>
    <ID>2386</ID>
    <IDName>funcGetPluginString</IDName>
    <InternalFunctionName>MP_GetPluginString</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>stringIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the string as represented in the plug-in editor.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LineLineIntersection</Name>
    <Version>1000</Version>
    <Category>Graphic Calculation</Category>
    <Type>Procedure</Type>
    <Description>Returns intersection point of the two specified lines.  [[p:5]] is true if the lines are parallel. [[p:6]] is true if the intersection is on both lines.</Description>
    <ShortDesc>Returns intersection point of the two specified lines.  parallel and coll return whether a parallel or collinear condition exists.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   pt1, pt2, pt3, pt4, pt5 :POINT;[[BR]]   parallel, intOnLines :BOOLEAN; [[BR]][[BR]]BEGIN[[BR]]   CallTool(-201); [[BR]]   GetSegPt1(FSActLayer, pt1.x, pt1.y); [[BR]]   GetSegPt2(FSActLayer, pt2.x, pt2.y); [[BR]]   CallTool(-201); [[BR]]   GetSegPt1(FSActLayer, pt3.x, pt3.y); [[BR]]   GetSegPt2(FSActLayer, pt4.x, pt4.y); [[BR]]   LineLineIntersection(pt1, pt2, pt3, pt4, parallel, intOnLines, pt5); [[BR]]   Locus(pt5.x, pt5.y);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2387</ID>
    <IDName>procLineLineIntersection</IDName>
    <InternalFunctionName>MP_LineLineIntersection</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>l1start</Name>
        <Type>ePointMode</Type>
        <Desc>Start point of the first line</Desc>
      </Param>
      <Param>
        <Name>l1end</Name>
        <Type>ePointMode</Type>
        <Desc>End point of the first line</Desc>
      </Param>
      <Param>
        <Name>l2start</Name>
        <Type>ePointMode</Type>
        <Desc>Start point of the second line</Desc>
      </Param>
      <Param>
        <Name>l2end</Name>
        <Type>ePointMode</Type>
        <Desc>End point of the second line</Desc>
      </Param>
      <Param>
        <Name>parallel</Name>
        <Type>boolVarMode</Type>
        <Desc>On return, true if the lines are parellel, false otherwise</Desc>
      </Param>
      <Param>
        <Name>intOnLines</Name>
        <Type>boolVarMode</Type>
        <Desc>On return, true if the lines intersect</Desc>
      </Param>
      <Param>
        <Name>sectpt</Name>
        <Type>ePointVarMode</Type>
        <Desc>On return, point of intersection of the lines, if the lines intersect</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LineEllipseIntersect</Name>
    <Version>1000</Version>
    <Category>Graphic Calculation</Category>
    <Type>Procedure</Type>
    <Description>Calculates the intersection between the specified line and ellipse.</Description>
    <ShortDesc>Calculates the intersection between the specified line and ellipse.</ShortDesc>
    <Comments>On return, int1 and int2 are the two possible points of intersection.  legal1 and legal2 indicate if the intersections are actually valid.</Comments>
    <ID>2388</ID>
    <IDName>procLineEllipseIntersect</IDName>
    <InternalFunctionName>MP_LineEllipseIntersect</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>a1</Name>
        <Type>ePointMode</Type>
        <Desc>Start point of the line</Desc>
      </Param>
      <Param>
        <Name>a2</Name>
        <Type>ePointMode</Type>
        <Desc>End point of the line</Desc>
      </Param>
      <Param>
        <Name>upperRight</Name>
        <Type>ePointMode</Type>
        <Desc>Upper-right point of the ellipse</Desc>
      </Param>
      <Param>
        <Name>lowerLeft</Name>
        <Type>ePointMode</Type>
        <Desc>Lower-left point of the ellipse</Desc>
      </Param>
      <Param>
        <Name>int1</Name>
        <Type>ePointVarMode</Type>
        <Desc>On return, first point of intersection, if found</Desc>
      </Param>
      <Param>
        <Name>legal1</Name>
        <Type>boolVarMode</Type>
        <Desc>On return, second point of intersection, if found</Desc>
      </Param>
      <Param>
        <Name>int2</Name>
        <Type>ePointVarMode</Type>
        <Desc>On return, indicates that int1 is a valid point of intersection</Desc>
      </Param>
      <Param>
        <Name>legal2</Name>
        <Type>boolVarMode</Type>
        <Desc>On return, indicates that int2 is a valid point of intersection</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EllipseEllipseIntersect</Name>
    <Version>1000</Version>
    <Category>Graphic Calculation</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Calculates the intersections between the two specified ellipses.</Description>
    <ShortDesc>Calculates the intersections between the two specified ellipses.</ShortDesc>
    <Result>Returns the number of valid intersection points.  If the return value is n, the first n points are valid.  For example, if the return value is 1, the int1 parameter contains a valid point of intersection, and int2, int3, and int4 are invalid.  If the return value is 3, int1, int2, and int3 contain valid points, and int4 is invalid.</Result>
    <Comments>On return, int1, int2, int3, and int4 contain the points of intersection.  Return value indicates which intersections are legal.</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	h1, h2 :HANDLE;[[BR]]	upperLeft1, lowerRight1 :POINT;[[BR]]	upperLeft2, lowerRight2 :POINT;[[BR]]	int1, int2, int3, int4 :POINT;[[BR]]	num :INTEGER;[[BR]]BEGIN[[BR]]	CallTool(-205); h1 := FSActLayer;[[BR]]	CallTool(-205); h2 := FSActLayer;[[BR]]	GetBBox(h1, upperLeft1.x, upperLeft1.y, lowerRight1.x, lowerRight1.y);[[BR]]	GetBBox(h2, upperLeft2.x, upperLeft2.y, lowerRight2.x, lowerRight2.y);[[BR]]	num := EllipseEllipseIntersect(upperLeft1, lowerRight1, upperLeft2, lowerRight2, int1, int2, int3, int4);[[BR]]	Message(num);[[BR]]	Locus(int1.x, int1.y);[[BR]]	Locus(int2.x, int2.y);[[BR]]	Locus(int3.x, int3.y);[[BR]]	Locus(int4.x, int4.y);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2389</ID>
    <IDName>funcEllipseEllipseIntersect</IDName>
    <InternalFunctionName>MP_EllipseEllipseIntersect</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>upperLeft1</Name>
        <Type>ePointMode</Type>
        <Desc>Upper-left point of the first ellipse</Desc>
      </Param>
      <Param>
        <Name>lowerRight1</Name>
        <Type>ePointMode</Type>
        <Desc>Lower-right point of the first ellipse</Desc>
      </Param>
      <Param>
        <Name>upperLeft2</Name>
        <Type>ePointMode</Type>
        <Desc>Upper-left point of the second ellipse</Desc>
      </Param>
      <Param>
        <Name>lowerRight2</Name>
        <Type>ePointMode</Type>
        <Desc>Lower-right point of the second ellipse</Desc>
      </Param>
      <Param>
        <Name>int1</Name>
        <Type>ePointVarMode</Type>
        <Desc>On return, first point of intersection, if found</Desc>
      </Param>
      <Param>
        <Name>int2</Name>
        <Type>ePointVarMode</Type>
        <Desc>On return, second point of intersection, if found</Desc>
      </Param>
      <Param>
        <Name>int3</Name>
        <Type>ePointVarMode</Type>
        <Desc>On return, third point of intersection, if found</Desc>
      </Param>
      <Param>
        <Name>int4</Name>
        <Type>ePointVarMode</Type>
        <Desc>On return, fourth point of intersection, if found</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WallFootPrint</Name>
    <Version>1000</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns the handle of a polyline representing the footprint of a wall.</Description>
    <ShortDesc>Returns the handle of a polyline representing the footprint of a wall.</ShortDesc>
    <Result>Returns the handle of a polyline representing the footprint of a wall.</Result>
    <Example>PROCEDURE GetWallFootPrint;[[BR]]VAR[[BR]]	h1, h2 :HANDLE;[[BR]]BEGIN[[BR]]	h1 := FSActLayer;[[BR]]	h2 := WallFootPrint(h1);[[BR]]END;[[BR]]RUN(GetWallFootPrint);[[BR]]</Example>
    <ID>2390</ID>
    <IDName>funcWallFootPrint</IDName>
    <InternalFunctionName>MP_WallFootPrint</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>wallHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the wall</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetMarker</Name>
    <Version>1000</Version>
    <OldVersion>1300</OldVersion>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Returns marker information on the referenced object.[[BR]]</Description>
    <ShortDesc>Returns marker information on the referenced object.This function supercedes  GetArrowHeads.  size is the number of 1/16384 ths of an inch for the marker. </ShortDesc>
    <SeeAlso>SetMarker</SeeAlso>
    <Comments>OBSOLETE for VW2008: Use GetObjBeginningMarker and/or GetObjEndMarker instead.[[BR]]For a one inch marker pass in a size value equal to 16384. If you pass NIL for the obj parameter, this call will set the marker defaults for this document.  angle must be in range 0 to 90 degrees.</Comments>
    <Example>PROCEDURE CheckMarker;[[BR]]VAR[[BR]]	h: HANDLE;[[BR]]	MarkerStyle: INTEGER;[[BR]]	StartMark, EndMark: BOOLEAN;[[BR]]	Size: REAL;[[BR]]BEGIN[[BR]]	h := FSActLayer;[[BR]]	GetMarker(H, StartMark, EndMark, MarkerStyle, Size);[[BR]]	Message('StartMark: ', StartMark, ' EndMark:', EndMark, ' MarkerStyle:', MarkerStyle, ' Size:', Size);[[BR]]END;[[BR]]RUN(CheckMarker);[[BR]]</Example>
    <ID>2391</ID>
    <IDName>procGetMarker</IDName>
    <InternalFunctionName>MP_GetMarker</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object.</Desc>
      </Param>
      <Param>
        <Name>start</Name>
        <Type>boolVarMode</Type>
        <Desc>True if a marker is visible at start of object.</Desc>
      </Param>
      <Param>
        <Name>end</Name>
        <Type>boolVarMode</Type>
        <Desc>True if a marker is visible at end of object.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intVarMode</Type>
        <Desc>Marker style:[[BR]]0 - Filled Arrow Marker[[BR]]1 - Empty Arrow Marker[[BR]]2 - Open Arrow Marker[[BR]]3 - Filled Ball Marker[[BR]]4 - Empty Ball Marker[[BR]]5 - Slash Marker[[BR]]6 - Cross Marker</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>rVarMode</Type>
        <Desc>Size of marker.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetMarker</Name>
    <Version>1000</Version>
    <OldVersion>1300</OldVersion>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Specifies marker information for the referenced object - OBSOLETE procedure: Use SetObjBeginningMarker and/or SetObjEndMarker instead.</Description>
    <ShortDesc>Specifies marker information for the referenced object - OBSOLETE procedure: Use SetObjBeginningMarker and/or SetObjEndMarker instead.</ShortDesc>
    <SeeAlso>GetMarker, SetObjBeginningMarker, SetObjEndMarker</SeeAlso>
    <Comments>OBSOLETE for VW2008: Use SetObjBeginningMarker and/or SetObjEndMarker instead.</Comments>
    <Example>PROCEDURE Example;[[BR]]BEGIN[[BR]]   MoveTo(0, 0);[[BR]]   LineTo(100, 0);[[BR]]   SetMarker(LNewObj, TRUE, FALSE, 2, 10000);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2392</ID>
    <IDName>procSetMarker</IDName>
    <InternalFunctionName>MP_SetMarker</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object</Desc>
      </Param>
      <Param>
        <Name>start</Name>
        <Type>boolMode</Type>
        <Desc>True if a marker is visible at start of object.</Desc>
      </Param>
      <Param>
        <Name>end</Name>
        <Type>boolMode</Type>
        <Desc>True if a marker is visible at end of object.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
        <Desc>Marker style:[[BR]]0 - Filled Arrow Marker[[BR]]1 - Empty Arrow Marker[[BR]]2 - Open Arrow Marker[[BR]]3 - Filled Ball Marker[[BR]]4 - Empty Ball Marker[[BR]]5 - Slash Marker[[BR]]6 - Cross Marker</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>realMode</Type>
        <Desc>Size of marker</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVertexVisibility</Name>
    <Version>1000</Version>
    <Category>Objects - Polys</Category>
    <Type>Procedure</Type>
    <Description>Sets the visibility of the specified vertex of the referenced object.</Description>
    <ShortDesc>Sets the visibility of the specified vertex of the referenced object.</ShortDesc>
    <SeeAlso>GetVertexVisibility</SeeAlso>
    <ID>2393</ID>
    <IDName>procSetVertexVisibility</IDName>
    <InternalFunctionName>MP_SetVertexVisibility</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the polygon or polyline.</Desc>
      </Param>
      <Param>
        <Name>vertnum</Name>
        <Type>intMode</Type>
        <Desc>Index of the vertex (zero-based).</Desc>
      </Param>
      <Param>
        <Name>vis</Name>
        <Type>boolMode</Type>
        <Desc>Visibility of the vertex.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVertexVisibility</Name>
    <Version>1000</Version>
    <Category>Objects - Polys</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns the visibility of the specified vertex of the referenced object.</Description>
    <ShortDesc>Returns the visibility of the specified vertex of the referenced object.</ShortDesc>
    <Result>Returns true if the vertex is visible, false otherwise.</Result>
    <SeeAlso>SetVertexVisibility</SeeAlso>
    <ID>2394</ID>
    <IDName>funcGetVertexVisibility</IDName>
    <InternalFunctionName>MP_GetVertexVisibility</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the polygon or polyline</Desc>
      </Param>
      <Param>
        <Name>vertnum</Name>
        <Type>intMode</Type>
        <Desc>Index of the vertex (zero-based).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetRoundingBase</Name>
    <Version>1000</Version>
    <Category>Units</Category>
    <Type>Procedure</Type>
    <Description>Gets the rounding base (1, 2.5, or 5) for the display, primary units, and secondary units.</Description>
    <ShortDesc>Gets the rounding base (1, 2.5, or 5) for the display, primary units, and secondary units.</ShortDesc>
    <Example>FUNCTION DisplayAccuracy :REAL;[[BR]]VAR[[BR]]	dec_prec  :REAL;[[BR]]	frac_prec :REAL;[[BR]]	display   :INTEGER; [[BR]]	primary   :INTEGER; [[BR]]	secondary :INTEGER;[[BR]]BEGIN[[BR]]	GetRoundingBase(display, primary, secondary);[[BR]]	dec_prec := 1 / (10 ^ GetPrefLongInt(169));[[BR]]	IF display = 1 THEN dec_prec := dec_prec * 2.5 ELSE[[BR]]	IF display = 2 THEN dec_prec := dec_prec * 5;[[BR]]	frac_prec := 1 / (2 ^ GetPrefLongInt(171));[[BR]]	IF NOT  GetPref(168) THEN DisplayAccuracy := dec_prec[[BR]]	ELSE IF GetPref(175) THEN DisplayAccuracy := Min(dec_prec, frac_prec)[[BR]]	ELSE DisplayAccuracy := frac_prec;[[BR]]END;[[BR]]</Example>
    <ID>2395</ID>
    <IDName>procGetRoundingBase</IDName>
    <InternalFunctionName>MP_GetRoundingBase</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>display</Name>
        <Type>intVarMode</Type>
        <Desc>Rounding base for the display units</Desc>
      </Param>
      <Param>
        <Name>primary</Name>
        <Type>intVarMode</Type>
        <Desc>Rounding base for the primary units</Desc>
      </Param>
      <Param>
        <Name>secondary</Name>
        <Type>intVarMode</Type>
        <Desc>Rounding base for the secondary units</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddListBoxTabStop</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Adds a tab stop to a Layout Manager list box.  The last parameter is the tab stop, in characters.  This function should be called in the dialog handler, as opposed to the dialog definition procedure.  This function will clear all data in the list control.</Description>
    <ShortDesc>Adds a tab stop to a Layout Manager list box.  The last parameter is the tab stop, in characters.  Call this function from the dialog handler.</ShortDesc>
    <SeeAlso>RemoveListBoxTabStop</SeeAlso>
    <Comments>The last parameter is the tab stop, in characters.  This function should be called in the dialog handler, as opposed to the dialog definition procedure.  This function will clear all data in the list control.</Comments>
    <ID>2396</ID>
    <IDName>procAddListBoxTabStop</IDName>
    <InternalFunctionName>MP_AddListBoxTabStop</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>ID of the dialog</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>ID of the list box</Desc>
      </Param>
      <Param>
        <Name>tabStop</Name>
        <Type>intMode</Type>
        <Desc>The tab stop, in characters</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveListBoxTabStop</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Removes the last tab stop from a Layout Manager list box.</Description>
    <ShortDesc>Removes the last tab stop from a Layout Manager list box.</ShortDesc>
    <SeeAlso>AddListBoxTabStop</SeeAlso>
    <ID>2397</ID>
    <IDName>procRemoveListBoxTabStop</IDName>
    <InternalFunctionName>MP_RemoveListBoxTabStop</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>ID of the dialog</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>ID of the list box</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLayerElevation</Name>
    <Version>1000</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Sets the elevation and thickness of the specified layer.</Description>
    <ShortDesc>Sets the elevation and thickness of the specified layer.</ShortDesc>
    <SeeAlso>GetLayerElevation</SeeAlso>
    <ID>2400</ID>
    <IDName>procSetLayerElevation</IDName>
    <InternalFunctionName>MP_SetLayerElevation</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the layer</Desc>
      </Param>
      <Param>
        <Name>baseElev</Name>
        <Type>realMode</Type>
        <Desc>Base elevation of the layer</Desc>
      </Param>
      <Param>
        <Name>thickness</Name>
        <Type>realMode</Type>
        <Desc>Thickness of the layer</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLayerElevation</Name>
    <Version>1000</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Gets the elevation and thickness of the specified layer.</Description>
    <ShortDesc>Gets the elevation and thickness of the specified layer.</ShortDesc>
    <SeeAlso>SetLayerElevation</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	h :HANDLE; [[BR]]	baseElev, thickness :REAL;[[BR]]BEGIN[[BR]]	h := FLayer;[[BR]]	WHILE h &lt;&gt; NIL DO BEGIN[[BR]]		GetLayerElevation(h, baseElev, thickness);[[BR]]		thickness := thickness / (25.4 / GetPrefReal(152));[[BR]]		AlrtDialog(Concat('layer name: ', GetLName(h), ', baseElev: ', baseElev, ', thickness: ', thickness));[[BR]]		h := NextLayer(h);[[BR]]	END;[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2401</ID>
    <IDName>procGetLayerElevation</IDName>
    <InternalFunctionName>MP_GetLayerElevation</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the layer</Desc>
      </Param>
      <Param>
        <Name>baseElev</Name>
        <Type>rVarMode</Type>
        <Desc>Base elevation of the layer</Desc>
      </Param>
      <Param>
        <Name>thickness</Name>
        <Type>rVarMode</Type>
        <Desc>Thickness of the layer</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SymbolToGroup</Name>
    <Version>1000</Version>
    <Category>Objects - Symbols</Category>
    <Type>Procedure</Type>
    <Description>Converts referenced symbol to group using the specified conversion options.[[BR]][[BR]][[note:SymToGroup]][[BR]]</Description>
    <ShortDesc>Converts referenced symbol to group using the specified conversion options.</ShortDesc>
    <ID>2402</ID>
    <IDName>procSymbolToGroup</IDName>
    <InternalFunctionName>MP_SymbolToGroup</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the symbol</Desc>
      </Param>
      <Param>
        <Name>convertAction</Name>
        <Type>intMode</Type>
        <Desc>Conversion action:[[BR]]0 - don't convert subobjects[[BR]]1 - convert subobjects that are plug-ins and symbols[[BR]]2 - convert all subobjects[[BR]]</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetControlText</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the text of radio button, check box, push button controls.</Description>
    <ShortDesc>Sets the text of radio button, check box, push button controls.</ShortDesc>
    <ID>2403</ID>
    <IDName>procSetControlText</IDName>
    <InternalFunctionName>MP_SetControlText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>DlogID</Name>
        <Type>intMode</Type>
        <Desc>ID of the dialog</Desc>
      </Param>
      <Param>
        <Name>ItemID</Name>
        <Type>intMode</Type>
        <Desc>ID of the control</Desc>
      </Param>
      <Param>
        <Name>newtext</Name>
        <Type>stringMode</Type>
        <Desc>Text to insert</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsRW</Name>
    <Version>1000</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Indicates whether RenderWorks is available.</Description>
    <ShortDesc>Indicates whether RenderWorks is available.</ShortDesc>
    <Result>Returns true if RenderWorks is available, false otherwise.</Result>
    <ID>2404</ID>
    <IDName>funcIsRW</IDName>
    <InternalFunctionName>MP_IsRW</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>HasPlugin</Name>
    <Version>1000</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns whether tool item or menu command is in current workspace.</Description>
    <ShortDesc>Returns whether tool item or menu command is in current workspace.</ShortDesc>
    <Result>Returns true if the plug-in is found in the workspace; false otherwise.</Result>
    <ID>2405</ID>
    <IDName>funcHasPlugin</IDName>
    <InternalFunctionName>MP_HasPlugin</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>itemUniversalName</Name>
        <Type>stringMode</Type>
        <Desc>Universal name of the plug-in</Desc>
      </Param>
      <Param>
        <Name>PaletteName</Name>
        <Type>strVarMode</Type>
        <Desc>If plug-in is a tool, and is found in the workspace, the name of the palette in which it is contained will be returned in this parameter</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLocalizedPluginName</Name>
    <Version>1000</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Get the localized name of a plug-in given its universal name.  [[BR]][[BR]]When Vectorworks plug-ins are localized by distributors in other countries, their names are translated to the appropriate language.  The plug-in file stores both the original universal name and this translated localized name.  The translated name is displayed by the Vectorworks user interface instead of the original name.  If a script needs to display the name of a plug-in in a dialog or message then it should call this function to determine the localized name.  (Note that scripts will use the universal name to specify a plug-in when the name is not being displayed to the user.) [[BR]][[BR]]If the plug-in has not been localized, then this function will return the universal name.</Description>
    <ShortDesc>Get the localized name of a plug-in given its universal name. </ShortDesc>
    <Result>Returns true if the specified plug-in exists, and false if it is not found.</Result>
    <SeeAlso>GetLocalizedPluginParameter,GetLocalizedPluginChoice</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]TYPE[[BR]]	plugin = STRUCTURE[[BR]]		universalName :STRING;[[BR]]		localizedName :STRING;[[BR]]		params :ARRAY[1..99,1..2] OF STRING;[[BR]]		popups :ARRAY[1..99,1..99] OF STRING;[[BR]]	END;[[BR]]VAR[[BR]]	plugins :ARRAY[1..99] OF plugin;[[BR]]	cnt1, cnt2, cnt3, pluginCnt :INTEGER;[[BR]]	str1, str2, str3, str4 :STRING;[[BR]]	boo :BOOLEAN;[[BR]]	int1, int2 :INTEGER;[[BR]]	[[BR]]PROCEDURE GetInfo(h :HANDLE);[[BR]]VAR[[BR]]	recHand :HANDLE;[[BR]]	recName :STRING;[[BR]]BEGIN[[BR]]	recHand := GetRecord(h, NumRecords(h));[[BR]]	recName := GetName(recHand);[[BR]]	FOR cnt1 := 1 TO pluginCnt DO [[BR]]		IF recName = plugins[cnt1].universalName [[BR]]			THEN cnt1 := pluginCnt + 2;[[BR]]	IF cnt1 &lt; pluginCnt + 2 THEN BEGIN[[BR]]		boo := GetLocalizedPluginName(recName, str2);[[BR]]		pluginCnt := pluginCnt + 1;[[BR]]		plugins[pluginCnt].universalName := recName;[[BR]]		plugins[pluginCnt].localizedName := str2;[[BR]]		FOR cnt2 := 1 TO NumFields(recHand) DO BEGIN[[BR]]			str1 := GetFldName(recHand, cnt2);[[BR]]			int1 := GetFldType(recHand, cnt2);[[BR]]			boo := GetLocalizedPluginParameter(recName, str1, str2);[[BR]]			plugins[pluginCnt].params[cnt2, 1] := str1;[[BR]]			plugins[pluginCnt].params[cnt2, 2] := str2;[[BR]]			IF int1 = 8 THEN BEGIN[[BR]]				FOR cnt3 := 1 TO NumCustomObjectChoices(recName, str1) DO BEGIN[[BR]]					str3 := GetCustomObjectChoice(recName, str1, cnt3);[[BR]]					boo := GetPluginChoiceIndex(recName, str1, str3, int2);[[BR]]			  		boo := GetLocalizedPluginChoice(recName, str1, int2, str4);[[BR]]			  		plugins[pluginCnt].popups[cnt2, cnt3] := Concat(str3, Chr(9), str4);[[BR]]				END;[[BR]]			END;[[BR]]		END;[[BR]]	END;[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]	pluginCnt := 0;[[BR]]	ForEachObject(GetInfo, (T=86));[[BR]]	FOR cnt1 := 1 TO pluginCnt DO BEGIN[[BR]]		WriteLn(plugins[cnt1].universalName, Chr(9), plugins[cnt1].localizedName);[[BR]]		cnt2 := 1;[[BR]]		WHILE plugins[cnt1].params[cnt2, 1] &lt;&gt; '' DO BEGIN[[BR]]			WriteLn('    ', plugins[cnt1].params[cnt2, 1], Chr(9), plugins[cnt1].params[cnt2, 2]);[[BR]]			cnt3 := 1;[[BR]]			WHILE plugins[cnt1].popups[cnt2, cnt3] &lt;&gt; '' DO BEGIN[[BR]]				WriteLn('        ', plugins[cnt1].popups[cnt2, cnt3]);[[BR]]				cnt3 := cnt3 + 1;[[BR]]			END;[[BR]]			cnt2 := cnt2 + 1;[[BR]]		END;[[BR]]	END;[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2406</ID>
    <IDName>funcGetLocalizedPluginName</IDName>
    <InternalFunctionName>MP_GetLocalizedPluginName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>inPluginName</Name>
        <Type>stringMode</Type>
        <Desc>Universal name of the plug-in.</Desc>
      </Param>
      <Param>
        <Name>outName</Name>
        <Type>strVarMode</Type>
        <Desc>The localized name of the plug-in </Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLocalizedPluginParameter</Name>
    <Version>1000</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Get the localized name of a plug-in parameter.[[BR]][[BR]]When Vectorworks plug-ins are localized by distributors in other countries, their parameter names are translated to the appropriate language.  The plug-in file stores both the original universal name and this translated localized name for each parameter.  The translated name is displayed by the Vectorworks user interface instead of the original name.  If a script needs to display the name of a plug-in parameter in a dialog or message then it should call this function to determine the localized name.  (Note that scripts will use the universal name to specify a plug-in parameter when the name is not being displayed to the user.) [[BR]][[BR]]If the plug-in has not been localized, then this function will return the universal name of the parameter.</Description>
    <ShortDesc>Get the localized name of a plug-in parameter given the universal name of plug-in and universal name of parameter.</ShortDesc>
    <Result>Returns true if the specified plug-in exists, and false if it is not found.</Result>
    <SeeAlso>GetLocalizedPluginName</SeeAlso>
    <ID>2407</ID>
    <IDName>funcGetLocalizedPluginParameter</IDName>
    <InternalFunctionName>MP_GetLocalizedPluginParameter</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>inPluginName</Name>
        <Type>stringMode</Type>
        <Desc>Universal name of the plug-in.</Desc>
      </Param>
      <Param>
        <Name>inParameterName</Name>
        <Type>stringMode</Type>
        <Desc>Universal name of the parameter.</Desc>
      </Param>
      <Param>
        <Name>outParameter</Name>
        <Type>strVarMode</Type>
        <Desc>Localized name of the parameter.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLocalizedPluginChoice</Name>
    <Version>1000</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns true with outChoice as specified by [[p:1]], [[p:2]] and [[p:3]].  Each of the input names are universal names.</Description>
    <ShortDesc>Returns true with outChoice as specified by inPluginName, nParameterName and inChoiceIndex.  Each of the input names are universal names.</ShortDesc>
    <Result>Returns true if the function call succeeded.</Result>
    <SeeAlso>GetLocalizedPluginName</SeeAlso>
    <ID>2408</ID>
    <IDName>funcGetLocalizedPluginChoice</IDName>
    <InternalFunctionName>MP_GetLocalizedPluginChoice</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>inPluginName</Name>
        <Type>stringMode</Type>
        <Desc>The universal name of the plug-in.</Desc>
      </Param>
      <Param>
        <Name>inParameterName</Name>
        <Type>stringMode</Type>
        <Desc>The universal name of the parameter.</Desc>
      </Param>
      <Param>
        <Name>inChoiceIndex</Name>
        <Type>intMode</Type>
        <Desc>The  index of the requested choice. ( range is 1 to n)</Desc>
      </Param>
      <Param>
        <Name>outChoice</Name>
        <Type>strVarMode</Type>
        <Desc>The requested choice string. </Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPluginChoiceIndex</Name>
    <Version>1000</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns true with outIndex as specified by [[p:1]]and [[p:2]].  Each of the input names are universal names.</Description>
    <ShortDesc>Returns true with outIndex as specified by [[p:1]]and [[p:2]].  Each of the input names are universal names.</ShortDesc>
    <Result>Returns true if the function succeeded.</Result>
    <ID>2409</ID>
    <IDName>funcGetPluginChoiceIndex</IDName>
    <InternalFunctionName>MP_GetPluginChoiceIndex</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>inPluginName</Name>
        <Type>stringMode</Type>
        <Desc>The universal name of the plug-in.</Desc>
      </Param>
      <Param>
        <Name>inParameterName</Name>
        <Type>stringMode</Type>
        <Desc>The universal name of the parameter.</Desc>
      </Param>
      <Param>
        <Name>inChoiceName</Name>
        <Type>stringMode</Type>
        <Desc>The universal name of the choice.</Desc>
      </Param>
      <Param>
        <Name>outIndex</Name>
        <Type>intVarMode</Type>
        <Desc>The index of the requested choice.  ( range is 1 to n)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateEditTextBox</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a scrolling multiline editable text field in a dialog layout. </Description>
    <ShortDesc>Creates a scrolling multiline editable text field in a dialog layout. </ShortDesc>
    <SeeAlso>GetDlgCtrlWidthStdCh</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	dialog1 :INTEGER;[[BR]]	result  :INTEGER;[[BR]]PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]END;[[BR]]BEGIN[[BR]]	dialog1 := CreateLayout('Example Dialog', FALSE, 'OK', 'Cancel');[[BR]]	CreateEditTextBox(dialog1, 4, 'default text', 24, 16);[[BR]]	SetFirstLayoutItem(dialog1, 4);[[BR]]	result := RunLayoutDialog(dialog1, Dialog_Handler);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2410</ID>
    <IDName>procCreateEditTextBox</IDName>
    <InternalFunctionName>MP_CreateEditTextBox</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The id of the dialog</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The id of the text box control. </Desc>
      </Param>
      <Param>
        <Name>defaultText</Name>
        <Type>stringMode</Type>
        <Desc>The initial text.</Desc>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>longMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
      <Param>
        <Name>heightInLines</Name>
        <Type>longMode</Type>
        <Desc>Height of the control in lines. </Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateGradient</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a new gradient resource.</Description>
    <ShortDesc>Creates a new gradient resource.</ShortDesc>
    <Result>Returns a handle to a new gradient resource if successful, otherwise the function returns nil.</Result>
    <Comments>This function creates a default gradient with 2 color spots: a white color spot at position, 0.0, and a black color spot at position, 1.0.[[BR]]A gradient resource must always have at least 2, but no more than 32767 color spots.[[BR]]NOTE: if the specified name already exists, a unique nmae will be created by adding a number suffix to the specified name.[[BR]]</Comments>
    <Example>gradientHandle := CreateGradient('My Gradient');</Example>
    <ID>2411</ID>
    <IDName>funcCreateGradient</IDName>
    <InternalFunctionName>MP_CreateGradient</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>A user-specified name by which the newly created gradient will be identified.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ShowGradientEditorDialog</Name>
    <Version>1000</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Displays the gradient editor dialog for the specified gradient. [[BR]][[BR]]To create and edit a new gradient resource, pass in a handle variable initialized to nil. If successful, the handle variable will be initialized with the handle to the new gradient resource.</Description>
    <ShortDesc>Displays the gradient editor dialog for the specified gradient.</ShortDesc>
    <Example>ShowGradientEditorDialog(gradientHandle);[[BR]]{ displays the specified gradient resource in the editor }[[BR]][[BR]]newGradientHandle := nil;[[BR]]ShowGradientEditorDialog(newGradientHandle);[[BR]]{ creates a new gradient resource and displays it in the editor }</Example>
    <ID>2412</ID>
    <IDName>procShowGradientEditorDialog</IDName>
    <InternalFunctionName>MP_ShowGradientEditorDialog</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>gradient</Name>
        <Type>handleInOutMode</Type>
        <Desc>The gradient resource to display in the editor dialog; nil if a new gradient is to be created.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumGradientSegments</Name>
    <Version>1000</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the number of segments in the gradient.</Description>
    <ShortDesc>Gets the number of segments in the gradient.</ShortDesc>
    <Result>Returns the number of segments in the gradient if successful; 0 otherwise.</Result>
    <Comments>Note: a gradient must always have at least 2 segments.</Comments>
    <Example>numSegments := GetNumGradientSegments(gradientHandle);</Example>
    <ID>2413</ID>
    <IDName>funcGetNumGradientSegments</IDName>
    <InternalFunctionName>MP_GetNumGradientSegments</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>gradient</Name>
        <Type>handleMode</Type>
        <Desc>The gradient from which to get the number of segments.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertGradientSegment</Name>
    <Version>1000</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Inserts a new segment into the gradient and initializes its data to the specified values.[[BR]][[BR]]A segment consists of a single color spot and the single midpoint immediately to the right of the color spot.</Description>
    <ShortDesc>Inserts a new segment into the gradient and initializes its data to the specified values.</ShortDesc>
    <Result>Returns the index of the newly created segment; 0 otherwise.[[BR]][[BR]]Note: segment indexes begin with 1.</Result>
    <Example>index := InsertGradientSegment(gradientHandle, 0.35, 0.4, 255, 255, 255);[[BR]]{ inserts a white color spot at position, 0.35, with a midpoint position of 0.4 }</Example>
    <ID>2414</ID>
    <IDName>funcInsertGradientSegment</IDName>
    <InternalFunctionName>MP_InsertGradientSegment</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>gradient</Name>
        <Type>handleMode</Type>
        <Desc>Gradient into which a segment is to be inserted.</Desc>
      </Param>
      <Param>
        <Name>spotPosition</Name>
        <Type>realMode</Type>
        <Desc>Position of the segment's color spot relative to left-most point of the gradient. [[BR]](position &gt;= 0.0 and position &lt;= 1.0)</Desc>
      </Param>
      <Param>
        <Name>midpointPosition</Name>
        <Type>realMode</Type>
        <Desc>Position of the segment's midpoint relative to color spot immediately to left. [[BR]](position &gt;= 0.0 and position &lt;= 1.0)</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>longMode</Type>
        <Desc>Red component of the color spot's color. [[BR]](red &gt;= 0 and red &lt;= 255)</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>longMode</Type>
        <Desc>Green component of the color spot's color. [[BR]](green &gt;= 0 and green &lt;= 255)</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>longMode</Type>
        <Desc>Blue component of the color spot's color. [[BR]](blue &gt;= 0 and blue &lt;= 255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveGradientSegment</Name>
    <Version>1000</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Removes the specified segment from the specified gradient.</Description>
    <ShortDesc>Removes the specified segment from the specified gradient.</ShortDesc>
    <Example>RemoveGradientSegment (gradientHandle, 4);[[BR]]{ removes the segment with index 4 }</Example>
    <ID>2415</ID>
    <IDName>procRemoveGradientSegment</IDName>
    <InternalFunctionName>MP_RemoveGradientSegment</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>gradient</Name>
        <Type>handleMode</Type>
        <Desc>Gradient from which to remove a segment.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intMode</Type>
        <Desc>Index of segment to be removed.[[BR]](segment indexes begin with 1)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetGradientData</Name>
    <Version>1000</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Gets the spot position, midpoint position and color of the specified gradient segment.</Description>
    <ShortDesc>Gets the spot position, midpoint position and color of the specified gradient segment.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   gradient :HANDLE;[[BR]]   segmentIndex :INTEGER;[[BR]]   spotPosition, midpointPosition :REAL;[[BR]]   red, green, blue :LONGINT;[[BR]]BEGIN[[BR]]   gradient := GetObject('Cyan-Magenta-Yellow');[[BR]]   segmentIndex := 3;[[BR]]   GetGradientData(gradient, segmentIndex, spotPosition, midpointPosition, red, green, blue);[[BR]]   Message(red, ' ', green, ' ', blue);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2416</ID>
    <IDName>procGetGradientData</IDName>
    <InternalFunctionName>MP_GetGradientData</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>gradient</Name>
        <Type>handleMode</Type>
        <Desc>Gradient that contains the segment.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intMode</Type>
        <Desc>Segment from which to get the data.[[BR]](segment indexes begin with 1)</Desc>
      </Param>
      <Param>
        <Name>spotPosition</Name>
        <Type>rVarMode</Type>
        <Desc>Position of the segment's color spot relative to left-most point of the gradient. [[BR]](position &gt;= 0.0 and position &lt;= 1.0)</Desc>
      </Param>
      <Param>
        <Name>midpointPosition</Name>
        <Type>rVarMode</Type>
        <Desc>Position of the segment's midpoint relative to color spot immediately to left. [[BR]](position &gt;= 0.0 and position &lt;= 1.0)</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Red component of the color spot's color. [[BR]](red &gt;= 0 and red &lt;= 255)</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Green component of the color spot's color. [[BR]](green &gt;= 0 and green &lt;= 255)</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Blue component of the color spot's color. [[BR]](blue &gt;= 0 and blue &lt;= 255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetGradientData</Name>
    <Version>1000</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Sets the spot position, midpoint position and color of the specified gradient segment.[[BR]][[BR]]Note: you must use a variable, initialized to the segment index, to pass as a parameter. After the data has been set, this variable will contain the index of the segment, which may have changed because of the spot position specified.</Description>
    <ShortDesc>Sets the spot position, midpoint position and color of the specified gradient segment.</ShortDesc>
    <Example>segmentIndex := 4;[[BR]]SetGradientData(gradientHandle, segmentIndex, 0.9, 0.5, 255, 255, 255);</Example>
    <ID>2417</ID>
    <IDName>procSetGradientData</IDName>
    <InternalFunctionName>MP_SetGradientData</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>gradient</Name>
        <Type>handleMode</Type>
        <Desc>Gradient that contains the segment.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intInOutMode</Type>
        <Desc>Segment for which to set the data.[[BR]](segment indexes begin with 1)</Desc>
      </Param>
      <Param>
        <Name>spotPosition</Name>
        <Type>realMode</Type>
        <Desc>Position of the segment's color spot relative to left-most point of the gradient. [[BR]](position &gt;= 0.0 and position &lt;= 1.0)</Desc>
      </Param>
      <Param>
        <Name>midpointPosition</Name>
        <Type>realMode</Type>
        <Desc>Position of the segment's midpoint relative to color spot immediately to left. [[BR]](position &gt;= 0.0 and position &lt;= 1.0)</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>longMode</Type>
        <Desc>Red component of the color spot's color. [[BR]](red &gt;= 0 and red &lt;= 255)</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>longMode</Type>
        <Desc>Green component of the color spot's color. [[BR]](green &gt;= 0 and green &lt;= 255)</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>longMode</Type>
        <Desc>Blue component of the color spot's color. [[BR]](blue &gt;= 0 and blue &lt;= 255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetGradientSpotPosition</Name>
    <Version>1000</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Gets the spot position of the specified gradient segment.</Description>
    <ShortDesc>Gets the spot position of the specified gradient segment.</ShortDesc>
    <Example>GetGradientSpotPosition(gradientHandle, 4, spotPosition);</Example>
    <ID>2418</ID>
    <IDName>procGetGradientSpotPosition</IDName>
    <InternalFunctionName>MP_GetGradientSpotPosition</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>gradient</Name>
        <Type>handleMode</Type>
        <Desc>Gradient that contains the segment.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intMode</Type>
        <Desc>Segment from which to get the data.[[BR]](segment indexes begin with 1)</Desc>
      </Param>
      <Param>
        <Name>position</Name>
        <Type>rVarMode</Type>
        <Desc>Position of the segment's color spot relative to left-most point of the gradient. [[BR]](position &gt;= 0.0 and position &lt;= 1.0)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetGradientSpotPosition</Name>
    <Version>1000</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Sets the spot position of the specified gradient segment.[[BR]][[BR]]Note: you must use a variable, initialized to the segment index, to pass as a parameter. After the data has been set, this variable will contain the index of the segment, which may have changed because of the spot position specified.</Description>
    <ShortDesc>Sets the spot position of the specified gradient segment.</ShortDesc>
    <Example>SetGradientSpotPosition(gradientHandle, segmentIndex, 0.9);</Example>
    <ID>2419</ID>
    <IDName>procSetGradientSpotPosition</IDName>
    <InternalFunctionName>MP_SetGradientSpotPosition</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>gradient</Name>
        <Type>handleMode</Type>
        <Desc>Gradient that contains the segment.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intInOutMode</Type>
        <Desc>Segment for which to set the data.[[BR]](segment indexes begin with 1)</Desc>
      </Param>
      <Param>
        <Name>position</Name>
        <Type>realMode</Type>
        <Desc>Position of the segment's color spot relative to left-most point of the gradient. [[BR]](position &gt;= 0.0 and position &lt;= 1.0)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetGradientMidpointPosition</Name>
    <Version>1000</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Gets the midpoint position of the specified gradient segment.</Description>
    <ShortDesc>Gets the midpoint position of the specified gradient segment.</ShortDesc>
    <Example>GetGradientMidpointPosition(gradientHandle, 4, midpointPosition);</Example>
    <ID>2420</ID>
    <IDName>procGetGradientMidpointPosition</IDName>
    <InternalFunctionName>MP_GetGradientMidpointPosition</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>gradient</Name>
        <Type>handleMode</Type>
        <Desc>Gradient that contains the segment.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intMode</Type>
        <Desc>Segment from which to get the data.[[BR]](segment indexes begin with 1)</Desc>
      </Param>
      <Param>
        <Name>position</Name>
        <Type>rVarMode</Type>
        <Desc>Position of the segment's midpoint relatvie to color spot immediately to left. [[BR]](position &gt;= 0.0 and position &lt;= 1.0)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetGradientMidpointPosition</Name>
    <Version>1000</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Sets the midpoint position of the specified gradient segment.</Description>
    <ShortDesc>Sets the midpoint position of the specified gradient segment.</ShortDesc>
    <Example>SetGradientMidpointPosition(gradientHandle, 4, 0.6);</Example>
    <ID>2421</ID>
    <IDName>procSetGradientMidpointPosition</IDName>
    <InternalFunctionName>MP_SetGradientMidpointPosition</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>gradient</Name>
        <Type>handleMode</Type>
        <Desc>Gradient that contains the segment.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intMode</Type>
        <Desc>Segment for which to set the data.[[BR]](segment indexes begin with 1)</Desc>
      </Param>
      <Param>
        <Name>position</Name>
        <Type>realMode</Type>
        <Desc>Position of the segment's midpoint relatvie to color spot immediately to left. [[BR]](position &gt;= 0.0 and position &lt;= 1.0)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetGradientSpotColor</Name>
    <Version>1000</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Gets the spot color of the specified gradient segment.</Description>
    <ShortDesc>Gets the spot color of the specified gradient segment.</ShortDesc>
    <Example>GetGradientSpotColor(gradientHandle, 4, red, green, blue);</Example>
    <ID>2422</ID>
    <IDName>procGetGradientSpotColor</IDName>
    <InternalFunctionName>MP_GetGradientSpotColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>gradient</Name>
        <Type>handleMode</Type>
        <Desc>Gradient that contains the segment.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intMode</Type>
        <Desc>Segment from which to get the data.[[BR]](segment indexes begin with 1)</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Red component of the color spot's color. [[BR]](red &gt;= 0 and red &lt;= 255)</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Green component of the color spot's color. [[BR]](green &gt;= 0 and green &lt;= 255)</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Blue component of the color spot's color. [[BR]](blue &gt;= 0 and blue &lt;= 255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetGradientSpotColor</Name>
    <Version>1000</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Sets the spot color of the specified gradient segment.</Description>
    <ShortDesc>Sets the spot color of the specified gradient segment.</ShortDesc>
    <Example>SetGradientSpotColor(gradientHandle, 4, 255, 255, 255);</Example>
    <ID>2423</ID>
    <IDName>procSetGradientSpotColor</IDName>
    <InternalFunctionName>MP_SetGradientSpotColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>gradient</Name>
        <Type>handleMode</Type>
        <Desc>Gradient that contains the segment.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intMode</Type>
        <Desc>Segment for which to set the data.[[BR]](segment indexes begin with 1)</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>longMode</Type>
        <Desc>Red component of the color spot's color. [[BR]](red &gt;= 0 and red &lt;= 255)</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>longMode</Type>
        <Desc>Green component of the color spot's color. [[BR]](green &gt;= 0 and green &lt;= 255)</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>longMode</Type>
        <Desc>Blue component of the color spot's color. [[BR]](blue &gt;= 0 and blue &lt;= 255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateImageFromPaint</Name>
    <Version>1000</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates an image resource from a paint node.</Description>
    <ShortDesc>Creates an image resource from a paint node.</ShortDesc>
    <Result>Returns the handle to the newly create image resource if successful; nil otherwise.</Result>
    <Example>imageHandle := CreateImageFromPaint(paintHandle, 'My Image');</Example>
    <ID>2424</ID>
    <IDName>funcCreateImageFromPaint</IDName>
    <InternalFunctionName>MP_CreateImageFromPaint</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>paint</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the paint node to be used to create the image resource.</Desc>
      </Param>
      <Param>
        <Name>imageName</Name>
        <Type>stringMode</Type>
        <Desc>User-specified name to be used to identify the newly created image resource.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreatePaintFromImage</Name>
    <Version>1000</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a paint node from an image resource.</Description>
    <ShortDesc>Creates a paint node from an image resource.</ShortDesc>
    <Result>Returns the handle to the newly created paint node.</Result>
    <Example>paintHandle := CreatePaintFromImage(imageHandle);</Example>
    <ID>2425</ID>
    <IDName>funcCreatePaintFromImage</IDName>
    <InternalFunctionName>MP_CreatePaintFromImage</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>image</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the image resource from which a paint node is to be created.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ShowCreateImageDialog</Name>
    <Version>1000</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Displays a dialog that allows the user to select an image file from which a new image resource is created.</Description>
    <ShortDesc>Displays a dialog that allows the user to select an image file from which a new image resource is created.</ShortDesc>
    <Result>Returns the handle to the newly created image resource if successful; nil otherwise.</Result>
    <Example>imageHandle := ShowCreateImageDialog;</Example>
    <ID>2426</ID>
    <IDName>funcShowCreateImageDialog</IDName>
    <InternalFunctionName>MP_ShowCreateImageDialog</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>GetFillStyle</Name>
    <Version>1000</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Gets the fill style of the specified object.</Description>
    <ShortDesc>Gets the fill style of the specified object.</ShortDesc>
    <ID>2427</ID>
    <IDName>funcGetFillStyle</IDName>
    <InternalFunctionName>MP_GetFillStyle</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>GetFillType</Name>
    <Version>1000</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the fill type of the specified object.</Description>
    <ShortDesc>Gets the fill type of the specified object.</ShortDesc>
    <ID>2428</ID>
    <IDName>funcGetFillType</IDName>
    <InternalFunctionName>MP_GetFillType</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>GetClassFillStyle</Name>
    <Version>1000</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Gets the fill style of the specified class.</Description>
    <ShortDesc>Gets the fill style of the specified class..</ShortDesc>
    <ID>2429</ID>
    <IDName>funcGetClassFillStyle</IDName>
    <InternalFunctionName>MP_GetClassFillStyle</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>GetClassFillType</Name>
    <Version>1000</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the fill type of the specified class.</Description>
    <ShortDesc>Gets the fill type of the specified class..</ShortDesc>
    <ID>2430</ID>
    <IDName>funcGetClassFillType</IDName>
    <InternalFunctionName>MP_GetClassFillType</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>GetFillPoints</Name>
    <Version>1000</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Gets start and axis end points of the fill.[[BR]][[BR]]Note: only works with 2D objects that have a gradient or image fill.</Description>
    <ShortDesc>Gets start and axis end points of the fill.</ShortDesc>
    <Example>GetFillPoints(objectHandle, xOrigin, yOrigin, xIAxis, yIAxis, xJAxis, yJAxis);</Example>
    <ID>2431</ID>
    <IDName>procGetFillPoints</IDName>
    <InternalFunctionName>MP_GetFillPoints</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object with fill.</Desc>
      </Param>
      <Param>
        <Name>xOriginPoint</Name>
        <Type>rVarMode</Type>
        <Desc>X coordinate of origin point.</Desc>
      </Param>
      <Param>
        <Name>yOriginPoint</Name>
        <Type>rVarMode</Type>
        <Desc>Y coordinate of origin point.</Desc>
      </Param>
      <Param>
        <Name>xIAxisEndPoint</Name>
        <Type>rVarMode</Type>
        <Desc>X coordinate of I-axis point.</Desc>
      </Param>
      <Param>
        <Name>yIAxisEndPoint</Name>
        <Type>rVarMode</Type>
        <Desc>Y coordinate of I-axis point.</Desc>
      </Param>
      <Param>
        <Name>xJAxisEndPoint</Name>
        <Type>rVarMode</Type>
        <Desc>X coordinate of J-axis point.</Desc>
      </Param>
      <Param>
        <Name>yJAxisEndPoint</Name>
        <Type>rVarMode</Type>
        <Desc>Y coordinate of J-axis point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetFillOriginPoint</Name>
    <Version>1000</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Gets the origin point of the fill.[[BR]][[BR]]Note: only works with 2D objects that have a gradient or image fill.</Description>
    <ShortDesc>Gets the origin point of the fill.</ShortDesc>
    <Example>GetFillOriginPoint(objectHandle, xOrigin, yOrigin);</Example>
    <ID>2432</ID>
    <IDName>procGetFillOriginPoint</IDName>
    <InternalFunctionName>MP_GetFillOriginPoint</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object with fill.</Desc>
      </Param>
      <Param>
        <Name>xOriginPoint</Name>
        <Type>rVarMode</Type>
        <Desc>X coordinate of origin point.</Desc>
      </Param>
      <Param>
        <Name>yOriginPoint</Name>
        <Type>rVarMode</Type>
        <Desc>Y coordinate of origin point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetFillIAxisEndPoint</Name>
    <Version>1000</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Gets the I-axis end point of the fill.[[BR]][[BR]]Note: only works with 2D objects that have a gradient or image fill.</Description>
    <ShortDesc>Gets the I-axis end point of the fill.</ShortDesc>
    <Example>GetFillIAxisEndPoint(objectHandle, xIAxis, yIAxis);</Example>
    <ID>2433</ID>
    <IDName>procGetFillIAxisEndPoint</IDName>
    <InternalFunctionName>MP_GetFillIAxisEndPoint</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object with fill.</Desc>
      </Param>
      <Param>
        <Name>xIAxisEndPoint</Name>
        <Type>rVarMode</Type>
        <Desc>X coordinate of I-axis point.</Desc>
      </Param>
      <Param>
        <Name>yIAxisEndPoint</Name>
        <Type>rVarMode</Type>
        <Desc>Y coordinate of I-axis point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetFillJAxisEndPoint</Name>
    <Version>1000</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Gets the J-axis end point of the fill.[[BR]][[BR]]Note: only works with 2D objects that have a gradient or image fill.</Description>
    <ShortDesc>Gets the J-axis end point of the fill.</ShortDesc>
    <Example>GetFillJAxisEndPoint(objectHandle, xJAxis, yJAxis);</Example>
    <ID>2434</ID>
    <IDName>procGetFillJAxisEndPoint</IDName>
    <InternalFunctionName>MP_GetFillJAxisEndPoint</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object with fill.</Desc>
      </Param>
      <Param>
        <Name>xJAxisEndPoint</Name>
        <Type>rVarMode</Type>
        <Desc>X coordinate of J-axis point.</Desc>
      </Param>
      <Param>
        <Name>yJAxisEndPoint</Name>
        <Type>rVarMode</Type>
        <Desc>Y coordinate of J-axis point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetFillOriginPoint</Name>
    <Version>1000</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Sets the origin point of the fill.[[BR]][[BR]]Note: only works with 2D objects that have a gradient or image fill.</Description>
    <ShortDesc>Sets the origin point of the fill.</ShortDesc>
    <Example>SetFillOriginPoint(objectHandle, 10.0, 20.0);</Example>
    <ID>2435</ID>
    <IDName>procSetFillOriginPoint</IDName>
    <InternalFunctionName>MP_SetFillOriginPoint</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object with fill.</Desc>
      </Param>
      <Param>
        <Name>xOriginPoint</Name>
        <Type>realMode</Type>
        <Desc>X coordinate of origin point.</Desc>
      </Param>
      <Param>
        <Name>yOriginPoint</Name>
        <Type>realMode</Type>
        <Desc>Y coordinate of origin point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetFillIAxisEndPoint</Name>
    <Version>1000</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Sets the I-axis end point of the fill.[[BR]][[BR]]Note: only works with 2D objects that have a gradient or image fill.</Description>
    <ShortDesc>Sets the I-axis end point of the fill.</ShortDesc>
    <Example>SetFillIAxisEndPoint(objectHandle, 20.0, 10.0);</Example>
    <ID>2436</ID>
    <IDName>procSetFillIAxisEndPoint</IDName>
    <InternalFunctionName>MP_SetFillIAxisEndPoint</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object with fill.</Desc>
      </Param>
      <Param>
        <Name>xIAxisEndPoint</Name>
        <Type>realMode</Type>
        <Desc>X coordinate of I-axis point.</Desc>
      </Param>
      <Param>
        <Name>yIAxisEndPoint</Name>
        <Type>realMode</Type>
        <Desc>Y coordinate of I-axis point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetFillJAxisEndPoint</Name>
    <Version>1000</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Sets the J-axis end point of the fill.[[BR]][[BR]]Note: only works with 2D objects that have a gradient or image fill.</Description>
    <ShortDesc>Sets the J-axis end point of the fill.</ShortDesc>
    <Example>SetFillJAxisEndPoint(objectHandle, 15.0, 25.0);</Example>
    <ID>2437</ID>
    <IDName>procSetFillJAxisEndPoint</IDName>
    <InternalFunctionName>MP_SetFillJAxisEndPoint</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object with fill.</Desc>
      </Param>
      <Param>
        <Name>xJAxisEndPoint</Name>
        <Type>realMode</Type>
        <Desc>X coordinate of J-axis point.</Desc>
      </Param>
      <Param>
        <Name>yJAxisEndPoint</Name>
        <Type>realMode</Type>
        <Desc>Y coordinate of J-axis point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetGradientSliderData</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the spot position, midpoint position and color of the specified gradient slider segment.[[BR]][[BR]]Note: you must use a variable, initialized to the segment index, to pass as a parameter. After the data has been set, this variable will contain the index of the segment, which may have changed because of the spot position specified.</Description>
    <ShortDesc>Sets the spot position, midpoint position and color of the specified gradient slider segment.</ShortDesc>
    <Example>segmentIndex := 4;[[BR]]SetGradientSliderData(dialogID, componentID, segmentIndex, 0.9, 0.5, 255, 255, 255);</Example>
    <ID>2438</ID>
    <IDName>procSetGradientSliderData</IDName>
    <InternalFunctionName>MP_SetGradientSliderData</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index to the dialog layout that contains the gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Index to a specific gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intInOutMode</Type>
        <Desc>Segment for which to set the data.[[BR]](segment indexes begin with 1)</Desc>
      </Param>
      <Param>
        <Name>spotPosition</Name>
        <Type>realMode</Type>
        <Desc>Position of the segment's color marker relative to left-most point of the slider. [[BR]](position &gt;= 0.0 and position &lt;= 1.0)</Desc>
      </Param>
      <Param>
        <Name>midpointPosition</Name>
        <Type>realMode</Type>
        <Desc>Position of the segment's midpoint marker relative to color marker immediately to left. [[BR]](position &gt;= 0.0 and position &lt;= 1.0)</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>longMode</Type>
        <Desc>Red component of the color spot's color. [[BR]](red &gt;= 0 and red &lt;= 255)</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>longMode</Type>
        <Desc>Green component of the color spot's color. [[BR]](green &gt;= 0 and green &lt;= 255)</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>longMode</Type>
        <Desc>Blue component of the color spot's color. [[BR]](blue &gt;= 0 and blue &lt;= 255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetGradientSliderData</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Gets the spot position, midpoint position and color of the specified gradient slider segment.</Description>
    <ShortDesc>Gets the spot position, midpoint position and color of the specified gradient slider segment.</ShortDesc>
    <Example>GetGradientSliderData(dialogID, componentID, 4, 0.7, 0.3, 255, 255, 255);</Example>
    <ID>2439</ID>
    <IDName>procGetGradientSliderData</IDName>
    <InternalFunctionName>MP_GetGradientSliderData</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index to the dialog layout that contains the gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Index to a specific gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intMode</Type>
        <Desc>Segment from which to get the data.[[BR]](segment indexes begin with 1)</Desc>
      </Param>
      <Param>
        <Name>spotPosition</Name>
        <Type>rVarMode</Type>
        <Desc>Position of the segment's color marker relative to left-most point of the slider. [[BR]](position &gt;= 0.0 and position &lt;= 1.0)</Desc>
      </Param>
      <Param>
        <Name>midpointPosition</Name>
        <Type>rVarMode</Type>
        <Desc>Position of the segment's midpoint marker relative to color marker immediately to left. [[BR]](position &gt;= 0.0 and position &lt;= 1.0)</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Red component of the color spot's color. [[BR]](red &gt;= 0 and red &lt;= 255)</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Green component of the color spot's color. [[BR]](green &gt;= 0 and green &lt;= 255)</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Blue component of the color spot's color. [[BR]](blue &gt;= 0 and blue &lt;= 255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertGradientSliderSegment</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Inserts a new segment into the gradient slider and initializes its data to the specified values.</Description>
    <ShortDesc> Inserts a new segment into the gradient slider and initializes its data to the specified values.</ShortDesc>
    <Result>Returns index to new segment.</Result>
    <Example>segmentIndex := InsertGradientSliderSegment(dialogID, componentID, 0.4, 255, 255, 255);</Example>
    <ID>2440</ID>
    <IDName>funcInsertGradientSliderSegment</IDName>
    <InternalFunctionName>MP_InsertGradientSliderSegment</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index to the dialog layout that contains the gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Index to a specific gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>spotPosition</Name>
        <Type>realMode</Type>
        <Desc>Position of the segment's color marker relative to left-most point of the slider. [[BR]](position &gt;= 0.0 and position &lt;= 1.0)</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>longMode</Type>
        <Desc>Red component of the color spot's color. [[BR]](red &gt;= 0 and red &lt;= 255)</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>longMode</Type>
        <Desc>Green component of the color spot's color. [[BR]](green &gt;= 0 and green &lt;= 255)</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>longMode</Type>
        <Desc>Blue component of the color spot's color. [[BR]](blue &gt;= 0 and blue &lt;= 255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveGradientSliderSegment</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Removes the specified segment from the gradient slider.[[BR]][[BR]]Note: a gradient slider must always have at least 2 segments.</Description>
    <ShortDesc>Removes the specified segment from the gradient slider.</ShortDesc>
    <Example>RemoveGradientSliderSegment(dialogID, componentID, 4);</Example>
    <ID>2441</ID>
    <IDName>procRemoveGradientSliderSegment</IDName>
    <InternalFunctionName>MP_RemoveGradientSliderSegment</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index to the dialog layout that contains the gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Index to a specific gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intMode</Type>
        <Desc>Index to segment to be removed.[[BR]](segment indexes begin with 1)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ClearGradientSliderSegments</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Removes all segments (except for 2) from the gradient slider.[[BR]][[BR]]Note: a gradient slider must always have at least 2 segments.</Description>
    <ShortDesc>Removes all segments (except for 2) from the gradient slider.</ShortDesc>
    <Example>ClearGradientSliderSegments(dialogID, componentID);</Example>
    <ID>2442</ID>
    <IDName>procClearGradientSliderSegments</IDName>
    <InternalFunctionName>MP_ClearGradientSliderSegments</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index to the dialog layout that contains the gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Index to a specific gradient slider component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumGradientSliderSegments</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the number of segments in the gradient slider.[[BR]][[BR]]Note: a gradient slider must always have at least 2 segments.</Description>
    <ShortDesc>Gets the number of segments in the gradient slider. </ShortDesc>
    <Result>Retuns number of segments in gradient slider.[[BR]][[BR]](a segment consists of a color marker and the associated midpoint marker immediately to the right)</Result>
    <Example>numSegments := GetNumGradientSliderSegments(dialogID, componentID);</Example>
    <ID>2443</ID>
    <IDName>funcGetNumGradientSliderSegments</IDName>
    <InternalFunctionName>MP_GetNumGradientSliderSegments</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index to the dialog layout that contains the gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Index to a specific gradient slider component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetGradientSliderSelectedMarker</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the selected marker for the specified gradient slider. [[BR]][[BR]]Note: use the number, 1, to specify a color marker and the number, 2, to specify a midpoint marker.</Description>
    <ShortDesc>Sets the selected marker for the specified gradient slider. </ShortDesc>
    <Example>SetGradientSliderSelectedMarker(dialogID, componentID, 4, 2);[[BR]]{ selects midpoint marker in segment with index of 4 }</Example>
    <ID>2444</ID>
    <IDName>procSetGradientSliderSelectedMarker</IDName>
    <InternalFunctionName>MP_SetGradientSliderSelectedMarker</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index to the dialog layout that contains the gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Index to a specific gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intMode</Type>
        <Desc>Index to segment in which to select marker.[[BR]](segment indexes begin with 1)</Desc>
      </Param>
      <Param>
        <Name>markerType</Name>
        <Type>intMode</Type>
        <Desc>Type of marker to select.[[BR]](1 = color marker, 2 = midpoint marker)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetGradientSliderSelectedMarker</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Gets the selected marker for the specified gradient slider. [[BR]][[BR]]Note: use the number, 1, to identify a color marker and the number, 2, to identify a midpoint marker.</Description>
    <ShortDesc>Gets the selected marker for the specified gradient slider. Use the number 1, to identify a spot marker and the number 2, to identify a midpoint marker.</ShortDesc>
    <Example>GetGradientSliderSelectedMarker(dialogID, componentID, segmentIndex, markerType);</Example>
    <ID>2445</ID>
    <IDName>procGetGradientSliderSelectedMarker</IDName>
    <InternalFunctionName>MP_GetGradientSliderSelectedMarker</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index to the dialog layout that contains the gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Index to a specific gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intVarMode</Type>
        <Desc>Index to segment containing selected marker.[[BR]](segment indexes begin with 1)</Desc>
      </Param>
      <Param>
        <Name>markerType</Name>
        <Type>intVarMode</Type>
        <Desc>Type of marker selected.[[BR]](1 = color marker, 2 = midpoint marker)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertImagePopupObjectItem</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Inserts the specified object into the image popup.[[BR]][[BR]]Note: the image popup only supports the following object types: gradients, hatches, images, record formats, render backgrounds, symbol folders, symbols, textures, vectorscript palettes, vectorscripts, worksheets.</Description>
    <ShortDesc>Inserts the specified object into the image popup.</ShortDesc>
    <Result>Returns an image popup index to the object inserted.</Result>
    <SeeAlso>GetNumImagePopupItems, GetImagePopupObject, GetImagePopupObjectItemIndex, SetImagePopupSelectedItem, GetImagePopupSelectedItem, RemoveImagePopupItem, RemoveAllImagePopupItems</SeeAlso>
    <Comments>Functionality description needs more.</Comments>
    <Example>PROCEDURE dialog1_Main;[[BR]]VAR[[BR]]	dialog1 :INTEGER;[[BR]]	int     :INTEGER;[[BR]]	str     :STRING;[[BR]][[BR]]PROCEDURE dialog1_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]	CASE item OF[[BR]]		SetupDialogC:[[BR]]			BEGIN[[BR]]				str := GetSDName(FSymDef);[[BR]]				int := InsertImagePopupObjectItem(dialog1, 4, str);[[BR]]				SetImagePopupSelectedItem(dialog1, 4, int);[[BR]]			END;[[BR]]	END;[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]	dialog1 := CreateLayout('Image Pop-Up', FALSE, 'OK', '');[[BR]]	CreateControl(dialog1, 4, 10, '', 0);[[BR]]	SetFirstLayoutItem(dialog1, 4);[[BR]]	int := RunLayoutDialog(dialog1, dialog1_Handler);[[BR]]END;[[BR]]RUN(dialog1_Main);[[BR]]</Example>
    <ID>2446</ID>
    <IDName>funcInsertImagePopupObjectItem</IDName>
    <InternalFunctionName>MP_InsertImagePopupObjectItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index to the dialog layout that contains the image popup component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Index to a specific image popup component.</Desc>
      </Param>
      <Param>
        <Name>objectName</Name>
        <Type>stringMode</Type>
        <Desc>Name of the object to insert.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveImagePopupItem</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Removes the specified item from the image popup.</Description>
    <ShortDesc>Removes the specified item from the image popup.</ShortDesc>
    <SeeAlso>InsertImagePopupObjectItem, GetNumImagePopupItems, GetImagePopupObject, GetImagePopupObjectItemIndex, SetImagePopupSelectedItem, GetImagePopupSelectedItem, RemoveAllImagePopupItems</SeeAlso>
    <Example>RemoveImagePopupItem(dialogID, componentID, 4);</Example>
    <ID>2447</ID>
    <IDName>procRemoveImagePopupItem</IDName>
    <InternalFunctionName>MP_RemoveImagePopupItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index to the dialog layout that contains the image popup component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Index to a specific image popup component.</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>Index to item to be removed.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetImagePopupObject</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Returns the object name for the specified image popup item.</Description>
    <ShortDesc>Returns the object name for the specified image popup item.</ShortDesc>
    <Result>Returns name of object stored at specified image popup index.</Result>
    <SeeAlso>InsertImagePopupObjectItem, GetNumImagePopupItems, GetImagePopupObjectItemIndex, SetImagePopupSelectedItem, GetImagePopupSelectedItem, RemoveImagePopupItem, RemoveAllImagePopupItems</SeeAlso>
    <Example>objectName := GetImagePopupObject(dialogID, componentID, 4);</Example>
    <ID>2448</ID>
    <IDName>funcGetImagePopupObject</IDName>
    <InternalFunctionName>MP_GetImagePopupObject</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index to the dialog layout that contains the image popup component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Index to a specific image popup component.</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>Image popup item index for object to be retrieved.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveAllImagePopupItems</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Removes all items from the image popup.</Description>
    <ShortDesc>Removes all items from the image popup.</ShortDesc>
    <SeeAlso>InsertImagePopupObjectItem, GetNumImagePopupItems, GetImagePopupObject, GetImagePopupObjectItemIndex, SetImagePopupSelectedItem, GetImagePopupSelectedItem, RemoveImagePopupItem</SeeAlso>
    <Example>RemoveAllImagePopupItems(dialogID, componentID);</Example>
    <ID>2449</ID>
    <IDName>procRemoveAllImagePopupItems</IDName>
    <InternalFunctionName>MP_RemoveAllImagePopupItems</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index to the dialog layout that contains the image popup component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Index to a specific image popup component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetImagePopupObjectItemIndex</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns item index for the specified object.</Description>
    <ShortDesc>Returns item index for the specified object.</ShortDesc>
    <Result>Returns the image popup index for the specified object.</Result>
    <SeeAlso>InsertImagePopupObjectItem, GetNumImagePopupItems, GetImagePopupObject, SetImagePopupSelectedItem, GetImagePopupSelectedItem, RemoveImagePopupItem, RemoveAllImagePopupItems</SeeAlso>
    <Example>imagePopupIndex := GetImagePopupObjectItemIndex(dialogID, componentID, 'Symbol-1');</Example>
    <ID>2450</ID>
    <IDName>funcGetImagePopupObjectItemIndex</IDName>
    <InternalFunctionName>MP_GetImagePopupObjectItemIndex</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index to the dialog layout that contains the image popup component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Index to a specific image popup component.</Desc>
      </Param>
      <Param>
        <Name>objectName</Name>
        <Type>stringMode</Type>
        <Desc>Name of object for which the image popup index should be retrieved.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumImagePopupItems</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the number of items in the image popup.</Description>
    <ShortDesc>Returns the number of items in the image popup.</ShortDesc>
    <Result>Returns the number of items in the specified image popup.</Result>
    <SeeAlso>InsertImagePopupObjectItem, GetImagePopupObject, GetImagePopupObjectItemIndex, SetImagePopupSelectedItem, GetImagePopupSelectedItem, RemoveImagePopupItem, RemoveAllImagePopupItems</SeeAlso>
    <Example>numImagePopupItems := GetNumImagePopupItems(dialogID, componentID);</Example>
    <ID>2451</ID>
    <IDName>funcGetNumImagePopupItems</IDName>
    <InternalFunctionName>MP_GetNumImagePopupItems</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index to the dialog layout that contains the image popup component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Index to a specific image popup component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetImagePopupSelectedItem</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the selected image popup item. The [[p:3]] parameter is 1-based.</Description>
    <ShortDesc>Sets the selected image popup item.</ShortDesc>
    <SeeAlso>InsertImagePopupObjectItem, GetNumImagePopupItems, GetImagePopupObject, GetImagePopupObjectItemIndex, GetImagePopupSelectedItem, RemoveImagePopupItem, RemoveAllImagePopupItems</SeeAlso>
    <Example>SetImagePopupSelectedItem(dialogID, componentID, 4);</Example>
    <ID>2452</ID>
    <IDName>procSetImagePopupSelectedItem</IDName>
    <InternalFunctionName>MP_SetImagePopupSelectedItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index to the dialog layout that contains the image popup component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Index to a specific image popup component.</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>Index to item to select.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetImagePopupSelectedItem</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the selected image popup item.</Description>
    <ShortDesc>Gets the selected image popup item.</ShortDesc>
    <Result>Returns the image popup index for the currently selected item.</Result>
    <SeeAlso>InsertImagePopupObjectItem, GetNumImagePopupItems, GetImagePopupObject, GetImagePopupObjectItemIndex, SetImagePopupSelectedItem, RemoveImagePopupItem, RemoveAllImagePopupItems</SeeAlso>
    <Example>selectedItemIndex := GetImagePopupSelectedItem(dialogID, componentID);</Example>
    <ID>2453</ID>
    <IDName>funcGetImagePopupSelectedItem</IDName>
    <InternalFunctionName>MP_GetImagePopupSelectedItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index to the dialog layout that contains the image popup component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Index to a specific image popup component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetPaletteVisibility</Name>
    <Version>1000</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Sets the visibility state of a palette.</Description>
    <ShortDesc>Sets the visibility state of a palette.</ShortDesc>
    <SeeAlso>GetPaletteVisibility</SeeAlso>
    <ID>2454</ID>
    <IDName>procSetPaletteVisibility</IDName>
    <InternalFunctionName>MP_SetPaletteVisibility</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>paletteName</Name>
        <Type>stringMode</Type>
        <Desc>Name of the palette</Desc>
      </Param>
      <Param>
        <Name>vis</Name>
        <Type>boolMode</Type>
        <Desc>True if the palette should be visible, false otherwise</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPaletteVisibility</Name>
    <Version>1000</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the visibility state of a palette.</Description>
    <ShortDesc>Gets the visibility state of a palette.</ShortDesc>
    <Result>Returns true if the palette is visible, false otherwise.</Result>
    <SeeAlso>SetPaletteVisibility</SeeAlso>
    <ID>2455</ID>
    <IDName>funcGetPaletteVisibility</IDName>
    <InternalFunctionName>MP_GetPaletteVisibility</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>paletteName</Name>
        <Type>stringMode</Type>
        <Desc>Name of the palette</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDrawingRect</Name>
    <Version>1000</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Sets the size of the drawing rectangle.</Description>
    <ShortDesc>Sets the size of the drawing rectangle.</ShortDesc>
    <ID>2456</ID>
    <IDName>procSetDrawingRect</IDName>
    <InternalFunctionName>MP_SetDrawingRect</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>paperWidth</Name>
        <Type>realMode</Type>
        <Desc>The width of the drawing rectangle</Desc>
      </Param>
      <Param>
        <Name>paperHeight</Name>
        <Type>realMode</Type>
        <Desc>The height of the drawing rectangle</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ConvertTo3DPolys</Name>
    <Version>1000</Version>
    <Category>Objects - 3D</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Converts an object to 3D polygons. This function successfully converts rectangles, circles, arcs, polylines, polygons, ovals, lines, straight walls, curved walls, and roofs.[[BR]]</Description>
    <ShortDesc>Converts an object to 3D polygons.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	h :HANDLE;[[BR]]BEGIN[[BR]]	h := ConvertTo3DPolys(FSActLayer);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2457</ID>
    <IDName>funcConvertTo3DPolys</IDName>
    <InternalFunctionName>MP_ConvertTo3DPolys</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>original</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the original object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLayerRenderMode</Name>
    <Version>1000</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the render mode for the referenced layer.[[BR]][[BR]][[note:RenderModesTable]]</Description>
    <ShortDesc>Returns the render mode for the referenced layer.</ShortDesc>
    <ID>2458</ID>
    <IDName>funcGetLayerRenderMode</IDName>
    <InternalFunctionName>MP_GetLayerRenderMode</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theLayer</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLayerRenderMode</Name>
    <Version>1000</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Sets the render mode of the referenced layer.</Description>
    <ShortDesc>Sets the render mode of the referenced layer.</ShortDesc>
    <ID>2459</ID>
    <IDName>procSetLayerRenderMode</IDName>
    <InternalFunctionName>MP_SetLayerRenderMode</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theLayer</Name>
        <Type>handleMode</Type>
        <Desc>Handle of the layer</Desc>
      </Param>
      <Param>
        <Name>newRenderMode</Name>
        <Type>intMode</Type>
        <Desc>New render mode to set</Desc>
      </Param>
      <Param>
        <Name>immediate</Name>
        <Type>boolMode</Type>
        <Desc>If true, then all rendering will take place before the call returns. Otherwise, any rendering that can take place in the background will be postponed until program execution re-enters the main event loop</Desc>
      </Param>
      <Param>
        <Name>doProgress</Name>
        <Type>boolMode</Type>
        <Desc>controls whether progress information is displayed during the operation</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsLayerReferenced</Name>
    <Version>1000</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns whether a layer is workgroup referenced, and if so, the path to the source document is returned.</Description>
    <ShortDesc>Returns whether a layer is workgroup referenced, and if so, the path to the source document is returned.</ShortDesc>
    <Result>Returns true if the layer is referenced, false otherwise.</Result>
    <ID>2460</ID>
    <IDName>funcIsLayerReferenced</IDName>
    <InternalFunctionName>MP_IsLayerReferenced</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>layer</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the layer</Desc>
      </Param>
      <Param>
        <Name>pathname</Name>
        <Type>strVarMode</Type>
        <Desc>On return, a string containing the path to the source document</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>OpenURL</Name>
    <Version>1000</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Opens a web page or file using the default browser or appropriate application (e.g. Adobe Acrobat).  Returns a boolean indicating the success of the operation.[[BR]][[BR]]The URL (Uniform Resource Locator) is a pointer to a resource on the World Wide Web.  It specifies both the protocol and location of the document to open.  For files on the local computer, the URL should begin with file:// protocol specifier.  For web pages, the URL should begin with http://.  The URL should use forward slashes / to separate parts of the path.  [[BR]][[BR]]There are some platform differences to be aware of.  Windows will accept either \ or / as the path separators.  MacOS X requires that file:// URLs begin with /Volumes/ before the drive name.  Also, currently the MacOS X implementation of OpenURL does not accept spaces in the URL.  Spaces should be replaced with the escape code %20 before calling this function.[[BR]][[BR]]Note: The function GetFolderPath returns a string with separators specific for the platform it is running on (: on Mac and \ on Windows).  If your script calls this function to assemble a local file:// URL then you will have to replace the : separators with / characters. [[BR]]</Description>
    <ShortDesc>Opens a URL using the default browser or Adobe Acrobat.  Returns a boolean indicating the success of the operation.</ShortDesc>
    <Example>	{ Open a webpage. }[[BR]]	status := [[name]]('http://www.vectorworks.net');[[BR]][[BR]]	{ Open an HTML file on MacOS X. }[[BR]]	status := [[name]]('file:///Volumes/MyMacXHD/Documents/My%20Files/Test.html');[[BR]]	[[BR]]	{ Open a PDF file in Acrobat on MacOS X. }[[BR]]	status := [[name]]('file:///Volumes/MyMacXHD/Documents/My%20Files/VSLG11.pdf');[[BR]][[BR]]	{ Open a PDF file in Acrobat on MacOS 9. }[[BR]]	status := [[name]]('file:///MyMac9HD/My Files/VSLG11.pdf');[[BR]]	[[BR]]	{ Open a PDF file in Acrobat on Windows. }[[BR]]	status := [[name]]('file:///C:/My Files/VSLG11.pdf';[[BR]]	[[BR]]</Example>
    <ID>2461</ID>
    <IDName>funcOpenURL</IDName>
    <InternalFunctionName>MP_OpenURL</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>URLname</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The Uniform Resource Locator for the web page or file to open. </Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ConvertToNURBS</Name>
    <Version>1000</Version>
    <Category>Objects - NURBS</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>This function converts the input object into a new NURBS object or a group of NURBS objects in the document.</Description>
    <ShortDesc>This function converts the input object into a new NURBS object or a group of NURBS objects in the document.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	h :handle;[[BR]]BEGIN[[BR]]	CallTool(-204);[[BR]]	h := FSActLayer;[[BR]]	h := ConvertToNURBS(h, false);[[BR]]	h := CreateOffsetNurbsObjectHandle(h, 1);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2462</ID>
    <IDName>funcConvertToNURBS</IDName>
    <InternalFunctionName>MP_ConvertToNURBS</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle of original object.</Desc>
      </Param>
      <Param>
        <Name>keepOrig</Name>
        <Type>boolMode</Type>
        <Desc>Leave the original object in the drawing.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateSurfacefromCurvesNetwork</Name>
    <Version>1000</Version>
    <Category>Objects - NURBS</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>This function will create a NURBS surface from a network of selected intersecting curves in the document</Description>
    <ShortDesc>This function will create a NURBS surface from a network of selected intersecting curves in the document</ShortDesc>
    <ID>2463</ID>
    <IDName>funcCreateSurfacefromCurvesNetwork</IDName>
    <InternalFunctionName>MP_CreateSurfacefromCurvesNetwork</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>CreateLoftSurfaces</Name>
    <Version>1000</Version>
    <Category>Objects - NURBS</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates NURBS surfaces by interpolating a group of cross-section curves.  The nurbs curves are lofted in the order in which they were added to the group.</Description>
    <ShortDesc>Creates NURBS surfaces by interpolating a group of cross-section curves.  The nurbs curves are lofted in the order in which they were added to the group.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	h, groupHand :HANDLE;[[BR]]	bRule, bClose, bSolid :BOOLEAN;[[BR]]BEGIN[[BR]]	BeginGroup;[[BR]][[BR]]	h := CreateNurbsCurve(-PLENGTH/2, 0, 0, true, 1);[[BR]]	AddVertex3D(h, -PLENGTH/2,PHEIGHT,0);[[BR]]	AddVertex3D(h, PLENGTH/2,PHEIGHT,0);[[BR]]	AddVertex3D(h, PLENGTH/2,0,0);[[BR]][[BR]]	h := CreateNurbsCurve(-PLENGTH/2-POFFSET,0,pWidth, true, 1);[[BR]]	AddVertex3D(h, -PLENGTH/2-POFFSET, PHEIGHT+POFFSET, pWidth);[[BR]]	AddVertex3D(h, PLENGTH/2+POFFSET, PHEIGHT+POFFSET, pWidth);[[BR]]	AddVertex3D(h, PLENGTH/2+POFFSET, 0, pWidth);[[BR]][[BR]]	EndGroup;[[BR]]	groupHand := LNewObj;[[BR]]	bRule := TRUE;[[BR]]	bClose := FALSE;[[BR]]	bSolid := FALSE;[[BR]]	groupHand := CreateLoftSurfaces(groupHand, bRule, bClose, bSolid);[[BR]]	SetRot3D(LNewObj,#90d,#0d,#0d,0,0,0);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2464</ID>
    <IDName>funcCreateLoftSurfaces</IDName>
    <InternalFunctionName>MP_CreateLoftSurfaces</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>groupCurvesHd</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>bRule</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>bClose</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>bSolid</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNurbsObjectDistanceFromPoint</Name>
    <Version>1000</Version>
    <Category>Objects - NURBS</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns the distance from the input point  to the input NURBS Object [[p:1]].</Description>
    <ShortDesc>This function will return the distance from the input point  to the input NURBS Object h.</ShortDesc>
    <ID>2465</ID>
    <IDName>funcGetNurbsObjectDistanceFromPoint</IDName>
    <InternalFunctionName>MP_GetNurbsObjectDistanceFromPoint</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a NURBS object.</Desc>
      </Param>
      <Param>
        <Name>point</Name>
        <Type>globPtMode</Type>
        <Desc>point</Desc>
      </Param>
      <Param>
        <Name>distance</Name>
        <Type>rVarMode</Type>
        <Desc>Distance between point and object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateOffsetNurbsObjectHandle</Name>
    <Version>1000</Version>
    <Category>Objects - NURBS</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns a handle to a NURBS object that is offset from the given NURBS object [[p:1]] by the offset distance.</Description>
    <ShortDesc>This function will return a handle to a NURBS object that is offset from the given NURBS object h by the offset distance.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	h :handle;[[BR]]BEGIN[[BR]]	CallTool(-204);[[BR]]	h := FSActLayer;[[BR]]	h := ConvertToNURBS(h, false);[[BR]]	h := CreateOffsetNurbsObjectHandle(h, 1);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2466</ID>
    <IDName>funcCreateOffsetNurbsObjectHandle</IDName>
    <InternalFunctionName>MP_CreateOffsetNurbsObjectHandle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>offsetDistance</Name>
        <Type>distanceMode</Type>
        <Desc>Offset distance. Positive offsets outwards.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPolyBreakGeometry</Name>
    <Version>1000</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>If the break, in theWall at the specified break index, references a polyBreak object then a copy of the polybreak is converted into a polyline object. </Description>
    <ShortDesc>If the break, in theWall at the specified break index,  references a polyBreak object then a copy of the polybreak is converted into a polyline object. </ShortDesc>
    <Comments>The Caller is responsible for deleting the returned polyline (use GS_DeleteObject w/ undo = false)</Comments>
    <ID>2467</ID>
    <IDName>procGetPolyBreakGeometry</IDName>
    <InternalFunctionName>MP_GetPolyBreakGeometry</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>theWall</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>breakIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>polyline</Name>
        <Type>handleVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetAsPolyBreak</Name>
    <Version>1000</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Available in Architect only. Takes the given polyline and uses it to set a polybreak at the given breakIndex.</Description>
    <ShortDesc>Available in Architect only.Takes the given polyline and uses it to set a polybreak at the given breakIndex.</ShortDesc>
    <Comments>The input polyline must be a stand alone object not in the drawing or any other list</Comments>
    <ID>2468</ID>
    <IDName>procSetAsPolyBreak</IDName>
    <InternalFunctionName>MP_SetAsPolyBreak</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>thePolyline</Name>
        <Type>handleVarMode</Type>
      </Param>
      <Param>
        <Name>theWall</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>breakIndex</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>MoveWallByOffset</Name>
    <Version>1000</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Available in Architect only. Moves the wall perpendicular to its definition line by the specified offset and maintains all wall connections. Wall movement may be constrained by the surrounding geometry so the actual amount of the offset is returned.</Description>
    <ShortDesc>Available in Architect only. Moves the wall perpendicular to its definition line by the specified offset, and maintains all wall connections Offset &lt; 0 left of wall &amp; Offset &gt; 0 right of wall</ShortDesc>
    <Result>The actual amount the wall was moved is passed back in the offset parameter. </Result>
    <ID>2469</ID>
    <IDName>procMoveWallByOffset</IDName>
    <InternalFunctionName>MP_MoveWallByOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theWall</Name>
        <Type>handleMode</Type>
        <Desc>A handle to the wall to move.</Desc>
      </Param>
      <Param>
        <Name>offset</Name>
        <Type>realInOutMode</Type>
        <Desc>The distance to move the given wall. Negative offsets move the wall to the left and positive offsets move the wall to the right. The actual amount the wall was moved is returned in this field. </Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>JoinWalls</Name>
    <Version>1000</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>This function provides a VectorScript interface to the Wall Join Tool. The parameters [[p:3]] and [[p:4]] are used to specify the pick points that determine which ends of the walls are to be joined, similar to the points requested by the Wall Join Tool.</Description>
    <ShortDesc>Join Modifier Types:  kTWallJoin = 1, kLWallJoin = 2, kXWallJoin = 3, kAutoWallJoin = 4</ShortDesc>
    <ID>2470</ID>
    <IDName>funcJoinWalls</IDName>
    <InternalFunctionName>MP_JoinWalls</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>firstWall</Name>
        <Type>handleMode</Type>
        <Desc>The first wall of the join operation. For T joins this is the wall that is extended to meet the second wall. </Desc>
      </Param>
      <Param>
        <Name>secondWall</Name>
        <Type>handleMode</Type>
        <Desc>The second wall of the join operation.</Desc>
      </Param>
      <Param>
        <Name>firstWall</Name>
        <Type>globPtMode</Type>
        <Desc>The first and second wall points are used to clarify corner joins.</Desc>
      </Param>
      <Param>
        <Name>secondWall</Name>
        <Type>globPtMode</Type>
        <Desc>The first and second wall points are used to clarify corner joins.</Desc>
      </Param>
      <Param>
        <Name>joinModifier</Name>
        <Type>intMode</Type>
        <Desc>Specifies the type of join: T-join = 1, L-join = 2, X-join = 3, and auto join = 4. </Desc>
      </Param>
      <Param>
        <Name>capped</Name>
        <Type>boolMode</Type>
        <Desc>True for capped joins, false for un-capped joins.</Desc>
      </Param>
      <Param>
        <Name>showAlerts</Name>
        <Type>boolMode</Type>
        <Desc>Show an alert dialog if the join operation fails.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ReverseWallSides</Name>
    <Version>1000</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Switch the left and right side of a wall by reversing the direction of the wall.  This is an interface to the button with the same name on the Object Info palette.</Description>
    <ShortDesc>Switch the left and right side of a wall by reversing the direction of the wall.  This is an interface to the button with the same name on the Object Info palette.</ShortDesc>
    <Example>PROCEDURE ReverseWallSidesExample;[[BR]]VAR[[BR]]	center_pt, start_pt, end_pt :VECTOR;[[BR]]	h :HANDLE;[[BR]]BEGIN[[BR]]	center_pt.x := 0;[[BR]]	center_pt.y := 0;[[BR]]	start_pt.x := 100;[[BR]]	start_pt.y := 0;[[BR]]	end_pt.x := 0;[[BR]]	end_pt.y := 100;[[BR]]	RoundWall(center_pt.x, center_pt.y, start_pt.x, start_pt.y, end_pt.x, end_pt.y);[[BR]]	h := LNewObj;[[BR]]	ReverseWallSides(h);[[BR]]END;[[BR]]RUN(ReverseWallSidesExample);</Example>
    <ID>2471</ID>
    <IDName>procReverseWallSides</IDName>
    <InternalFunctionName>MP_ReverseWallSides</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>theWall</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the wall to operate on.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetColorButton</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the color of a modern dialog color button. Set all colors to 0 for black. Set all colors to 65535 for white. </Description>
    <ShortDesc>Sets the color of a modern dialog color button. Legal range for colors is 0 to 65535.</ShortDesc>
    <SeeAlso>GetColorButton</SeeAlso>
    <Example>PROCEDURE SetColorControl(dialogID, controlID :LONGINT; colorIndex :STRING);[[BR]]VAR[[BR]]	r, g, b :LONGINT;[[BR]]BEGIN[[BR]]	IF colorIndex &lt;&gt; '' THEN BEGIN[[BR]]		ColorIndexToRGB(Str2Num(colorIndex), r, g, b);[[BR]]		SetColorButton(dialogID, controlID, r, g, b);[[BR]]	END;[[BR]]END;</Example>
    <ID>2472</ID>
    <IDName>procSetColorButton</IDName>
    <InternalFunctionName>MP_SetColorButton</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the color button.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>longMode</Type>
        <Desc>The red component of the color.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>longMode</Type>
        <Desc>The green component of the color.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>longMode</Type>
        <Desc>The blue component of the color.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetColorButton</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Gets the color of a modern dialog color button. </Description>
    <ShortDesc>Gets the color of a modern dialog color button.</ShortDesc>
    <SeeAlso>SetColorButton</SeeAlso>
    <ID>2473</ID>
    <IDName>procGetColorButton</IDName>
    <InternalFunctionName>MP_GetColorButton</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the color button.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>The red component of the color.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>The green component of the color.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>The blue component of the color.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DrawNurbsObject</Name>
    <Version>1000</Version>
    <Category>Objects - NURBS</Category>
    <Type>Procedure</Type>
    <Description>Draws the NURBS object h on the screen.</Description>
    <ShortDesc>Draws the NURBS object h on the screen.</ShortDesc>
    <ID>2474</ID>
    <IDName>procDrawNurbsObject</IDName>
    <InternalFunctionName>MP_DrawNurbsObject</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetParameterOnNurbsCurve</Name>
    <Version>1000</Version>
    <Category>Objects - NURBS</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Given a NURBS curve handle and a point (in world space), this function returns the parameter of the point obtained by projecting the input point. The function also returns the index of the piece in the piecewise NURBS curve on which the projected point lies.</Description>
    <ShortDesc>Gets the parameter of the closest point on a curve.</ShortDesc>
    <ID>2475</ID>
    <IDName>funcGetParameterOnNurbsCurve</IDName>
    <InternalFunctionName>MP_GetParameterOnNurbsCurve</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>point</Name>
        <Type>d3PtMode</Type>
      </Param>
      <Param>
        <Name>parameter</Name>
        <Type>rVarMode</Type>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>lngVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetParent</Name>
    <Version>1000</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Removes the object from its current container and places it within the given container. For example, SetParent can be used to put the referenced object into a group, or into a symbol definition, or to change the layer of the referenced object.</Description>
    <ShortDesc>Removes the object from its current container and places it within the given container.</ShortDesc>
    <SeeAlso>CreateDuplicateObject</SeeAlso>
    <Comments>This function will fail if obj is being moved from a non-regenerable list of a plug-in to a regenrable list of a plug-in</Comments>
    <Example>PROCEDURE SetParentExample;[[BR]]VAR[[BR]]	h1, h2 :HANDLE;[[BR]]	boo :BOOLEAN;[[BR]]BEGIN[[BR]]	h1 := FSActLayer;[[BR]]	h2 := NextObj(h1);[[BR]]	boo := SetParent(h2, h1);[[BR]]END;[[BR]]RUN(SetParentExample);</Example>
    <ID>2476</ID>
    <IDName>funcSetParent</IDName>
    <InternalFunctionName>MP_SetParent</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object to move.</Desc>
      </Param>
      <Param>
        <Name>container</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object that will become the parent of the obj variable.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ArcByCenter</Name>
    <Version>1000</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Creates an arc using a center point, the radius, a start angle, and a sweep.</Description>
    <ShortDesc>Creates an arc using a center point, the radius, a start angle, and a sweep.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	x, y, radius, startAngle, sweepAngle :REAL;[[BR]]BEGIN[[BR]]	GetPt(x, y);[[BR]]	radius := 3;[[BR]]	startAngle := 0;[[BR]]	sweepAngle := 90;[[BR]]	ArcByCenter(x, y, radius, startAngle, sweepAngle);[[BR]]	AlrtDialog(Concat(GetType(LNewObj)));[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2477</ID>
    <IDName>procArcByCenter</IDName>
    <InternalFunctionName>MP_ArcByCenter</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>x</Name>
        <Type>realMode</Type>
        <Desc>X-coordinate of the center point</Desc>
      </Param>
      <Param>
        <Name>y</Name>
        <Type>realMode</Type>
        <Desc>Y-coordinate of the center point</Desc>
      </Param>
      <Param>
        <Name>radius</Name>
        <Type>realMode</Type>
        <Desc>Radius of the arc</Desc>
      </Param>
      <Param>
        <Name>startAngl</Name>
        <Type>angleMode</Type>
        <Desc>Starting angle of the arc</Desc>
      </Param>
      <Param>
        <Name>sweepAngle</Name>
        <Type>angleMode</Type>
        <Desc>Sweep angle of the arc</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOSVersion</Name>
    <Version>1000</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Returns the version of the current operating system.</Description>
    <ShortDesc>Returns the version of the current operating system.</ShortDesc>
    <Example>PROCEDURE ShowVersionInfo;[[BR]]VAR[[BR]]	osMajor, osMinor, osIncr :LONGINT;[[BR]]	vwMajor, vwMinor, vwMaint, platform: INTEGER;[[BR]]	str :STRING;[[BR]]BEGIN[[BR]]	str := '';[[BR]]	GetOSVersion(osMajor, osMinor, osIncr);[[BR]]	GetVersion(vwMajor, vwMinor, vwMaint, platform);[[BR]]	If platform = 1 then BEGIN[[BR]]		str := Concat(str, 'Platform: Macintosh', chr(13));[[BR]]		IF osMajor = 0 THEN osMajor := 10;[[BR]]		str := Concat(str, 'OS Version: ', osMajor, '.', osMinor, '.', osIncr, chr(13));[[BR]]	end else if platform = 2 then BEGIN[[BR]]		str := Concat(str, 'Platform: Windows', chr(13));[[BR]]		IF (osMajor = 4) &amp; (osMinor = 10) THEN str := Concat(str, 'OS Version: 98 SE', chr(13)) ELSE [[BR]]		IF (osMajor = 5) &amp; (osMinor =  1) THEN str := Concat(str, 'OS Version: XP',    chr(13)) ELSE [[BR]]		str := Concat(str, 'OS Version: ', osMajor, '.', osMinor, '.', osIncr, chr(13));[[BR]]	END;[[BR]]	str := Concat(str, 'VW Version: ', vwMajor, '.', vwMinor, '.', vwMaint);[[BR]]	AlrtDialog(str);[[BR]]END;[[BR]]RUN(ShowVersionInfo);</Example>
    <ID>2478</ID>
    <IDName>procGetOSVersion</IDName>
    <InternalFunctionName>MP_GetOSVersion</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>major</Name>
        <Type>lngVarMode</Type>
        <Desc>Major revision number</Desc>
      </Param>
      <Param>
        <Name>minor</Name>
        <Type>lngVarMode</Type>
        <Desc>Minor revision number</Desc>
      </Param>
      <Param>
        <Name>incr</Name>
        <Type>lngVarMode</Type>
        <Desc>Increment revision number</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSymbolType</Name>
    <Version>1000</Version>
    <Category>Objects - Symbols</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Determines the type of the specified symbol instance.  The return values are:[[BR]]0 - 2D Only[[BR]]1 - 3D Only[[BR]]2 - Hybrid</Description>
    <ShortDesc>Returns 0 for 2D, 1 for 3D, and 2 for a hybrid symbol.</ShortDesc>
    <Result>-1 = error.  Possibly wrong type of object passed in.[[BR]]0 = 2D Symbol[[BR]]1 = 3D Symbol[[BR]]2 = Hybrid Symbol</Result>
    <ID>2479</ID>
    <IDName>funcGetSymbolType</IDName>
    <InternalFunctionName>MP_GetSymbolType</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a symbol instance. </Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSymLoc3D</Name>
    <Version>1000</Version>
    <Category>Objects - Symbols</Category>
    <Type>Procedure</Type>
    <Description>Determines the location of a specified symbol or plug-in object in 3D space.</Description>
    <ShortDesc>Determines the location of a specified symbol or plug-in object in 3D space.</ShortDesc>
    <ID>2480</ID>
    <IDName>procGetSymLoc3D</IDName>
    <InternalFunctionName>MP_GetSymLoc3D</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a symbol instance or a plug-in object in the drawing.</Desc>
      </Param>
      <Param>
        <Name>x</Name>
        <Type>rVarMode</Type>
        <Desc>The location of the object along the x-axis.</Desc>
      </Param>
      <Param>
        <Name>y</Name>
        <Type>rVarMode</Type>
        <Desc>The location of the object along the y-axis.</Desc>
      </Param>
      <Param>
        <Name>z</Name>
        <Type>rVarMode</Type>
        <Desc>The location of the object along the z-axis.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWorkingPlane</Name>
    <Version>1000</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Retrieves the location and orientation of the working plane.</Description>
    <ShortDesc>Retrieves the location and orientation of the working plane.</ShortDesc>
    <SeeAlso>SetWorkingPlane</SeeAlso>
    <ID>2481</ID>
    <IDName>procGetWorkingPlane</IDName>
    <InternalFunctionName>MP_GetWorkingPlane</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>x</Name>
        <Type>rVarMode</Type>
        <Desc>X-coordinate of the working plane</Desc>
      </Param>
      <Param>
        <Name>y</Name>
        <Type>rVarMode</Type>
        <Desc>Y-coordinate of the working plane</Desc>
      </Param>
      <Param>
        <Name>z</Name>
        <Type>rVarMode</Type>
        <Desc>Z-coordinate of the working plane</Desc>
      </Param>
      <Param>
        <Name>xRotation</Name>
        <Type>rVarMode</Type>
        <Desc>X-coordinate value of the rotation</Desc>
      </Param>
      <Param>
        <Name>yRotation</Name>
        <Type>rVarMode</Type>
        <Desc>Y-coordinate value of the rotation</Desc>
      </Param>
      <Param>
        <Name>zRotation</Name>
        <Type>rVarMode</Type>
        <Desc>Z-coordinate value of the rotation</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GroupToMesh</Name>
    <Version>1000</Version>
    <Category>Objects - Groups</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Converts a group of 3D polygons into a mesh network.  </Description>
    <ShortDesc>Converts a group of 3D polygons into a mesh network.  </ShortDesc>
    <Result>Returns a handle to the mesh network.</Result>
    <SeeAlso>MeshToGroup</SeeAlso>
    <ID>2482</ID>
    <IDName>funcGroupToMesh</IDName>
    <InternalFunctionName>MP_GroupToMesh</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>groupObj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a group containing 3D polygons</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HDuplicate</Name>
    <Version>1000</Version>
    <Category>Object Editing</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Duplicates and moves an object by the offsets specified.</Description>
    <ShortDesc>Duplicates and moves an object by the offsets specified.</ShortDesc>
    <Result>Returns a handle to the new object.</Result>
    <ID>2483</ID>
    <IDName>funcHDuplicate</IDName>
    <InternalFunctionName>MP_HDuplicate</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object to duplicate</Desc>
      </Param>
      <Param>
        <Name>x</Name>
        <Type>realMode</Type>
        <Desc>X-coordinate of distance object should be shifted from original location</Desc>
      </Param>
      <Param>
        <Name>y</Name>
        <Type>realMode</Type>
        <Desc>Y-coordinate of distance object should be shifted from original location</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HExtrude</Name>
    <Version>1000</Version>
    <Category>Objects - 3D</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates an extrude object from the specified object.</Description>
    <ShortDesc>Creates an extrude and places the object within the extrude container.</ShortDesc>
    <Result>A handle to the newly created extrude object.</Result>
    <ID>2484</ID>
    <IDName>funcHExtrude</IDName>
    <InternalFunctionName>MP_HExtrude</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectH</Name>
        <Type>handleMode</Type>
        <Desc>The profile to be extruded.</Desc>
      </Param>
      <Param>
        <Name>bottom</Name>
        <Type>realMode</Type>
        <Desc>The z height of the bottom of the extrude.</Desc>
      </Param>
      <Param>
        <Name>top</Name>
        <Type>realMode</Type>
        <Desc>The z height of the top of the extrude.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertVertex</Name>
    <Version>1000</Version>
    <Category>Objects - Polys</Category>
    <Type>Procedure</Type>
    <Description>Inserts a new vertex into polygon or polyline.  If the vertexType is nonzero, it will convert the objectHandle into a polyline.</Description>
    <ShortDesc>Inserts a new vertex into polygon or polyline.  If the vertexType is nonzero, it will convert the objectHandle into a polyline.</ShortDesc>
    <ID>2485</ID>
    <IDName>procInsertVertex</IDName>
    <InternalFunctionName>MP_InsertVertex</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the polygon or polyline</Desc>
      </Param>
      <Param>
        <Name>x</Name>
        <Type>realMode</Type>
        <Desc>X-coordinate of the vertex to add</Desc>
      </Param>
      <Param>
        <Name>y</Name>
        <Type>realMode</Type>
        <Desc>Y-coordinate of the vertex to add</Desc>
      </Param>
      <Param>
        <Name>beforeVertexNum</Name>
        <Type>intMode</Type>
        <Desc>Vertex number before which the new vertex is to be inserted</Desc>
      </Param>
      <Param>
        <Name>vertexType</Name>
        <Type>intMode</Type>
        <Desc>Vertex type of the new vertex</Desc>
      </Param>
      <Param>
        <Name>arcRadius</Name>
        <Type>realMode</Type>
        <Desc>For arc vertices, the radius of the arc</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>MeshToGroup</Name>
    <Version>1000</Version>
    <Category>Objects - 3D</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Converts meshObj to a group of 3D polygons.</Description>
    <ShortDesc>Converts meshObj to a group of 3D polygons.</ShortDesc>
    <Result>Returns a handle containing 3D polygons.</Result>
    <SeeAlso>GroupToMesh</SeeAlso>
    <ID>2486</ID>
    <IDName>funcMeshToGroup</IDName>
    <InternalFunctionName>MP_MeshToGroup</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>meshObj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a mesh object</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ResetObject</Name>
    <Version>1000</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Update the specified object using the current settings and parameter values.  This will reset the bounding box of the object.  If the object is in a wall, then the wall is reset also.  [[BR]][[BR]]An object of any type may be passed to this function to have its boundary reset.  The following object types will be reset in a way that is appropriate for each type: Plug-in Object, Symbol Definition, Wall, Roof Container, Bitmap, Picture, Dimension, Extrude, Multiple Extrude, Sweep, Polygon, Polyline, Worksheet.</Description>
    <ShortDesc>Updates the object for any changes in parameters (e.g. resetting bounding box, rebuilding wall groups, etc.)</ShortDesc>
    <ID>2487</ID>
    <IDName>procResetObject</IDName>
    <InternalFunctionName>MP_ResetObject</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object to be reset.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWorkingPlane</Name>
    <Version>1000</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Sets the x, y, and z offset of the working plane as well as the x-, y-, and z-plane rotational values.</Description>
    <ShortDesc>Sets the x, y, and z offset of the working plane as well as the x-, y-, and z-plane rotational values.</ShortDesc>
    <SeeAlso>GetWorkingPlane</SeeAlso>
    <ID>2488</ID>
    <IDName>procSetWorkingPlane</IDName>
    <InternalFunctionName>MP_SetWorkingPlane</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>x</Name>
        <Type>realMode</Type>
        <Desc>X-coordinate of the working plane</Desc>
      </Param>
      <Param>
        <Name>y</Name>
        <Type>realMode</Type>
        <Desc>Y-coordinate of the working plane</Desc>
      </Param>
      <Param>
        <Name>z</Name>
        <Type>realMode</Type>
        <Desc>Z-coordinate of the working plane</Desc>
      </Param>
      <Param>
        <Name>xRotation</Name>
        <Type>realMode</Type>
        <Desc>X-coordinate of the rotation</Desc>
      </Param>
      <Param>
        <Name>yRotation</Name>
        <Type>realMode</Type>
        <Desc>Y-coordinate of the rotation</Desc>
      </Param>
      <Param>
        <Name>zRotation</Name>
        <Type>realMode</Type>
        <Desc>Z-coordinate of the rotation</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SheetList</Name>
    <ChangedDate>2010:06:25T14:59:00</ChangedDate>
    <Version>1000</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Returns the name of the sheet specified by index.</Description>
    <ShortDesc>Returns the name of sheet specified by index.</ShortDesc>
    <Result>Returns a string containing the name of the sheet.</Result>
    <SeeAlso>SheetNum</SeeAlso>
    <ID>2489</ID>
    <IDName>funcSheetList</IDName>
    <InternalFunctionName>MP_SheetList</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>sheetIndex</Name>
        <Type>intMode</Type>
        <Desc>Index of the sheet</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SheetNum</Name>
    <Version>1000</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the number of sheets contained within the current document.</Description>
    <ShortDesc>Returns the number of sheets contained within the document.</ShortDesc>
    <Result>The number of sheets.</Result>
    <SeeAlso>SheetList</SeeAlso>
    <ID>2490</ID>
    <IDName>funcSheetNum</IDName>
    <InternalFunctionName>MP_SheetNum</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>DeleteAllItems</Name>
    <Version>1000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Deletes all rows from the specified list box.</Description>
    <ShortDesc>Deletes all rows from the specified list box.</ShortDesc>
    <ID>2491</ID>
    <IDName>procDeleteAllItems</IDName>
    <InternalFunctionName>MP_DeleteAllItems</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>ID of the dialog</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>ID of the list box</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClassArrow</Name>
    <Version>1000</Version>
    <OldVersion>1300</OldVersion>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the arrow style parameters for the indicated class.[[BR]]</Description>
    <ShortDesc>Returns the class arrow settings -  OBSOLETE procedure: Use GetClassBeginningMarker and/or GetClassEndMarker instead. </ShortDesc>
    <Comments>OBSOLETE for VW2008: Use GetClassBeginningMarker and/or GetClassEndMarker instead.[[BR]]Style indicates the index of the arrow style to be used.[[BR]][[BR]]Size is in page-inches. Legal values are 0.0 to 2.0.[[BR]][[BR]]Angle is in degrees.</Comments>
    <Example>PROCEDURE ShowNoneClassArrowValues;[[BR]]VAR[[BR]]	style :INTEGER;[[BR]]	size  :REAL;[[BR]]	ang   :INTEGER;[[BR]]BEGIN[[BR]]	GetClassArrow('None', style, size, ang);[[BR]]	Message(style, ' ', size, ' ', ang);[[BR]]END;[[BR]]RUN(ShowNoneClassArrowValues);</Example>
    <ID>2492</ID>
    <IDName>procGetClassArrow</IDName>
    <InternalFunctionName>MP_GetClassArrow</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The indicated class.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intVarMode</Type>
        <Desc>Returns arrow style.</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>rVarMode</Type>
        <Desc>Returns arrow size in inches measured in page space.</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intVarMode</Type>
        <Desc>Returns arrow angle (in degrees).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClassArrow</Name>
    <Version>1000</Version>
    <OldVersion>1300</OldVersion>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the arrow style parameters for the indicated class.[[BR]]</Description>
    <ShortDesc>Sets the class arrow settings - OBSOLETE procedure: Use SetClassBeginningMarker and/or SetClassEndMarker instead.</ShortDesc>
    <Comments>OBSOLETE for VW2008: Use SetClassBeginningMarker and/or SetClassEndMarker instead.[[BR]]Style indicates the index of the arrow style to be used.[[BR]][[BR]]Size is in page-inches. Legal values are 0.0 to 2.0.[[BR]][[BR]]Angle is in degrees.</Comments>
    <Example>SetClassArrow('None', 2, 0.25, 15);[[BR]]</Example>
    <ID>2493</ID>
    <IDName>procSetClassArrow</IDName>
    <InternalFunctionName>MP_SetClassArrow</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The indicated class.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
        <Desc>The arrow style.</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>realMode</Type>
        <Desc>The arrow size in inches measured in page space.</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intMode</Type>
        <Desc>The arrow angle (in degrees).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjArrow</Name>
    <Version>1000</Version>
    <OldVersion>1300</OldVersion>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] returns the arrow style parameters for the indicated object.[[BR]]</Description>
    <ShortDesc>Returns the object's arrow settings - OBSOLETE procedure: Use GetObjBeginningMarker and/or GetObjEndMarker instead.</ShortDesc>
    <Comments>OBSOLETE for VW2008: Use GetObjBeginningMarker and/or GetObjEndMarker instead.[[BR]]Style indicates the index of the arrow style to be used.[[BR]][[BR]]Size is in page-inches. Legal values are 0.0 to 2.0.[[BR]][[BR]]Angle is in degrees.</Comments>
    <Example>PROCEDURE ShowObjArrowValues;[[BR]]VAR[[BR]]	style :INTEGER;[[BR]]	size	 :REAL;[[BR]]	ang	 :INTEGER;[[BR]]	start :BOOLEAN;[[BR]]	endPt :BOOLEAN;[[BR]]	obj   :HANDLE;[[BR]]BEGIN[[BR]]	obj := FSActLayer;[[BR]]	GetObjArrow(obj, style, size, ang, start, endPt);[[BR]]	Message(style, ' ', size, ' ', ang, ' ', start, ' ', endPt);[[BR]]END;[[BR]]RUN(ShowObjArrowValues);</Example>
    <ID>2494</ID>
    <IDName>procGetObjArrow</IDName>
    <InternalFunctionName>MP_GetObjArrow</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>The indicated object.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intVarMode</Type>
        <Desc>Returns arrow style.</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>rVarMode</Type>
        <Desc>Returns arrow size in inches measured in page space.</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intVarMode</Type>
        <Desc>Returns arrow angle (in degrees).</Desc>
      </Param>
      <Param>
        <Name>start</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether the start point of the object has an arrow.</Desc>
      </Param>
      <Param>
        <Name>end</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether the endpoint of the object has an arrow.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjArrow</Name>
    <Version>1000</Version>
    <OldVersion>1300</OldVersion>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the arrow style parameters for the indicated object.[[BR]][[BR]][[note:MarkerStyleTableNew]][[BR]]</Description>
    <ShortDesc>Sets the object's arrow settings - OBSOLETE procedure: Use SetObjBeginningMarker and/or SetObjEndMarker instead.</ShortDesc>
    <Comments>OBSOLETE for VW2008: Use SetObjBeginningMarker and/or SetObjEndMarker instead.[[BR]]Style indicates the index of the arrow style to be used.[[BR]][[BR]]Size is in page-inches. Legal values are 0.0 to 2.0.[[BR]][[BR]]Angle is in degrees.</Comments>
    <Example>PROCEDURE SetObjArrowValues;[[BR]]BEGIN[[BR]]	SetObjArrow(FSActLayer, 1, .25, 15, TRUE, TRUE);[[BR]]END;[[BR]]RUN(SetObjArrowValues);</Example>
    <ID>2495</ID>
    <IDName>procSetObjArrow</IDName>
    <InternalFunctionName>MP_SetObjArrow</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>The indicated object.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
        <Desc>The arrow style.</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>realMode</Type>
        <Desc>The arrow size in inches measured in page space.</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intMode</Type>
        <Desc>The arrow angle (in degrees).</Desc>
      </Param>
      <Param>
        <Name>start</Name>
        <Type>boolMode</Type>
        <Desc>Whether the start point of the object has an arrow.</Desc>
      </Param>
      <Param>
        <Name>end</Name>
        <Type>boolMode</Type>
        <Desc>Whether the endpoint of the object has an arrow.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetActiveSerialNumber</Name>
    <Version>1000</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Gets the currently active serial number.</Description>
    <ShortDesc>Gets the currently active serial number.</ShortDesc>
    <ID>2496</ID>
    <IDName>funcGetActiveSerialNumber</IDName>
    <InternalFunctionName>MP_GetActiveSerialNumber</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetCurrentMode</Name>
    <Version>1000</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the current application protection mode.[[BR]][[BR]]Return values:[[BR]]0 - Mode Not Set[[BR]]1 - Full Mode[[BR]]2 - Demo Mode[[BR]]4 - Education Mode[[BR]]8 - Student Mode[[BR]]16 - Viewer Mode[[BR]]32 - Unlicensed Mode[[BR]]64 - Banner Mode[[BR]]128 - Watermark New Files Mode[[BR]]256 - Print Watermark Mode[[BR]]512 - Save Educational File Format Mode[[BR]]1024 - Open Educational File Format Mode[[BR]]2048 - Vector Script Export Mode[[BR]]4096 - Beta Serial Number Mode</Description>
    <ShortDesc>Returns the current application protection mode.</ShortDesc>
    <ID>2497</ID>
    <IDName>funcGetCurrentMode</IDName>
    <InternalFunctionName>MP_GetCurrentMode</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetEnabledModules</Name>
    <Version>1000</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Determines which combination of product modules are currently enabled.  [[BR]][[BR]]This function returns a LONGINT value which contains a bit for each possible product module.  If a module is enabled, then the corresponding bit will be set to 1.  If that module is disabled, then its bit will be 0.  The table below contains selectors that can be used to interpret the results of this function.  To determine if a module is enabled, do a bitwise "and" operation with the selector and the value returned by this function.  See the usage example below.[[BR]][[BR]][[note:ProductModules]][[BR]][[BR]]</Description>
    <ShortDesc>Returns a bitfield indicating which product modules are currently enabled.</ShortDesc>
    <Result>A LONGINT bitfield value with a bit for each possible product module.</Result>
    <SeeAlso>DisableModules</SeeAlso>
    <Example>PROCEDURE testModules;[[BR]][[BR]]{----------------------------------------------------------}[[BR]]FUNCTION bittest(value, mask :LONGINT) :BOOLEAN; [[BR]]VAR [[BR]]	bit :INTEGER; [[BR]]BEGIN [[BR]]	bittest := FALSE; [[BR]]	bit := 31;    { 2 ^ 31 is high order bit of a LONGINT argument. }[[BR]]	WHILE ((bit &gt; -1) &amp; (bittest = false)) DO BEGIN [[BR]]		IF value &gt;= (2 ^ bit) THEN BEGIN [[BR]]			value := value - (2 ^ bit); [[BR]]			IF (2 ^ bit) = mask THEN bittest := TRUE; [[BR]]		END; [[BR]]		bit := bit - 1; [[BR]]	END; [[BR]]END; [[BR]][[BR]][[BR]]{----------------------------------------------------------}[[BR]]FUNCTION IsModuleEnabled(whichModule :LONGINT) :BOOLEAN; [[BR]]VAR [[BR]]	enabledModules :LONGINT; [[BR]]BEGIN [[BR]]	enabledModules := GetEnabledModules; [[BR]]	IsModuleEnabled := bittest(enabledModules, whichModule)[[BR]]END; [[BR]][[BR]][[BR]]BEGIN[[BR]]	IF IsModuleEnabled(4) &amp; IsModuleEnabled(1)  THEN BEGIN[[BR]]		{ Landmark and Renderworks are both enabled. } [[BR]]		{ ... }[[BR]]	END;[[BR]]END;[[BR]]RUN(testModules);[[BR]][[BR]]</Example>
    <ID>2498</ID>
    <IDName>funcGetEnabledModules</IDName>
    <InternalFunctionName>MP_GetEnabledModules</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>DisableModules</Name>
    <Version>1000</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Disables modules.  The modules parameter is a bitfield indicating which modules to disable.</Description>
    <ShortDesc>Disables modules.  The modules parameter is a bitfield indicating which modules to disable.</ShortDesc>
    <ID>2499</ID>
    <IDName>procDisableModules</IDName>
    <InternalFunctionName>MP_DisableModules</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>modules</Name>
        <Type>longMode</Type>
        <Desc>This modules parameter is a LONGINT value which contains a bit for each possible product module.  If a module is enabled, then the corresponding bit is set to 1.  If that module is disabled, then its bit is 0.  The table below contains selectors that can be used to interpret the results of this function.  To determine if a module is enabled, do a bitwise "and" operation with the selector and the value returned by this function.  See the usage example below.[[BR]][[BR]][[note:ProductModules]]</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddHole</Name>
    <Version>1010</Version>
    <Category>Objects - 2D</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>[[name]] uses a [[p:2]] to create a hole inside [[p:1]].  Upon success, [[p:1]] is converted to polyline.   [[p:2]] is unchanged.</Description>
    <ShortDesc>AddHole uses holeTemplate to create a hole inside objectToGetHole.  Upon success, objectToGetHole is converted to polyline.   holeTemplate is unchanged.</ShortDesc>
    <Example>PROCEDURE AddHoleExample;[[BR]]VAR[[BR]]	h1, h2 :HANDLE;[[BR]]BEGIN[[BR]]	CallTool(-204);[[BR]]	h1 := FSActLayer;[[BR]]	CallTool(-204);[[BR]]	h2 := FSActLayer;[[BR]]	IF AddHole(h1, h2) THEN SetFPat(h1, 3);[[BR]]END;[[BR]]RUN(AddHoleExample);[[BR]]</Example>
    <ID>2500</ID>
    <IDName>funcAddHole</IDName>
    <InternalFunctionName>MP_AddHole</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectToGetHole</Name>
        <Type>handleInOutMode</Type>
        <Desc>A 2D object to be cut by [[p:2]].</Desc>
      </Param>
      <Param>
        <Name>holeTemplate</Name>
        <Type>handleMode</Type>
        <Desc>A 2D object to cut a hole out of [[p:1]].</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>MakePolygon</Name>
    <Version>1010</Version>
    <Category>Objects - 2D</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>MakePolygon creates a 2D Polygon using inSourceObject. Does not delete inSourceObject.</Description>
    <ShortDesc>MakePolygon creates a 2D Polygonalized copyof inSourceObject. The source object is duplicated and converted using the conversion resolution specified in the Vectorworks preferences is used.</ShortDesc>
    <Result>A polygonalized copy of inSourceObject</Result>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	h :HANDLE;[[BR]]BEGIN[[BR]]	CallTool(-204);[[BR]]	h := FSActLayer;[[BR]]	h := MakePolygon(h);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2501</ID>
    <IDName>funcMakePolygon</IDName>
    <InternalFunctionName>MP_MakePolygon</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>inSourceObject</Name>
        <Type>handleMode</Type>
        <Desc>inSource object should be a 2D object that can be polygonalized.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Products3D</Name>
    <Version>1010</Version>
    <Category>Objects - 3D</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns the products of inertia of a 3D object for the xy, yz, and zx planes passing through a point at the center of gravity of the object.</Description>
    <ShortDesc>Returns the products of inertia of a 3D object for the xy, yz, and zx planes passing through a point at the center of gravity of the object.</ShortDesc>
    <Result>Returns true if the function succeeds.</Result>
    <ID>2502</ID>
    <IDName>funcProducts3D</IDName>
    <InternalFunctionName>MP_Products3D</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object from which to calculate the Products</Desc>
      </Param>
      <Param>
        <Name>lxy</Name>
        <Type>rVarMode</Type>
        <Desc>Theh product of inertia with respect to the YZ and XZ planes passing through the center of mass of [[p:1]].</Desc>
      </Param>
      <Param>
        <Name>lyz</Name>
        <Type>rVarMode</Type>
        <Desc>Theh product of inertia with respect to the XZ and XY planes passing through the center of mass of [[p:1]].</Desc>
      </Param>
      <Param>
        <Name>lzx</Name>
        <Type>rVarMode</Type>
        <Desc>Theh product of inertia with respect to the XY and YZ planes passing through the center of mass of [[p:1]].</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Moments3D</Name>
    <Version>1010</Version>
    <Category>Objects - 3D</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns the moments of inertia of a 3D object about the x, y, and z axes of a point at the center of gravity of the object. </Description>
    <ShortDesc>Returns the moments of inertia of a 3D object about the x, y, and z axes of a point at the center of gravity of the object. </ShortDesc>
    <Result>Returns true if the function succeeded.</Result>
    <ID>2503</ID>
    <IDName>funcMoments3D</IDName>
    <InternalFunctionName>MP_Moments3D</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object for which to find the 3D moments.</Desc>
      </Param>
      <Param>
        <Name>lxx</Name>
        <Type>rVarMode</Type>
        <Desc>The moment of inertia relative to the x-axis passing through the center of mass of [[p:1]]</Desc>
      </Param>
      <Param>
        <Name>lyy</Name>
        <Type>rVarMode</Type>
        <Desc>The moment of inertia relative to the y-axis passing through the center of mass of [[p:1]]</Desc>
      </Param>
      <Param>
        <Name>lzz</Name>
        <Type>rVarMode</Type>
        <Desc>The moment of inertia relative to the z-axis passing through the center of mass of [[p:1]]</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Centroid3D</Name>
    <Version>1010</Version>
    <Category>Objects - 3D</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns the center of gravity of a 3D object. The function returns TRUE if the values were found.</Description>
    <ShortDesc>Returns the center of gravity of a 3D object. The function returns TRUE if the values were found.</ShortDesc>
    <Result>Returns true if the function succeeds.</Result>
    <ID>2504</ID>
    <IDName>funcCentroid3D</IDName>
    <InternalFunctionName>MP_Centroid3D</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The objectt from whci to calculate the center of gravity</Desc>
      </Param>
      <Param>
        <Name>xCG</Name>
        <Type>rVarMode</Type>
        <Desc>The x component of the center of gravity.</Desc>
      </Param>
      <Param>
        <Name>yCG</Name>
        <Type>rVarMode</Type>
        <Desc>The y component of the center of gravity.</Desc>
      </Param>
      <Param>
        <Name>zCG</Name>
        <Type>rVarMode</Type>
        <Desc>The z component of the center of gravity.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>MakePolyline</Name>
    <Version>1010</Version>
    <Category>Objects - 2D</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a polyline using inSourceObject. inSourceObject is unchanged.</Description>
    <ShortDesc>Creates a polyline using inSourceObject. inSourceObject is unchanged.</ShortDesc>
    <Result>A polyline representation of [[p:1]].</Result>
    <Comments>Creates a polyline from inSourceObject. inSourceObject is unchanged.</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	h,h2:HANDLE;[[BR]]BEGIN[[BR]]h:=FSActLayer;[[BR]]h2 := MakePolyline(h);[[BR]]DelObject(h);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2505</ID>
    <IDName>funcMakePolyline</IDName>
    <InternalFunctionName>MP_MakePolyline</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>inSourceObject</Name>
        <Type>handleMode</Type>
        <Desc>The 2D object from which to make a polyline.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateContourCurves</Name>
    <Version>1010</Version>
    <Category>Objects - 3D</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates contour curves for  a solid object given the delta, point on plane and plane normal.  If delta is 0, only 1 curve is created, where the specified plane intersects the selected solid.</Description>
    <ShortDesc>Creates contour curves for a solid object given delta, point on plane and plane normal.</ShortDesc>
    <Result>Returns a HANDLE to a group containing NURBS curves representing the contours.</Result>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	inSourceObject :HANDLE; [[BR]]	delta :REAL; [[BR]]	ptOnPlaneX, ptOnPlaneY, ptOnPlaneZ :REAL; [[BR]]	normalX, normalY, normalZ :REAL;[[BR]]	h :HANDLE;[[BR]]BEGIN[[BR]]	inSourceObject := FSActLayer;[[BR]]	delta := 0; {number of slices}[[BR]]	ptOnPlaneX := 0;[[BR]]	ptOnPlaneY := 0;[[BR]]	ptOnPlaneZ := 610;[[BR]]	normalX := 0;[[BR]]	normalY := 0;[[BR]]	normalZ := 1;[[BR]]	h := CreateContourCurves(inSourceObject, delta, ptOnPlaneX, ptOnPlaneY, ptOnPlaneZ, normalX, normalY, normalZ);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2506</ID>
    <IDName>funcCreateContourCurves</IDName>
    <InternalFunctionName>MP_CreateContourCurves</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>inSourceObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a solid object</Desc>
      </Param>
      <Param>
        <Name>delta</Name>
        <Type>realMode</Type>
        <Desc>Distance between contours</Desc>
      </Param>
      <Param>
        <Name>ptOnPlane</Name>
        <Type>d3PtMode</Type>
        <Desc>Point on plane used to define contours</Desc>
      </Param>
      <Param>
        <Name>normal</Name>
        <Type>d3PtMode</Type>
        <Desc>Plane's normal vector</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateCustomObjectN</Name>
    <Version>1000</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a custom object instance at specified location and angle of rotation.  The calling function can also set whether the pref dialog should appear.</Description>
    <ShortDesc>Creates a custom object instance at specified location and angle of rotation.  The calling function can also set whether the pref dialog should appear.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   h :HANDLE;[[BR]]BEGIN[[BR]]   h := CreateCustomObjectN('Door', 0, 0, 0, False);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2507</ID>
    <IDName>funcCreateCustomObjectN</IDName>
    <InternalFunctionName>MP_CreateCustomObjectN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectName</Name>
        <Type>stringMode</Type>
        <Desc>Name of object.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>Insertion point of object instance.</Desc>
      </Param>
      <Param>
        <Name>rotationAngle</Name>
        <Type>angleMode</Type>
        <Desc>Rotation angle (in degrees) of object instance. </Desc>
      </Param>
      <Param>
        <Name>showPref</Name>
        <Type>boolMode</Type>
        <Desc>Show the Object Properties dialog.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CombineIntoSurface</Name>
    <Version>1010</Version>
    <Category>Objects - 2D</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a polyline from the bounded selection surrounding the inIncludedPoint.</Description>
    <ShortDesc>Creates a polyline from the bounded selection surrounding the inIncludedPoint.</ShortDesc>
    <ID>2508</ID>
    <IDName>funcCombineIntoSurface</IDName>
    <InternalFunctionName>MP_CombineIntoSurface</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>pt</Name>
        <Type>globPtMode</Type>
        <Desc>A point within the bounded selection.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateStaticHatch</Name>
    <Version>1010</Version>
    <Category>Hatches / Vector Fills</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a static hatch using inHatchName inside the bounded selection surrounding the point. rotationAngle determines the rotation of the result. </Description>
    <ShortDesc>Creates a static hatch inside the bounded selection surrounding the point. rotationAngle determines the rotation of the result. Operates just as the menu item Hatch...</ShortDesc>
    <Result>A group of lines in the pattern as specified.</Result>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	h:HANDLE;[[BR]]	x,y:REAL;[[BR]]BEGIN[[BR]]GetPt(x,y);[[BR]]h := CreateStaticHatch('Default Hatch', x, y, 0);[[BR]]DSelectAll;[[BR]]SetSelect(h);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2509</ID>
    <IDName>funcCreateStaticHatch</IDName>
    <InternalFunctionName>MP_CreateStaticHatch</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>inHatchName</Name>
        <Type>stringMode</Type>
        <Desc>The name of the hatch definition to use for the hatch.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>A point inside the bounds defined by the current selection</Desc>
      </Param>
      <Param>
        <Name>rotationAngle</Name>
        <Type>angleMode</Type>
        <Desc>An angle that specifies an offset angle.  Zero degress is due East.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPointAndParameterOnNurbsCurveAtGivenLength</Name>
    <Version>1010</Version>
    <Category>Objects - NURBS</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets point, parametric parameter, and curve index of specified location along a NURBS Curve.</Description>
    <ShortDesc>Gets point, parametric parameter, and curve index of specified location along a NURBS Curve.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	inNurbCurve :HANDLE;[[BR]]	inPercentOfLength :REAL;[[BR]]	pX, pY, pZ :REAL;[[BR]]	outParam :REAL;[[BR]]	outIndex :LONGINT;[[BR]]BEGIN[[BR]]	CallTool(-325);[[BR]]	inNurbCurve := FSActLayer;[[BR]]	inPercentOfLength := .5;[[BR]]	IF GetPointAndParameter(inNurbCurve, inPercentOfLength, pX, pY, pZ, outParam, outIndex) THEN BEGIN[[BR]]		Locus3D(pX, pY, pZ);[[BR]]	END;[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2510</ID>
    <IDName>funcGetPointAndParameterOnNurbsCurveAtGivenLength</IDName>
    <InternalFunctionName>MP_GetPointAndParameterOnNurbsCurveAtGivenLength</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>inNurbCurve</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the NURBS curve.</Desc>
      </Param>
      <Param>
        <Name>inPercentOfLength</Name>
        <Type>realMode</Type>
        <Desc>Specify location on curve as percent of total length.  (0 - 1)</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Point of specified location.</Desc>
      </Param>
      <Param>
        <Name>outParam</Name>
        <Type>rVarMode</Type>
        <Desc>Parametric parameter of location.</Desc>
      </Param>
      <Param>
        <Name>outIndex</Name>
        <Type>lngVarMode</Type>
        <Desc>0-based index of piece for piecewise NURBS curve.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateShaderRecord</Name>
    <Version>1010</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a shader record of the desired family (1 = color, 2 = reflectivity, 3 = transparency, 4 = bump) and prototype (constants depend on family value).[[BR]][[BR]][[note:ShaderFamilyColor]][[BR]][[note:ShaderFamilyReflective]][[BR]][[note:ShaderFamilyTransparency]][[BR]][[note:ShaderFamilyBump]]</Description>
    <ShortDesc>Creates a shader record of the desired family and prototype. ttaches the shader record to the parent texture, will delete any existing records with the same family.</ShortDesc>
    <ID>2511</ID>
    <IDName>funcCreateShaderRecord</IDName>
    <InternalFunctionName>MP_CreateShaderRecord</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>texture</Name>
        <Type>handleMode</Type>
        <Desc>The shader record will be attached to this texture.</Desc>
      </Param>
      <Param>
        <Name>family</Name>
        <Type>longMode</Type>
        <Desc>The kind of shader to create (1 = color, 2 = reflectivity, 3 = transparency, 4 = bump)</Desc>
      </Param>
      <Param>
        <Name>prototype</Name>
        <Type>longMode</Type>
        <Desc>The specific shader within the family (constants depend on the family value).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetShaderRecord</Name>
    <Version>1010</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns the shader record of the specified family (1 = color, 2 = reflectivity, 3 = transparency, 4 = bump), if one is attached to the texture.</Description>
    <ShortDesc>Returns the shader record of the specified family (1 = color, 2 = reflectivity, 3 = transparency, 4 = bump), if one is attached to the texture.</ShortDesc>
    <ID>2512</ID>
    <IDName>funcGetShaderRecord</IDName>
    <InternalFunctionName>MP_GetShaderRecord</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>texture</Name>
        <Type>handleMode</Type>
        <Desc>Get the shader record attached to this texture.</Desc>
      </Param>
      <Param>
        <Name>family</Name>
        <Type>longMode</Type>
        <Desc>The kind of shader to retrieve (1 = color, 2 = reflectivity, 3 = transparency, 4 = bump).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetShaderRecord</Name>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the texture's shader record to this record.  Will delete any records of the same family if they are already attached to the texture.  </Description>
    <ShortDesc>Sets the texture's shader record to this record.  Will delete any records of the same family if they are already attached to the texture. </ShortDesc>
    <Comments>[[BR]]DELETE THIS RECORD!  -DLD 12/3/2002</Comments>
    <ID>2513</ID>
    <IDName>funcSetShaderRecord</IDName>
    <InternalFunctionName>MP_SetShaderRecord</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>texture</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>shaderRecord</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EditShaderRecord</Name>
    <Version>1010</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Brings up the edit shader dialog for this shader.  Returns true if the user pressed the OK button to dismiss the dialog.</Description>
    <ShortDesc>Brings up the edit shader dialog for this shader.  Returns true if the user pressed the OK button to dismiss the dialog.</ShortDesc>
    <ID>2514</ID>
    <IDName>funcEditShaderRecord</IDName>
    <InternalFunctionName>MP_EditShaderRecord</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>shaderRecord</Name>
        <Type>handleMode</Type>
        <Desc>The shader record to edit.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateTextureBitmapN</Name>
    <Version>1010</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a texture bitmap object for the chosen shader record.  Brings up dialog to choose the image file.  Returns nil if user clicked Cancel or if the shader is not an image-based shader.</Description>
    <ShortDesc>Creates a texture bitmap object for the chosen shader record.  Brings up dialog to choose the image file.  Returns nil if user clicked Cancel or if the shader is not an image-based shader.</ShortDesc>
    <ID>2515</ID>
    <IDName>funcCreateTextureBitmapN</IDName>
    <InternalFunctionName>MP_CreateTextureBitmapN</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>shaderRecord</Name>
        <Type>handleMode</Type>
        <Desc>Handle to shader record.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextureSize</Name>
    <Version>1010</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the texture size in real-world inches.</Description>
    <ShortDesc>Returns the texture size in real-world inches.</ShortDesc>
    <ID>2516</ID>
    <IDName>funcGetTextureSize</IDName>
    <InternalFunctionName>MP_GetTextureSize</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>texture</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextureSize</Name>
    <Version>1010</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Sets the texture size in real-world inches.</Description>
    <ShortDesc>Sets the texture size in real-world inches.</ShortDesc>
    <ID>2517</ID>
    <IDName>procSetTextureSize</IDName>
    <InternalFunctionName>MP_SetTextureSize</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>texture</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>newSize</Name>
        <Type>realMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateListBoxN</Name>
    <Version>1050</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a new list box control in a dialog layout. With isMultipleSelect true, the list supports multiple selection.</Description>
    <ShortDesc>Creates a new list box control in a dialog layout. With isMultipleSelect true, the list supports multiple selection.</ShortDesc>
    <SeeAlso>GetDlgCtrlWidthStdCh</SeeAlso>
    <Example>{ draws a muliple selection list box 25 characters wide and 7 rows high }[[BR]]CreateListBoxN(2,10,25,7, true);[[BR]]</Example>
    <ID>2518</ID>
    <IDName>procCreateListBoxN</IDName>
    <InternalFunctionName>MP_CreateListBoxN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index that will identify the control item.</Desc>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>longMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
      <Param>
        <Name>heightInLines</Name>
        <Type>longMode</Type>
        <Desc>The height of the control in characters.</Desc>
      </Param>
      <Param>
        <Name>isMultipleSelect</Name>
        <Type>boolMode</Type>
        <Desc>Does the list support multiple selection</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDistanceAlongNurbsCurve</Name>
    <Version>1000</Version>
    <Category>Objects - 3D</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets distance between a point at parameter1 on the curve piece index1 and another point at parameter2 on the curve piece with index2</Description>
    <ShortDesc>Gets distance between a point at parameter1 on the curve piece index1 and another point at parameter2 on the curve piece with index2</ShortDesc>
    <Comments>if there is only one piece in the inNurbsCurve,  both  inParameter1index and inParameter2index should be 0. </Comments>
    <ID>2519</ID>
    <IDName>funcGetDistanceAlongNurbsCurve</IDName>
    <InternalFunctionName>MP_GetDistanceAlongNurbsCurve</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>inNurbsCurve</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>inParamter1</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>inParameter1index</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>inParamter2</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>inParameter2index</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>outDistance</Name>
        <Type>distanceVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PrintUsingPrintDialog</Name>
    <Version>1050</Version>
    <Category>Command</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Available in Industry Series products only. Prints the active document.  The Print Dialog will be displayed.  The PageSetup dialog will be displayed, before the print dialog, if the existing print settings are not valid for the current printer.[[BR]][[BR]][[note:PrintReturnValues]]</Description>
    <ShortDesc>Available in Industry Series products only. Prints the active document.  The Print Dialog will be displayed.  The PageSetup dialog will be displayed, before the print dialog, if needed.</ShortDesc>
    <ID>2521</ID>
    <IDName>funcPrintUsingPrintDialog</IDName>
    <InternalFunctionName>MP_PrintUsingPrintDialog</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>PrintWithoutUsingPrintDialog</Name>
    <Version>1050</Version>
    <Category>Command</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Available in Industry Series products only. Prints the active document. Neither the Print Dialog nor the PageSetup dialog will be displayed. This function can fail with certain printers if PrintUsingPrintDialog had not previously been called for the active document.[[BR]][[BR]][[note:PrintReturnValues]][[BR]]</Description>
    <ShortDesc>Available in Industry Series products only. Prints the active document.  Neither the Print Dialog nor the PageSetup dialog will be displayed.</ShortDesc>
    <ID>2522</ID>
    <IDName>funcPrintWithoutUsingPrintDialog</IDName>
    <InternalFunctionName>MP_PrintWithoutUsingPrintDialog</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>CreateStaticHatchFromObject</Name>
    <Version>1050</Version>
    <Category>Hatches / Vector Fills</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a static hatch using inHatchName inside the bounds of the inObj.  The pX , pY and rotationAngle arguments determine the hatch origin and rotation used to generate the result.</Description>
    <ShortDesc>Creates a static hatch using inHatchName inside the bounds of inObj. </ShortDesc>
    <Result>A group of lines in a hatch pattern as specified.</Result>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	h:HANDLE;[[BR]]	x,y:REAL;[[BR]]BEGIN[[BR]]GetPt(x,y);[[BR]]h := CreateStaticHatchFromObject(FSActLayer,'Default Hatch', x, y, 0);[[BR]]DSelectAll;[[BR]]SetSelect(h);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2523</ID>
    <IDName>funcCreateStaticHatchFromObject</IDName>
    <InternalFunctionName>MP_CreateStaticHatchFromObject</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>inObj</Name>
        <Type>handleMode</Type>
        <Desc>An object used as the boundary for the output.</Desc>
      </Param>
      <Param>
        <Name>inHatchName</Name>
        <Type>stringMode</Type>
        <Desc>The name of the hatch definition</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>A point specifying the origin of the output</Desc>
      </Param>
      <Param>
        <Name>rotationAngle</Name>
        <Type>angleMode</Type>
        <Desc>An angle specifying an offset angle to use to create the output</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateVP</Name>
    <Version>1100</Version>
    <Category>Objects - Groups</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a viewport object. The specified parent handle may only be a layer or a group contained within a layer, nested or otherwise.</Description>
    <ShortDesc>Creates a viewport object. The specified parent handle may only be a layer or a group contained within a layer, nested or otherwise.</ShortDesc>
    <ID>2524</ID>
    <IDName>funcCreateVP</IDName>
    <InternalFunctionName>MP_CreateVP</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>parentHandle</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPLayerVisibility</Name>
    <Version>1100</Version>
    <Category>Objects - Groups</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the visibility for the specified layer in the specified viewport.</Description>
    <ShortDesc>Gets the visibility for the specified layer in the specified viewport.</ShortDesc>
    <ID>2525</ID>
    <IDName>funcGetVPLayerVisibility</IDName>
    <InternalFunctionName>MP_GetVPLayerVisibility</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>layerHandle</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>visibilityType</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPLayerVisibility</Name>
    <Version>1100</Version>
    <Category>Objects - Groups</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the visibility for the specified layer in the specified viewport.</Description>
    <ShortDesc>Sets the visibility for the specified layer in the specified viewport.</ShortDesc>
    <ID>2526</ID>
    <IDName>funcSetVPLayerVisibility</IDName>
    <InternalFunctionName>MP_SetVPLayerVisibility</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>layerHandle</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>visibilityType</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPClassVisibility</Name>
    <Version>1100</Version>
    <Category>Objects - Groups</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the visibility for the specified class in the specified viewport.</Description>
    <ShortDesc>Gets the visibility for the specified class in the specified viewport.</ShortDesc>
    <ID>2527</ID>
    <IDName>funcGetVPClassVisibility</IDName>
    <InternalFunctionName>MP_GetVPClassVisibility</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>visibilityType</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPClassVisibility</Name>
    <Version>1100</Version>
    <Category>Objects - Groups</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the visibility for the specified class in the specified viewport.</Description>
    <ShortDesc>Sets the visibility for the specified class in the specified viewport.</ShortDesc>
    <ID>2528</ID>
    <IDName>funcSetVPClassVisibility</IDName>
    <InternalFunctionName>MP_SetVPClassVisibility</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>visibilityType</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPGroup</Name>
    <Version>1100</Version>
    <Category>Objects - Groups</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Gets the specified viewport group.[[BR]][[BR]]groupType values:[[BR]]Crop = 1[[BR]]Annotation = 2[[BR]]Cache = 3[[BR]]</Description>
    <ShortDesc>Gets the specified viewport group.</ShortDesc>
    <ID>2529</ID>
    <IDName>funcGetVPGroup</IDName>
    <InternalFunctionName>MP_GetVPGroup</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>groupType</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddVPAnnotationObject</Name>
    <Version>1100</Version>
    <Category>Objects - Groups</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Adds the specified annotation object to the specified viewport.</Description>
    <ShortDesc>Adds the specified annotation object to the specified viewport.</ShortDesc>
    <ID>2530</ID>
    <IDName>funcAddVPAnnotationObject</IDName>
    <InternalFunctionName>MP_AddVPAnnotationObject</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>annotationHandle</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPCropObject</Name>
    <Version>1100</Version>
    <Category>Objects - Groups</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Gets the specified viewport's crop object, if any.</Description>
    <ShortDesc>Gets the specified viewport's crop object, if any.</ShortDesc>
    <ID>2531</ID>
    <IDName>funcGetVPCropObject</IDName>
    <InternalFunctionName>MP_GetVPCropObject</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPCropObject</Name>
    <Version>1100</Version>
    <Category>Objects - Groups</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the specified crop object in the specified viewport. If a crop object already exists, it will be replaced by the new object, so long as the new object is a valid crop.</Description>
    <ShortDesc>Sets the specified crop object in the specified viewport. If a crop object already exists, it will be replaced by the new object, so long as the new object is a valid crop.</ShortDesc>
    <ID>2532</ID>
    <IDName>funcSetVPCropObject</IDName>
    <InternalFunctionName>MP_SetVPCropObject</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>cropHandle</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>VPHasCropObject</Name>
    <Version>1100</Version>
    <Category>Objects - Groups</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Indicates if specified viewport has a crop object.</Description>
    <ShortDesc>Indicates if specified viewport has a crop object.</ShortDesc>
    <ID>2533</ID>
    <IDName>funcVPHasCropObject</IDName>
    <InternalFunctionName>MP_VPHasCropObject</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to viewport.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateLayer</Name>
    <Version>1050</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a layer of the specified type.[[BR]][[BR]]layerType values:[[BR]]Design = 1[[BR]]Presentation	= 2[[BR]]</Description>
    <ShortDesc>Creates a layer of the specified type.</ShortDesc>
    <ID>2534</ID>
    <IDName>funcCreateLayer</IDName>
    <InternalFunctionName>MP_CreateLayer</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>layerName</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>layerType</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSheetLayerUserOrigin</Name>
    <Version>1050</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the user origin of the specified sheet layer.</Description>
    <ShortDesc>Gets the user origin of the specified sheet layer.</ShortDesc>
    <ID>2535</ID>
    <IDName>funcGetSheetLayerUserOrigin</IDName>
    <InternalFunctionName>MP_GetSheetLayerUserOrigin</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>layerHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle of the layer.</Desc>
      </Param>
      <Param>
        <Name>xOrigin</Name>
        <Type>rVarMode</Type>
        <Desc>X component of the sheet layer user origin.</Desc>
      </Param>
      <Param>
        <Name>yOrigin</Name>
        <Type>rVarMode</Type>
        <Desc>Y component of the sheet layer user origin.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetSheetLayerUserOrigin</Name>
    <Version>1050</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the user origin of the specified sheet layer.</Description>
    <ShortDesc>Sets the user origin of the specified sheet layer.</ShortDesc>
    <ID>2536</ID>
    <IDName>funcSetSheetLayerUserOrigin</IDName>
    <InternalFunctionName>MP_SetSheetLayerUserOrigin</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>layerHandle</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>xOrigin</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>yOrigin</Name>
        <Type>realMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetViewMatrix</Name>
    <Version>1050</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets view matrix for layer or viewport object.</Description>
    <ShortDesc>Gets view matrix for layer or viewport object.</ShortDesc>
    <ID>2537</ID>
    <IDName>funcGetViewMatrix</IDName>
    <InternalFunctionName>MP_GetViewMatrix</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>offset</Name>
        <Type>d3PtVarMode</Type>
      </Param>
      <Param>
        <Name>rotationXAng</Name>
        <Type>rVarMode</Type>
      </Param>
      <Param>
        <Name>rotationYAng</Name>
        <Type>rVarMode</Type>
      </Param>
      <Param>
        <Name>rotationZAng</Name>
        <Type>rVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetViewMatrix</Name>
    <Version>1050</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets view matrix for layer or viewport object.</Description>
    <ShortDesc>Sets view matrix for layer or viewport object.</ShortDesc>
    <ID>2538</ID>
    <IDName>funcSetViewMatrix</IDName>
    <InternalFunctionName>MP_SetViewMatrix</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>offset</Name>
        <Type>d3PtMode</Type>
      </Param>
      <Param>
        <Name>rotationXAng</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>rotationYAng</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>rotationZAng</Name>
        <Type>realMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateCheckBoxGroupBox</Name>
    <Version>1050</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a checkbox group box.  The checkbox will have name as its label.  If hasFrame is true, the group will have a box drawn around it like a regular group box.</Description>
    <ShortDesc>Creates a checkbox group box.  The checkbox will have name as its label.  If hasFrame is true, the group will have a box drawn around it like a regular group box.</ShortDesc>
    <ID>2539</ID>
    <IDName>procCreateCheckBoxGroupBox</IDName>
    <InternalFunctionName>MP_CreateCheckBoxGroupBox</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>ID of the dialog</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>ID of the checkbox group box</Desc>
      </Param>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Title that appears in the checkbox group box</Desc>
      </Param>
      <Param>
        <Name>hasFrame</Name>
        <Type>boolMode</Type>
        <Desc>True if the group box has a frame around it; false otherwise</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateRadioButtonGroupBox</Name>
    <Version>1050</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a radio button group box.  The radio button will have name as its label.  If hasFrame is true, the group will have a box drawn around it like a regular group box.</Description>
    <ShortDesc>Creates a radio button group box.  The radio button will have name as its label.  If hasFrame is true, group will have a box drawn around it like a regular group box.</ShortDesc>
    <ID>2540</ID>
    <IDName>procCreateRadioButtonGroupBox</IDName>
    <InternalFunctionName>MP_CreateRadioButtonGroupBox</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>ID of the dialog</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>ID of the radio button group box</Desc>
      </Param>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Title that appears in the radio button group box</Desc>
      </Param>
      <Param>
        <Name>hasFrame</Name>
        <Type>boolMode</Type>
        <Desc>True whether the group has a frame; false otherwise</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateTabControl</Name>
    <Version>1050</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a tab control within a dialog.  The tab control manages the display of multiple panes of information and provides tab buttons that allow the user to swtich between panes. [[BR]][[BR]]To create a tab control in a dialog, first define a group for each tab pane.  Add other controls to the groups and arrange them.  Then call [[name]] with an id.  Finally, call CreateTabPane for each pane providing the id of the group that defines that pane.  [[BR]][[BR]]</Description>
    <ShortDesc>Creates a tab control.</ShortDesc>
    <SeeAlso>CreateTabPane, CreateGroupBox, RunLayoutDialog</SeeAlso>
    <Example>Procedure TabControls;[[BR]][[BR]]const[[BR]]	kTabControlID = 10;[[BR]]	kTabPaneID1 = 20;[[BR]]	kTabPaneID2 = 30;[[BR]]	kTabPaneID3	= 40;[[BR]]	[[BR]]var[[BR]]	dlogID, result  : LONGINT;[[BR]]	[[BR]]Procedure DialogProc(VAR item: LONGINT; data: LONGINT);[[BR]]begin[[BR]]	case item of[[BR]]		SetupDialogC:[[BR]]			begin[[BR]]				result := 0;[[BR]]			end;[[BR]][[BR]]		end;[[BR]]end;[[BR]][[BR]]begin[[BR]]	dlogID := CreateLayout('Sample Tab Dialog', false, 'OK', 'Cancel');[[BR]][[BR]]	{ Tab Group 1 }[[BR]]	CreateGroupBox(dlogID, kTabPaneID1, 'Tab 1', FALSE);[[BR]]	[[BR]]	CreatePushButton(dlogID, 21, 'Button 1');[[BR]]	SetFirstGroupItem(dlogID, kTabPaneID1, 21);	[[BR]]	CreatePushButton(dlogID, 22, 'Button 2');[[BR]]	SetBelowItem(dlogID, 21, 22, 0, 0);[[BR]]	CreatePushButton(dlogID, 23, 'Button 3');[[BR]]	SetBelowItem(dlogID, 22, 23, 0, 0);[[BR]]	[[BR]]	[[BR]]	{ Tab Group 2 }[[BR]]	CreateGroupBox(dlogID, kTabPaneID2, 'Tab 2', FALSE);[[BR]]	[[BR]]	CreatePushButton(dlogID, 31, 'Button 4');[[BR]]	SetFirstGroupItem(dlogID, kTabPaneID2, 31);[[BR]]	CreatePushButton(dlogID, 32, 'Button 5');[[BR]]	SetRightItem(dlogID, 31, 32, 0, 0);[[BR]]	CreatePushButton(dlogID, 33, 'Button 6');[[BR]]	SetRightItem(dlogID, 32, 33, 0, 0);[[BR]]	[[BR]]	[[BR]]	{ Tab Group 3 }[[BR]]	CreateGroupBox(dlogID, kTabPaneID3, 'Tab 3', FALSE);[[BR]]	[[BR]]	CreatePushButton(dlogID, 41, 'Button 7');[[BR]]	SetFirstGroupItem(dlogID, kTabPaneID3, 41);[[BR]]	CreatePushButton(dlogID, 42, 'Button 8');[[BR]]	SetRightItem(dlogID, 41, 42, 0, 0);[[BR]]	CreatePushButton(dlogID, 43, 'Button 9');[[BR]]	SetBelowItem(dlogID, 42, 43, 0, 0);[[BR]]	[[BR]][[BR]]	{ Create tab control 1 }[[BR]]	[[name]](dlogID, kTabControlID);[[BR]]	SetFirstLayoutItem(dlogID, kTabControlID);[[BR]]	[[BR]]	{ Add the tab panes to tab control }[[BR]]	CreateTabPane(dlogID, kTabControlID, kTabPaneID1);[[BR]]	CreateTabPane(dlogID, kTabControlID, kTabPaneID2);[[BR]]	CreateTabPane(dlogID, kTabControlID, kTabPaneID3);[[BR]]	[[BR]]	result := RunLayoutDialog(dlogID, DialogProc);[[BR]]end;[[BR]]Run(TabControls);</Example>
    <ID>2541</ID>
    <IDName>procCreateTabControl</IDName>
    <InternalFunctionName>MP_CreateTabControl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The id of the dialog that contains this Tab control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The id of the Tab control.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateTabPane</Name>
    <Version>1050</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a tab pane within a tab control on a dialog.[[BR]][[BR]]To define a tab pane, create a group control and add items to the group.  Arrange the items within the group.  Then call [[name]] to  add a new tab pane to a tab control.  Specify the group that defines the layout of that tab pane.  </Description>
    <ShortDesc>Creates a tab pane within a tab control.  groupID is the ID of the group that contains the controls which will appear on this tab pane.</ShortDesc>
    <SeeAlso>CreateTabControl, CreateGroupBox, RunLayoutDialog</SeeAlso>
    <Example>	{ Create tab control }[[BR]]	CreateTabControl(dlogID, kTabControlID);[[BR]]	[[BR]]	{ Add the tab panes to tab control }[[BR]]	CreateTabPane(dlogID, kTabControlID, kTabPaneID1);[[BR]]	CreateTabPane(dlogID, kTabControlID, kTabPaneID2);[[BR]]	CreateTabPane(dlogID, kTabControlID, kTabPaneID3);[[BR]]</Example>
    <ID>2542</ID>
    <IDName>procCreateTabPane</IDName>
    <InternalFunctionName>MP_CreateTabPane</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The id of the dialog.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The id of the Tab Control to which this tab pane will be added.</Desc>
      </Param>
      <Param>
        <Name>groupID</Name>
        <Type>longMode</Type>
        <Desc>The id of the group that defines the tab pane. </Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>UpdateVP</Name>
    <Version>1100</Version>
    <Category>Objects - Groups</Category>
    <Type>Procedure</Type>
    <Description>Updates the specified viewport: a dirty viewport, whose render type is other than wireframe, will be re-rendered.</Description>
    <ShortDesc>Updates the specified viewport: a dirty viewport, whose render type is other than wireframe, will be re-rendered.</ShortDesc>
    <ID>2543</ID>
    <IDName>procUpdateVP</IDName>
    <InternalFunctionName>MP_UpdateVP</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a viewport</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetMarkerPopupSelectedItem</Name>
    <Version>1050</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>This is a deprecated function.  Use GetMarkerChoice instead.[[BR]][[BR]]Returns the 1-based index number of the selected item in the specified marker popup menu item.  If return value is 8, a custom marker is selected.</Description>
    <ShortDesc>This is a deprecated function.  Use GetMarkerChoice instead.</ShortDesc>
    <ID>2544</ID>
    <IDName>funcGetMarkerPopupSelectedItem</IDName>
    <InternalFunctionName>MP_GetMarkerPopupSelectedItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>ID of the dialog</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>ID of the marker popup item</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intVarMode</Type>
        <Desc>On return, indicates the style of the selected marker.  Valid styles:[[BR]]0 - kFilledArrowMarker[[BR]]1 - kEmptyArrowMarker[[BR]]2 - kOpenArrowMarker[[BR]]3 - kFilledBallMarker[[BR]]4 - kEmptyBallMarker[[BR]]5 - kSlashMarker[[BR]]6 - kCrossMarker[[BR]][[BR]]</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intVarMode</Type>
        <Desc>On return, indicates the angle of the selected marker, for arrow markers</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>intVarMode</Type>
        <Desc>On return, indicates the size of the selected marker</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateMarkerPopup</Name>
    <Version>1050</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a popup control that displays the various marker styles available in Vectorworks and allows the user to choose one.  Markers are the adornments at the endpoints of line objects and consist of styles like arrow, circle, cross, etc. </Description>
    <ShortDesc>Creates a marker popup control.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	dialog1	:INTEGER;[[BR]]	result	:INTEGER;[[BR]][[BR]]PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]	dialog1 := CreateLayout('Untitled Dialog', FALSE, 'OK', 'Cancel');[[BR]]	CreateMarkerPopup(dialog1, 4);[[BR]]	SetFirstLayoutItem(dialog1,  4);[[BR]]	result := RunLayoutDialog(dialog1, Dialog_Handler);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2545</ID>
    <IDName>procCreateMarkerPopup</IDName>
    <InternalFunctionName>MP_CreateMarkerPopup</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Id of the dialog</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Id of the popup control</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateLB</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>Creates a layout manager list browser control.</Description>
    <ShortDesc>Creates a layout manager list browser control.</ShortDesc>
    <SeeAlso>GetDlgCtrlWidthStdCh</SeeAlso>
    <Comments>Parser.Execute.cpp</Comments>
    <ID>2546</ID>
    <IDName>procCreateLB</IDName>
    <InternalFunctionName>MP_CreateLB</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>intMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
      <Param>
        <Name>heightInLines</Name>
        <Type>intMode</Type>
        <Desc>the height of the control in characters</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertLBColumn</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Inserts a column into the specified list browser control. Returns index of created column.</Description>
    <ShortDesc>Inserts a column into the specified list browser control.</ShortDesc>
    <ID>2547</ID>
    <IDName>funcInsertLBColumn</IDName>
    <InternalFunctionName>MP_InsertLBColumn</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>index at which the column is to be inserted</Desc>
      </Param>
      <Param>
        <Name>headerString</Name>
        <Type>stringMode</Type>
        <Desc>text to set as column header</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>intMode</Type>
        <Desc>the width of the column in pixels</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DeleteLBColumn</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deletes a column from the specified list browser control.</Description>
    <ShortDesc>Deletes a column from the specified list browser control.</ShortDesc>
    <ID>2548</ID>
    <IDName>funcDeleteLBColumn</IDName>
    <InternalFunctionName>MP_DeleteLBColumn</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>index of the column to be deleted</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBColumnWidth</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the width of the specified range of columns of the specified list browser control.</Description>
    <ShortDesc>Sets the width of the specified range of columns of the specified list browser control.</ShortDesc>
    <ID>2549</ID>
    <IDName>funcSetLBColumnWidth</IDName>
    <InternalFunctionName>MP_SetLBColumnWidth</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>fromColumn</Name>
        <Type>intMode</Type>
        <Desc>first column to be changed</Desc>
      </Param>
      <Param>
        <Name>toColumn</Name>
        <Type>intMode</Type>
        <Desc>last column to be changed</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>intMode</Type>
        <Desc>the width of the column in pixels</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBColumnWidth</Name>
    <Version>1400</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the width of the specified column in the specified list browser control.</Description>
    <ShortDesc>Gets the width of the specified column in the specified list browser control.</ShortDesc>
    <ID>2550</ID>
    <IDName>funcGetLBColumnWidth</IDName>
    <InternalFunctionName>MP_GetLBColumnWidth</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the column from which to get the width</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>intVarMode</Type>
        <Desc>width of the column</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumLBColumns</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the number of columns in the specified list browser control.</Description>
    <ShortDesc>Gets the number of columns in the specified list browser control.</ShortDesc>
    <ID>2551</ID>
    <IDName>funcGetNumLBColumns</IDName>
    <InternalFunctionName>MP_GetNumLBColumns</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertLBItem</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Insert an item into the specified list browser control. Returns the index of the created item.</Description>
    <ShortDesc>Insert an item into the specified list browser control.</ShortDesc>
    <ID>2552</ID>
    <IDName>funcInsertLBItem</IDName>
    <InternalFunctionName>MP_InsertLBItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>index at which the item is to be inserted</Desc>
      </Param>
      <Param>
        <Name>itemString</Name>
        <Type>stringMode</Type>
        <Desc>text to set for item</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DeleteLBItem</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deletes an item from the specified list browser control.</Description>
    <ShortDesc>Deletes an item from the specified list browser control.</ShortDesc>
    <ID>2553</ID>
    <IDName>funcDeleteLBItem</IDName>
    <InternalFunctionName>MP_DeleteLBItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the index of the item to delete</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumLBItems</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the number of items in the specified list browser control.</Description>
    <ShortDesc>Gets the number of items in the specified list browser control.</ShortDesc>
    <Result>Returns the number of items in the list browser. </Result>
    <ID>2554</ID>
    <IDName>funcGetNumLBItems</IDName>
    <InternalFunctionName>MP_GetNumLBItems</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBItemInfo</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets data for item.</Description>
    <ShortDesc>Sets data for item.</ShortDesc>
    <ID>2555</ID>
    <IDName>funcSetLBItemInfo</IDName>
    <InternalFunctionName>MP_SetLBItemInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the item index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the subitem index</Desc>
      </Param>
      <Param>
        <Name>itemString</Name>
        <Type>stringMode</Type>
        <Desc>the item text</Desc>
      </Param>
      <Param>
        <Name>imageIndex</Name>
        <Type>intMode</Type>
        <Desc>the item image list index</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBItemInfo</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets string and image information for a specified item of a List Browser control. </Description>
    <ShortDesc>Gets data from item.</ShortDesc>
    <ID>2556</ID>
    <IDName>funcGetLBItemInfo</IDName>
    <InternalFunctionName>MP_GetLBItemInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the item index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the subitem index</Desc>
      </Param>
      <Param>
        <Name>itemString</Name>
        <Type>strVarMode</Type>
        <Desc>the item text</Desc>
      </Param>
      <Param>
        <Name>imageIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the item image list index</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertLBColumnDataItem</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Inserts column data item with specified data. Returns the index to the newly inserted item.</Description>
    <ShortDesc>Inserts column data item with specified data.</ShortDesc>
    <ID>2557</ID>
    <IDName>funcInsertLBColumnDataItem</IDName>
    <InternalFunctionName>MP_InsertLBColumnDataItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the column for which to set the data</Desc>
      </Param>
      <Param>
        <Name>itemString</Name>
        <Type>stringMode</Type>
        <Desc>the item text</Desc>
      </Param>
      <Param>
        <Name>imageOn</Name>
        <Type>intMode</Type>
        <Desc>the 'on' image list index</Desc>
      </Param>
      <Param>
        <Name>imageOff</Name>
        <Type>intMode</Type>
        <Desc>the 'off' image list index</Desc>
      </Param>
      <Param>
        <Name>itemData</Name>
        <Type>longMode</Type>
        <Desc>the item user data</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBColumnDataItemInfo</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the specified column data item's text, image and user data.</Description>
    <ShortDesc>Gets the specified column data item's text, image and user data.</ShortDesc>
    <ID>2558</ID>
    <IDName>funcGetLBColumnDataItemInfo</IDName>
    <InternalFunctionName>MP_GetLBColumnDataItemInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the column from which to get the data</Desc>
      </Param>
      <Param>
        <Name>columnDataItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column data item</Desc>
      </Param>
      <Param>
        <Name>itemString</Name>
        <Type>strVarMode</Type>
        <Desc>the item text</Desc>
      </Param>
      <Param>
        <Name>imageOn</Name>
        <Type>intVarMode</Type>
        <Desc>the 'on' image list index</Desc>
      </Param>
      <Param>
        <Name>imageOff</Name>
        <Type>intVarMode</Type>
        <Desc>the 'off' image list index</Desc>
      </Param>
      <Param>
        <Name>itemData</Name>
        <Type>lngVarMode</Type>
        <Desc>the item user data</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBItemUsingColumnDataItem</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets list item data with specified column data item.</Description>
    <ShortDesc>Sets list item data with specified column data item.</ShortDesc>
    <ID>2559</ID>
    <IDName>funcSetLBItemUsingColumnDataItem</IDName>
    <InternalFunctionName>MP_SetLBItemUsingColumnDataItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>columnDataItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column data item with which to set list item data</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumLBColumnDataItems</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Get the number of columnDataItems.</Description>
    <ShortDesc>Get the number of columnDataItems.</ShortDesc>
    <ID>2560</ID>
    <IDName>funcGetNumLBColumnDataItems</IDName>
    <InternalFunctionName>MP_GetNumLBColumnDataItems</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the index of the column</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveLBColumnDataItem</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Removes the specified column data item.</Description>
    <ShortDesc>Removes the specified column data item.</ShortDesc>
    <ID>2561</ID>
    <IDName>funcRemoveLBColumnDataItem</IDName>
    <InternalFunctionName>MP_RemoveLBColumnDataItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the index of the column</Desc>
      </Param>
      <Param>
        <Name>columnDataItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column data item to remove</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveAllLBColumnDataItems</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>Removes all column data items.</Description>
    <ShortDesc>Removes all column data items.</ShortDesc>
    <ID>2562</ID>
    <IDName>procRemoveAllLBColumnDataItems</IDName>
    <InternalFunctionName>MP_RemoveAllLBColumnDataItems</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the index of the column</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FindLBColumnDataItem</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Finds the column data item with the specified text.</Description>
    <ShortDesc>Finds the column data item with the specified text.</ShortDesc>
    <ID>2563</ID>
    <IDName>funcFindLBColumnDataItem</IDName>
    <InternalFunctionName>MP_FindLBColumnDataItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the index of the column</Desc>
      </Param>
      <Param>
        <Name>itemString</Name>
        <Type>stringMode</Type>
        <Desc>the text to find</Desc>
      </Param>
      <Param>
        <Name>columnDataItemIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the index at which the text was found</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FindLBColumnItem</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Finds the column item with the specified text.</Description>
    <ShortDesc>Finds the column item with the specified text.</ShortDesc>
    <ID>2564</ID>
    <IDName>funcFindLBColumnItem</IDName>
    <InternalFunctionName>MP_FindLBColumnItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the index of the column</Desc>
      </Param>
      <Param>
        <Name>itemString</Name>
        <Type>stringMode</Type>
        <Desc>the text to find</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the index at which the text was found</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBControlType</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets control type for column.</Description>
    <ShortDesc>Sets control type for column.</ShortDesc>
    <ID>2565</ID>
    <IDName>funcSetLBControlType</IDName>
    <InternalFunctionName>MP_SetLBControlType</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the index of the column</Desc>
      </Param>
      <Param>
        <Name>controlType</Name>
        <Type>intMode</Type>
        <Desc>the control type to be set (1: Static, 2: Radio, 3: Multi State, 4: Single Instance Icon [See Organization Dialog active element column], 5: Static Icon, 6: Number, 7: Multiple Icons)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBControlType</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets control type for column.</Description>
    <ShortDesc>Gets control type for column.</ShortDesc>
    <ID>2566</ID>
    <IDName>funcGetLBControlType</IDName>
    <InternalFunctionName>MP_GetLBControlType</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the index of the column</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddLBImage</Name>
    <ChangedDate>2011:03:02T09:06:00</ChangedDate>
    <Version>1100</Version>
    <OldVersion>1700</OldVersion>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Adds specified image resource to image list.[[BR]][[BR]]Currently only one resource type is supported: the 'ics8' resource.  This is a 16x16 color icon.  Pass a value of 1 for the resourceType argument to indicate this type.  Call SetVSResourceFile to specify a resource file that contains the icons.</Description>
    <ShortDesc>Adds specified image resource to image list. This call has been deprecated, use "AddListBrowserImage" instead.</ShortDesc>
    <SeeAlso>SetVSResourceFile, CreateLB, InsertLBColumn, SetLBControlType, SetLBItemDisplayType, InsertLBColumnDataItem, SetLBItemUsingColumnDataItem, InsertLBItem, EnableLBColumnLines</SeeAlso>
    <ID>2567</ID>
    <IDName>funcAddLBImage</IDName>
    <InternalFunctionName>MP_AddLBImage</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>resourceType</Name>
        <Type>intMode</Type>
        <Desc>type of image resource to be added</Desc>
      </Param>
      <Param>
        <Name>resourceID</Name>
        <Type>intMode</Type>
        <Desc>the resource ID of image to add</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnableLBSorting</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>Enables/disables sorting.</Description>
    <ShortDesc>Enables/disables sorting.</ShortDesc>
    <ID>2568</ID>
    <IDName>procEnableLBSorting</IDName>
    <InternalFunctionName>MP_EnableLBSorting</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>enableSorting</Name>
        <Type>boolMode</Type>
        <Desc>specifies whether to enable or disable sorting</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsLBSortingEnabled</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determines if sorting is enabled or disabled.</Description>
    <ShortDesc>Determines if sorting is enabled or disabled.</ShortDesc>
    <ID>2569</ID>
    <IDName>funcIsLBSortingEnabled</IDName>
    <InternalFunctionName>MP_IsLBSortingEnabled</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AreLBRadioColumnLinesEnabled</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determines if "column" lines are drawn between radio control items.</Description>
    <ShortDesc>Determines if "column" lines are drawn between radio control items.</ShortDesc>
    <ID>2570</ID>
    <IDName>funcAreLBRadioColumnLinesEnabled</IDName>
    <InternalFunctionName>MP_AreLBRadioColumnLinesEnabled</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the index of the column</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnableLBRadioColumnLines</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>Enables/disables radio item "column" lines.</Description>
    <ShortDesc>Enables/disables radio item "column" lines.</ShortDesc>
    <ID>2571</ID>
    <IDName>procEnableLBRadioColumnLines</IDName>
    <InternalFunctionName>MP_EnableLBRadioColumnLines</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the index of the column</Desc>
      </Param>
      <Param>
        <Name>enableRadioColumnLines</Name>
        <Type>boolMode</Type>
        <Desc>specifies if radio item "column" lines should be drawn</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AreLBColumnLinesEnabled</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determines if column lines are drawn.</Description>
    <ShortDesc>Determines if column lines are drawn.</ShortDesc>
    <ID>2572</ID>
    <IDName>funcAreLBColumnLinesEnabled</IDName>
    <InternalFunctionName>MP_AreLBColumnLinesEnabled</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnableLBColumnLines</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>Enables/disables column lines.</Description>
    <ShortDesc>Enables/disables column lines.</ShortDesc>
    <ID>2573</ID>
    <IDName>procEnableLBColumnLines</IDName>
    <InternalFunctionName>MP_EnableLBColumnLines</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>enableColumnLines</Name>
        <Type>boolMode</Type>
        <Desc>specifies if column lines should be drawn</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsLBItemSelected</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determines if the specified item is currently selected.</Description>
    <ShortDesc>Determines if the specified item is currently selected.</ShortDesc>
    <ID>2574</ID>
    <IDName>funcIsLBItemSelected</IDName>
    <InternalFunctionName>MP_IsLBItemSelected</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row number</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsLBColumnTrackingEnabled</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determines if column tracking is enabled for the specified column.</Description>
    <ShortDesc>Determines if column tracking is enabled for the specified column.</ShortDesc>
    <ID>2575</ID>
    <IDName>funcIsLBColumnTrackingEnabled</IDName>
    <InternalFunctionName>MP_IsLBColumnTrackingEnabled</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the index of the column</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnableLBColumnTracking</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>Enables/disables column tracking.</Description>
    <ShortDesc>Enables/disables column tracking.</ShortDesc>
    <ID>2576</ID>
    <IDName>procEnableLBColumnTracking</IDName>
    <InternalFunctionName>MP_EnableLBColumnTracking</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the index of the column</Desc>
      </Param>
      <Param>
        <Name>enableColumnTracking</Name>
        <Type>boolMode</Type>
        <Desc>specifies if column tracking should be enabled or disabled</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBItemDisplayType</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets item display type for list items in specified column.</Description>
    <ShortDesc>Sets item display type for list items in specified column.</ShortDesc>
    <ID>2577</ID>
    <IDName>funcSetLBItemDisplayType</IDName>
    <InternalFunctionName>MP_SetLBItemDisplayType</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the index of the column</Desc>
      </Param>
      <Param>
        <Name>displayType</Name>
        <Type>intMode</Type>
        <Desc>the display type to be set (0: Text Only, 1: Icon Only, 3: Text and Icon)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBItemDisplayType</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets item display type for list items in specified column.</Description>
    <ShortDesc>Gets item display type for list items in specified column.</ShortDesc>
    <ID>2578</ID>
    <IDName>funcGetLBItemDisplayType</IDName>
    <InternalFunctionName>MP_GetLBItemDisplayType</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the index of the column</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBEditDisplayType</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets edit display type for list items in specified column.</Description>
    <ShortDesc>Sets edit display type for list items in specified column.</ShortDesc>
    <ID>2579</ID>
    <IDName>funcSetLBEditDisplayType</IDName>
    <InternalFunctionName>MP_SetLBEditDisplayType</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the index of the column</Desc>
      </Param>
      <Param>
        <Name>displayType</Name>
        <Type>intMode</Type>
        <Desc>the display type to be set (0: Text Only, 1: Icon Only, 3: Text and Icon)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBEditDisplayType</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets edit display type for list items in specified column.</Description>
    <ShortDesc>Gets edit display type for list items in specified column.</ShortDesc>
    <ID>2580</ID>
    <IDName>funcGetLBEditDisplayType</IDName>
    <InternalFunctionName>MP_GetLBEditDisplayType</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the index of the column</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateInterpolatedSurface</Name>
    <Version>1000</Version>
    <Category>Objects - NURBS</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates an interpolated surface with the specified degrees and number of points.  The resulting surface passes through each of the interpoliation points.  If a handle to a NURBS surface is provided, the interpolated surface will approximate that surface.  If the handle is NULL, it creates a rectangular surface. </Description>
    <ShortDesc>Creates an interpolated surface with the specified degrees and number of points.</ShortDesc>
    <Result>Handle to the new interpolated surface object. </Result>
    <ID>2581</ID>
    <IDName>funcCreateInterpolatedSurface</IDName>
    <InternalFunctionName>MP_CreateInterpolatedSurface</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>surfaceHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a NURBS surface to approximate</Desc>
      </Param>
      <Param>
        <Name>numUPts</Name>
        <Type>longMode</Type>
        <Desc>Number of interpolation points in the U parametric direction.  Must be greater than uDegree.</Desc>
      </Param>
      <Param>
        <Name>numVPts</Name>
        <Type>longMode</Type>
        <Desc>Number of interpolation points in the V parametric direction.  Must be greater than vDegree.</Desc>
      </Param>
      <Param>
        <Name>uDegree</Name>
        <Type>intMode</Type>
        <Desc>Degree of the surface in the u parametric direction</Desc>
      </Param>
      <Param>
        <Name>vDegree</Name>
        <Type>intMode</Type>
        <Desc>Degree of the surface in the v parametric direction</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ExtendNurbsCurve</Name>
    <Version>1000</Version>
    <Category>Objects - NURBS</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Extends a curve by a given distance at the start or the end.  The extension can either be linear or can match the curvature of the existing end.</Description>
    <ShortDesc>Extends a curve by a given distance at the start or the end.  The extension can either be linear or can match the curvature of the existing end.</ShortDesc>
    <Result>Returns a handle to the extended curve. </Result>
    <ID>2582</ID>
    <IDName>funcExtendNurbsCurve</IDName>
    <InternalFunctionName>MP_ExtendNurbsCurve</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>curveHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a NURBS curve</Desc>
      </Param>
      <Param>
        <Name>distance</Name>
        <Type>realMode</Type>
        <Desc>Distance to extend the curve</Desc>
      </Param>
      <Param>
        <Name>bStart</Name>
        <Type>boolMode</Type>
        <Desc>True to extend the curve at the beginning, false to extend it at the end.  </Desc>
      </Param>
      <Param>
        <Name>bLinear</Name>
        <Type>boolMode</Type>
        <Desc>True for linear, false to match curvature of existing end.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ExtendNurbsSurface</Name>
    <Version>1000</Version>
    <Category>Objects - NURBS</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Extends a surface by a given distance at the start or the end of the U direction or V direction.  </Description>
    <ShortDesc>Extends a surface by a given distance at the start or the end of the U direction or V direction.  </ShortDesc>
    <Result>Returns a handle to the extended surface</Result>
    <ID>2583</ID>
    <IDName>funcExtendNurbsSurface</IDName>
    <InternalFunctionName>MP_ExtendNurbsSurface</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>surfaceHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a NURBS surface.</Desc>
      </Param>
      <Param>
        <Name>distance</Name>
        <Type>realMode</Type>
        <Desc>Distance to extend the surface.</Desc>
      </Param>
      <Param>
        <Name>bStart</Name>
        <Type>boolMode</Type>
        <Desc>True to extend from the beginning, false to extend from the end.</Desc>
      </Param>
      <Param>
        <Name>bLinear</Name>
        <Type>boolMode</Type>
        <Desc>True for linear, false to match curvature of existing surface.</Desc>
      </Param>
      <Param>
        <Name>bUDir</Name>
        <Type>boolMode</Type>
        <Desc>True extends the surface in the u parametric[[BR]]direction, otherwise extends it in the v parametric direction.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RevolveWithRail</Name>
    <Version>1000</Version>
    <Category>Objects - NURBS</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a NURBS surface or a group of surfaces by revolving a profile about an axis and following a rail guide curve on a plane perpendicular to the plane containing the axis and the profile.</Description>
    <ShortDesc>Creates a NURBS surface or a group of surfaces by revolving a profile about an axis and following a rail guide curve.</ShortDesc>
    <Result>Handle to resulting NURBS surface.</Result>
    <ID>2584</ID>
    <IDName>funcRevolveWithRail</IDName>
    <InternalFunctionName>MP_RevolveWithRail</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>profileH</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a NURBS curve to be used as the profile object.</Desc>
      </Param>
      <Param>
        <Name>railH</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a NURBS curve to be used as the rail guide object</Desc>
      </Param>
      <Param>
        <Name>axisH</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a linear NURBS curve about which the[[BR]]profile would be revolved</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EvaluateNurbsSurfacePointAndNormal</Name>
    <Version>1000</Version>
    <Category>Objects - NURBS</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determines the point and normal on the NURBS surface at the given u/v value.</Description>
    <ShortDesc>Determines the point and normal on the NURBS surface at the given u/v value.</ShortDesc>
    <ID>2585</ID>
    <IDName>funcEvaluateNurbsSurfacePointAndNormal</IDName>
    <InternalFunctionName>MP_EvaluateNurbsSurfacePointAndNormal</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>surfaceHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to NURBS surface being evaluated</Desc>
      </Param>
      <Param>
        <Name>u</Name>
        <Type>realMode</Type>
        <Desc>parameter value of the point on the surface being evaluated</Desc>
      </Param>
      <Param>
        <Name>v</Name>
        <Type>realMode</Type>
        <Desc>parameter value of the point on the surface being evaluated</Desc>
      </Param>
      <Param>
        <Name>point</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Coordinate of the point on the surface</Desc>
      </Param>
      <Param>
        <Name>normal</Name>
        <Type>d3PtVarMode</Type>
        <Desc>normal vector of the surface computed at the point</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>UpdateThumbnailPreview</Name>
    <Version>1100</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>For a given Vectorworks resource (i.e. Hatch, Texture, Symbol/PIO, etc...), this function will create or update it's thumbnail preview. </Description>
    <ShortDesc>For a given Vectorworks resource (i.e. Hatch, Texture, Symbol/PIO, etc...), this function will create or update it's thumbnail preview. </ShortDesc>
    <Result>This function returns true if the operation was successful, false otherwise.</Result>
    <ID>2586</ID>
    <IDName>funcUpdateThumbnailPreview</IDName>
    <InternalFunctionName>MP_UpdateThumbnailPreview</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>resourceHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the resource.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPGroupParent</Name>
    <Version>1100</Version>
    <Category>Objects - Groups</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Gets the viewport that is the parent of specified viewport group.</Description>
    <ShortDesc>Gets viewport parent of specified viewport group.</ShortDesc>
    <Result>Returns a handle to the viewport object (type 122) that is the parent of the specified group, or nil if unsuccessful. </Result>
    <ID>2587</ID>
    <IDName>funcGetVPGroupParent</IDName>
    <InternalFunctionName>MP_GetVPGroupParent</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>groupHandle</Name>
        <Type>handleMode</Type>
        <Desc>handle to a viewport group (crop, annotation, etc)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsVPGroupContainedObject</Name>
    <Version>1100</Version>
    <Category>Objects - Groups</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determines if specified object is contained within a viewport group, and if so which type of group.[[BR]]</Description>
    <ShortDesc>Determines if specified object is a viewport group-contained object.</ShortDesc>
    <Result>true if object is contained within a viewport group</Result>
    <ID>2588</ID>
    <IDName>funcIsVPGroupContainedObject</IDName>
    <InternalFunctionName>MP_IsVPGroupContainedObject</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object </Desc>
      </Param>
      <Param>
        <Name>groupType</Name>
        <Type>intMode</Type>
        <Desc>Type of group containing the object: (1 = Crop, 2 = Annotation, 3 = Cache, 4 = Section)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsVPCropObject</Name>
    <Version>1100</Version>
    <Category>Objects - Groups</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determines if specified object is a viewport crop object.</Description>
    <ShortDesc>Determines if specified object is a viewport crop object.</ShortDesc>
    <ID>2589</ID>
    <IDName>funcIsVPCropObject</IDName>
    <InternalFunctionName>MP_IsVPCropObject</InternalFunctionName>
  </Item>

  <Item>
    <Name>SetLBSelection</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Selects the specified range of items within a List Browser dialog control. </Description>
    <ShortDesc>Selects the specified range of items.</ShortDesc>
    <Result>True for success, false otherwise. </Result>
    <ID>2590</ID>
    <IDName>funcSetLBSelection</IDName>
    <InternalFunctionName>MP_SetLBSelection</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>firstItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the first row of the range to select</Desc>
      </Param>
      <Param>
        <Name>lastItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the last row of the range to select</Desc>
      </Param>
      <Param>
        <Name>select</Name>
        <Type>boolMode</Type>
        <Desc>select or deselect</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsPluginFormat</Name>
    <Version>1100</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determines if the format node is used for the parameters of a plug-in object, plug-in tool or plug-in menu command.  </Description>
    <ShortDesc>Determines if the format node is used by a plug-in for its parameters.  </ShortDesc>
    <Result>Returns true if format is used by a plug-in and false if it is a regular format that may have been created by the user.</Result>
    <ID>2591</ID>
    <IDName>funcIsPluginFormat</IDName>
    <InternalFunctionName>MP_IsPluginFormat</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theFormat</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the format node in question.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLayoutDialogPosition</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>This function moves the dialog window to the given location.  Call this function to override the default automatic positioning of the dialog window.  The dialog will be pinned so that it is at least partly onscreen.[[BR]][[BR]]This function can be useful for displaying a dialog in a position in which it was placed during prior use.[[BR]][[BR]]</Description>
    <ShortDesc>Set the screen location for the top left corner of the dialog window, in pixels.</ShortDesc>
    <Result>true - success - the dialog window was moved.[[BR]]false - failure - the dialog window was not moved, likely because it does not currently exist, or the dialogID is invalid.  The dialog window will exist anytime between the Setup message and OK/Cancel message.</Result>
    <SeeAlso>GetLayoutDialogPosition</SeeAlso>
    <ID>2592</ID>
    <IDName>funcSetLayoutDialogPosition</IDName>
    <InternalFunctionName>MP_SetLayoutDialogPosition</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index of the dialog.</Desc>
      </Param>
      <Param>
        <Name>left</Name>
        <Type>intMode</Type>
        <Desc>Location of left edge of dialog in pixels.</Desc>
      </Param>
      <Param>
        <Name>top</Name>
        <Type>intMode</Type>
        <Desc>Location of top edge of dialog in pixels.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLayoutDialogPosition</Name>
    <Version>1100</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>This function will retrieve the screen location of the dialog window, in pixels.[[BR]][[BR]]This function can be useful for displaying a dialog in a position in which it was placed during prior use.</Description>
    <ShortDesc>Get the screen location of the dialog window, in pixels.</ShortDesc>
    <Result>true - success - the location of the dialog window was retrieved.[[BR]]false - failure - the location of the dialog window was not retrieved, likely because it does not currently exist, or the dialogID is invalid.  The dialog window will exist anytime between the Setup message and OK/Cancel message.</Result>
    <SeeAlso>SetLayoutDialogPosition</SeeAlso>
    <ID>2593</ID>
    <IDName>funcGetLayoutDialogPosition</IDName>
    <InternalFunctionName>MP_GetLayoutDialogPosition</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index of the dialog.</Desc>
      </Param>
      <Param>
        <Name>left</Name>
        <Type>intVarMode</Type>
        <Desc>Location of left edge of dialog, in pixels.</Desc>
      </Param>
      <Param>
        <Name>top</Name>
        <Type>intVarMode</Type>
        <Desc>Location of top of dialog, in pixels.</Desc>
      </Param>
      <Param>
        <Name>right</Name>
        <Type>intVarMode</Type>
        <Desc>Location of right edge of dialog, in pixels.</Desc>
      </Param>
      <Param>
        <Name>bottom</Name>
        <Type>intVarMode</Type>
        <Desc>Location of bottom edge of dialog, in pixels.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateSwapControl</Name>
    <Version>1150</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Create a swap control within a dialog.  [[BR]][[BR]]This control manages multiple overlapping groups of controls, of which a single group of controls is displayed at a time.  The script is able to control which group is displayed based on other data in the dialog.  For example, a dialog may present a scrolling list of items on the left, and a swap control on the right.  As the user selects items in the list, different sets of controls are enabled on the right.  This can be used for a settings (preferences) style dialog or when there are too many choices to use a Tab control effectively.   </Description>
    <ShortDesc>Creates a swap control.  </ShortDesc>
    <SeeAlso>CreateSwapPane, DisplaySwapPane</SeeAlso>
    <Comments>The swap control is analogous to a tab control, except without the tabs.  Thus, the script switches panes, not the user.</Comments>
    <ID>2594</ID>
    <IDName>procCreateSwapControl</IDName>
    <InternalFunctionName>MP_CreateSwapControl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>ID of the dialog.</Desc>
      </Param>
      <Param>
        <Name>swapControlID</Name>
        <Type>longMode</Type>
        <Desc>ID of the swap control.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateSwapPane</Name>
    <Version>1150</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a swap pane within the specified swap control.   Within a swap control, only one swap pane is visible at a time.</Description>
    <ShortDesc>Creates a swap pane within the specified swap control.</ShortDesc>
    <SeeAlso>CreateSwapControl, DisplaySwapPane</SeeAlso>
    <Comments>The function is analogous to CreateTabPane.</Comments>
    <Example>PROCEDURE dialog1_Main;[[BR]]CONST[[BR]]	kOK            = 1;[[BR]]	kCancel        = 2;[[BR]]	kTabControl    = 4;[[BR]]	kTabPane_1     = 5;[[BR]]	kTabPane_2     = 6;[[BR]]	kSwapControl_1 = 7;[[BR]]	kSwapControl_2 = 8;[[BR]]	kSwapPane_11   = 9;[[BR]]	kSwapPane_21   = 10;[[BR]]	kSwapPane_12   = 11;[[BR]]	kSwapPane_22   = 12;[[BR]]	kButton_11     = 13;[[BR]]	kButton_21     = 14;[[BR]]	kButton_12     = 15;[[BR]]	kButton_22     = 16;[[BR]]VAR[[BR]]	dialog1          :INTEGER;[[BR]][[BR]]PROCEDURE dialog1_Setup;[[BR]]BEGIN[[BR]]	dialog1 := CreateLayout('Tabs and Swaps', False, 'OK', 'Cancel');[[BR]]	CreateTabControl         (dialog1, kTabControl);[[BR]]	CreateGroupBox           (dialog1, kTabPane_1,      'Tab Pane 1', True);[[BR]]	CreateGroupBox           (dialog1, kTabPane_2,      'Tab Pane 2', True);[[BR]]	CreateSwapControl        (dialog1, kSwapControl_1);[[BR]]	CreateSwapControl        (dialog1, kSwapControl_2);[[BR]]	CreateGroupBox           (dialog1, kSwapPane_11,    '', True);[[BR]]	CreateGroupBox           (dialog1, kSwapPane_21,    '', True);[[BR]]	CreateGroupBox           (dialog1, kSwapPane_12,    '', True);[[BR]]	CreateGroupBox           (dialog1, kSwapPane_22,    '', True);[[BR]]	CreatePushButton         (dialog1, kButton_11,      'Button 1');[[BR]]	CreatePushButton         (dialog1, kButton_21,      'Button 3');[[BR]]	CreatePushButton         (dialog1, kButton_12,      'Button 2');[[BR]]	CreatePushButton         (dialog1, kButton_22,      'Button 4');[[BR]][[BR]]	SetFirstLayoutItem(dialog1, kTabControl);[[BR]]	CreateTabPane     (dialog1, kTabControl,     kTabPane_1);[[BR]]	SetFirstGroupItem (dialog1, kTabPane_1,      kSwapControl_1);[[BR]]	CreateSwapPane    (dialog1, kSwapControl_1,  kSwapPane_11);[[BR]]	SetFirstGroupItem (dialog1, kSwapPane_11,    kButton_11);[[BR]]	CreateSwapPane    (dialog1, kSwapControl_1,  kSwapPane_12);[[BR]]	SetFirstGroupItem (dialog1, kSwapPane_12,    kButton_12);[[BR]]	CreateTabPane     (dialog1, kTabControl,     kTabPane_2);[[BR]]	SetFirstGroupItem (dialog1, kTabPane_2,      kSwapControl_2);[[BR]]	CreateSwapPane    (dialog1, kSwapControl_2,  kSwapPane_21);[[BR]]	SetFirstGroupItem (dialog1, kSwapPane_21,    kButton_21);[[BR]]	CreateSwapPane    (dialog1, kSwapControl_2,  kSwapPane_22);[[BR]]	SetFirstGroupItem (dialog1, kSwapPane_22,    kButton_22);[[BR]]END;[[BR]][[BR]]PROCEDURE dialog1_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]	dialog1_Setup;[[BR]]	IF RunLayoutDialog(dialog1, dialog1_Handler) = 1 then BEGIN[[BR]]	END;[[BR]]END;[[BR]]RUN(dialog1_Main);[[BR]]</Example>
    <ID>2595</ID>
    <IDName>procCreateSwapPane</IDName>
    <InternalFunctionName>MP_CreateSwapPane</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>the ID of the dialog</Desc>
      </Param>
      <Param>
        <Name>swapControlID</Name>
        <Type>longMode</Type>
        <Desc>the ID of the swap control</Desc>
      </Param>
      <Param>
        <Name>newGroupID</Name>
        <Type>longMode</Type>
        <Desc>the ID of the group to be inserted into swap control as a swap pane.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DisplaySwapPane</Name>
    <Version>1150</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Causes the specified swap pane to be displayed within the specified swap control. [[BR]][[BR]]This is called from the dialog's event handling routine. </Description>
    <ShortDesc>Causes the specified swap pane to be displayed within the specified swap control. </ShortDesc>
    <SeeAlso>CreateSwapControl, CreateSwapPane</SeeAlso>
    <Comments>Note that pane indeces are 1-based in VectorScript, and 0-based in the SDK.  Swap panes are numbered sequentially in the order that they were inserted into the control.</Comments>
    <Example>Procedure DialogProc(VAR item: LONGINT; data: LONGINT);[[BR]]BEGIN[[BR]]	CASE item OF[[BR]]		SetupDialogC:[[BR]]		BEGIN[[BR]]			result := 0;[[BR]]		END;[[BR]][[BR]]		100:	DisplaySwapPane(dlogID, 10, 1);  { Display pane 1 }[[BR]]		101:	DisplaySwapPane(dlogID, 10, 2);  { Display pane 2 }[[BR]]		102:	DisplaySwapPane(dlogID, 10, 3);  { Display pane 3 }[[BR]][[BR]]	END;[[BR]]END;[[BR]]</Example>
    <ID>2596</ID>
    <IDName>procDisplaySwapPane</IDName>
    <InternalFunctionName>MP_DisplaySwapPane</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>the ID of the dialog</Desc>
      </Param>
      <Param>
        <Name>swapControlID</Name>
        <Type>longMode</Type>
        <Desc>the ID of the swap control</Desc>
      </Param>
      <Param>
        <Name>groupNumber</Name>
        <Type>longMode</Type>
        <Desc>1-based index of the swap pane to be displayed</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDocumentDefaultSketchStyle</Name>
    <Version>1150</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the document default sketch style.  Set [[p:1]] to 'No Sketch' to set the document default sketch to 'No Sketch'.</Description>
    <ShortDesc>Sets the document default sketch style.  </ShortDesc>
    <ID>2599</ID>
    <IDName>funcSetDocumentDefaultSketchStyle</IDName>
    <InternalFunctionName>MP_SetDocumentDefaultSketchStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>sketchName</Name>
        <Type>stringMode</Type>
        <Desc>Sketch Style name.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDocumentDefaultSketchStyle</Name>
    <Version>1150</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Returns the document default sketch style.  Returns the string 'No Sketch' if the current sketch style is 'No Sketch'.</Description>
    <ShortDesc>Returns the document default sketch style. </ShortDesc>
    <ID>2600</ID>
    <IDName>funcGetDocumentDefaultSketchStyle</IDName>
    <InternalFunctionName>MP_GetDocumentDefaultSketchStyle</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>CreateStandardIconControl</Name>
    <Version>1150</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a standard icon control, which is used to display the application icon or an alert icon. Valid values for iconNumber are:[[BR]]0 - Vectorworks application icon[[BR]]1 - Informational icon[[BR]]2 - Stop icon[[BR]]3 - Exclamation mark (warning) icon[[BR]]4 - Question icon</Description>
    <ShortDesc>Creates a standard icon control, which is used to display the application icon or an alert icon.</ShortDesc>
    <Comments>Should show image of each icon.</Comments>
    <Example>	dlog := CreateLayout('Untitled Dialog', False, 'OK', 'Cancel');[[BR]][[BR]]	CreateStandardIconControl(dlog, 4, 0);[[BR]]	SetFirstLayoutItem(dlog, 4);[[BR]][[BR]]	result := RunLayoutDialog(dlog, EventHandler);[[BR]][[BR]]</Example>
    <ID>2601</ID>
    <IDName>procCreateStandardIconControl</IDName>
    <InternalFunctionName>MP_CreateStandardIconControl</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>ID of the dialog</Desc>
      </Param>
      <Param>
        <Name>iconControlID</Name>
        <Type>longMode</Type>
        <Desc>ID of the control within the dialog</Desc>
      </Param>
      <Param>
        <Name>iconNumber</Name>
        <Type>intMode</Type>
        <Desc>Constant, listed above, indicating which icon to display.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateImageProp</Name>
    <Version>1150</Version>
    <Category>Objects - 3D</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Create an image prop from the options specified.  [[BR]][[BR]]The texture resource and optional symbol created will use names derived from the propName parameter.  If those names are being used then unique names will be assigned.  If enforceImageAspectRatio is true, depending on deriveWidthFromHeight the prop width/height will be derived from the prop height/width and the texture's image aspect ratio. Otherwise the height and width can be set independently of the texture's image aspect ratio.</Description>
    <ShortDesc>Create image prop</ShortDesc>
    <ID>2602</ID>
    <IDName>funcCreateImageProp</IDName>
    <InternalFunctionName>MP_CreateImageProp</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>propName</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>textureRef</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>enforceImageAspectRatio</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>crossedPlanes</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>createPlugin</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>autoRotate</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>createSymbol</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ShowItem</Name>
    <Version>1150</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the visibility of the referenced dialog control. </Description>
    <ShortDesc>Shows or hides a dialog item.</ShortDesc>
    <Example>PROCEDURE dialogID_Main;[[BR]]VAR[[BR]]	dialogID :INTEGER;[[BR]][[BR]]PROCEDURE dialogID_Setup;[[BR]]BEGIN[[BR]]	dialogID := CreateLayout('Example Dialog', FALSE, 'OK', 'Cancel');[[BR]]	CreateRadioButton (dialogID,  4,  'Option One');[[BR]]	CreateEditReal    (dialogID,  5,  1, 0.0, 16);[[BR]]	CreateRadioButton (dialogID,  6,  'Option Two');[[BR]]	CreateEditReal    (dialogID,  7,  1, 0.0, 16);[[BR]]	SetFirstLayoutItem(dialogID,  4);[[BR]]	SetRightItem      (dialogID,  4,   5,  0, 0);[[BR]]	SetBelowItem      (dialogID,  4,   6,  0, 0);[[BR]]	SetRightItem      (dialogID,  6,   7,  0, 0);[[BR]]END;[[BR]][[BR]]PROCEDURE dialogID_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]	CASE item OF[[BR]]		SetupDialogC:[[BR]]			BEGIN[[BR]]				SetItem(4, TRUE);[[BR]]				ShowItem(dialogID, 7, FALSE);[[BR]]			END;[[BR]]		 4:[[BR]]			BEGIN[[BR]]				ShowItem(dialogID, 5, TRUE);[[BR]]				ShowItem(dialogID, 7, FALSE);[[BR]]			END;[[BR]]		 6:[[BR]]			BEGIN[[BR]]				ShowItem(dialogID, 7, TRUE);[[BR]]				ShowItem(dialogID, 5, FALSE);[[BR]]			END;[[BR]]	END;[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]	dialogID_Setup;[[BR]]	IF RunLayoutDialog(dialogID, dialogID_Handler) = 1 then BEGIN[[BR]]	END;[[BR]]END;[[BR]]RUN(dialogID_Main);[[BR]]</Example>
    <ID>2604</ID>
    <IDName>procShowItem</IDName>
    <InternalFunctionName>MP_ShowItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>ID of the currently executing dialog.</Desc>
      </Param>
      <Param>
        <Name>item</Name>
        <Type>intMode</Type>
        <Desc>Item ID of dialog control to show or hide.</Desc>
      </Param>
      <Param>
        <Name>show</Name>
        <Type>boolMode</Type>
        <Desc>New visibility state of dialog control.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateResizableLayout</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Creates a new resizable Layout Manager dialog.[[BR]][[BR]]Resizable dialogs raise the ResizeDialogC event when resized.</Description>
    <ShortDesc>Creates a new resizable Layout Manager dialog.</ShortDesc>
    <SeeAlso>SetEdgeBinding, SetProportionalBinding</SeeAlso>
    <Comments>The parameters are the same as CreateLayout, except for widthResizable and heightResizable, which specify that the width and height, respectively, be resizable.  A dialog ID is returned by the function.</Comments>
    <ID>2605</ID>
    <IDName>funcCreateResizableLayout</IDName>
    <InternalFunctionName>MP_CreateResizableLayout</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogTitle</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>hasHelp</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>defaultButtonName</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>cancelButtonName</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>widthResizable</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>heightResizable</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetEdgeBinding</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Binds edges of a dialog control to its parent.  This function sets bindings to be fixed.  To change any of them to be proportional, use SetProportionalBinding.</Description>
    <ShortDesc>Binds edges of a dialog control to its parent.  </ShortDesc>
    <SeeAlso>CreateResizableLayout, SetProportionalBinding</SeeAlso>
    <Comments>Binding to an edge indicates that the control will maintain a predictable distance from one of its sides to the corresponding side of its parent.  Bindings can be either fixed or proportional.  Fixed bindings maintain a constant distance from their parent.  Proportional bindings maintain a distance that is a ratio of the initial position to the width (or height, as appropriate) of the parent.</Comments>
    <ID>2606</ID>
    <IDName>procSetEdgeBinding</IDName>
    <InternalFunctionName>MP_SetEdgeBinding</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>boundToLeft</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>boundToRight</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>boundToTop</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>boundToBottom</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetProportionalBinding</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets a dialog control's bindings to be proportional.  Proportional bindings maintain a distance that is a ratio of the initial position to the width (or height, as appropriate) of the parent.  To change a control's bindings to be fixed, use SetEdgeBinding.</Description>
    <ShortDesc>Sets a dialog control's bindings to be proportional.  </ShortDesc>
    <SeeAlso>CreateResizableLayout, SetEdgeBinding</SeeAlso>
    <ID>2607</ID>
    <IDName>procSetProportionalBinding</IDName>
    <InternalFunctionName>MP_SetProportionalBinding</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>leftProportional</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>rightProportional</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>topProportional</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>bottomProportional</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLayoutDialogSize</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Retrieves a Layout Manager dialog's size, in pixels.</Description>
    <ShortDesc>Retrieves a Layout Manager dialog's size, in pixels.</ShortDesc>
    <ID>2608</ID>
    <IDName>procGetLayoutDialogSize</IDName>
    <InternalFunctionName>MP_GetLayoutDialogSize</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLayoutDialogSize</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets a Layout Manager dialog's size, in pixels.</Description>
    <ShortDesc>Sets a Layout Manager dialog's size, in pixels.</ShortDesc>
    <ID>2609</ID>
    <IDName>procSetLayoutDialogSize</IDName>
    <InternalFunctionName>MP_SetLayoutDialogSize</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLayoutOption</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Set options for a specific Layout Manager dialog.  For use by certain alert dialogs that want centered "OK" button. </Description>
    <ShortDesc>Set options for a specific Layout Manager dialog.  </ShortDesc>
    <ID>2610</ID>
    <IDName>funcSetLayoutOption</IDName>
    <InternalFunctionName>MP_SetLayoutOption</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>option</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>longMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ResizeDialogC</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Constant</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>This constant is passed to the event handler routine to signal the dialog has been resized.</Description>
    <ShortDesc>This constant is passed to the event handler routine to signal the dialog has been resized.</ShortDesc>
    <Comments>Added 1/7/05 by Jeff Geraci.</Comments>
    <ID>12611</ID>
    <IDName>kVSResizeDialogC</IDName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>AlertInform</Name>
    <ChangedDate>2019:08:14T14:50:00</ChangedDate>
    <Version>1200</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Procedure</Type>
    <Description>Displays an alert dialog which provides the user with information about the result of a command. It offers no user choices.</Description>
    <ShortDesc>Displays an alert dialog which provides the user with information about the result of a command.</ShortDesc>
    <SeeAlso>AlertQuestion, AlertCritical, AlertInformDontShowAgain, AlertQuestionDontShowAgain, AlertCriticalHLink, AlertInformHLink, AlertInformHLinkN</SeeAlso>
    <Comments>Created by TTF 1/18/2005</Comments>
    <Example>AlertInform('That item is not a valid item', '',isMinorAlert);</Example>
    <ID>2612</ID>
    <IDName>procAlertInform</IDName>
    <InternalFunctionName>MP_AlertInform</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>text</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The information to be displayed.</Desc>
      </Param>
      <Param>
        <Name>advice</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The text to be added in a smaller font under the main information message.</Desc>
      </Param>
      <Param>
        <Name>minorAlert</Name>
        <Type>boolMode</Type>
        <Desc>The severity of the alert: minor(true) or major(false).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AlertQuestion</Name>
    <ChangedDate>2019:08:14T14:49:00</ChangedDate>
    <Version>1200</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Displays an alert dialog which alerts the user to a condition or situation that requires the user's decision and input before preceding; such as an impending action with potentially destructive or irreversible consequences. The message should be in the form of a question.			[[BR]]</Description>
    <ShortDesc>Alerts the user to a condition  that requires the user's decision. </ShortDesc>
    <Result>Return Values[[BR]]0:  the negative button was hit[[BR]]1:  the positive button was hit[[BR]]2:  custom button A was hit[[BR]]3:  custom button B was hit</Result>
    <SeeAlso>AlertInform, AlertCritical, AlertInformDontShowAgain, AlertQuestionDontShowAgain, AlertCriticalHLink, AlertInformHLink, AlertInformHLinkN</SeeAlso>
    <Comments>Created by TTF 1/18/2005</Comments>
    <Example>PROCEDURE Example;[[BR]]BEGIN[[BR]]  AlrtDialog('AlrtDialog');[[BR]]  AlertInform('AlertInform', 'advice', FALSE);[[BR]]  AlertCritical('AlertCritical', 'advice');[[BR]]  Message(YNDialog('YNDialog'));[[BR]]  Message(AlertQuestion('question', 'advice', 1, 'ok', 'cancel', 'a', 'b'));[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2613</ID>
    <IDName>funcAlertQuestion</IDName>
    <InternalFunctionName>MP_AlertQuestion</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>question</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The question to display</Desc>
      </Param>
      <Param>
        <Name>advice</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The text to be added in a smaller font under the main information/message</Desc>
      </Param>
      <Param>
        <Name>defaultButton</Name>
        <Type>intMode</Type>
        <Desc>Specifies which button is to be made the default[[BR]]0:	the negative button is the default[[BR]]1:	the positive button is the default[[BR]]2:	custom button A is the default [[BR]]3:	custom button B is the default </Desc>
      </Param>
      <Param>
        <Name>OKOverrideText</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Specifies a string to use in overriding the 'OK' string</Desc>
      </Param>
      <Param>
        <Name>CancelOverrideText</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Specifies a string to use in overriding the 'Cancel' string</Desc>
      </Param>
      <Param>
        <Name>customButtonAText</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Specifies a string to use for an optional custom button A</Desc>
      </Param>
      <Param>
        <Name>customButtonBText</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Specifies a string to use for a second optional custom button B</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AlertCritical</Name>
    <ChangedDate>2019:08:14T14:49:00</ChangedDate>
    <Version>1200</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Procedure</Type>
    <Description>Informs the user of a serious problem that requires intervention or correction before work can continue.</Description>
    <ShortDesc>Informs the user of a serious problem that requires intervention or correction before work can continue.</ShortDesc>
    <SeeAlso>AlertInform, AlertQuestion, AlertInformDontShowAgain, AlertQuestionDontShowAgain, AlertCriticalHLink, AlertInformHLink, AlertInformHLinkN</SeeAlso>
    <Comments>Created by TTF 1/18/2005</Comments>
    <Example>AlertCritical('Out of Memory', '');</Example>
    <ID>2614</ID>
    <IDName>procAlertCritical</IDName>
    <InternalFunctionName>MP_AlertCritical</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>text</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The information to be displayed.</Desc>
      </Param>
      <Param>
        <Name>advice</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The text to be added in a smaller font under the main information message.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateSymbolDisplayControl</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a new symbol display control in the dialog layout.  The control displays the specified symbol in the specified rendering mode and view.  The actual size of the symbol is not relevent; it is shown as large as possible in the given height and width (the height to width ratio of the symbol is always preserved).  To show a blank SymbolDisplay control, use an empty string as the symbolName parameter.[[BR]][[BR]][[note:SymbolDisplayControlRenderModesTable]][[BR]][[BR]][[note:SymbolDisplayControlViewsTable]]</Description>
    <ShortDesc>Creates a new symbol display control in the dialog layout.</ShortDesc>
    <SeeAlso>UpdateSymbolDisplayControl</SeeAlso>
    <Example>CreateSymbolDisplayControl( 5, 6, 'Chair', 350, 200, 5, 11, 9 );[[BR]][[BR]]This creates a dialog control that displays the symbol called "Chair."  The control is 350 pixels high and 200 pixels wide, with a margin of 5 pixels.  The symbol is rendered in OpenGL mode and displayed in a right isometric view.[[BR]][[BR]]PROCEDURE Example;[[BR]]VAR[[BR]]	dialog1 :INTEGER;[[BR]]	int     :INTEGER;[[BR]][[BR]]PROCEDURE dialog1_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]	dialog1 := CreateLayout('Example', TRUE, 'OK', 'Cancel');[[BR]]	CreateSymbolDisplayControl(dialog1,  4,  'Symbol-1', 128, 128, 0, 11, 9);[[BR]]	SetFirstLayoutItem(dialog1,  4);[[BR]]	int := RunLayoutDialog(dialog1, dialog1_Handler);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2615</ID>
    <IDName>procCreateSymbolDisplayControl</IDName>
    <InternalFunctionName>MP_CreateSymbolDisplayControl</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The ID of the dialog in which to create the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The item ID of the control.</Desc>
      </Param>
      <Param>
        <Name>symbolName</Name>
        <Type>stringMode</Type>
        <Desc>The name of the symbol to display.</Desc>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>intMode</Type>
        <Desc>The height of the control in pixels.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>intMode</Type>
        <Desc>The width of the control in pixels.</Desc>
      </Param>
      <Param>
        <Name>margin</Name>
        <Type>intMode</Type>
        <Desc>The margin bewteen the border of the control and the symbol in pixels.</Desc>
      </Param>
      <Param>
        <Name>renderMode</Name>
        <Type>intMode</Type>
        <Desc>The render mode in which to display the symbol.</Desc>
      </Param>
      <Param>
        <Name>view</Name>
        <Type>intMode</Type>
        <Desc>The view in which to display the symbol.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>UpdateSymbolDisplayControl</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Updates a pre-existing symbol display control in the dialog with a new symbol, rendering mode, or view.  The dialog ID and item ID must refer to symbol display control created with CreateSymbolDisplayControl.  To show a blank SymbolDisplay control, use an empty string as the symbolName parameter.[[BR]][[BR]][[note:SymbolDisplayControlRenderModesTable]][[BR]][[BR]][[note:SymbolDisplayControlViewsTable]]</Description>
    <ShortDesc>Updates a symbol display control in the dialog layout with a new symbol, rendering mode, or view.</ShortDesc>
    <SeeAlso>CreateSymbolDisplayControl</SeeAlso>
    <Example>CreateSymbolDisplayControl( 5, 6, 'Chair', 350, 200, 5, 11, 9 );[[BR]]{Other code}[[BR]]UpdateSymbolDisplayControl( 5, 6, 'Chair', 0, 3 );[[BR]][[BR]]This creates a dialog control that displays the symbol called "Chair."  The control is 350 pixels high and 200 pixels wide, with a margin of 5 pixels.  The symbol is rendered in OpenGL mode and displayed in a right isometric view.  It then later updates the control to display the same symbol rendered in Wireframe in a front view.</Example>
    <ID>2616</ID>
    <IDName>procUpdateSymbolDisplayControl</IDName>
    <InternalFunctionName>MP_UpdateSymbolDisplayControl</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The ID of the dialog in which to create the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The item ID of the control.</Desc>
      </Param>
      <Param>
        <Name>symbolName</Name>
        <Type>stringMode</Type>
        <Desc>The name of the symbol to display.</Desc>
      </Param>
      <Param>
        <Name>renderMode</Name>
        <Type>intMode</Type>
        <Desc>The render mode in which to display the symbol.</Desc>
      </Param>
      <Param>
        <Name>view</Name>
        <Type>intMode</Type>
        <Desc>The standard view in which to display the symbol.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetSavedSetting</Name>
    <Version>1200</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Writes a value to the saved settings file.  This can be used to remember various user settings between running sessions of Vectorworks.  For example, a script may want to remember a dialog's position or a font settings.  The saved settings should not be used for critical information, but rather for convenience settings. </Description>
    <ShortDesc>Writes a value to the saved settings file.  </ShortDesc>
    <ID>2617</ID>
    <IDName>procSetSavedSetting</IDName>
    <InternalFunctionName>MP_SetSavedSetting</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>category</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>setting</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>stringMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSavedSetting</Name>
    <Version>1200</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Reads a value from the saved settnigs file.  This can be used to remember various user settings between running sessions of Vectorworks.  For example, a script may want to remember a dialog's position or a font settings.  The saved settings should not be used for critical information, but rather for convenience settings. [[BR]][[BR]]If the settings file is lost or damaged the script should revert to a reasonable default value, and typically this would not warrant an alert dialog.  </Description>
    <ShortDesc>Reads a value from the saved settings file.</ShortDesc>
    <Result>Returns true is the requested setting is found and read from the saved settings file, false otherwise.  </Result>
    <ID>2618</ID>
    <IDName>funcGetSavedSetting</IDName>
    <InternalFunctionName>MP_GetSavedSetting</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>category</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>setting</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>strVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FindFileInPluginFolder</Name>
    <ChangedDate>2017:06:16T15:43:00</ChangedDate>
    <Version>1200</Version>
    <Category>File I/O</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Searches for filename in all plug-in folders.  Returns TRUE if the file is found, FALSE otherwise.  If found, the result is returned in the path parameter.</Description>
    <ShortDesc>Searches for filename in all plug-in folders.  Returns TRUE if the file is found, FALSE otherwise.  If found, the result is returned in the path parameter.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	filename, path :STRING;[[BR]]BEGIN[[BR]]	filename := 'Callout.vso';[[BR]]	IF FindFileInPluginFolder(filename, path) [[BR]]		THEN AlrtDialog(path)[[BR]]		ELSE AlrtDialog('Could not find file.');[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2619</ID>
    <IDName>funcFindFileInPluginFolder</IDName>
    <InternalFunctionName>MP_FindFileInPluginFolder</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>filename</Name>
        <Type>eCharDynarrayMode</Type>
      </Param>
      <Param>
        <Name>path</Name>
        <Type>eCharDynarrayVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BuildResourceList</Name>
    <ChangedDate>2017:07:05T10:22:00</ChangedDate>
    <Version>1200</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Creates an implicit list of  resources of a specified type, and returns an ID for the list. Values in the list can be retrieved using GetNameFromResourceList.[[BR]][[BR]]If the Display Default Content preference (#130) is on and folderIndex is not  0, it will also include all the resources of the specified type in all the files in the selected folder. [[BR]][[BR]]If folderIndex is positive, the list will include all the resources of that type from the current document, as well as from the specified folder. If folderIndex is 0, only the resources in the current document will be in the list. If folderIndex is negative, only the resources in the specified folder will be in the list.   [[BR]][[BR]][[note:ObjTypeNote]][[BR]][[BR]][[note:FolderPath]]</Description>
    <ShortDesc>Creates a list of all the resources of the specified type in the current file and, if a preference is on, in the specified folder.  Returns list ID.</ShortDesc>
    <SeeAlso>AddResourceToList,DeleteResourceFromList,GetNameFromResourceList,GetResourceFromList,ImportResourceToCurrentFile</SeeAlso>
    <Example>const[[BR]]kHatch = 66;[[BR]]kDefHatchFolder = 105;[[BR]]var[[BR]]listID, numItems: LONGINT;[[BR]]begin[[BR]]{ Create a resource list of hatches from the current document and } [[BR]]{ the default hatch folder. }[[BR]]listID := BuildResourceList(kHatch, kDefHatchFolder, '', numItems);[[BR]]</Example>
    <ID>2620</ID>
    <IDName>funcBuildResourceList</IDName>
    <InternalFunctionName>MP_BuildResourceList</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>type</Name>
        <Type>intMode</Type>
        <Desc>the type of resource to put in the list</Desc>
      </Param>
      <Param>
        <Name>folderIndex</Name>
        <Type>intMode</Type>
        <Desc>the index of a VW folder. </Desc>
      </Param>
      <Param>
        <Name>subFolderName</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>the name of a subfolder inside the folder specified by folderIndex. This can also be a partial path.  Use an empty string to request the resources from all files in the folderIndex folder.</Desc>
      </Param>
      <Param>
        <Name>numItems</Name>
        <Type>lngVarMode</Type>
        <Desc>the number of items in the list built</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetResourceFromList</Name>
    <Version>1200</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns the indicated resource from the indicated resource list, if the resource is in the current document.  Otherwise it returns nil.</Description>
    <ShortDesc>Returns the indicated resource from the specified resource list, if the resource is in the current document.  Otherwise it returns nil.</ShortDesc>
    <Example>hatch := GetResourceFromList(listID, index);[[BR]]if (hatch = NIL) then[[BR]]	hatch := ImportResourceToCurrentFile(listID, index);[[BR]]</Example>
    <ID>2621</ID>
    <IDName>funcGetResourceFromList</IDName>
    <InternalFunctionName>MP_GetResourceFromList</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>listID</Name>
        <Type>longMode</Type>
        <Desc>an ID for a resource list created by the BuildResourceList command.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>longMode</Type>
        <Desc>an index into the list.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DeleteResourceFromList</Name>
    <Version>1200</Version>
    <Category>Document List Handling</Category>
    <Type>Procedure</Type>
    <Description>Deletes the indicated object in the specified resource list.</Description>
    <ShortDesc>Deletes the indicated object in the specified resource list.</ShortDesc>
    <Example>hatchName := GetNameFromResourceList(listID, index);[[BR]]if (pos('P', hatchName) = 1) then[[BR]]	DeleteResourceFromList(listID, index)[[BR]]</Example>
    <ID>2622</ID>
    <IDName>procDeleteResourceFromList</IDName>
    <InternalFunctionName>MP_DeleteResourceFromList</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>listID</Name>
        <Type>longMode</Type>
        <Desc>an ID for a resource list created by the BuildResourceList function.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>longMode</Type>
        <Desc>an index into the list.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ResourceListSize</Name>
    <Version>1200</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Returns the number of items in the specified resource list.</Description>
    <ShortDesc>Returns the number of items in the specified resource list.</ShortDesc>
    <Example>{ Update numItems as the number of items in the resource list has }[[BR]]{ changed. }[[BR]]numItems := ResourceListSize(listID);</Example>
    <ID>2623</ID>
    <IDName>funcResourceListSize</IDName>
    <InternalFunctionName>MP_ResourceListSize</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>listID</Name>
        <Type>longMode</Type>
        <Desc>an ID for a resouce list created by the BuildResourceList function.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNameFromResourceList</Name>
    <ChangedDate>2017:07:05T10:23:00</ChangedDate>
    <Version>1200</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>DYNARRAY[] of CHAR</ReturnType>
    <Description>Returns the name to display of the indicated item in the specified resource list.  If the list has items with the same name from different files, the display name will have the filename added to it in parentheses.</Description>
    <ShortDesc>Returns the display name of the indicated item in the specified resource list which includes the appended file name for resources with the same name. </ShortDesc>
    <SeeAlso>GetActualNameFromResourceList</SeeAlso>
    <Comments>To get the actual name use GetActualNameFromResourceList.</Comments>
    <Example>hatchName := GetNameFromResourceList(listID, index);[[BR]]if (pos('P', hatchName) = 1) then[[BR]]	DeleteResourceFromList(listID, index)[[BR]]</Example>
    <ID>2624</ID>
    <IDName>funcGetNameFromResourceList</IDName>
    <InternalFunctionName>MP_GetNameFromResourceList</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>listID</Name>
        <Type>longMode</Type>
        <Desc>an ID for a resouce list created by the BuildResourceList function.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>longMode</Type>
        <Desc>an index into the list.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertImagePopupResource</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Inserts the indicated item of the specified resource list into the indicated image popup and returns the image popup index of the inserted item.</Description>
    <ShortDesc>Inserts the indicated item of the specified resource list into the indicated image popup and returns the image popup index of the inserted item.</ShortDesc>
    <Example>{ Add all items in the resource list to the image popup. }[[BR]]for index:=1 to numItems do[[BR]]   index := InsertImagePopupResource(dialogID, kImagePopupID, listID,   index);[[BR]]</Example>
    <ID>2625</ID>
    <IDName>funcInsertImagePopupResource</IDName>
    <InternalFunctionName>MP_InsertImagePopupResource</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>index to the dialog layout that contains the image popup component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>index to a specific image popup component.</Desc>
      </Param>
      <Param>
        <Name>listID</Name>
        <Type>longMode</Type>
        <Desc>an ID for a resource list created by the BuildResourceList function.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>longMode</Type>
        <Desc>an index into the list.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ImportResourceToCurrentFile</Name>
    <Version>1200</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Imports the indicated resource from the specified list to the current file, if it is not already in the current file, and returns the handle to the resource.</Description>
    <ShortDesc>Imports the indicated resource from the specified list to the current file, if it is not already in the current file.  It returns the resource.</ShortDesc>
    <Example>hatch := GetResourceFromList(listID, index);[[BR]]if (hatch = NIL) then[[BR]]	hatch := ImportResourceToCurrentFile(listID, index);</Example>
    <ID>2626</ID>
    <IDName>funcImportResourceToCurrentFile</IDName>
    <InternalFunctionName>MP_ImportResourceToCurrentFile</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>listID</Name>
        <Type>longMode</Type>
        <Desc>an ID for a resource list created by the BuildResourceList command.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>longMode</Type>
        <Desc>an index into the list.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DisplayTabPane</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Causes the specified swap pane to be displayed within the specified swap control. [[BR]][[BR]]This is called from the dialog's event handling routine. </Description>
    <ShortDesc>Causes the specified tab pane to be displayed within the specified tab control. </ShortDesc>
    <SeeAlso>CreateSwapControl, CreateSwapPane</SeeAlso>
    <Comments>Note that pane indeces are 1-based in VectorScript, and 0-based in the SDK.  Tab panes are numbered sequentially in the order that they were inserted into the control.</Comments>
    <Example>Procedure DialogProc(VAR item: LONGINT; data: LONGINT);[[BR]]BEGIN[[BR]]	CASE item OF[[BR]]		SetupDialogC:[[BR]]		BEGIN[[BR]]			result := 0;[[BR]]		END;[[BR]][[BR]]		100:	DisplaySwapPane(dlogID, 10, 1);  { Display pane 1 }[[BR]]		101:	DisplaySwapPane(dlogID, 10, 2);  { Display pane 2 }[[BR]]		102:	DisplaySwapPane(dlogID, 10, 3);  { Display pane 3 }[[BR]][[BR]]	END;[[BR]]END;[[BR]]</Example>
    <ID>2627</ID>
    <IDName>procDisplayTabPane</IDName>
    <InternalFunctionName>MP_DisplayTabPane</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>the ID of the dialog</Desc>
      </Param>
      <Param>
        <Name>tabControlID</Name>
        <Type>longMode</Type>
        <Desc>the ID of the swap control</Desc>
      </Param>
      <Param>
        <Name>groupNumber</Name>
        <Type>longMode</Type>
        <Desc>1-based index of the swap pane to be displayed</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetActivePane</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Returns the currently displayed tab or swap pane in the specified tab or swap control. [[BR]][[BR]]This is called from the dialog's event handling routine. </Description>
    <ShortDesc>Returns the currently displayed tab or swap pane in the specified tab or swap control. </ShortDesc>
    <SeeAlso>CreateSwapControl, CreateSwapPane</SeeAlso>
    <Comments>Note that pane indeces are 1-based in VectorScript, and 0-based in the SDK.  Panes are numbered sequentially in the order that they were inserted into the control.  This applies to both tab and swap controls.</Comments>
    <Example>Procedure DialogProc(VAR item: LONGINT; data: LONGINT);[[BR]]BEGIN[[BR]]	CASE item OF[[BR]]		SetupDialogC:[[BR]]		BEGIN[[BR]]			result := 0;[[BR]]		END;[[BR]][[BR]]		100:	DisplaySwapPane(dlogID, 10, 1);  { Display pane 1 }[[BR]]		101:	DisplaySwapPane(dlogID, 10, 2);  { Display pane 2 }[[BR]]		102:	DisplaySwapPane(dlogID, 10, 3);  { Display pane 3 }[[BR]][[BR]]	END;[[BR]]END;[[BR]]</Example>
    <ID>2628</ID>
    <IDName>funcGetActivePane</IDName>
    <InternalFunctionName>MP_GetActivePane</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>the ID of the dialog</Desc>
      </Param>
      <Param>
        <Name>tabControlID</Name>
        <Type>longMode</Type>
        <Desc>the ID of the swap control</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddResourceToList</Name>
    <Version>1200</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Adds the indicated resource to the specified resource list, if it is of the same type as the items already in the list.  Returns the index of the resource in the list or 0.</Description>
    <ShortDesc>Adds the indicated resource to the specified resource list.  Returns the index of the resource in the list.</ShortDesc>
    <Example>{ Create a new hatch and add it to the resource list. }[[BR]]hatchName := 'Hatch-1';[[BR]]BeginVectorFillN(hatchName, true, false, 0);[[BR]]AddVectorFillLayer(0, 0, 1, 1, .25, -.25, .7, 3, 255);[[BR]]EndVectorFill;[[BR]]newHatch := GetObject(hatchName);[[BR]]index := AddResourceToList(listID, newHatch);[[BR]]</Example>
    <ID>2629</ID>
    <IDName>funcAddResourceToList</IDName>
    <InternalFunctionName>MP_AddResourceToList</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>listID</Name>
        <Type>longMode</Type>
        <Desc>an ID for a resource list created by the BuildResourceList command.</Desc>
      </Param>
      <Param>
        <Name>resource</Name>
        <Type>handleMode</Type>
        <Desc>a resource to add to the resource list.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLayerTransparency</Name>
    <Version>1200</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] assigns a transparency percentage value to the active design layer.  If a sheet layer is active, the procedure has no effect.  The transparency value must be between 0.0 and 100.0, inclusive.[[BR]][[BR]]The design layer will only be imaged with transparency on systems which support it, like Quartz on the Mac.  Setting the transparency to a value greater than 0, when the current transfer mode is Copy (i.e. 8, Paint mode), will also automatically change the layer transfer mode to OR (i.e. 9, Overlay).  Similarly, setting the transparency to 0, when the current transfer mode is not set to Copy, will also automatically change the layer transfer mode to Copy.  This is to approximately preserve the appearance of the drawing when imaging on systems that don't support transparency, like Windows.</Description>
    <ShortDesc>Sets the transparency percentage of the active design layer</ShortDesc>
    <SeeAlso>CopyMode</SeeAlso>
    <Comments>Sets the transparency percentage of the active design layer[[BR]]Valid transparency values are between 0.0 and 100.0, inclusive.[[BR]]This procedure may also set the layer transfer mode to approximate the given transparency on systems that don't support transparency.</Comments>
    <ID>2630</ID>
    <IDName>procSetLayerTransparency</IDName>
    <InternalFunctionName>MP_SetLayerTransparency</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>transparency</Name>
        <Type>realMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLineWeightChoice</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Get current choice for a line weight dialog control.  The value is in mils.  </Description>
    <ShortDesc>Get current choice for a line weight dialog control.  The value is in mils.  </ShortDesc>
    <ID>2631</ID>
    <IDName>procGetLineWeightChoice</IDName>
    <InternalFunctionName>MP_GetLineWeightChoice</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>lineWeight</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateLineStylePopup</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Create a dialog control that displays the line style choices available in the active document.  </Description>
    <ShortDesc>Create a dialog control that displays the line style choices available in the active document.  </ShortDesc>
    <Comments>Create a dialog control that displays the line style choices available in the active document.  </Comments>
    <ID>2632</ID>
    <IDName>procCreateLineStylePopup</IDName>
    <InternalFunctionName>MP_CreateLineStylePopup</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLineStyleChoice</Name>
    <ChangedDate>2017:10:26T09:51:00</ChangedDate>
    <Version>1200</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Deprecated - will generate error. Use SetLineTypeChoice instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use SetLineTypeChoice instead.</ShortDesc>
    <SeeAlso>SetLineTypeChoice</SeeAlso>
    <Comments>The linestyle index no longer exists. Line types are used instead. Use SetLineTypeChoice instead. Original description was: Set the current choice of the line style popup dialog control to the specified index. </Comments>
    <ID>2633</ID>
    <IDName>procSetLineStyleChoice</IDName>
    <InternalFunctionName>MP_SetLineStyleChoice</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>lineStyle</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLineStyleChoice</Name>
    <ChangedDate>2017:10:26T09:08:00</ChangedDate>
    <Version>1200</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Deprecated - will generate error. Use GetLineTypeChoice instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use GetLineTypeChoice instead.</ShortDesc>
    <SeeAlso>GetLineTypeChoice</SeeAlso>
    <Comments>Deprecated - will generate error. Use GetLineTypeChoice instead. The linestyle it used to return was a dash list index that no longer exists. Line types are used instead. Original description was: Get current choice of line style popup dialog control.  Choice is an index into list of linestyles available in current document. </Comments>
    <ID>2634</ID>
    <IDName>procGetLineStyleChoice</IDName>
    <InternalFunctionName>MP_GetLineStyleChoice</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>lineStyle</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateLineWeightPopup</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Create a line weight popup dialog control to display list of line weights available in current document.  </Description>
    <ShortDesc>Create a line weight popup dialog control to display list of line weights available in current document.  </ShortDesc>
    <ID>2635</ID>
    <IDName>procCreateLineWeightPopup</IDName>
    <InternalFunctionName>MP_CreateLineWeightPopup</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLineWeightChoice</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Set the current choice of the line weight dialog control to the value specified in mils.</Description>
    <ShortDesc>Set the current choice of the line weight dialog control to the value specified in mils.</ShortDesc>
    <ID>2636</ID>
    <IDName>procSetLineWeightChoice</IDName>
    <InternalFunctionName>MP_SetLineWeightChoice</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>lineWeight</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateLineAttributePopup</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Create a dialog control that displays both line style and line weight choices available in the current document.  </Description>
    <ShortDesc>Create a dialog control that displays both line style and line weight choices available in the current document.  </ShortDesc>
    <ID>2637</ID>
    <IDName>procCreateLineAttributePopup</IDName>
    <InternalFunctionName>MP_CreateLineAttributePopup</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLineAttributeData</Name>
    <ChangedDate>2017:10:26T09:41:00</ChangedDate>
    <Version>1200</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Deprecated - will generate error. Use SetLineTypeAttriData instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use SetLineTypeAttriData instead.</ShortDesc>
    <SeeAlso>SetLineTypeAttriData</SeeAlso>
    <Comments>Deprecated - will generate error. Use SetLineTypeAttriData instead. The linestyle it used to use was a dash list index that no longer exists. Line types are used instead. Original description was: The linestyle it used to use was a dash list index that no longer exists. Line types are used nstead.</Comments>
    <ID>2638</ID>
    <IDName>procSetLineAttributeData</IDName>
    <InternalFunctionName>MP_SetLineAttributeData</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>lineStyle</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>lineWeight</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLineAttributeData</Name>
    <ChangedDate>2017:10:26T09:40:00</ChangedDate>
    <Version>1200</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Deprecated - will generate error. Use GetLineTypeAttriData instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use GetLineTypeAttriData instead.</ShortDesc>
    <SeeAlso>GetLineTypeAttriData</SeeAlso>
    <Comments>Deprecated - will generate error. Use GetLineTypeAttriData instead. The linestyle it used to return was a dash list index that no longer exists. Line types are used instead. Original description was: Get the current choices for the combined line style and line weight dialog control.  The line style value is an index and the line weight value is in mils. [[BR]]</Comments>
    <ID>2639</ID>
    <IDName>procGetLineAttributeData</IDName>
    <InternalFunctionName>MP_GetLineAttributeData</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>lineStyle</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>lineWeight</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreatePatternPopup</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Create a pattern popup dialog control that displays all fill patterns available in current document.</Description>
    <ShortDesc>Create a pattern popup dialog control that displays all fill patterns available in current document.</ShortDesc>
    <ID>2640</ID>
    <IDName>procCreatePatternPopup</IDName>
    <InternalFunctionName>MP_CreatePatternPopup</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetPatternData</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Set current choice and colors for the pattern popup dialog control.  </Description>
    <ShortDesc>Set current choice and colors for the pattern popup dialog control.  </ShortDesc>
    <ID>2641</ID>
    <IDName>procSetPatternData</IDName>
    <InternalFunctionName>MP_SetPatternData</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>patternIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>foreColor</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>backColor</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPatternData</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Get current choice for pattern popup dialog control, and the displayed foreground and background color indexes.</Description>
    <ShortDesc>Get current choice for pattern popup dialog control, and the displayed foreground and background color indexes.</ShortDesc>
    <ID>2642</ID>
    <IDName>procGetPatternData</IDName>
    <InternalFunctionName>MP_GetPatternData</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>patternIndex</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>foreColor</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>backColor</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateColorPopup</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Create a color popup dialog control that displays the 256 color palette associated with the active document.  [[BR]][[BR]]The widthInStdChar argument specifies the width of the control.  Pass -1 to request the default size, which will be consistent with other attribute controls (currently defaults to 14).  This argument allows for special circumstances like a small popup for the Fore and Back color associated with the Pattern attribute control.  </Description>
    <ShortDesc>Create a color popup dialog control that displays the 256 color palette associated with the active document.  </ShortDesc>
    <SeeAlso>GetDlgCtrlWidthStdCh</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   dialog1 :INTEGER;[[BR]]   result  :INTEGER;[[BR]]PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]   CASE item OF[[BR]]      SetupDialogC:[[BR]]         BEGIN[[BR]]            SetColorChoice(dialog1, 4, 1242);[[BR]]         END;[[BR]]      1:[[BR]]         BEGIN[[BR]]            GetColorChoice(dialog1, 4, result);[[BR]]            AlrtDialog(Concat('color index: ', result));[[BR]]         END;[[BR]]   END;[[BR]]END;[[BR]]BEGIN[[BR]]   dialog1 := CreateLayout('Example Dialog', FALSE, 'OK', 'Cancel');[[BR]]   CreateColorPopup(dialog1, 4, 24);[[BR]]   SetFirstLayoutItem(dialog1, 4);[[BR]]   result := RunLayoutDialog(dialog1, Dialog_Handler);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2643</ID>
    <IDName>procCreateColorPopup</IDName>
    <InternalFunctionName>MP_CreateColorPopup</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>longMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetColorChoice</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the choice for the color popup dialog control to the specified color index.  </Description>
    <ShortDesc>Sets the choice for the color popup dialog control to the specified color index.  </ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   dialog1 :INTEGER;[[BR]]   result  :INTEGER;[[BR]]PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]   CASE item OF[[BR]]      SetupDialogC:[[BR]]         BEGIN[[BR]]            SetColorChoice(dialog1, 4, 1242);[[BR]]         END;[[BR]]      1:[[BR]]         BEGIN[[BR]]            GetColorChoice(dialog1, 4, result);[[BR]]            AlrtDialog(Concat('color index: ', result));[[BR]]         END;[[BR]]   END;[[BR]]END;[[BR]]BEGIN[[BR]]   dialog1 := CreateLayout('Example Dialog', FALSE, 'OK', 'Cancel');[[BR]]   CreateColorPopup(dialog1, 4, 24);[[BR]]   SetFirstLayoutItem(dialog1, 4);[[BR]]   result := RunLayoutDialog(dialog1, Dialog_Handler);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2644</ID>
    <IDName>procSetColorChoice</IDName>
    <InternalFunctionName>MP_SetColorChoice</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>colorIndex</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetColorChoice</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Get current choice for color popup dialog control. </Description>
    <ShortDesc>Get current choice for color popup dialog control. </ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   dialog1 :INTEGER;[[BR]]   result  :INTEGER;[[BR]]PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]   CASE item OF[[BR]]      SetupDialogC:[[BR]]         BEGIN[[BR]]            SetColorChoice(dialog1, 4, 1242);[[BR]]         END;[[BR]]      1:[[BR]]         BEGIN[[BR]]            GetColorChoice(dialog1, 4, result);[[BR]]            AlrtDialog(Concat('color index: ', result));[[BR]]         END;[[BR]]   END;[[BR]]END;[[BR]]BEGIN[[BR]]   dialog1 := CreateLayout('Example Dialog', FALSE, 'OK', 'Cancel');[[BR]]   CreateColorPopup(dialog1, 4, 24);[[BR]]   SetFirstLayoutItem(dialog1, 4);[[BR]]   result := RunLayoutDialog(dialog1, Dialog_Handler);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2645</ID>
    <IDName>procGetColorChoice</IDName>
    <InternalFunctionName>MP_GetColorChoice</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>colorIndex</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetMarkerChoice</Name>
    <Version>1200</Version>
    <OldVersion>1300</OldVersion>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>OBSOLETE procedure for VW2008[[BR]][[BR]]Set current choice for Marker popup dialog control.  Index  is the standing position of marker; it is -1 for customized, otherwise 1-based index.[[BR]]Style is the chosen shape of arrow head . Style is zero-based. The angle parameter must be in range 0 to 90 degrees, depending on the style. Size is per Inches.  Style, angle and size may be changed by user in VW preferences.[[BR]]Further, the function can find a specific Index , given the right Style, Angle &amp; Size. In such case index should be set to -1. If the given properties correspond to one of indecies, then -1 is replaced with that specific index.[[BR]]When using pre-defined arrow heads, style &amp; angle &amp; size may be passed zero and just fill in the proper index to set the current.</Description>
    <ShortDesc>Set current choice for Marker popup dialog control - OBSOLETE procedure for VW2008, use SetMarkerValue instead.</ShortDesc>
    <SeeAlso>GetMarkerChoice</SeeAlso>
    <Comments>OBSOLETE procedure for VW2008, use SetMarkerValue instead.[[BR]]Set current choice for Marker popup dialog control. </Comments>
    <Example>PROCEDURE dialog1_Main;[[BR]]VAR[[BR]]	int, dialog1   :INTEGER;[[BR]]	index, style, angle, size :INTEGER;[[BR]][[BR]]PROCEDURE dialog1_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]	CASE item OF[[BR]]		SetupDialogC:[[BR]]			BEGIN[[BR]]				index := 1;[[BR]]				style := 2;[[BR]]				angle := 3;[[BR]]				size  := 4;[[BR]]				SetMarkerChoice(dialog1, 4, index, style, angle, size);[[BR]]			END;[[BR]]		5: [[BR]]			BEGIN[[BR]]				GetMarkerChoice(dialog1, 4, index, style, angle, size);[[BR]]				AlrtDialog(Concat('index: ', index, Chr(13), 'style: ', style, Chr(13), 'angle: ', angle, Chr(13), 'size: ', size));[[BR]]			END;[[BR]]	END;[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]	dialog1 := CreateLayout('Test', False, 'OK', '');[[BR]]	CreateMarkerPopup(dialog1, 4);[[BR]]	CreatePushButton(dialog1, 5, '  Display Values  ');[[BR]]	SetFirstLayoutItem(dialog1, 4);[[BR]]	SetBelowItem(dialog1, 4, 5, 0, 2);[[BR]]	int := RunLayoutDialog(dialog1, dialog1_Handler);[[BR]]END;[[BR]]RUN(dialog1_Main);[[BR]]</Example>
    <ID>2646</ID>
    <IDName>procSetMarkerChoice</IDName>
    <InternalFunctionName>MP_SetMarkerChoice</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>realMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetMarkerChoice</Name>
    <Version>1200</Version>
    <OldVersion>1300</OldVersion>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>OBSOLETE procedure for VW2008[[BR]]Get current choice for Marker popup dialog control. </Description>
    <ShortDesc>Gets Marker Values from Dialog MarkerPopupControl - OBSOLETE procedure for VW2008, use GetMarkerValue</ShortDesc>
    <SeeAlso>SetMarkerChoice</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   int, dialogID   :INTEGER;[[BR]]   index, style, angle :INTEGER;[[BR]]   size :REAL;[[BR]][[BR]]PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]   CASE item OF[[BR]]      SetupDialogC:[[BR]]         BEGIN[[BR]]            index := 1;[[BR]]            style := 2;[[BR]]            angle := 3;[[BR]]            size  := .125;[[BR]]            SetMarkerChoice(dialogID, 4, index, style, angle, size);[[BR]]         END;[[BR]]      5: [[BR]]         BEGIN[[BR]]            GetMarkerChoice(dialogID, 4, index, style, angle, size);[[BR]]            AlrtDialog(Concat([[BR]]	            'index: ', index, Chr(13), [[BR]]	            'style: ', style, Chr(13), [[BR]]	            'angle: ', angle, Chr(13), [[BR]]	            'size: ', size));[[BR]]         END;[[BR]]   END;[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]   dialogID := CreateLayout('Test', False, 'OK', '');[[BR]]   CreateMarkerPopup(dialogID, 4);[[BR]]   CreatePushButton(dialogID, 5, '  Display Values  ');[[BR]]   SetFirstLayoutItem(dialogID, 4);[[BR]]   SetBelowItem(dialogID, 4, 5, 0, 2);[[BR]]   int := RunLayoutDialog(dialogID, Dialog_Handler);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2647</ID>
    <IDName>procGetMarkerChoice</IDName>
    <InternalFunctionName>MP_GetMarkerChoice</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>rVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DisplayLayerScaleDialog</Name>
    <Version>1200</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Brings up the Layer Scale dialog.</Description>
    <ShortDesc>Brings up the Layer Scale dialog.</ShortDesc>
    <Comments>Brings up the Layer Scale dialog.</Comments>
    <ID>2648</ID>
    <IDName>procDisplayLayerScaleDialog</IDName>
    <InternalFunctionName>MP_DisplayLayerScaleDialog</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>DisplayOrganizationDialog</Name>
    <Version>1200</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Displays the organization dialog with the specified integer as the initially slected tab.[[BR]]0: The most recently displayed tab is selected[[BR]]1: The Classes tab is selected .[[BR]]2: The Design Layers tab is selected.[[BR]]3: The Sheet Layers tab is selected.[[BR]]4: The Viewports tab is selected.[[BR]]5: The Saved Views tab is selected.[[BR]]</Description>
    <ShortDesc>Displays the organization dialog with the specified integer as the initially selected tab.</ShortDesc>
    <Comments>Displays the organization dialog</Comments>
    <ID>2649</ID>
    <IDName>procDisplayOrganizationDialog</IDName>
    <InternalFunctionName>MP_DisplayOrganizationDialog</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>tabToSelect</Name>
        <Type>intMode</Type>
        <Desc>The tab to be initially selected.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertNewComponent</Name>
    <ChangedDate>2017:10:26T09:28:00</ChangedDate>
    <Version>1200</Version>
    <OldVersion Mode="AsError">1900</OldVersion>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deprecated - will generate error. Use InsertNewComponentN instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use InsertNewComponentN instead.</ShortDesc>
    <SeeAlso>InsertNewComponentN</SeeAlso>
    <Comments>Deprecated - will generate error. Use InsertNewComponentN instead.[[BR]]The dash style it used no longer exists. Line types are used instead. Original description was: Inserts a new component in an object.</Comments>
    <ID>2650</ID>
    <IDName>funcInsertNewComponent</IDName>
    <InternalFunctionName>MP_InsertNewComponent</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>beforeComponentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index before which to insert the new component.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>distanceMode</Type>
        <Desc>The width of the component.</Desc>
      </Param>
      <Param>
        <Name>fill</Name>
        <Type>longMode</Type>
        <Desc>The fill of the component.  Positive values for patterns, negative ref numbers for hatches.</Desc>
      </Param>
      <Param>
        <Name>leftPenWeight</Name>
        <Type>intMode</Type>
        <Desc>The pen weight of the component's left line.</Desc>
      </Param>
      <Param>
        <Name>rightPenWeight</Name>
        <Type>intMode</Type>
        <Desc>The pen weight of the component's right line.</Desc>
      </Param>
      <Param>
        <Name>leftPenStyle</Name>
        <Type>intMode</Type>
        <Desc>The pen style of the component's left line.  Positive values for patterns, negative values for dash styles.</Desc>
      </Param>
      <Param>
        <Name>rightPenStyle</Name>
        <Type>intMode</Type>
        <Desc>The pen style of the component's right line.  Positive values for patterns, negative values for dash styles.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentWidth</Name>
    <ChangedDate>2015:08:10T05:11:00</ChangedDate>
    <Version>1200</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the width of a component in an object.</Description>
    <ShortDesc>Sets the width of a component in an object.</ShortDesc>
    <SeeAlso>GetComponentWidth</SeeAlso>
    <ID>2651</ID>
    <IDName>funcSetComponentWidth</IDName>
    <InternalFunctionName>MP_SetComponentWidth</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>distanceMode</Type>
        <Desc>The width of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DeleteComponent</Name>
    <ChangedDate>2015:08:10T05:06:00</ChangedDate>
    <Version>1200</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deletes a component in an object.</Description>
    <ShortDesc>Deletes a component in an object.</ShortDesc>
    <SeeAlso>InsertNewComponent</SeeAlso>
    <ID>2652</ID>
    <IDName>funcDeleteComponent</IDName>
    <InternalFunctionName>MP_DeleteComponent</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component to delete.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumberOfComponents</Name>
    <ChangedDate>2015:08:10T05:10:00</ChangedDate>
    <Version>1200</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the number of components in an object.</Description>
    <ShortDesc>Gets the number of components in an object.</ShortDesc>
    <ID>2653</ID>
    <IDName>funcGetNumberOfComponents</IDName>
    <InternalFunctionName>MP_GetNumberOfComponents</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>numComponents</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the number of components.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentFill</Name>
    <ChangedDate>2015:08:10T05:27:00</ChangedDate>
    <Version>1200</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the fill of a component in an object.</Description>
    <ShortDesc>Sets the fill of a component in an object.</ShortDesc>
    <SeeAlso>GetComponentFill</SeeAlso>
    <ID>2654</ID>
    <IDName>funcSetComponentFill</IDName>
    <InternalFunctionName>MP_SetComponentFill</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>fill</Name>
        <Type>longMode</Type>
        <Desc>The fill of the component.  Positive values for patterns, negative object indexes for hatches.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentPenWeights</Name>
    <ChangedDate>2015:08:10T05:27:00</ChangedDate>
    <Version>1200</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the left and right pen weights for a component in an object.</Description>
    <ShortDesc>Sets the left and right pen weights for a component in an object.</ShortDesc>
    <SeeAlso>GetComponentPenWeights</SeeAlso>
    <ID>2655</ID>
    <IDName>funcSetComponentPenWeights</IDName>
    <InternalFunctionName>MP_SetComponentPenWeights</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>leftPenWeight</Name>
        <Type>intMode</Type>
        <Desc>The pen weight of the component's left line.</Desc>
      </Param>
      <Param>
        <Name>rightPenWeight</Name>
        <Type>intMode</Type>
        <Desc>The pen weight of the component's right line.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentPenStyles</Name>
    <ChangedDate>2017:10:26T09:45:00</ChangedDate>
    <Version>1200</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deprecated - will generate error. Use SetCompPenStylesN  instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use SetCompPenStylesN  instead.</ShortDesc>
    <SeeAlso>SetCompPenStylesN</SeeAlso>
    <Comments>Deprecated - will generate error. Use SetCompPenStylesN  instead.The dash style it used no longer exists. Line types are used instead. Original description was: Sets the left and right pen styles for a component in an object.[[BR]]</Comments>
    <ID>2656</ID>
    <IDName>funcSetComponentPenStyles</IDName>
    <InternalFunctionName>MP_SetComponentPenStyles</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>leftPenStyle</Name>
        <Type>intMode</Type>
        <Desc>The pen style of the component's left line.  Positive values for patterns, negative values for dash styles.</Desc>
      </Param>
      <Param>
        <Name>rightPenStyle</Name>
        <Type>intMode</Type>
        <Desc>The pen style of the component's right line.  Positive values for patterns, negative values for dash styles.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentWidth</Name>
    <ChangedDate>2015:08:10T05:11:00</ChangedDate>
    <Version>1200</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the width of a component in an object.</Description>
    <ShortDesc>Gets the width of a component in an object.</ShortDesc>
    <SeeAlso>SetComponentWidth</SeeAlso>
    <ID>2657</ID>
    <IDName>funcGetComponentWidth</IDName>
    <InternalFunctionName>MP_GetComponentWidth</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>rVarMode</Type>
        <Desc>Returns the width of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentFill</Name>
    <ChangedDate>2015:08:10T05:26:00</ChangedDate>
    <Version>1200</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the fill of a component in an object.</Description>
    <ShortDesc>Gets the fill of a component in an object.</ShortDesc>
    <SeeAlso>SetComponentFill</SeeAlso>
    <ID>2658</ID>
    <IDName>funcGetComponentFill</IDName>
    <InternalFunctionName>MP_GetComponentFill</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>fill</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns the fill of the component.  Positive values for patterns, negative ref numbers for hatches.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentPenWeights</Name>
    <ChangedDate>2015:08:10T05:26:00</ChangedDate>
    <Version>1200</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the pen weights of the left and right sides of a component in an object.</Description>
    <ShortDesc>Gets the pen weights of the left and right sides of a component in an object.</ShortDesc>
    <SeeAlso>SetComponentPenWeights</SeeAlso>
    <ID>2659</ID>
    <IDName>funcGetComponentPenWeights</IDName>
    <InternalFunctionName>MP_GetComponentPenWeights</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>leftPenWeight</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the pen weight of the component's left line.</Desc>
      </Param>
      <Param>
        <Name>rightPenWeight</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the pen weight of the component's right line.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentPenStyles</Name>
    <ChangedDate>2017:10:26T09:26:00</ChangedDate>
    <Version>1200</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deprecated - will generate error. Use GetCompPenStylesN instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use GetCompPenStylesN instead.</ShortDesc>
    <SeeAlso>GetCompPenStylesN</SeeAlso>
    <Comments>Deprecated - will generate error. Use GetCompPenStylesN instead.The dash style it used no longer exists. Line types are used instead. Original description was: Gets the left and right side pen styles of a component in an object</Comments>
    <ID>2660</ID>
    <IDName>funcGetComponentPenStyles</IDName>
    <InternalFunctionName>MP_GetComponentPenStyles</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>leftPenStyle</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the pen style of the component's left line.  Positive values for patterns, negative values for dash styles.</Desc>
      </Param>
      <Param>
        <Name>rightPenStyle</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the pen style of the component's right line.  Positive values for patterns, negative values for dash styles.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWallPrefStyle</Name>
    <Version>1200</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Set the document default wall preferences to match the Wall Style identified by sysName.</Description>
    <ShortDesc>Set the document default wall preferences to match the Wall Style identified by sysName</ShortDesc>
    <Comments>NZH 5-10-05</Comments>
    <ID>2661</ID>
    <IDName>funcSetWallPrefStyle</IDName>
    <InternalFunctionName>MP_SetWallPrefStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>sysName</Name>
        <Type>stringMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWallThickness</Name>
    <Version>1200</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the thickness of an unstyled wall without components. Will return false for a styled wall or a wall with components. To change the thickness of a wall with components, add, remove or resize components with InsertNewComponent, DeleteComponent, and SetComponent Width</Description>
    <ShortDesc>Set wall thickness.</ShortDesc>
    <Comments>NZH 5-10-05</Comments>
    <ID>2662</ID>
    <IDName>funcSetWallThickness</IDName>
    <InternalFunctionName>MP_SetWallThickness</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>thicknessDistance</Name>
        <Type>distanceMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWallThickness</Name>
    <Version>1200</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the thickness of a wall</Description>
    <ShortDesc>Gets the thickness of a wall</ShortDesc>
    <ID>2663</ID>
    <IDName>funcGetWallThickness</IDName>
    <InternalFunctionName>MP_GetWallThickness</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>thicknessDist</Name>
        <Type>rVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWallHeights</Name>
    <ChangedDate>2011:03:28T12:08:00</ChangedDate>
    <Version>1200</Version>
    <OldVersion Mode="AsWarning">1700</OldVersion>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the wall heights of an unstyled wall. Will return false for a styled wall.</Description>
    <ShortDesc>Sets the wall heights of an unstyled wall. Will return false for a styled wall.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	h :HANDLE;[[BR]]	boo :BOOLEAN;[[BR]]BEGIN[[BR]]	CallTool(-208);[[BR]]	h := FSActLayer;[[BR]]	boo := SetWallHeights(h, 12, 23);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2664</ID>
    <IDName>funcSetWallHeights</IDName>
    <InternalFunctionName>MP_SetWallHeights</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>startHtDistance</Name>
        <Type>distanceMode</Type>
      </Param>
      <Param>
        <Name>endHtDistance</Name>
        <Type>distanceMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWallPrefStyle</Name>
    <Version>1200</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Gets the name of the current document default wall style</Description>
    <ShortDesc>Gets the name of the current document default wall style</ShortDesc>
    <Comments>Gets the name of the current document default wall style</Comments>
    <ID>2665</ID>
    <IDName>funcGetWallPrefStyle</IDName>
    <InternalFunctionName>MP_GetWallPrefStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>GetWallStyle</Name>
    <Version>1200</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Gets the name of the Wall Style for theWall.</Description>
    <ShortDesc>Gets the name of the Wall Style for theWall.</ShortDesc>
    <SeeAlso>SetWallStyle</SeeAlso>
    <Comments>Gets the name of the Wall Style for theWall</Comments>
    <ID>2666</ID>
    <IDName>funcGetWallStyle</IDName>
    <InternalFunctionName>MP_GetWallStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theWall</Name>
        <Type>handleMode</Type>
        <Desc>The wall.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCustomObjectCntrlPtVis</Name>
    <Version>1200</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the control point of objectHand specified by the one-based index controlPtIndex to the visibility specified by setVisible.</Description>
    <ShortDesc>Sets the control point of objectHand specified by the one-based index controlPtIndex to the visibility specified by setVisible.</ShortDesc>
    <ID>2667</ID>
    <IDName>funcSetCustomObjectCntrlPtVis</IDName>
    <InternalFunctionName>MP_SetCustomObjectCntrlPtVis</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>SetWSRowHeight</Name>
    <Version>1200</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the height of a row in the referenced worksheet.[[BR]][[BR]][[name]] allows height to be set for a range of rows. To set the height of a single worksheet row, specify identical values for the top/bottom row range boundaries.[[BR]][[BR]][[name]] also allows the lock state of a row to be set. Set 'TRUE' to lock or 'FALSE' to unlock the row height. If the height is locked, the row will not automatically resize to fit the contents of the cells when text is entered.[[BR]][[BR]]If the "updatePalette'" parameter is set to FALSE, the applied changes will not automatically be updated in the worksheet palette.</Description>
    <ShortDesc>Sets the specified height for the specified worksheet rows.</ShortDesc>
    <Comments>Note:[[BR]]updatePalette - input - specifies whether or not to update the worksheet palette[[BR]]lockHeight  - input - specifies whether or not to lock the height for the specified rows.[[BR]]		  If 'true' the height will be locked and the row will not automatically be resized when text is entered in a cell.</Comments>
    <Example>{Sets and locks the height of all rows from row 3 to row 9 to 22 pixels and update the changes in the worksheet palette }[[BR]]SetWSRowHeight(sheet,3,9,22,TRUE,TRUE);</Example>
    <ID>2668</ID>
    <IDName>procSetWSRowHeight</IDName>
    <InternalFunctionName>MP_SetWSRowHeight</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet</Desc>
      </Param>
      <Param>
        <Name>fromRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of row range</Desc>
      </Param>
      <Param>
        <Name>toRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of row range</Desc>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>intMode</Type>
        <Desc>Row height to be set (in pixels)</Desc>
      </Param>
      <Param>
        <Name>updatePalette</Name>
        <Type>boolMode</Type>
        <Desc>Worksheet palette update flag</Desc>
      </Param>
      <Param>
        <Name>lockHeight</Name>
        <Type>boolMode</Type>
        <Desc>Row height lock state to be set</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSRowHLockState</Name>
    <Version>1200</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the lock state of a row in the referenced worksheet[[BR]][[BR]]Note: If a row height is locked, the row will not automatically resize to fit the contents of the cells when text is entered.</Description>
    <ShortDesc>Returns the lock state of a row in the referenced worksheet</ShortDesc>
    <Example>{Gets the lock state of the fifth row in the specified worksheet}[[BR]]GetWSRowHLockState(sheet,5,lockstate);</Example>
    <ID>2669</ID>
    <IDName>procGetWSRowHLockState</IDName>
    <InternalFunctionName>MP_GetWSRowHLockState</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Worksheet row index</Desc>
      </Param>
      <Param>
        <Name>lockState</Name>
        <Type>boolVarMode</Type>
        <Desc>Row Height lock state ( returns TRUE is row height is locked ; FALSE otherwise)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AutoFitWSRowHeights</Name>
    <Version>1200</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Auto fit the height of rows to the content of the cells in the referenced worksheet.[[BR]][[BR]][[name]] allows height for a range of rows to be auto fitted to the contents of cells. To auto fit the height of a single worksheet row, specify identical values for the top/bottom row range boundaries.</Description>
    <ShortDesc>Auto fit the height of rows to the content of the cells in the referenced worksheet</ShortDesc>
    <Example>{Auto resizes the height of all rows from row 1 to row 4} [[BR]]AutoFitWSRowHeights(sheet,1,4};</Example>
    <ID>2670</ID>
    <IDName>procAutoFitWSRowHeights</IDName>
    <InternalFunctionName>MP_AutoFitWSRowHeights</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet</Desc>
      </Param>
      <Param>
        <Name>fromRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of row range</Desc>
      </Param>
      <Param>
        <Name>toRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of row range</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellVertAlignment</Name>
    <Version>1200</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the vertical alignment of cells in the referenced worksheet.[[BR]][[BR]][[name]] allows a vertical alignment to be set for a range of cells. To set the vertical alignment of a single cell, specify identical values for the top/bottom and left/right range boundaries.[[BR]][[BR]]Note:[[BR]]Vertical alignment constants:[[BR]]top = 1[[BR]]center  = 3[[BR]]bottom = 5</Description>
    <ShortDesc>Sets the vertical alignment of cells in the referenced worksheet.</ShortDesc>
    <Comments>Vertical alignment constants:[[BR]]top = 1[[BR]]center  = 3[[BR]]bottom = 5</Comments>
    <ID>2671</ID>
    <IDName>procSetWSCellVertAlignment</IDName>
    <InternalFunctionName>MP_SetWSCellVertAlignment</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of cell range</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of cell range</Desc>
      </Param>
      <Param>
        <Name>vAlignment</Name>
        <Type>intMode</Type>
        <Desc>Vertical alignment index value to be set</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSCellVertAlignment</Name>
    <Version>1200</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the vertical alignment setting of a cell in the referenced worksheet.</Description>
    <ShortDesc>Returns the vertical alignment setting of a cell in the referenced worksheet.</ShortDesc>
    <Comments>Vertical alignment constants:[[BR]]top = 1[[BR]]center  = 3[[BR]]bottom = 5</Comments>
    <ID>2672</ID>
    <IDName>procGetWSCellVertAlignment</IDName>
    <InternalFunctionName>MP_GetWSCellVertAlignment</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row index of cell to be queried</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column index of cell to be queried</Desc>
      </Param>
      <Param>
        <Name>vAlignment</Name>
        <Type>intVarMode</Type>
        <Desc>Vertical alignment index of cell.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellWrapTextFlag</Name>
    <Version>1200</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the wrap text state of cells in the referenced worksheet.[[BR]][[BR]][[name]] allows wrap text to be set for a range of cells. To set wrap text in a single cell, specify identical values for the top/bottom and left/right range boundaries.[[BR]]If the wrap text flag is "TRUE" in a cell, text will wrap at the cell border</Description>
    <ShortDesc>Sets the wrap text state of cells in the referenced worksheet.</ShortDesc>
    <ID>2673</ID>
    <IDName>procSetWSCellWrapTextFlag</IDName>
    <InternalFunctionName>MP_SetWSCellWrapTextFlag</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of cell range</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of cell range</Desc>
      </Param>
      <Param>
        <Name>wrapTextFlag</Name>
        <Type>boolMode</Type>
        <Desc>Wrap text flag to be set</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSCellWrapTextFlag</Name>
    <Version>1200</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the wrap text state of a cell in the referenced worksheet.</Description>
    <ShortDesc>Returns the wrap text state of a cell in the referenced worksheet.</ShortDesc>
    <ID>2674</ID>
    <IDName>procGetWSCellWrapTextFlag</IDName>
    <InternalFunctionName>MP_GetWSCellWrapTextFlag</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row of cell to be queried</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Row of cell to be queried</Desc>
      </Param>
      <Param>
        <Name>wrapTextFlag</Name>
        <Type>boolVarMode</Type>
        <Desc>Wrap text flag</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSTextAngle</Name>
    <Version>1200</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the text angle of a cell the referenced worksheet.[[BR]][[BR]][[name]] allows text angle to be set for a range of cells. To set the text angle for a single cell, specify identical values for the top/bottom and left/right range boundaries.[[BR]][[BR]]Note:[[BR]]VW12 supports only horizontal text (0 degree) and vertical text (90 degrees). </Description>
    <ShortDesc>Sets the specified text angle for the specified worksheet cells.</ShortDesc>
    <Comments>Note:[[BR]]VW12 supports only horizontal text (0 degree) and vertical text (90 degrees). So, the input of any angle different from 0 will be handled as 90 degrees in VW12.</Comments>
    <ID>2675</ID>
    <IDName>procSetWSTextAngle</IDName>
    <InternalFunctionName>MP_SetWSTextAngle</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of cell range</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of cell range</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intMode</Type>
        <Desc>New text angle (0 or 90 degrees)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSCellTextAngle</Name>
    <Version>1200</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the text angle of a cell in the referenced worksheet</Description>
    <ShortDesc>Returns the text angle of a cell in the referenced worksheet</ShortDesc>
    <ID>2676</ID>
    <IDName>procGetWSCellTextAngle</IDName>
    <InternalFunctionName>MP_GetWSCellTextAngle</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row of cell to be queried</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column of cell to be queried</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intVarMode</Type>
        <Desc>Text angle</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellTextColor</Name>
    <Version>1200</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the text color of a cell in the referenced worksheet[[BR]][[BR]][[name]] allows text color to be set for a range of cells. To set the text color for a single cell, specify identical values for the top/bottom and left/right range boundaries.</Description>
    <ShortDesc>Sets the specified text color for the specified worksheet cells</ShortDesc>
    <ID>2677</ID>
    <IDName>procSetWSCellTextColor</IDName>
    <InternalFunctionName>MP_SetWSCellTextColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of cell range</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of cell range</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>longMode</Type>
        <Desc>Text color index value to be set</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSCellTextColor</Name>
    <Version>1200</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the text color of a cell in the referenced worksheet</Description>
    <ShortDesc>Returns the text color of a cell in the referenced worksheet</ShortDesc>
    <ID>2678</ID>
    <IDName>procGetWSCellTextColor</IDName>
    <InternalFunctionName>MP_GetWSCellTextColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row of cell to be queried</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column of cell to be queried</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>lngVarMode</Type>
        <Desc>Text color index value</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellFill</Name>
    <Version>1200</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the fill style and color of a cell in the referenced worksheet[[BR]][[BR]][[name]] allows cell fill style and color text to be set for a range of cells. To set fill style and color for a single cell, specify identical values for the top/bottom and left/right range boundaries.</Description>
    <ShortDesc>Sets the specified fill style and color for the specified worksheet cells</ShortDesc>
    <Comments>bgcolor - cell background color  (0 if none)[[BR]]fgcolor	- cell foreground color   (0 if none)[[BR]]fillpattern - cell fill pattern index  (-1 if none)[[BR]][[BR]]Fill style constants:[[BR]]no fill = 0[[BR]]solid fill= 1[[BR]]pattern fill= 2[[BR]][[BR]]</Comments>
    <ID>2679</ID>
    <IDName>procSetWSCellFill</IDName>
    <InternalFunctionName>MP_SetWSCellFill</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of cell range</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of cell range</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
        <Desc>Cell fill style to be set</Desc>
      </Param>
      <Param>
        <Name>bgcolor</Name>
        <Type>longMode</Type>
        <Desc>Cell background color index value to be set</Desc>
      </Param>
      <Param>
        <Name>fgcolor</Name>
        <Type>longMode</Type>
        <Desc>Cell foreground color index value to be set</Desc>
      </Param>
      <Param>
        <Name>fillpattern</Name>
        <Type>intMode</Type>
        <Desc>Cell pattern index value to be set</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSCellFill</Name>
    <Version>1200</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the fill style and color of a cell in the referenced worksheet</Description>
    <ShortDesc>Returns the fill style and color of a cell in the referenced worksheet</ShortDesc>
    <Comments>bgcolor - cell background color  (0 if none)[[BR]]fgcolor	- cell foreground color   (0 if none)[[BR]]fillpattern - cell fill pattern index  (-1 if none)[[BR]][[BR]]Fill style constants:[[BR]]no fill = 0[[BR]]solid fill= 1[[BR]]pattern fill= 2</Comments>
    <ID>2680</ID>
    <IDName>procGetWSCellFill</IDName>
    <InternalFunctionName>MP_GetWSCellFill</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row of cell to be queried</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column of cell to be queried</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intVarMode</Type>
        <Desc>Cell fill style constant</Desc>
      </Param>
      <Param>
        <Name>bgcolor</Name>
        <Type>lngVarMode</Type>
        <Desc>Cell background color index</Desc>
      </Param>
      <Param>
        <Name>fgcolor</Name>
        <Type>lngVarMode</Type>
        <Desc>Cell foreground color index</Desc>
      </Param>
      <Param>
        <Name>fillpattern</Name>
        <Type>intVarMode</Type>
        <Desc>Cell pattern index</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellBorders</Name>
    <Version>1200</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the borders of cells in the referenced worksheet[[BR]][[BR]][[name]] allows borders to be set for a rectangular range of cells. To set the border formatting of a single cell, specify identical values for the top/bottom and left/right range boundaries.[[BR]][[BR]]Note:[[BR]]A rectangular range of cells is formatted as a single block of cells. If you apply a right border to the range of cells, the border is displayed only on the right edge of the cells. [[BR]][[BR]]The borders will be created with default values ( solid style, black color, standard weight).</Description>
    <ShortDesc>Sets the borders of cells in the referenced worksheet.</ShortDesc>
    <SeeAlso>SetWSCellOutlineBorder, SetWSCellInsideVertBorder, SetWSCellInsideHorizBorder, SetWSCellTopBorder, SetWSCellLeftBorder, SetWSCellBottomBorder, SetWSCellRightBorder</SeeAlso>
    <Comments>OulineInside defines the ouline, inside horizontal amd inside vertical borders.[[BR]]Available constants:[[BR]]0 : outline = false, inside horizontal = false,  inside vertical = false[[BR]]1 : outline = true, inside horizontal = false,  inside vertical = false[[BR]]2 : outline = false, inside horizontal = true,  inside vertical = false[[BR]]3 : outline = true, inside horizontal = true,  inside vertical = false[[BR]]4 : outline = false, inside horizontal = false,  inside vertical = true[[BR]]5 : outline = true, inside horizontal = false,  inside vertical = true[[BR]]6 : outline = false, inside horizontal = true,  inside vertical = true[[BR]]7 : outline = true, inside horizontal = true,  inside vertical = true</Comments>
    <Example>{ Sets the inside horizontal and vertical borders for the specified rectangular range of cells}[[BR]][[name]](sheet,2,4,1,5,FALSE,FALSE,FALSE,FALSE,6);[[BR]][[BR]]{ Sets an outline border for the specified rectangular range of cells}[[BR]][[name]](sheet,2,4,1,5,FALSE,FALSE,FALSE,FALSE,1);[[BR]]{or}[[BR]][[name]](sheet,2,4,1,5,TRUE,TRUE,TRUE,TRUE,0);</Example>
    <ID>2681</ID>
    <IDName>procSetWSCellBorders</IDName>
    <InternalFunctionName>MP_SetWSCellBorders</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of cell range</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of cell range</Desc>
      </Param>
      <Param>
        <Name>top</Name>
        <Type>boolMode</Type>
        <Desc>Top border ON-OFF status</Desc>
      </Param>
      <Param>
        <Name>left</Name>
        <Type>boolMode</Type>
        <Desc>Left border ON-OFF status</Desc>
      </Param>
      <Param>
        <Name>bottom</Name>
        <Type>boolMode</Type>
        <Desc>Bottom border ON-OFF status</Desc>
      </Param>
      <Param>
        <Name>right</Name>
        <Type>boolMode</Type>
        <Desc>Right border ON-OFF status</Desc>
      </Param>
      <Param>
        <Name>OutlineInside</Name>
        <Type>intMode</Type>
        <Desc>Outline and Inside borders constant</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBColumnSortState</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the column sort state.</Description>
    <ShortDesc>Gets the column sort state.</ShortDesc>
    <ID>2682</ID>
    <IDName>funcGetLBColumnSortState</IDName>
    <InternalFunctionName>MP_GetLBColumnSortState</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBSortColumn</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>Sets the specified column as the sort column in the specified list browser control.</Description>
    <ShortDesc>Sets the specified column as the sort column in the specified list browser control.</ShortDesc>
    <ID>2683</ID>
    <IDName>procSetLBSortColumn</IDName>
    <InternalFunctionName>MP_SetLBSortColumn</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>isAscending</Name>
        <Type>boolMode</Type>
        <Desc>determines if the sort should be ascending or descending</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBSortColumn</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the index of the sort column in the specified list browser control.</Description>
    <ShortDesc>Gets the index of the sort column in the specified list browser control.</ShortDesc>
    <ID>2684</ID>
    <IDName>funcGetLBSortColumn</IDName>
    <InternalFunctionName>MP_GetLBSortColumn</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBItemTextJust</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the text alignment for the specified list browser item.</Description>
    <ShortDesc>Sets the text alignment for the specified list browser item.</ShortDesc>
    <ID>2685</ID>
    <IDName>funcSetLBItemTextJust</IDName>
    <InternalFunctionName>MP_SetLBItemTextJust</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>justification</Name>
        <Type>intMode</Type>
        <Desc>Left - 1[[BR]]Center - 2[[BR]]Right - 3</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBItemTextStyle</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the text style for the specified list browser item.</Description>
    <ShortDesc>Sets the text style for the specified list browser item.</ShortDesc>
    <ID>2686</ID>
    <IDName>funcSetLBItemTextStyle</IDName>
    <InternalFunctionName>MP_SetLBItemTextStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>textStyle</Name>
        <Type>intMode</Type>
        <Desc>Plain - 0[[BR]]Bold - 1[[BR]]Italic - 2[[BR]]Underline - 4[[BR]]Outline - 16 (Mac only)[[BR]]Shadow - 32 (Mac only)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBItemTextColor</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the text color for the specified list browser item.</Description>
    <ShortDesc>Sets the text color for the specified list browser item.</ShortDesc>
    <ID>2687</ID>
    <IDName>funcSetLBItemTextColor</IDName>
    <InternalFunctionName>MP_SetLBItemTextColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>redIndex</Name>
        <Type>intMode</Type>
        <Desc>the red component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>greenIndex</Name>
        <Type>intMode</Type>
        <Desc>the green component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>blueIndex</Name>
        <Type>intMode</Type>
        <Desc>the blue component (0 - 255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBItemTextJust</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the text alignment for the specified list browser item.</Description>
    <ShortDesc>Gets the text alignment for the specified list browser item.</ShortDesc>
    <ID>2688</ID>
    <IDName>funcGetLBItemTextJust</IDName>
    <InternalFunctionName>MP_GetLBItemTextJust</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>justification</Name>
        <Type>intVarMode</Type>
        <Desc>Left - 1[[BR]]Center - 2[[BR]]Right - 3</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBItemTextStyle</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the text style for the specified list browser item.</Description>
    <ShortDesc>Gets the text style for the specified list browser item.</ShortDesc>
    <ID>2689</ID>
    <IDName>funcGetLBItemTextStyle</IDName>
    <InternalFunctionName>MP_GetLBItemTextStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>textStyle</Name>
        <Type>intVarMode</Type>
        <Desc>Plain - 0[[BR]]Bold - 1[[BR]]Italic - 2[[BR]]Underline - 4[[BR]]Outline - 16 (Mac only)[[BR]]Shadow - 32 (Mac only)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBItemTextColor</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the text color for the specified list browser item.</Description>
    <ShortDesc>Gets the text color for the specified list browser item.</ShortDesc>
    <ID>2690</ID>
    <IDName>funcGetLBItemTextColor</IDName>
    <InternalFunctionName>MP_GetLBItemTextColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>redIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the red component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>greenIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the green component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>blueIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the blue component (0 - 255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBColumnOwnerDrawnType</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the list browser column's owner drawn type.</Description>
    <ShortDesc>Sets the list browser column's owner drawn type.</ShortDesc>
    <ID>2691</ID>
    <IDName>funcSetLBColumnOwnerDrawnType</IDName>
    <InternalFunctionName>MP_SetLBColumnOwnerDrawnType</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>ownerDrawnType</Name>
        <Type>intMode</Type>
        <Desc>None - 0[[BR]]Solid rect - 1[[BR]]Dual solid rect - 2[[BR]]Pattern rect - 3[[BR]]Dual pattern rect - 4[[BR]]Gradient or image - 5[[BR]]Blank - 6[[BR]]Text - 7[[BR]]Dashed line - 8</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBColumnOwnerDrawnType</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the list browser column's owner drawn type.</Description>
    <ShortDesc>Gets the list browser column's owner drawn type.</ShortDesc>
    <ID>2692</ID>
    <IDName>funcGetLBColumnOwnerDrawnType</IDName>
    <InternalFunctionName>MP_GetLBColumnOwnerDrawnType</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>ownerDrawnType</Name>
        <Type>intVarMode</Type>
        <Desc>None - 0[[BR]]Solid rect - 1[[BR]]Dual solid rect - 2[[BR]]Pattern rect - 3[[BR]]Dual pattern rect - 4[[BR]]Gradient or image - 5[[BR]]Blank - 6[[BR]]Text - 7[[BR]]Dashed line - 8</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBItemFillForeColor</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the specified list browser item's fill foreground color.</Description>
    <ShortDesc>Sets the specified list browser item's fill foreground color.</ShortDesc>
    <ID>2693</ID>
    <IDName>funcSetLBItemFillForeColor</IDName>
    <InternalFunctionName>MP_SetLBItemFillForeColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>redIndex</Name>
        <Type>intMode</Type>
        <Desc>the red component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>greenIndex</Name>
        <Type>intMode</Type>
        <Desc>the green component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>blueIndex</Name>
        <Type>intMode</Type>
        <Desc>the blue component (0 - 255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBItemFillForeColor</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the specified list browser item's fill foreground color.</Description>
    <ShortDesc>Gets the specified list browser item's fill foreground color.</ShortDesc>
    <ID>2694</ID>
    <IDName>funcGetLBItemFillForeColor</IDName>
    <InternalFunctionName>MP_GetLBItemFillForeColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>redIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the red component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>greenIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the green component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>blueIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the blue component (0 - 255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBItemFillBackColor</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the specified list browser item's fill background color.</Description>
    <ShortDesc>Sets the specified list browser item's fill background color.</ShortDesc>
    <ID>2695</ID>
    <IDName>funcSetLBItemFillBackColor</IDName>
    <InternalFunctionName>MP_SetLBItemFillBackColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>redIndex</Name>
        <Type>intMode</Type>
        <Desc>the red component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>greenIndex</Name>
        <Type>intMode</Type>
        <Desc>the green component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>blueIndex</Name>
        <Type>intMode</Type>
        <Desc>the blue component (0 - 255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBItemFillBackColor</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the specified list browser item's fill background color.</Description>
    <ShortDesc>Gets the specified list browser item's fill background color.</ShortDesc>
    <ID>2696</ID>
    <IDName>funcGetLBItemFillBackColor</IDName>
    <InternalFunctionName>MP_GetLBItemFillBackColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>redIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the red component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>greenIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the green component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>blueIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the blue component (0 - 255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBItemPenForeColor</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the specified list browser item's pen foreground color.</Description>
    <ShortDesc>Sets the specified list browser item's pen foreground color.</ShortDesc>
    <ID>2697</ID>
    <IDName>funcSetLBItemPenForeColor</IDName>
    <InternalFunctionName>MP_SetLBItemPenForeColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>redIndex</Name>
        <Type>intMode</Type>
        <Desc>the red component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>greenIndex</Name>
        <Type>intMode</Type>
        <Desc>the green component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>blueIndex</Name>
        <Type>intMode</Type>
        <Desc>the blue component (0 - 255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBItemPenForeColor</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the specified list browser item's pen foreground color.</Description>
    <ShortDesc>Gets the specified list browser item's pen foreground color.</ShortDesc>
    <ID>2698</ID>
    <IDName>funcGetLBItemPenForeColor</IDName>
    <InternalFunctionName>MP_GetLBItemPenForeColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>redIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the red component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>greenIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the green component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>blueIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the blue component (0 - 255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBItemPenBackColor</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the specified list browser item's pen background color.</Description>
    <ShortDesc>Sets the specified list browser item's pen background color.</ShortDesc>
    <ID>2699</ID>
    <IDName>funcSetLBItemPenBackColor</IDName>
    <InternalFunctionName>MP_SetLBItemPenBackColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>redIndex</Name>
        <Type>intMode</Type>
        <Desc>the red component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>greenIndex</Name>
        <Type>intMode</Type>
        <Desc>the green component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>blueIndex</Name>
        <Type>intMode</Type>
        <Desc>the blue component (0 - 255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBItemPenBackColor</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the specified list browser item's pen background color.</Description>
    <ShortDesc>Gets the specified list browser item's pen background color.</ShortDesc>
    <ID>2700</ID>
    <IDName>funcGetLBItemPenBackColor</IDName>
    <InternalFunctionName>MP_GetLBItemPenBackColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>redIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the red component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>greenIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the green component (0 - 255)</Desc>
      </Param>
      <Param>
        <Name>blueIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the blue component (0 - 255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBItemGradientOrImageRefNumber</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the specified list browser item's gradient or image.</Description>
    <ShortDesc>Sets the specified list browser item's gradient or image.</ShortDesc>
    <ID>2701</ID>
    <IDName>funcSetLBItemGradientOrImageRefNumber</IDName>
    <InternalFunctionName>MP_SetLBItemGradientOrImageRefNumber</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>refNumber</Name>
        <Type>longMode</Type>
        <Desc>the gradient or image's ref number</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBItemGradientOrImageRefNumber</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the specified list browser item's gradient or image.</Description>
    <ShortDesc>Gets the specified list browser item's gradient or image.</ShortDesc>
    <ID>2702</ID>
    <IDName>funcGetLBItemGradientOrImageRefNumber</IDName>
    <InternalFunctionName>MP_GetLBItemGradientOrImageRefNumber</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>refNumber</Name>
        <Type>lngVarMode</Type>
        <Desc>the gradient or image's ref number</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBItemDashStyle</Name>
    <ChangedDate>2017:10:26T09:11:00</ChangedDate>
    <Version>1200</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deprecated - will generate error. Use SetLBItemLineType instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use SetLBItemLineType instead.</ShortDesc>
    <SeeAlso>SetLBItemLineType</SeeAlso>
    <Comments>Deprecated - will generate error. Use SetLBItemLineType instead. The style index it used no longer exists. Line types are used instead. Original description was: Sets the specified list browser item's dash style.</Comments>
    <ID>2703</ID>
    <IDName>funcSetLBItemDashStyle</IDName>
    <InternalFunctionName>MP_SetLBItemDashStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>styleIndex</Name>
        <Type>intMode</Type>
        <Desc>the dash line's style index</Desc>
      </Param>
      <Param>
        <Name>lineWeight</Name>
        <Type>intMode</Type>
        <Desc>the dash line's line weight</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBItemDashStyle</Name>
    <ChangedDate>2017:10:26T09:10:00</ChangedDate>
    <Version>1200</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deprecated - will generate error. Use GetLBItemLineType instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use GetLBItemLineType instead.</ShortDesc>
    <SeeAlso>GetLBItemLineType</SeeAlso>
    <Comments>Deprecated - will generate error. Use GetLBItemLineType instead. The style index it used no longer exists. Line types are used instead. Original description was: Gets the specified list browser item's dash style.</Comments>
    <ID>2704</ID>
    <IDName>funcGetLBItemDashStyle</IDName>
    <InternalFunctionName>MP_GetLBItemDashStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>styleIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the dash line's style index</Desc>
      </Param>
      <Param>
        <Name>lineWeight</Name>
        <Type>intVarMode</Type>
        <Desc>the dash line's line weight</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBColumnHeaderToolTip</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the list browser column header's tooltip text.</Description>
    <ShortDesc>Sets the list browser column header's tooltip text.</ShortDesc>
    <ID>2705</ID>
    <IDName>funcSetLBColumnHeaderToolTip</IDName>
    <InternalFunctionName>MP_SetLBColumnHeaderToolTip</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>toolTipPrimaryText</Name>
        <Type>stringMode</Type>
        <Desc>the primary tooltip text</Desc>
      </Param>
      <Param>
        <Name>toolTipSubText</Name>
        <Type>stringMode</Type>
        <Desc>the sub tooltip text displayed when the user the command (Mac) or shift (Win) button</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBColumnHeaderToolTip</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the list browser column header's tooltip text.</Description>
    <ShortDesc>Gets the list browser column header's tooltip text.</ShortDesc>
    <ID>2706</ID>
    <IDName>funcGetLBColumnHeaderToolTip</IDName>
    <InternalFunctionName>MP_GetLBColumnHeaderToolTip</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>toolTipPrimaryText</Name>
        <Type>strVarMode</Type>
        <Desc>the primary tooltip text</Desc>
      </Param>
      <Param>
        <Name>toolTipSubText</Name>
        <Type>strVarMode</Type>
        <Desc>the sub tooltip text displayed when the user the command (Mac) or shift (Win) button</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBColumnHeaderJust</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the specified column header's justification.</Description>
    <ShortDesc>Sets the specified column header's justification.</ShortDesc>
    <ID>2707</ID>
    <IDName>funcSetLBColumnHeaderJust</IDName>
    <InternalFunctionName>MP_SetLBColumnHeaderJust</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>justification</Name>
        <Type>intMode</Type>
        <Desc>Left - 1[[BR]]Center - 2[[BR]]Right - 3</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBColumnHeaderJust</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Retrieves the specified column header's justification.</Description>
    <ShortDesc>Retrieves the specified column header's justification.</ShortDesc>
    <ID>2708</ID>
    <IDName>funcGetLBColumnHeaderJust</IDName>
    <InternalFunctionName>MP_GetLBColumnHeaderJust</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>justification</Name>
        <Type>intVarMode</Type>
        <Desc>Left - 1[[BR]]Center - 2[[BR]]Right - 3</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RefreshLB</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Refreshes the contents of the specified list browser.</Description>
    <ShortDesc>Refreshes the contents of the specified list browser.</ShortDesc>
    <ID>2709</ID>
    <IDName>funcRefreshLB</IDName>
    <InternalFunctionName>MP_RefreshLB</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnsureLBItemIsVisible</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Ensures the element at the given row index is visible in the specified list browser.</Description>
    <ShortDesc>Ensures the element at the given row index is visible in the specified list browser.</ShortDesc>
    <ID>2710</ID>
    <IDName>funcEnsureLBItemIsVisible</IDName>
    <InternalFunctionName>MP_EnsureLBItemIsVisible</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBMultImageIndexes</Name>
    <ChangedDate>2011:03:02T09:08:00</ChangedDate>
    <Version>1200</Version>
    <OldVersion>1700</OldVersion>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the index of the images within the list browser multi image display.</Description>
    <ShortDesc>Sets the index of the images within the list browser multi image display.This call has been deprecated, use "SetLBImageIndexes" instead.</ShortDesc>
    <ID>2711</ID>
    <IDName>funcSetLBMultImageIndexes</IDName>
    <InternalFunctionName>MP_SetLBMultImageIndexes</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>imageIndex0</Name>
        <Type>intMode</Type>
        <Desc>the 'ics8' resource index of the first image</Desc>
      </Param>
      <Param>
        <Name>imageIndex1</Name>
        <Type>intMode</Type>
        <Desc>the 'ics8' resource index of the second image</Desc>
      </Param>
      <Param>
        <Name>imageIndex2</Name>
        <Type>intMode</Type>
        <Desc>the 'ics8' resource index of the third image</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBMultImageIndexes</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the index of the images within the list browser multi image display.</Description>
    <ShortDesc>Gets the index of the images within the list browser multi image display.</ShortDesc>
    <ID>2712</ID>
    <IDName>funcGetLBMultImageIndexes</IDName>
    <InternalFunctionName>MP_GetLBMultImageIndexes</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>imageIndex0</Name>
        <Type>intVarMode</Type>
        <Desc>the 'ics8' resource index of the first image</Desc>
      </Param>
      <Param>
        <Name>imageIndex1</Name>
        <Type>intVarMode</Type>
        <Desc>the 'ics8' resource index of the second image</Desc>
      </Param>
      <Param>
        <Name>imageIndex2</Name>
        <Type>intVarMode</Type>
        <Desc>the 'ics8' resource index of the third image</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetFocusOnLB</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the keyboard/input focus on the specified list browser.</Description>
    <ShortDesc>Sets the keyboard/input focus on the specified list browser.</ShortDesc>
    <ID>2713</ID>
    <IDName>funcSetFocusOnLB</IDName>
    <InternalFunctionName>MP_SetFocusOnLB</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnableLBDragAndDrop</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Enables list browser drag and drop.  Use SetLBDragDropColumn to set the drag and drop column.</Description>
    <ShortDesc>Enables list browser drag and drop.  Use SetLBDragDropColumn to set the drag and drop column.</ShortDesc>
    <ID>2714</ID>
    <IDName>funcEnableLBDragAndDrop</IDName>
    <InternalFunctionName>MP_EnableLBDragAndDrop</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>enable</Name>
        <Type>boolMode</Type>
        <Desc>determines if drag and drop should be enabled</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DeleteAllLBItems</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deletes all list browser items.</Description>
    <ShortDesc>Deletes all list browser items.</ShortDesc>
    <ID>2715</ID>
    <IDName>funcDeleteAllLBItems</IDName>
    <InternalFunctionName>MP_DeleteAllLBItems</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnableLBClickAllDataChange</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Enables all radio and multi state column data items to be changed with a single click if the alt key or option key is pressed during the click.</Description>
    <ShortDesc>Enables all radio and multi state column data items to be changed with a single click if the alt key or option key is pressed during the click.</ShortDesc>
    <ID>2716</ID>
    <IDName>funcEnableLBClickAllDataChange</IDName>
    <InternalFunctionName>MP_EnableLBClickAllDataChange</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>enable</Name>
        <Type>boolMode</Type>
        <Desc>determines if all data items should be changed during the click if the appropriate modifier key is pressed.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumSelectedLBItems</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the number of selected list browser items.</Description>
    <ShortDesc>Returns the number of selected list browser items.</ShortDesc>
    <ID>2717</ID>
    <IDName>funcGetNumSelectedLBItems</IDName>
    <InternalFunctionName>MP_GetNumSelectedLBItems</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnableLBSingleLineSelection</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Enables single line only selection.  Multiple selections will not be permitted.</Description>
    <ShortDesc>Enables single line only selection.  Multiple selections will not be permitted.</ShortDesc>
    <ID>2718</ID>
    <IDName>funcEnableLBSingleLineSelection</IDName>
    <InternalFunctionName>MP_EnableLBSingleLineSelection</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>enable</Name>
        <Type>boolMode</Type>
        <Desc>determines if single line selection only should be enabled.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnableLB</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Enables or disables the specified list browser.</Description>
    <ShortDesc>Enables or disables the specified list browser.</ShortDesc>
    <ID>2719</ID>
    <IDName>funcEnableLB</IDName>
    <InternalFunctionName>MP_EnableLB</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>enable</Name>
        <Type>boolMode</Type>
        <Desc>determines if the list browser should be enabled or disabled.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBEventInfo</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Retrieves the last event information for the specified list browser.</Description>
    <ShortDesc>Retrieves the last event information for the specified list browser.</ShortDesc>
    <ID>2720</ID>
    <IDName>funcGetLBEventInfo</IDName>
    <InternalFunctionName>MP_GetLBEventInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>eventType</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>rowIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the row index where the click occurred.</Desc>
      </Param>
      <Param>
        <Name>columIndex</Name>
        <Type>intVarMode</Type>
        <Desc>the column index where the click occurred.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBDragDropColumn</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the drag and drop column.</Description>
    <ShortDesc>Sets the drag and drop column.  The drag and drop column must be of control type 6:Number.</ShortDesc>
    <ID>2721</ID>
    <IDName>funcSetLBDragDropColumn</IDName>
    <InternalFunctionName>MP_SetLBDragDropColumn</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>columnIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetFileInfo</Name>
    <ChangedDate>2017:04:14T10:37:00</ChangedDate>
    <Version>1200</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>This function gets the attributes of a file.</Description>
    <ShortDesc>This function gets the attributes of a file.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   fileName :STRING;[[BR]]   fullReadPath, fullWritePath :STRING;[[BR]]   readFileExists, writeFileExists, locked, hasReadPermission, hasWritePermission, hasFolderPermission :BOOLEAN;[[BR]]BEGIN[[BR]]   fileName := Concat(GetFolderPath(1), 'ADINIT.DAT');[[BR]]   GetFileInfo(fileName, fullReadPath, fullWritePath, readFileExists, writeFileExists, locked, hasReadPermission, hasWritePermission, hasFolderPermission);[[BR]]   ReWrite('Output.txt');[[BR]]   WriteLn('fileName:            ', fileName);[[BR]]   WriteLn('fullReadPath:        ', fullReadPath);[[BR]]   WriteLn('fullWritePath:       ', fullWritePath);[[BR]]   WriteLn('readFileExists:      ', readFileExists);[[BR]]   WriteLn('writeFileExists:     ', writeFileExists);[[BR]]   WriteLn('locked:              ', locked);[[BR]]   WriteLn('hasReadPermission:   ', hasReadPermission);[[BR]]   WriteLn('hasWritePermission:  ', hasWritePermission);[[BR]]   WriteLn('hasFolderPermission: ', hasFolderPermission);[[BR]]   Close('Output.txt');[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2722</ID>
    <IDName>procGetFileInfo</IDName>
    <InternalFunctionName>MP_GetFileInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>filename</Name>
        <Type>eCharDynarrayMode</Type>
      </Param>
      <Param>
        <Name>fullReadPath</Name>
        <Type>eCharDynarrayVarMode</Type>
      </Param>
      <Param>
        <Name>fullWritePath</Name>
        <Type>eCharDynarrayVarMode</Type>
      </Param>
      <Param>
        <Name>readFileExists</Name>
        <Type>boolVarMode</Type>
      </Param>
      <Param>
        <Name>writeFileExists</Name>
        <Type>boolVarMode</Type>
      </Param>
      <Param>
        <Name>locked</Name>
        <Type>boolVarMode</Type>
      </Param>
      <Param>
        <Name>hasReadPermission</Name>
        <Type>boolVarMode</Type>
      </Param>
      <Param>
        <Name>hasWritePermission</Name>
        <Type>boolVarMode</Type>
      </Param>
      <Param>
        <Name>hasFolderPermission</Name>
        <Type>boolVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjectVariableHandle</Name>
    <Version>1200</Version>
    <Category>Object Info</Category>
    <Type>Procedure</Type>
    <Description>Sets the value of a Vectorworks object property.</Description>
    <ShortDesc>Sets the value of a Vectorworks object property.</ShortDesc>
    <ID>2723</ID>
    <IDName>procSetObjectVariableHandle</IDName>
    <InternalFunctionName>MP_SetObjectVariableHandle</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjectVariableHandle</Name>
    <Version>1200</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns the value of a Vectorworks object property.</Description>
    <ShortDesc>Returns the value of a Vectorworks object property.</ShortDesc>
    <ID>2724</ID>
    <IDName>funcGetObjectVariableHandle</IDName>
    <InternalFunctionName>MP_GetObjectVariableHandle</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DisplayContextHelpOfCurrentPlugin</Name>
    <Version>1200</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>This function will display the context help of the plug-in that is considered 'current'. This could be a command plug-in that has a dialog open, or a tool plug-in that is active.</Description>
    <ShortDesc>This function will display the context help of the plug-in that is considered 'current'. This could be a command plug-in that has a dialog open, or a tool plug-in that is active.</ShortDesc>
    <ID>2725</ID>
    <IDName>procDisplayContextHelpOfCurrentPlugin</IDName>
    <InternalFunctionName>MP_DisplayContextHelpOfCurrentPlugin</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>GetActualNameFromResourceList</Name>
    <ChangedDate>2017:07:05T10:23:00</ChangedDate>
    <Version>1200</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>DYNARRAY[] of CHAR</ReturnType>
    <Description>Returns the actual name of the indicated item in the specified resource list. This call will delete the filename that is appended for resources with same name from different files.[[BR]]</Description>
    <ShortDesc>Returns the actual name of the indicated item in the specified resource list. This call will delete the filename that is appended for resources with same name from different files. </ShortDesc>
    <SeeAlso>GetNameFromResourceList</SeeAlso>
    <Comments>To get the display name use GetNameFromResourceList.</Comments>
    <Example>displayName := GetActualNameFromResourceList(listID, index);</Example>
    <ID>2726</ID>
    <IDName>funcGetActualNameFromResourceList</IDName>
    <InternalFunctionName>MP_GetActualNameFromResourceList</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>listID</Name>
        <Type>longMode</Type>
        <Desc>an ID for a resouce list created by the BuildResourceList function.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>longMode</Type>
        <Desc>an index into the list.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ConvertToUnstyledWall</Name>
    <Version>1200</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets a wall to be unstyled.</Description>
    <ShortDesc>Sets a wall to be unstyled.</ShortDesc>
    <Comments>Sets a wall to be unstyled. This allows a wall to then be manipulated by certain functions that will not work on a styled wall.</Comments>
    <ID>2727</ID>
    <IDName>funcConvertToUnstyledWall</IDName>
    <InternalFunctionName>MP_ConvertToUnstyledWall</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDefaultBeginningMarker</Name>
    <Version>1300</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets all properties for the document default beginning marker. Return TRUE if operation was successful.</Description>
    <ShortDesc>Gets all properties for the document default beginning marker. </ShortDesc>
    <SeeAlso>GetDefaultEndMarker</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	ok : BOOLEAN;[[BR]]style: INTEGER;[[BR]]	angle: INTEGER;[[BR]]	size: REAL;[[BR]]	width: REAL;[[BR]]	thickBasis: INTEGER;[[BR]]	thickness: REAL;[[BR]]	visibility: BOOLEAN;[[BR]][[BR]]	[[BR]]BEGIN[[BR]]ok := GetDefaultBeginningMarker (style, angle, size, width, thickBasis, thickness, visibility);[[BR]]Message (style, ' /  ', angle, '  /  ', size, '  /  ', width, ' /  ', thickBasis, ' /  ', thickness, ' /  ', visibility);	[[BR]]END;[[BR]][[BR]]RUN(Example);[[BR]]</Example>
    <ID>2728</ID>
    <IDName>funcGetDefaultBeginningMarker</IDName>
    <InternalFunctionName>MP_GetDefaultBeginningMarker</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>style</Name>
        <Type>lngVarMode</Type>
        <Desc>The marker style. (see comments for details)</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intVarMode</Type>
        <Desc>The marker angle in degrees. (0 to 90)</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>rVarMode</Type>
        <Desc>The marker size in page inches.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>rVarMode</Type>
        <Desc>The marker width in page inches.</Desc>
      </Param>
      <Param>
        <Name>thicknessBasis</Name>
        <Type>intVarMode</Type>
        <Desc>The marker thickness basis. ( see comments for details)</Desc>
      </Param>
      <Param>
        <Name>thickness</Name>
        <Type>rVarMode</Type>
        <Desc>The marker thickness.</Desc>
      </Param>
      <Param>
        <Name>visibility</Name>
        <Type>boolVarMode</Type>
        <Desc>The marker visibility.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDefaultBeginningMarker</Name>
    <Version>1300</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets all properties of the document default beginning marker. Return TRUE if operation was successful.</Description>
    <ShortDesc>Sets all properties of the document default beginning marker.</ShortDesc>
    <SeeAlso>SetDefaultEndMarker</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	ok : BOOLEAN;[[BR]]BEGIN[[BR]]	ok := SetDefaultBeginningMarker(2176, 15, 0.5, 0, 0, 2, TRUE);[[BR]]END;[[BR]][[BR]]RUN(Example);[[BR]]</Example>
    <ID>2729</ID>
    <IDName>funcSetDefaultBeginningMarker</IDName>
    <InternalFunctionName>MP_SetDefaultBeginningMarker</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>style</Name>
        <Type>longMode</Type>
        <Desc>The marker style. (see comments for details)</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intMode</Type>
        <Desc>The marker angle in degrees. (0 to 90)</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>realMode</Type>
        <Desc>The marker size in page inches.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>realMode</Type>
        <Desc>The marker width in page inches.</Desc>
      </Param>
      <Param>
        <Name>thicknessBasis</Name>
        <Type>intMode</Type>
        <Desc>The marker thickness basis. ( see comments for details)</Desc>
      </Param>
      <Param>
        <Name>thickness</Name>
        <Type>realMode</Type>
        <Desc>The marker thickness.</Desc>
      </Param>
      <Param>
        <Name>visibility</Name>
        <Type>boolMode</Type>
        <Desc>The marker visibility.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDefaultEndMarker</Name>
    <Version>1300</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets all properties for the document default end marker. Return TRUE if operation was successful.</Description>
    <ShortDesc>Gets all properties for the document default end marker. Return TRUE if successful.</ShortDesc>
    <SeeAlso>GetDefaultBeginningMarker</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	ok : BOOLEAN;[[BR]]style: INTEGER;[[BR]]	angle: INTEGER;[[BR]]	size: REAL;[[BR]]	width: REAL;[[BR]]	thickBasis: INTEGER;[[BR]]	thickness: REAL;[[BR]]	visibility: BOOLEAN;[[BR]][[BR]]	[[BR]]BEGIN[[BR]]ok := GetDefaultEndMarker (style, angle, size, width, thickBasis, thickness, visibility);[[BR]]Message (style, ' /  ', angle, '  /  ', size, '  /  ', width, ' /  ', thickBasis, ' /  ', thickness, ' /  ', visibility);	[[BR]]END;[[BR]][[BR]]RUN(Example);[[BR]]</Example>
    <ID>2730</ID>
    <IDName>funcGetDefaultEndMarker</IDName>
    <InternalFunctionName>MP_GetDefaultEndMarker</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>style</Name>
        <Type>lngVarMode</Type>
        <Desc>The marker style. (see comments for details)</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intVarMode</Type>
        <Desc>The marker angle in degrees. (0 to 90)</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>rVarMode</Type>
        <Desc>The marker size in page inches.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>rVarMode</Type>
        <Desc>The marker width in page inches.</Desc>
      </Param>
      <Param>
        <Name>thicknessBasis</Name>
        <Type>intVarMode</Type>
        <Desc>The marker thickness basis. ( see comments for details)</Desc>
      </Param>
      <Param>
        <Name>thickness</Name>
        <Type>rVarMode</Type>
        <Desc>The marker thickness.</Desc>
      </Param>
      <Param>
        <Name>visibility</Name>
        <Type>boolVarMode</Type>
        <Desc>The marker visibility.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDefaultEndMarker</Name>
    <Version>1300</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets all properties of the document default end marker. Return TRUE if operation was successful.</Description>
    <ShortDesc>Sets all properties of the document default end marker. Return TRUE if operation was successful</ShortDesc>
    <SeeAlso>SetDefaultBeginningMarker</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	ok : BOOLEAN;[[BR]]BEGIN[[BR]]	ok := SetDefaultEndMarker(2176, 15, 0.5, 0, 0, 2, TRUE);	[[BR]]END;[[BR]][[BR]]RUN(Example);[[BR]]</Example>
    <ID>2731</ID>
    <IDName>funcSetDefaultEndMarker</IDName>
    <InternalFunctionName>MP_SetDefaultEndMarker</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>style</Name>
        <Type>longMode</Type>
        <Desc>The marker style. (see comments for details)</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intMode</Type>
        <Desc>The marker angle in degrees. (0 to 90)</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>realMode</Type>
        <Desc>The marker size in page inches.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>realMode</Type>
        <Desc>The marker width in page inches.</Desc>
      </Param>
      <Param>
        <Name>thicknessBasis</Name>
        <Type>intMode</Type>
        <Desc>The marker thickness basis. ( see comments for details)</Desc>
      </Param>
      <Param>
        <Name>thickness</Name>
        <Type>realMode</Type>
        <Desc>The marker thickness.</Desc>
      </Param>
      <Param>
        <Name>visibility</Name>
        <Type>boolMode</Type>
        <Desc>The marker visibility.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjBeginningMarker</Name>
    <Version>1300</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets all properties for an object's beginning marker. Return TRUE if operation was successful.</Description>
    <ShortDesc>Gets all properties for an object's beginning marker. </ShortDesc>
    <SeeAlso>GetObjEndMarker</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	h: HANDLE;[[BR]]	style: INTEGER;[[BR]]	angle: INTEGER;[[BR]]	size: REAL;[[BR]]	width: REAL;[[BR]]	thickBasis: INTEGER;[[BR]]	thickness: REAL;[[BR]]	visibility: BOOLEAN;[[BR]][[BR]]	ok : BOOLEAN;[[BR]]	[[BR]]BEGIN[[BR]]	h := FSActLayer;[[BR]]	ok := GetObjBeginningMarker (h, style, angle, size, width, thickBasis, thickness, visibility);[[BR]]	Message (style, ' /  ', angle, '  /  ', size, '  /  ', width, ' /  ', thickBasis, ' /  ', thickness, ' /  ', visibility);[[BR]]END;[[BR]][[BR]]RUN(Example);[[BR]]</Example>
    <ID>2732</ID>
    <IDName>funcGetObjBeginningMarker</IDName>
    <InternalFunctionName>MP_GetObjBeginningMarker</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>lngVarMode</Type>
        <Desc>The marker style. (see comments for details)</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intVarMode</Type>
        <Desc>The marker angle in degrees. (0 to 90)</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>rVarMode</Type>
        <Desc>The marker size in inches.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>rVarMode</Type>
        <Desc>The marker width in inches.</Desc>
      </Param>
      <Param>
        <Name>thicknessBasis</Name>
        <Type>intVarMode</Type>
        <Desc>The marker thickness basis. ( see comments for details)</Desc>
      </Param>
      <Param>
        <Name>thickness</Name>
        <Type>rVarMode</Type>
        <Desc>The marker thickness.</Desc>
      </Param>
      <Param>
        <Name>visibility</Name>
        <Type>boolVarMode</Type>
        <Desc>The marker visibility.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjBeginningMarker</Name>
    <Version>1300</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets all properties of an object's beginning marker. Return TRUE if operation was successful.</Description>
    <ShortDesc>Sets all properties of an object's beginning marker. </ShortDesc>
    <SeeAlso>SetObjEndMarker</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	ok : BOOLEAN;[[BR]]	[[BR]]BEGIN[[BR]]	MoveTo (0,0);[[BR]]LineTo (100, 0);[[BR]]	ok := SetObjBeginningMarker(LNewObj, 1280, 25, 0.25, 0.125, 34, 2, TRUE);	[[BR]]END;[[BR]][[BR]]RUN(Example);[[BR]]</Example>
    <ID>2733</ID>
    <IDName>funcSetObjBeginningMarker</IDName>
    <InternalFunctionName>MP_SetObjBeginningMarker</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>longMode</Type>
        <Desc>The marker style. (see comments for details)</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intMode</Type>
        <Desc>The marker angle in degrees. (0 to 90)</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>realMode</Type>
        <Desc>The marker size in page inches.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>realMode</Type>
        <Desc>The marker width in page inches.</Desc>
      </Param>
      <Param>
        <Name>thicknessBasis</Name>
        <Type>intMode</Type>
        <Desc>The marker thickness basis. ( see comments for details)</Desc>
      </Param>
      <Param>
        <Name>thickness</Name>
        <Type>realMode</Type>
        <Desc>The marker thickness.</Desc>
      </Param>
      <Param>
        <Name>visibility</Name>
        <Type>boolMode</Type>
        <Desc>The marker visibility.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjEndMarker</Name>
    <Version>1300</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets all properties for an object's end marker. Return TRUE if operation was successful.</Description>
    <ShortDesc>Gets all properties for an object's end marker. </ShortDesc>
    <SeeAlso>GetObjBeginningMarker</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	h: HANDLE;[[BR]]	style: INTEGER;[[BR]]	angle: INTEGER;[[BR]]	size: REAL;[[BR]]	width: REAL;[[BR]]	thickBasis: INTEGER;[[BR]]	thickness: REAL;[[BR]]	visibility: BOOLEAN;[[BR]][[BR]]	ok : BOOLEAN;[[BR]]	[[BR]]BEGIN[[BR]]	h := FSActLayer;[[BR]]	ok := GetObjEndMarker (h, style, angle, size, width, thickBasis, thickness, visibility);[[BR]]	Message (style, ' /  ', angle, '  /  ', size, '  /  ', width, ' /  ', thickBasis, ' /  ', thickness, ' /  ', visibility);[[BR]]END;[[BR]][[BR]]RUN(Example);[[BR]]</Example>
    <ID>2734</ID>
    <IDName>funcGetObjEndMarker</IDName>
    <InternalFunctionName>MP_GetObjEndMarker</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>lngVarMode</Type>
        <Desc>The marker style. (see comments for details)</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intVarMode</Type>
        <Desc>The marker angle in degrees. (0 to 90)</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>rVarMode</Type>
        <Desc>The marker size in page inches.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>rVarMode</Type>
        <Desc>The marker width in page inches.</Desc>
      </Param>
      <Param>
        <Name>thicknessBasis</Name>
        <Type>intVarMode</Type>
        <Desc>The marker thickness basis. ( see comments for details)</Desc>
      </Param>
      <Param>
        <Name>thickness</Name>
        <Type>rVarMode</Type>
        <Desc>The marker thickness.</Desc>
      </Param>
      <Param>
        <Name>visibility</Name>
        <Type>boolVarMode</Type>
        <Desc>The marker visibility.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjEndMarker</Name>
    <Version>1300</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets all properties of an object's end marker. Return TRUE if operation was successful.</Description>
    <ShortDesc>Sets all properties of an object's end marker. Return TRUE if operation was successful.</ShortDesc>
    <SeeAlso>SetObjBeginningMarker</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	ok : BOOLEAN;[[BR]]	[[BR]]BEGIN[[BR]]	MoveTo (0,0);[[BR]]LineTo (100, 0);[[BR]]	ok := SetObjEndMarker(LNewObj, 1280, 25, 0.25, 0.125, 34, 2, TRUE);	[[BR]]END;[[BR]][[BR]]RUN(Example);[[BR]]</Example>
    <ID>2735</ID>
    <IDName>funcSetObjEndMarker</IDName>
    <InternalFunctionName>MP_SetObjEndMarker</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>longMode</Type>
        <Desc>The marker style. (see comments for details)</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intMode</Type>
        <Desc>The marker angle in degrees. (0 to 90)</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>realMode</Type>
        <Desc>The marker size in page inches.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>realMode</Type>
        <Desc>The marker width in page inches.</Desc>
      </Param>
      <Param>
        <Name>thicknessBasis</Name>
        <Type>intMode</Type>
        <Desc>The marker thickness basis. ( see comments for details)</Desc>
      </Param>
      <Param>
        <Name>thickness</Name>
        <Type>realMode</Type>
        <Desc>The marker thickness.</Desc>
      </Param>
      <Param>
        <Name>visibility</Name>
        <Type>boolMode</Type>
        <Desc>The marker visibility.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClassBeginningMarker</Name>
    <Version>1300</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets all properties for the named class' beginning marker. Return TRUE if operation was successful.</Description>
    <ShortDesc>Sets all properties for the named class' beginning marker. Return TRUE if operation was successful.</ShortDesc>
    <SeeAlso>SetClassEndMarker</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	ok : BOOLEAN;	[[BR]]BEGIN[[BR]]	ok := SetClassBeginningMarker('None', 1280, 45, 0.25, 0.25, 0, 2);	[[BR]]END;[[BR]][[BR]]RUN(Example);[[BR]]</Example>
    <ID>2736</ID>
    <IDName>funcSetClassBeginningMarker</IDName>
    <InternalFunctionName>MP_SetClassBeginningMarker</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Name of the class </Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>longMode</Type>
        <Desc>The marker style (see comments for details)</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intMode</Type>
        <Desc>The marker angle in degrees (0 to 90)</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>realMode</Type>
        <Desc>The marker size in pages inches</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>realMode</Type>
        <Desc>The marker width in page inches</Desc>
      </Param>
      <Param>
        <Name>thicknessBasis</Name>
        <Type>intMode</Type>
        <Desc>The marker thickness basis. ( see comments for details)</Desc>
      </Param>
      <Param>
        <Name>thickness</Name>
        <Type>realMode</Type>
        <Desc>The marker thickness</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClassBeginningMarker</Name>
    <Version>1300</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets all properties for the named class' beginning marker. Return TRUE if operation was successful.</Description>
    <ShortDesc>Gets all properties for the named class' beginning marker. </ShortDesc>
    <SeeAlso>GetClassEndMarker</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	ok : BOOLEAN;[[BR]]style: INTEGER;[[BR]]	angle: INTEGER;[[BR]]	size: REAL;[[BR]]	width: REAL;[[BR]]	thickBasis: INTEGER;[[BR]]	thickness: REAL;[[BR]]	[[BR]]BEGIN[[BR]]	ok := GetClassBeginningMarker('None', style, angle, size, width, thickBasis, thickness);	[[BR]]Message (style, ' /  ', angle, '  /  ', size, '  /  ', width, ' /  ', thickBasis, ' /  ', thickness);	[[BR]][[BR]]END;[[BR]][[BR]]RUN(Example);[[BR]]</Example>
    <ID>2737</ID>
    <IDName>funcGetClassBeginningMarker</IDName>
    <InternalFunctionName>MP_GetClassBeginningMarker</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Name of the class </Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>lngVarMode</Type>
        <Desc>The marker style (see comments for details)</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intVarMode</Type>
        <Desc>The marker angle in degrees (0 to 90)</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>rVarMode</Type>
        <Desc>The marker size in pages inches</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>rVarMode</Type>
        <Desc>The marker width in page inches</Desc>
      </Param>
      <Param>
        <Name>thicknessBasis</Name>
        <Type>intVarMode</Type>
        <Desc>The marker thickness basis. ( see comments for details)</Desc>
      </Param>
      <Param>
        <Name>thickness</Name>
        <Type>rVarMode</Type>
        <Desc>The marker thickness</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClassEndMarker</Name>
    <Version>1300</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets all properties for the named class's end marker. Return TRUE if operation was successful.</Description>
    <ShortDesc>Sets all properties for the named class's end marker. Return TRUE if operation was successful.</ShortDesc>
    <SeeAlso>SetClassBeginningMarker</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	ok : BOOLEAN;[[BR]]BEGIN[[BR]]	ok := SetClassEndMarker('None', 1280, 25, 0.125, 0.125, 0, 2);[[BR]]END;[[BR]][[BR]]RUN(Example);[[BR]]</Example>
    <ID>2738</ID>
    <IDName>funcSetClassEndMarker</IDName>
    <InternalFunctionName>MP_SetClassEndMarker</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Name of the class.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>longMode</Type>
        <Desc>The marker style. (see comments for details)</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intMode</Type>
        <Desc>The marker angle in degrees. (0 to 90)</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>realMode</Type>
        <Desc>The marker size in page inches.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>realMode</Type>
        <Desc>The marker width in page inches.</Desc>
      </Param>
      <Param>
        <Name>thicknessBasis</Name>
        <Type>intMode</Type>
        <Desc>The marker thickness basis. ( see comments for details)</Desc>
      </Param>
      <Param>
        <Name>thickness</Name>
        <Type>realMode</Type>
        <Desc>The marker thickness.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClassEndMarker</Name>
    <Version>1300</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets all properties for the named class's end marker. Return TRUE if operation was successful.</Description>
    <ShortDesc>Gets all properties for the named class's end marker. Return TRUE if operation was successful.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	ok : BOOLEAN;[[BR]]style: INTEGER;[[BR]]	angle: INTEGER;[[BR]]	size: REAL;[[BR]]	width: REAL;[[BR]]	thickBasis: INTEGER;[[BR]]	thickness: REAL;[[BR]]	[[BR]]BEGIN[[BR]]	ok := GetClassEndMarker('None', style, angle, size, width, thickBasis, thickness);	[[BR]]Message (style, ' /  ', angle, '  /  ', size, '  /  ', width, ' /  ', thickBasis, ' /  ', thickness);	[[BR]][[BR]]END;[[BR]][[BR]]RUN(Example);[[BR]]</Example>
    <ID>2739</ID>
    <IDName>funcGetClassEndMarker</IDName>
    <InternalFunctionName>MP_GetClassEndMarker</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>Name of the class </Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>lngVarMode</Type>
        <Desc>The marker style (see comments for details)</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intVarMode</Type>
        <Desc>The marker angle in degrees (0 to 90)</Desc>
      </Param>
      <Param>
        <Name>size</Name>
        <Type>rVarMode</Type>
        <Desc>The marker size in pages inches</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>rVarMode</Type>
        <Desc>The marker width in page inches</Desc>
      </Param>
      <Param>
        <Name>thicknessBasis</Name>
        <Type>intVarMode</Type>
        <Desc>The marker thickness basis. ( see comments for details)</Desc>
      </Param>
      <Param>
        <Name>thickness</Name>
        <Type>rVarMode</Type>
        <Desc>The marker thickness</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateDuplicateObject</Name>
    <Version>1250</Version>
    <Category>Object Editing</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Duplicates the specified object and inserts the new  object into the container.  If container is nil, the new object will be inserted in the active container.</Description>
    <ShortDesc>Duplicates the specified object and inserts the new  object into the container.  If container is nil, the new object will be inserted in the active container.</ShortDesc>
    <Comments>This should be used inplace of a SetParent.</Comments>
    <ID>2740</ID>
    <IDName>funcCreateDuplicateObject</IDName>
    <InternalFunctionName>MP_CreateDuplicateObject</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectToDuplicate</Name>
        <Type>handleMode</Type>
        <Desc>The object to be duplicated</Desc>
      </Param>
      <Param>
        <Name>containerHandle</Name>
        <Type>handleMode</Type>
        <Desc>The container to the newly duplicated object</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PrepRelatedObjectForChange</Name>
    <Version>1250</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Prepares some other related object for a change thats about to occur.</Description>
    <ShortDesc>Prepares some other related object for a change thats about to occur.</ShortDesc>
    <Comments>This call adds an eBeforeModify primitive to the specified object provided that the undo system is currently building an undo event.  </Comments>
    <ID>2743</ID>
    <IDName>procPrepRelatedObjectForChange</IDName>
    <InternalFunctionName>MP_PrepRelatedObjectForChange</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectAboutToBeChange</Name>
        <Type>handleMode</Type>
        <Desc>The object to be prepared for a change</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateOwnerDrawnControl</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2744</ID>
    <IDName>funcCreateOwnerDrawnControl</IDName>
    <InternalFunctionName>MP_CreateOwnerDrawnControl</InternalFunctionName>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iWidth</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iHeight</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlEventInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2745</ID>
    <IDName>funcGetOwnerDrawnControlEventInfo</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlEventInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iDrawPadEventType</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iSelectedObjectID</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iXMousePosition</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iYMousePosition</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iDraggedXDistance</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iDraggedYDistance</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlEventInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2746</ID>
    <IDName>funcSetOwnerDrawnControlEventInfo</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlEventInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iDrawPadEventType</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iSelectedObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iXMousePosition</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iYMousePosition</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iDraggedXDistance</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iDraggedYDistance</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlObjectInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2747</ID>
    <IDName>funcGetOwnerDrawnControlObjectInfo</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlObjectInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iDrawPadObjectType</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>bDraggable</Name>
        <Type>boolVarMode</Type>
      </Param>
      <Param>
        <Name>bDragging</Name>
        <Type>boolVarMode</Type>
      </Param>
      <Param>
        <Name>bSelectable</Name>
        <Type>boolVarMode</Type>
      </Param>
      <Param>
        <Name>bSelected</Name>
        <Type>boolVarMode</Type>
      </Param>
      <Param>
        <Name>bHasFill</Name>
        <Type>boolVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlObjectInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2748</ID>
    <IDName>funcSetOwnerDrawnControlObjectInfo</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlObjectInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iDrawPadObjectType</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>bDraggable</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>bDragging</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>bSelectable</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>bSelected</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>bHasFill</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlObjectPenFgColor</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2749</ID>
    <IDName>funcGetOwnerDrawnControlObjectPenFgColor</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlObjectPenFgColor</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>int</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iColorRedIndex</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iColorGreenIndex</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iColorBlueIndex</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlObjectPenFgColor</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2750</ID>
    <IDName>funcSetOwnerDrawnControlObjectPenFgColor</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlObjectPenFgColor</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iColorRedIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iColorGreenIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iColorBlueIndex</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlObjectPenBgColor</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2751</ID>
    <IDName>funcGetOwnerDrawnControlObjectPenBgColor</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlObjectPenBgColor</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iColorRedIndex</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iColorGreenIndex</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iColorBlueIndex</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlObjectPenBgColor</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2752</ID>
    <IDName>funcSetOwnerDrawnControlObjectPenBgColor</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlObjectPenBgColor</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iColorRedIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iColorGreenIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iColorBlueIndex</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlObjectType</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2753</ID>
    <IDName>funcGetOwnerDrawnControlObjectType</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlObjectType</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iDrawPadObjectType</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlObjectType</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2754</ID>
    <IDName>funcSetOwnerDrawnControlObjectType</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlObjectType</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iDrawPadObjectType</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlPointObjectInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2755</ID>
    <IDName>funcGetOwnerDrawnControlPointObjectInfo</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlPointObjectInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iXCoord</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iYCoord</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlPointObjectInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2756</ID>
    <IDName>funcSetOwnerDrawnControlPointObjectInfo</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlPointObjectInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iXCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iYCoord</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlLineObjectInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2757</ID>
    <IDName>funcGetOwnerDrawnControlLineObjectInfo</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlLineObjectInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iStartXCoord</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iStartYCoord</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iEndXCoord</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iEndYCoord</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlLineObjectInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2758</ID>
    <IDName>funcSetOwnerDrawnControlLineObjectInfo</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlLineObjectInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iStartXCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iStartYCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iEndXCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iEndYCoord</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlRectangleObjectInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2759</ID>
    <IDName>funcGetOwnerDrawnControlRectangleObjectInfo</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlRectangleObjectInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftXCoord</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftYCoord</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightXCoord</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightYCoord</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iOvalWidth</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iOvalHeight</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlRectangleObjectInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2760</ID>
    <IDName>funcSetOwnerDrawnControlRectangleObjectInfo</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlRectangleObjectInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftXCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftYCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightXCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightYCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iOvalWidth</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iOvalHeight</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlEllipseObjectInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2761</ID>
    <IDName>funcGetOwnerDrawnControlEllipseObjectInfo</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlEllipseObjectInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftXCoordBoundary</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftYCoordBoundary</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightXCoordBoundary</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightYCoordBoundary</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlEllipseObjectInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2762</ID>
    <IDName>funcSetOwnerDrawnControlEllipseObjectInfo</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlEllipseObjectInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftXCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftYCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightXCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightYCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlPolygonObjectInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2763</ID>
    <IDName>funcGetOwnerDrawnControlPolygonObjectInfo</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlPolygonObjectInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iNumPoints</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlPolygonObjectInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2764</ID>
    <IDName>funcSetOwnerDrawnControlPolygonObjectInfo</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlPolygonObjectInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iNumPoints</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlArcObjectInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2765</ID>
    <IDName>funcGetOwnerDrawnControlArcObjectInfo</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlArcObjectInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftXCoordBoundary</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftYCoordBoundary</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightXCoordBoundary</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightYCoordBoundary</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iStartXCoord</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iStartYCoord</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iEndXCoord</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>Overflow</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlArcObjectInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2766</ID>
    <IDName>funcSetOwnerDrawnControlArcObjectInfo</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlArcObjectInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftXCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftYCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightXCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightYCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iStartXCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iStartYCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iEndXCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>Overflow</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlTextObjectInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2767</ID>
    <IDName>funcGetOwnerDrawnControlTextObjectInfo</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlTextObjectInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>strText</Name>
        <Type>strVarMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftXCoord</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftYCoord</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlTextObjectInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2768</ID>
    <IDName>funcSetOwnerDrawnControlTextObjectInfo</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlTextObjectInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>strText</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftXCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftYCoord</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlIconObjectInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2769</ID>
    <IDName>funcGetOwnerDrawnControlIconObjectInfo</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlIconObjectInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iResourceType</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iResourceID</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftXCoord</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftYCoord</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlIconObjectInfo</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2770</ID>
    <IDName>funcSetOwnerDrawnControlIconObjectInfo</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlIconObjectInfo</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iResourceType</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iResourceID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftXCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftYCoord</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddOwnerDrawnControlPolygonObjectPoint</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2771</ID>
    <IDName>funcAddOwnerDrawnControlPolygonObjectPoint</IDName>
    <InternalFunctionName>MP_AddOwnerDrawnControlPolygonObjectPoint</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iXCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iYCoord</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlPolygonPoint</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2772</ID>
    <IDName>funcGetOwnerDrawnControlPolygonPoint</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlPolygonPoint</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iPointIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iXCoord</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iYCoord</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlPolygonPoint</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2773</ID>
    <IDName>funcSetOwnerDrawnControlPolygonPoint</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlPolygonPoint</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iPointIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iXCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iYCoord</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlObjectDraggable</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2774</ID>
    <IDName>funcGetOwnerDrawnControlObjectDraggable</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlObjectDraggable</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>bDraggable</Name>
        <Type>boolVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlObjectDragging</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2775</ID>
    <IDName>funcGetOwnerDrawnControlObjectDragging</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlObjectDragging</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>bDragging</Name>
        <Type>boolVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlObjectDragging</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2776</ID>
    <IDName>funcSetOwnerDrawnControlObjectDragging</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlObjectDragging</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>bDragging</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlObjectSelectable</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2777</ID>
    <IDName>funcGetOwnerDrawnControlObjectSelectable</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlObjectSelectable</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>bSelectable</Name>
        <Type>boolVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlObjectSelectable</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2778</ID>
    <IDName>funcSetOwnerDrawnControlObjectSelectable</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlObjectSelectable</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>bSelectable</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlObjectSelected</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2779</ID>
    <IDName>funcGetOwnerDrawnControlObjectSelected</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlObjectSelected</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>bSelected</Name>
        <Type>boolVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlObjectSelected</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2780</ID>
    <IDName>funcSetOwnerDrawnControlObjectSelected</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlObjectSelected</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>bSelected</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlObjectHasFill</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2781</ID>
    <IDName>funcGetOwnerDrawnControlObjectHasFill</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlObjectHasFill</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>bHasFill</Name>
        <Type>boolVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlObjectHasFill</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2782</ID>
    <IDName>funcSetOwnerDrawnControlObjectHasFill</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlObjectHasFill</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>bHasFill</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlObjectBoundary</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2783</ID>
    <IDName>funcGetOwnerDrawnControlObjectBoundary</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlObjectBoundary</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftXCoordBoundary</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftYCoordBoundary</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightXCoordBoundary</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightYCoordBoundary</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlObjectBoundary</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2784</ID>
    <IDName>funcSetOwnerDrawnControlObjectBoundary</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlObjectBoundary</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftXCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftYCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightXCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightYCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RefreshOwnerDrawnControlWindow</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2785</ID>
    <IDName>funcRefreshOwnerDrawnControlWindow</IDName>
    <InternalFunctionName>MP_RefreshOwnerDrawnControlWindow</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlRect</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2786</ID>
    <IDName>funcGetOwnerDrawnControlRect</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlRect</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iLeftBound</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iTopBound</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iRightBound</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iBottomBound</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlBackgroundColor</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2787</ID>
    <IDName>funcSetOwnerDrawnControlBackgroundColor</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlBackgroundColor</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iColorRedIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iColorGreenIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iColorBlueIndex</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddOwnerDrawnControlPointObject</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2788</ID>
    <IDName>funcAddOwnerDrawnControlPointObject</IDName>
    <InternalFunctionName>MP_AddOwnerDrawnControlPointObject</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iXPos</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iYPos</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddOwnerDrawnControlLineObject</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2789</ID>
    <IDName>funcAddOwnerDrawnControlLineObject</IDName>
    <InternalFunctionName>MP_AddOwnerDrawnControlLineObject</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iStartXCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iStartYCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iEndXCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iEndYCoord</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddOwnerDrawnControlRectangleObject</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2790</ID>
    <IDName>funcAddOwnerDrawnControlRectangleObject</IDName>
    <InternalFunctionName>MP_AddOwnerDrawnControlRectangleObject</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftXCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftYCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightXCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightYCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iOvalWidth</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iOvalHeight</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddOwnerDrawnControlEllipseObject</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2791</ID>
    <IDName>funcAddOwnerDrawnControlEllipseObject</IDName>
    <InternalFunctionName>MP_AddOwnerDrawnControlEllipseObject</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftXCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftYCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightXCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightYCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddOwnerDrawnControlPolygonObject</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2792</ID>
    <IDName>funcAddOwnerDrawnControlPolygonObject</IDName>
    <InternalFunctionName>MP_AddOwnerDrawnControlPolygonObject</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iNumPoints</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddOwnerDrawnControlArcObject</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2793</ID>
    <IDName>funcAddOwnerDrawnControlArcObject</IDName>
    <InternalFunctionName>MP_AddOwnerDrawnControlArcObject</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftXCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftYCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightXCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iBottomRightYCoordBoundary</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iStartXCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iStartYCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iEndXCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>Overflow</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddOwnerDrawnControlTextObject</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2794</ID>
    <IDName>funcAddOwnerDrawnControlTextObject</IDName>
    <InternalFunctionName>MP_AddOwnerDrawnControlTextObject</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftXCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftYCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>strText</Name>
        <Type>stringMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddOwnerDrawnControlIconObject</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2795</ID>
    <IDName>funcAddOwnerDrawnControlIconObject</IDName>
    <InternalFunctionName>MP_AddOwnerDrawnControlIconObject</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iResourceType</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iResourceID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftXCoord</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iTopLeftYCoord</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlObjectDraggable</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2796</ID>
    <IDName>funcSetOwnerDrawnControlObjectDraggable</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlObjectDraggable</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iObjectID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>bDraggable</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlPenFgColor</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2797</ID>
    <IDName>funcGetOwnerDrawnControlPenFgColor</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlPenFgColor</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iRedIndex</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iGreenIndex</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iBlueIndex</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlPenFgColor</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2798</ID>
    <IDName>funcSetOwnerDrawnControlPenFgColor</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlPenFgColor</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iRedIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iGreenIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iBlueIndex</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOwnerDrawnControlPenBgColor</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2799</ID>
    <IDName>funcGetOwnerDrawnControlPenBgColor</IDName>
    <InternalFunctionName>MP_GetOwnerDrawnControlPenBgColor</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iRedIndex</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iGreenIndex</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>iBlueIndex</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOwnerDrawnControlPenBgColor</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2800</ID>
    <IDName>funcSetOwnerDrawnControlPenBgColor</IDName>
    <InternalFunctionName>MP_SetOwnerDrawnControlPenBgColor</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iRedIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iGreenIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iBlueIndex</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateIconPushButton</Name>
    <ChangedDate>2011:03:02T09:02:00</ChangedDate>
    <Version>1250</Version>
    <OldVersion>1700</OldVersion>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates an icon push button with the specified icon ID and width in characters.</Description>
    <ShortDesc>Creates an icon push button with the specified icon ID and width in characters. This call has been deprecated, use "CreateImagePushButton" instead.</ShortDesc>
    <SeeAlso>GetDlgCtrlWidthStdCh</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   dialog1 :INTEGER;[[BR]]   result  :INTEGER;[[BR]]   boo     :BOOLEAN;[[BR]] [[BR]]PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]END;[[BR]] [[BR]]BEGIN[[BR]]   boo := SetVSResourceFile('IP Resources');[[BR]]   dialog1 := CreateLayout('Example Dialog', FALSE, 'OK', 'Cancel');[[BR]]   CreateIconPushButton(dialog1, 4, 11021, 20);[[BR]]   SetFirstLayoutItem(dialog1, 4);[[BR]]   result := RunLayoutDialog(dialog1, Dialog_Handler);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2801</ID>
    <IDName>procCreateIconPushButton</IDName>
    <InternalFunctionName>MP_CreateIconPushButton</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nIconID</Name>
        <Type>intMode</Type>
        <Desc>the index of the ICN# resource in the currently open rsrc file (or qtr on Windows)</Desc>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>intMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddIconToIconPushButton</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <Description>?</Description>
    <ShortDesc>?</ShortDesc>
    <ID>2802</ID>
    <IDName>funcAddIconToIconPushButton</IDName>
    <InternalFunctionName>MP_AddIconToIconPushButton</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iIconID</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateThreeStateCheckBox</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a Layout Manager three state checkbox.</Description>
    <ShortDesc>Creates a Layout Manager three state checkbox.</ShortDesc>
    <ID>2803</ID>
    <IDName>procCreateThreeStateCheckBox</IDName>
    <InternalFunctionName>MP_CreateThreeStateCheckBox</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>strName</Name>
        <Type>stringMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetThreeStateCheckBoxState</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the state of a Layout Manager three state checkbox.</Description>
    <ShortDesc>Sets the state of a Layout Manager three state checkbox.</ShortDesc>
    <ID>2804</ID>
    <IDName>procSetThreeStateCheckBoxState</IDName>
    <InternalFunctionName>MP_SetThreeStateCheckBoxState</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iState</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetThreeStateCheckBoxState</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Retrieves the state of a Layout Manager three state checkbox.</Description>
    <ShortDesc>Retrieves the state of a Layout Manager three state checkbox.</ShortDesc>
    <ID>2805</ID>
    <IDName>procGetThreeStateCheckBoxState</IDName>
    <InternalFunctionName>MP_GetThreeStateCheckBoxState</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iState</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateEnhancedPullDownMenu</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a Layout Manager enhanced pull down menu control.</Description>
    <ShortDesc>Creates a Layout Manager enhanced pull down menu control.</ShortDesc>
    <SeeAlso>GetDlgCtrlWidthStdCh</SeeAlso>
    <ID>2806</ID>
    <IDName>procCreateEnhancedPullDownMenu</IDName>
    <InternalFunctionName>MP_CreateEnhancedPullDownMenu</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>intMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
      <Param>
        <Name>bShowIconInMainWindow</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertEnhancedPullDownMenuItem</Name>
    <ChangedDate>2011:03:02T09:24:00</ChangedDate>
    <Version>1250</Version>
    <OldVersion>1700</OldVersion>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Inserts the item into the specified Layout Manager enhanced pull down menu control.</Description>
    <ShortDesc>Inserts the item into the specified Layout Manager enhanced pull down menu control.This call has been deprecated, use "InsertEnhanPullDownMenuItem" instead.</ShortDesc>
    <ID>2807</ID>
    <IDName>funcInsertEnhancedPullDownMenuItem</IDName>
    <InternalFunctionName>MP_InsertEnhancedPullDownMenuItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>strName</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>iIconID</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveEnhancedPullDownMenuItemRange</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Removes the specified range of items from the specified Layout Manager enhanced pull down menu control.</Description>
    <ShortDesc>Removes the specified range of items from the specified Layout Manager enhanced pull down menu control.</ShortDesc>
    <ID>2808</ID>
    <IDName>procRemoveEnhancedPullDownMenuItemRange</IDName>
    <InternalFunctionName>MP_RemoveEnhancedPullDownMenuItemRange</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iStartItemIndexToRemove</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iEndItemIndexToRemove</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnableLBDropOnIndices</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Enables or disables drag and drop to occur within the specified indices.</Description>
    <ShortDesc>Enables or disables drag and drop to occur within the specified indices.</ShortDesc>
    <ID>2809</ID>
    <IDName>funcEnableLBDropOnIndices</IDName>
    <InternalFunctionName>MP_EnableLBDropOnIndices</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iStartIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iEndIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>bEnable</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BeginContext</Name>
    <Version>1250</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Use this function in conjuction with EndContext to starts logging changes that are  made until the EndContext is reached.</Description>
    <ShortDesc>Use this function in conjuction with EndContext to starts logging changes that are  made until the EndContext is reached.</ShortDesc>
    <SeeAlso>EndContext</SeeAlso>
    <Comments>If you do not use this construct and you create a temporary plug-in object that itself creates a new class, the new class will remain even after you delete the temporary plug-in object.</Comments>
    <ID>2810</ID>
    <IDName>procBeginContext</IDName>
    <InternalFunctionName>MP_BeginContext</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>EndContext</Name>
    <Version>1250</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Use this function in conjuction with BeginContext to have VW automatically accept or reject any changes that were made during the Begin/End block.</Description>
    <ShortDesc>Use this function in conjuction with BeginContext to have VW automatically accept or reject any changes that were made during the Begin/End block.</ShortDesc>
    <SeeAlso>BeginContext</SeeAlso>
    <Comments>If you do not use this construct and you create a temporary plug-in object that itself creates a new class, the new class will remain even after you delete the temporary plug-in object.</Comments>
    <ID>2811</ID>
    <IDName>procEndContext</IDName>
    <InternalFunctionName>MP_EndContext</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>acceptOrReject</Name>
        <Type>intMode</Type>
        <Desc>Specify 0 to reject changes or 1 to accept changes </Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateSeparator</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a Layout Manager image separator.</Description>
    <ShortDesc>Creates a Layout Manager image separator.</ShortDesc>
    <ID>2812</ID>
    <IDName>procCreateSeparator</IDName>
    <InternalFunctionName>MP_CreateSeparator</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>widthInPixels</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateImageControl</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a Layout Manager image control.</Description>
    <ShortDesc>Creates a Layout Manager image control.</ShortDesc>
    <ID>2813</ID>
    <IDName>procCreateImageControl</IDName>
    <InternalFunctionName>MP_CreateImageControl</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>iWidthPixels</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>iHeightPixels</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>hImage</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetImageControlHandle</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the image definition node handle for the specified Layout Manager image control.</Description>
    <ShortDesc>Sets the image definition node handle for the specified Layout Manager image control.</ShortDesc>
    <ID>2814</ID>
    <IDName>procSetImageControlHandle</IDName>
    <InternalFunctionName>MP_SetImageControlHandle</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>hImage</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreatePullDownMenuGroupBox</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a Layout Manager pull down menu group box.</Description>
    <ShortDesc>Creates a Layout Manager pull down menu group box.</ShortDesc>
    <SeeAlso>GetDlgCtrlWidthStdCh</SeeAlso>
    <ID>2815</ID>
    <IDName>procCreatePullDownMenuGroupBox</IDName>
    <InternalFunctionName>MP_CreatePullDownMenuGroupBox</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>liDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>liComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>intMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
      <Param>
        <Name>strLabel</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>bHasFrame</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertImagePopupSeparator</Name>
    <Version>1200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Inserts a separator with the specified label at the end of the image popup list.</Description>
    <ShortDesc>Inserts a separator with the specified label at the end of the image popup list.</ShortDesc>
    <ID>2816</ID>
    <IDName>funcInsertImagePopupSeparator</IDName>
    <InternalFunctionName>MP_InsertImagePopupSeparator</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>liDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>liComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>strLabel</Name>
        <Type>stringMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ObjArea</Name>
    <Version>1250</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] returns the area of the referenced object.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the area of the referenced object.  The value will be in the current Area Units.</ShortDesc>
    <ID>2817</ID>
    <IDName>funcObjArea</IDName>
    <InternalFunctionName>MP_ObjArea</InternalFunctionName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ObjSurfaceArea</Name>
    <Version>1250</Version>
    <Category>Objects - Solids</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] calculates the surface area of the referenced solid object. The function supports only valid solids objects.</Description>
    <ShortDesc>Calculates the surface area of the referenced solid.  The value will be in the current Volume Units.</ShortDesc>
    <Comments>Calculates the volume of the given object if a valid solid.</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]        volume, area: REAL;[[BR]]BEGIN[[BR]]        IF FSActLayer &lt;&gt; NIL THEN BEGIN[[BR]]                volume := CalcVolume(FSActLayer);[[BR]]                area := CalcSurfaceArea(FSActLayer);[[BR]]                Message('Volume ', volume, ', surface area ', area);[[BR]]        END;[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2818</ID>
    <IDName>funcObjSurfaceArea</IDName>
    <InternalFunctionName>MP_ObjSurfaceArea</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>solidObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to solids object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ObjVolume</Name>
    <Version>1250</Version>
    <Category>Objects - Solids</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Function [[name]] calculates the volume of the referenced solid object. The function supports only valid solids objects.</Description>
    <ShortDesc>Calculates the volume of the referenced solid object.  The value will be in the current Volume Units.</ShortDesc>
    <Comments>Calculates the volume of the given object if a valid solid.</Comments>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]        volume, area: REAL;[[BR]]BEGIN[[BR]]        IF FSActLayer &lt;&gt; NIL THEN BEGIN[[BR]]                volume := CalcVolume(FSActLayer);[[BR]]                area := CalcSurfaceArea(FSActLayer);[[BR]]                Message('Volume ', volume, ', surface area ', area);[[BR]]        END;[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2819</ID>
    <IDName>funcObjVolume</IDName>
    <InternalFunctionName>MP_ObjVolume</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>solidObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to solids object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CriteriaArea</Name>
    <ChangedDate>2011:01:03T11:54:00</ChangedDate>
    <Version>1200</Version>
    <OldVersion>1700</OldVersion>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the area of an object. If more than one object matches the search criteria, the function will return the sum of all the matching object areas.[[BR]][[BR]]</Description>
    <ShortDesc>Returns the area of the objects matching the search criteria.  The value will be in the current area units.</ShortDesc>
    <Example>totalA:=Area((C='Plywood')and(L='First'));[[BR]]{returns the area of all objects in class 'Plywood' on layer 'First'}</Example>
    <IDName>funcCriteriaArea</IDName>
    <InternalFunctionName>MP_CriteriaArea</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CriteriaSurfaceArea</Name>
    <ChangedDate>2011:01:03T11:55:00</ChangedDate>
    <Version>1200</Version>
    <OldVersion>1700</OldVersion>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the surface area of the items matching the specified criteria. If more than one object matches the search criteria, the sum of all the surface areas of the matching objects will be returned. [[BR]][[BR]][[name]] will return only return areas on objects which support the solids modelling functions.</Description>
    <ShortDesc>Returns the surface area of the items matching the current criteria.  The value will be in the current Area units.</ShortDesc>
    <Comments>This function returns the surface area of the items matching the current criteria.  It will return 0 for any objects that will not work with the solids modeling functions.</Comments>
    <Example>totalArea:=[[name]]((C='Empty Space'));</Example>
    <IDName>funcCriteriaSurfaceArea</IDName>
    <InternalFunctionName>MP_CriteriaSurfaceArea</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CriteriaVolume</Name>
    <ChangedDate>2011:01:03T11:55:00</ChangedDate>
    <Version>1200</Version>
    <OldVersion>1700</OldVersion>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the volume of the items matching the specified criteria. If more than one object matches the search criteria, the sum of all the volumes of the matching objects will be returned. [[BR]][[BR]][[name]] will return only return volumes on objects which support the solids modelling functions.</Description>
    <ShortDesc>Returns the volume of the items matching the current criteria.  The value will be in the current Volume units.</ShortDesc>
    <Comments>This function returns the volume of the items matching the current criteria.  It will return 0 for any objects that will not work with the solids modeling functions.</Comments>
    <Example>totalVol:=[[name]]((C='Empty Space'));</Example>
    <IDName>funcCriteriaVolume</IDName>
    <InternalFunctionName>MP_CriteriaVolume</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Split2DObjectByLine</Name>
    <Version>1200</Version>
    <Category>Graphic Calculation</Category>
    <Type>Procedure</Type>
    <Description>Splits objectHd along a line defined by the two points.</Description>
    <ShortDesc>Splits objectHd along a line defined by the two points.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   polyHandle :HANDLE;[[BR]]   lineHandle :HANDLE;[[BR]]   resultHandle :HANDLE;[[BR]]   begPt :VECTOR;[[BR]]   endPt :VECTOR;[[BR]]BEGIN[[BR]]   CallTool(-204); polyHandle := FSActLayer;[[BR]]   CallTool(-201); lineHandle := FSActLayer;[[BR]]   GetSegPt1(lineHandle, begPt.x, begPt.y);[[BR]]   GetSegPt2(lineHandle, endPt.x, endPt.y);[[BR]]   Split2DObjectByLine(polyHandle, begPt.x, begPt.y, endPt.x, endPt.y, resultHandle);[[BR]]   resultHandle := CreateDuplicateObject(resultHandle, NIL);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2823</ID>
    <IDName>procSplit2DObjectByLine</IDName>
    <InternalFunctionName>MP_Split2DObjectByLine</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHd</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>p1</Name>
        <Type>globPtMode</Type>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>globPtMode</Type>
      </Param>
      <Param>
        <Name>listHds</Name>
        <Type>handleVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AcquireExportPDFSettingsAndLocation</Name>
    <Version>1250</Version>
    <Category>Command</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Asks the user for the Export PDF settings and the PDF file name (or folder name if the parameter is true).  This is intended to support Batch PDF Export.</Description>
    <ShortDesc>Asks the user for the Export PDF settings and the PDF file name (or folder name if the parameter is true).  This is intended to support Batch PDF Export.</ShortDesc>
    <ID>2824</ID>
    <IDName>funcAcquireExportPDFSettingsAndLocation</IDName>
    <InternalFunctionName>MP_AcquireExportPDFSettingsAndLocation</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>inbSeparateDocuments</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>OpenPDFDocument</Name>
    <ChangedDate>2017:04:14T10:38:00</ChangedDate>
    <Version>1250</Version>
    <Category>Command</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Begins the export to a PDF document.  You must call AcquireExportPDFSettingsAndLocation before calling this function. This is intended to support Batch PDF Export.</Description>
    <ShortDesc>Begins the export to a PDF document.  You must call AcquireExportPDFSettingsAndLocation before calling this function. This is intended to support Batch PDF Export.</ShortDesc>
    <ID>2825</ID>
    <IDName>funcOpenPDFDocument</IDName>
    <InternalFunctionName>MP_OpenPDFDocument</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>inFilenameStr</Name>
        <Type>eCharDynarrayMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ExportPDFPages</Name>
    <ChangedDate>2017:04:14T10:39:00</ChangedDate>
    <Version>1250</Version>
    <Category>Command</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>This will export the current document to PDF.  You must call OpenPDFDocument before calling this function.  This is intended to support Batch Export to PDF.</Description>
    <ShortDesc>This will export the current document to PDF.  You must call OpenPDFDocument before calling this function.  This is intended to support Batch Export to PDF.</ShortDesc>
    <ID>2826</ID>
    <IDName>funcExportPDFPages</IDName>
    <InternalFunctionName>MP_ExportPDFPages</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>savedViewNameStr</Name>
        <Type>eCharDynarrayMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ClosePDFDocument</Name>
    <Version>1250</Version>
    <Category>Command</Category>
    <Type>Procedure</Type>
    <Description>This will finish creating the PDF document that you started with OpenPDFDocument.  This is intended to support Batch Export to PDF.</Description>
    <ShortDesc>This will finish creating the PDF document that you started with OpenPDFDocument.  This is intended to support Batch Export to PDF.</ShortDesc>
    <ID>2827</ID>
    <IDName>procClosePDFDocument</IDName>
    <InternalFunctionName>MP_ClosePDFDocument</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>ShowEnhancedPullDownMenuGroupIcon</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Determines if the group icon should be shown in the specified enhanced pull down menu.</Description>
    <ShortDesc>Determines if the group icon should be shown in the specified enhanced pull down menu.</ShortDesc>
    <ID>2828</ID>
    <IDName>procShowEnhancedPullDownMenuGroupIcon</IDName>
    <InternalFunctionName>MP_ShowEnhancedPullDownMenuGroupIcon</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>liDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>liComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>bShowGroupIcon</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnableLBUpdates</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>Determines if updates should be enabled for the specified list browser.</Description>
    <ShortDesc>Determines if updates should be enabled for the specified list browser.</ShortDesc>
    <ID>2829</ID>
    <IDName>procEnableLBUpdates</IDName>
    <InternalFunctionName>MP_EnableLBUpdates</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>liDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>liComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>bEnableUpdates</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetFocusOnItem</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the keyboard input focus on the specified item.</Description>
    <ShortDesc>Sets the keyboard input focus on the specified item.</ShortDesc>
    <ID>2830</ID>
    <IDName>procSetFocusOnItem</IDName>
    <InternalFunctionName>MP_SetFocusOnItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>liDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>liComponentID</Name>
        <Type>longMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RefreshItem</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Refreshes the specified item.</Description>
    <ShortDesc>Refreshes the specified item.</ShortDesc>
    <ID>2831</ID>
    <IDName>procRefreshItem</IDName>
    <InternalFunctionName>MP_RefreshItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>liDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>liComponentID</Name>
        <Type>longMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WorksheetMergeCells</Name>
    <Version>1250</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Merges the specified cells into a single cell.</Description>
    <ShortDesc>Merges the specified cells into a single cell.</ShortDesc>
    <Result>'true' if operation was successful[[BR]]'false' otherwise.</Result>
    <ID>2832</ID>
    <IDName>funcWorksheetMergeCells</IDName>
    <InternalFunctionName>MP_WorksheetMergeCells</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Worksheet on which function is to operate.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of range to merge.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of range to merge.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of range to merge.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of range to merge.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WorksheetSplitCells</Name>
    <Version>1250</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Splits the specified cells back into individual cells.</Description>
    <ShortDesc>Splits the specified cells back into individual cells.</ShortDesc>
    <Result>'true' if operation was successful[[BR]]'false' otherwise.</Result>
    <ID>2833</ID>
    <IDName>funcWorksheetSplitCells</IDName>
    <InternalFunctionName>MP_WorksheetSplitCells</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Worksheet on which function is to operate.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of range to split.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of range to split.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of range to split.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of range to split.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSMergedCellRange</Name>
    <Version>1250</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the range of cells covered by the specified cell. Returns true if the specified cell is a merged cell.</Description>
    <ShortDesc>Gets the range of cells covered by the specified cell. Returns true if the specified cell is a merged cell.</ShortDesc>
    <Result>'true' if specified cell is a merged cell[[BR]]'false' otherwise.</Result>
    <ID>2834</ID>
    <IDName>funcGetWSMergedCellRange</IDName>
    <InternalFunctionName>MP_GetWSMergedCellRange</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Worksheet on which function is to operate.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row index of merged cell from which to get the covered range.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column index of merged cell from which to get the covered range.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intVarMode</Type>
        <Desc>Top row index of merged cell range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intVarMode</Type>
        <Desc>Left column index of merged cell range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intVarMode</Type>
        <Desc>Bottom row index of merged cell range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intVarMode</Type>
        <Desc>Right column index of merged cell range.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellTopBorder</Name>
    <ChangedDate>2018:03:01T09:07:00</ChangedDate>
    <Version>1250</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Deprecated - use SetWsCellTopBN instead[[BR]]</Description>
    <ShortDesc>Deprecated - use SetWsCellTopBN instead</ShortDesc>
    <Comments>Deprecated - use SetWsCellTopBN instead</Comments>
    <ID>2835</ID>
    <IDName>procSetWSCellTopBorder</IDName>
    <InternalFunctionName>MP_SetWSCellTopBorder</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Worksheet on which function is to operate.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of range to set.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of range to set.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of range to set.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of range to set.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
        <Desc>Border line style to be set.(0 = None; 2 = Solid, -1..-32 (dash style index) = Dash)</Desc>
      </Param>
      <Param>
        <Name>weight</Name>
        <Type>intMode</Type>
        <Desc>Border line weight to be set. (in Mils)</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>longMode</Type>
        <Desc>Border line color to be set. (color index: 0..255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellLeftBorder</Name>
    <ChangedDate>2018:03:01T09:08:00</ChangedDate>
    <Version>1250</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Deprecated - use SetWsCellLeftBN instead</Description>
    <ShortDesc>Deprecated - use SetWsCellLeftBN instead</ShortDesc>
    <Comments>Deprecated - use SetWsCellLeftBN instead</Comments>
    <ID>2836</ID>
    <IDName>procSetWSCellLeftBorder</IDName>
    <InternalFunctionName>MP_SetWSCellLeftBorder</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Worksheet on which function is to operate.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of range to set.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of range to set.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of range to set.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of range to set.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
        <Desc>Border line style to be set.(0 = None; 2 = Solid, -1..-32 (dash style index) = Dash)</Desc>
      </Param>
      <Param>
        <Name>weight</Name>
        <Type>intMode</Type>
        <Desc>Border line weight to be set.(in Mils)</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>longMode</Type>
        <Desc>Border line color to be set. (color index: 0..255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellBottomBorder</Name>
    <ChangedDate>2018:03:01T09:10:00</ChangedDate>
    <Version>1250</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Deprecated - use SetWsCellBottomBN instead</Description>
    <ShortDesc>Deprecated - use SetWsCellBottomBN instead</ShortDesc>
    <Comments>Deprecated - use SetWsCellBottomBN instead</Comments>
    <ID>2837</ID>
    <IDName>procSetWSCellBottomBorder</IDName>
    <InternalFunctionName>MP_SetWSCellBottomBorder</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Worksheet on which function is to operate.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of range to set.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of range to set.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of range to set.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of range to set.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
        <Desc>Border line style to be set.(0 = None; 2 = Solid, -1..-32 (dash style index) = Dash)</Desc>
      </Param>
      <Param>
        <Name>weight</Name>
        <Type>intMode</Type>
        <Desc>Border line weight to be set.(in Mils)</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>longMode</Type>
        <Desc>Border line color to be set. (color index: 0..255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellRightBorder</Name>
    <ChangedDate>2018:03:01T09:11:00</ChangedDate>
    <Version>1250</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Deprecated - use SetWsCellRightBN instead</Description>
    <ShortDesc>Deprecated - use SetWsCellRightBN instead</ShortDesc>
    <Comments>Deprecated - use SetWsCellRightBN instead</Comments>
    <ID>2838</ID>
    <IDName>procSetWSCellRightBorder</IDName>
    <InternalFunctionName>MP_SetWSCellRightBorder</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Worksheet on which function is to operate.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of range to set.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of range to set.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of range to set.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of range to set.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
        <Desc>Border line style to be set.(0 = None; 2 = Solid, -1..-32 (dash style index) = Dash)</Desc>
      </Param>
      <Param>
        <Name>weight</Name>
        <Type>intMode</Type>
        <Desc>Border line weight to be set.(in Mils)</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>longMode</Type>
        <Desc>Border line color to be set. (color index: 0..255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellOutlineBorder</Name>
    <ChangedDate>2018:03:01T09:12:00</ChangedDate>
    <Version>1250</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Deprecated - use SetWsCellOutlineBN instead</Description>
    <ShortDesc>Deprecated - use SetWsCellOutlineBN instead</ShortDesc>
    <Comments>Deprecated - use SetWsCellOutlineBN instead</Comments>
    <ID>2839</ID>
    <IDName>procSetWSCellOutlineBorder</IDName>
    <InternalFunctionName>MP_SetWSCellOutlineBorder</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Worksheet on which function is to operate.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of range to set.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of range to set.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of range to set.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of range to set.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
        <Desc>Border line style to be set.(0 = None; 2 = Solid, -1..-32 (dash style index) = Dash)</Desc>
      </Param>
      <Param>
        <Name>weight</Name>
        <Type>intMode</Type>
        <Desc>Border line weight to be set.(in Mils)</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>longMode</Type>
        <Desc>Border line color to be set. (color index: 0..255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AssociateLinearDimension</Name>
    <Version>1250</Version>
    <Category>Dimensions</Category>
    <Type>Procedure</Type>
    <Description>Associates a linear dimension with an object when the dimension's endpoints are coincident with objects in the drawing.  When selectedObjectsMode is true, only selected objects will be checked to see if they should be associated with the linear dimension.</Description>
    <ShortDesc>Associates a linear dimension with an object if the dimension's endpoints are coincident with the object; when selectedObjectsMode is true, only selected objects will be checked.</ShortDesc>
    <ID>2840</ID>
    <IDName>procAssociateLinearDimension</IDName>
    <InternalFunctionName>MP_AssociateLinearDimension</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>selectedObjectsMode</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellInsideHorizBorder</Name>
    <ChangedDate>2018:03:01T09:12:00</ChangedDate>
    <Version>1250</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Deprecated - use SetWsCellInsideHzBN instead</Description>
    <ShortDesc>Deprecated - use SetWsCellInsideHzBN instead</ShortDesc>
    <Comments>Deprecated - use SetWsCellInsideHzBN instead</Comments>
    <ID>2841</ID>
    <IDName>procSetWSCellInsideHorizBorder</IDName>
    <InternalFunctionName>MP_SetWSCellInsideHorizBorder</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Worksheet on which function is to operate.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of range to set.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of range to set.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of range to set.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of range to set.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
        <Desc>Border line style to be set.(0 = None; 2 = Solid, -1..-32 (dash style index) = Dash)</Desc>
      </Param>
      <Param>
        <Name>weight</Name>
        <Type>intMode</Type>
        <Desc>Border line weight to be set.(in Mils)</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>longMode</Type>
        <Desc>Border line color to be set. (color index: 0..255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellInsideVertBorder</Name>
    <ChangedDate>2018:03:01T09:13:00</ChangedDate>
    <Version>1250</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Deprecated - use SetWsCellInsideVtBN instead</Description>
    <ShortDesc>Deprecated - use SetWsCellInsideVtBN instead</ShortDesc>
    <Comments>Deprecated - use SetWsCellInsideVtBN instead</Comments>
    <ID>2842</ID>
    <IDName>procSetWSCellInsideVertBorder</IDName>
    <InternalFunctionName>MP_SetWSCellInsideVertBorder</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Worksheet on which function is to operate.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of range to set.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of range to set.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of range to set.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of range to set.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
        <Desc>Border line style to be set.(0 = None; 2 = Solid, -1..-32 (dash style index) = Dash)</Desc>
      </Param>
      <Param>
        <Name>weight</Name>
        <Type>intMode</Type>
        <Desc>Border line weight to be set.(in Mils)</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>longMode</Type>
        <Desc>Border line color to be set. (color index: 0..255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateChainDimension</Name>
    <Version>1250</Version>
    <Category>Dimensions</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates and returns a single chain dimension object when the two dimensions or chains that are passed in meet the requirements for being in a single chain dimension object.</Description>
    <ShortDesc>Creates and returns a new chain dimension object when the two dimensions or chains that are passed in meet the requirements for being in a single chain dimension object.</ShortDesc>
    <ID>2843</ID>
    <IDName>funcCreateChainDimension</IDName>
    <InternalFunctionName>MP_CreateChainDimension</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h1</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>h2</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertNewDLComponent</Name>
    <ChangedDate>2017:10:26T09:17:00</ChangedDate>
    <Version>1250</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deprecated - will generate error. Use InsertNewDLCompN instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use InsertNewDLCompN instead.</ShortDesc>
    <SeeAlso>InsertNewDLCompN</SeeAlso>
    <Comments>Deprecated - will generate error. Use InsertNewDLCompN instead. The dash style it used no longer exists. Line types are used instead. Original description was: Inserts a new component before index in the Double Line Preferences.</Comments>
    <ID>2844</ID>
    <IDName>funcInsertNewDLComponent</IDName>
    <InternalFunctionName>MP_InsertNewDLComponent</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>beforeIndex</Name>
        <Type>intMode</Type>
        <Desc>The index before which to insert the new component.</Desc>
      </Param>
      <Param>
        <Name>widthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>The width of the component.</Desc>
      </Param>
      <Param>
        <Name>fill</Name>
        <Type>longMode</Type>
        <Desc>The fill of the component.  Positive values for patterns, negative ref numbers for hatches.</Desc>
      </Param>
      <Param>
        <Name>penWeightLeft</Name>
        <Type>intMode</Type>
        <Desc>The pen weight of the component's left line.</Desc>
      </Param>
      <Param>
        <Name>penWeightRight</Name>
        <Type>intMode</Type>
        <Desc>The pen weight of the component's right line.</Desc>
      </Param>
      <Param>
        <Name>penStyleLeft</Name>
        <Type>intMode</Type>
        <Desc>The pen style of the component's left line.  Positive values for patterns, negative values for dash styles.</Desc>
      </Param>
      <Param>
        <Name>penStyleRight</Name>
        <Type>intMode</Type>
        <Desc>The pen style of the component's right line.  Positive values for patterns, negative values for dash styles.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DeleteDLComponent</Name>
    <Version>1250</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deletes the nth component of the Double Line Preferences, where n is equal to index.</Description>
    <ShortDesc>Deletes the nth component of the Double Line Preferences, where n is equal to index.</ShortDesc>
    <SeeAlso>InsertNewDLComponent</SeeAlso>
    <ID>2845</ID>
    <IDName>funcDeleteDLComponent</IDName>
    <InternalFunctionName>MP_DeleteDLComponent</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component to delete.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDLComponentWidth</Name>
    <Version>1250</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the width of the component at index in the Double Line Preferences.</Description>
    <ShortDesc>Gets the width of the component at index in the Double Line Preferences.</ShortDesc>
    <SeeAlso>SetDLComponentWidth</SeeAlso>
    <ID>2846</ID>
    <IDName>funcGetDLComponentWidth</IDName>
    <InternalFunctionName>MP_GetDLComponentWidth</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>rVarMode</Type>
        <Desc>Returns the width of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDLComponentWidth</Name>
    <Version>1250</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the width of the nth component of the Double Line Preferences, where n is equal to index.</Description>
    <ShortDesc>Sets the width of the nth component of the Double Line Preferences, where n is equal to index.</ShortDesc>
    <SeeAlso>GetDLComponentWidth</SeeAlso>
    <ID>2847</ID>
    <IDName>funcSetDLComponentWidth</IDName>
    <InternalFunctionName>MP_SetDLComponentWidth</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>widthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>The width of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDLComponentPenWeights</Name>
    <Version>1250</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the pen weights of the left and right sides of the component at index in the Double Line Preferences.</Description>
    <ShortDesc>Gets the pen weights of the left and right sides of the component at index in the Double Line Preferences.</ShortDesc>
    <SeeAlso>SetDLComponentPenWeights</SeeAlso>
    <ID>2848</ID>
    <IDName>funcGetDLComponentPenWeights</IDName>
    <InternalFunctionName>MP_GetDLComponentPenWeights</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>penWeightLeft</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the pen weight of the component's left line.</Desc>
      </Param>
      <Param>
        <Name>penWeightRight</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the pen weight of the component's right line.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDLComponentPenWeights</Name>
    <Version>1250</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the left and right pen weights for the component at index in the Double Line Preferences.</Description>
    <ShortDesc>Sets the left and right pen weights for the component at index in the Double Line Preferences.</ShortDesc>
    <SeeAlso>GetDLComponentPenWeights</SeeAlso>
    <ID>2849</ID>
    <IDName>funcSetDLComponentPenWeights</IDName>
    <InternalFunctionName>MP_SetDLComponentPenWeights</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>penWeightLeft</Name>
        <Type>intMode</Type>
        <Desc>The pen weight of the component's left line.</Desc>
      </Param>
      <Param>
        <Name>penWeightRight</Name>
        <Type>intMode</Type>
        <Desc>The pen weight of the component's right line.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDLComponentPenStyles</Name>
    <ChangedDate>2017:10:26T09:16:00</ChangedDate>
    <Version>1250</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deprecated - will generate error. Use GetDLCompPenStylesN instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use GetDLCompPenStylesN instead.</ShortDesc>
    <SeeAlso> GetDLCompPenStylesN</SeeAlso>
    <Comments>Deprecated - will generate error. Use GetDLCompPenStylesN instead. The dash style it used no longer exists. Line types are used instead. Original description was: Gets the left and right side pen styles of the component at index in the Double Line Preferences.</Comments>
    <ID>2850</ID>
    <IDName>funcGetDLComponentPenStyles</IDName>
    <InternalFunctionName>MP_GetDLComponentPenStyles</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>penStyleLeft</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the pen style of the component's left line.  Positive values for patters, negative values for dash styles.</Desc>
      </Param>
      <Param>
        <Name>penStyleRight</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the pen style of the component's right line.  Positive values for patterns, negative values for dash styles.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDLComponentPenStyles</Name>
    <ChangedDate>2017:10:26T09:19:00</ChangedDate>
    <Version>1250</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deprecated - will generate error. Use SetDLCompPenStylesN instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use SetDLCompPenStylesN instead.</ShortDesc>
    <SeeAlso>SetDLCompPenStylesN</SeeAlso>
    <Comments>Deprecated - will generate error. Use SetDLCompPenStylesN instead. The dash style it used no longer exists. Line types are used instead. Original description was: Sets the left and right pen styles for the component at index in the Double Line Preferences.</Comments>
    <ID>2851</ID>
    <IDName>funcSetDLComponentPenStyles</IDName>
    <InternalFunctionName>MP_SetDLComponentPenStyles</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>penStyleLeft</Name>
        <Type>intMode</Type>
        <Desc>The pen style of the component's left line.  Positive values for patterns, negative values for dash styles.</Desc>
      </Param>
      <Param>
        <Name>penStyleRight</Name>
        <Type>intMode</Type>
        <Desc>The pen style of the component's right line.  Positive values for patterns, negative values for dash styles.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDLComponentFill</Name>
    <Version>1250</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the fill of the component at index in the Double Line Preferences.</Description>
    <ShortDesc>Gets the fill of the component at index in the Double Line Preferences.</ShortDesc>
    <SeeAlso>SetDLComponentFill</SeeAlso>
    <ID>2852</ID>
    <IDName>funcGetDLComponentFill</IDName>
    <InternalFunctionName>MP_GetDLComponentFill</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>fill</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns the fill of the component.  Positive values for patterns, negative ref numbers for hatches.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDLComponentFill</Name>
    <Version>1250</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the fill of the component at index in the Double Line Preferences.</Description>
    <ShortDesc>Sets the fill of the component at index in the Double Line Preferences.</ShortDesc>
    <SeeAlso>GetDLComponentFill</SeeAlso>
    <ID>2853</ID>
    <IDName>funcSetDLComponentFill</IDName>
    <InternalFunctionName>MP_SetDLComponentFill</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>fill</Name>
        <Type>longMode</Type>
        <Desc>The fill of the component.  Positive values for patterns, negative object indexes for hatches.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumberOfDLComponents</Name>
    <Version>1250</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the number of components in the Double Line Preferences.</Description>
    <ShortDesc>Gets the number of components in the Double Line Preferences.</ShortDesc>
    <ID>2854</ID>
    <IDName>funcGetNumberOfDLComponents</IDName>
    <InternalFunctionName>MP_GetNumberOfDLComponents</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>numComponents</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the number of components.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DeleteAllComponents</Name>
    <ChangedDate>2010:08:09T16:27:00</ChangedDate>
    <Version>1250</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deletes all components in an object.</Description>
    <ShortDesc>Deletes all components in an object.</ShortDesc>
    <ID>2855</ID>
    <IDName>funcDeleteAllComponents</IDName>
    <InternalFunctionName>MP_DeleteAllComponents</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DeleteAllDLComponents</Name>
    <Version>1250</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deletes all components in the Double Line Preferences.</Description>
    <ShortDesc>Deletes all components in the Double Line Preferences.</ShortDesc>
    <ID>2856</ID>
    <IDName>funcDeleteAllDLComponents</IDName>
    <InternalFunctionName>MP_DeleteAllDLComponents</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetDLControlOffset</Name>
    <Version>1250</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Gets the Double Line Preferences control offset.</Description>
    <ShortDesc>Gets the Double Line Preferences control offset.</ShortDesc>
    <SeeAlso>SetDLControlOffset</SeeAlso>
    <ID>2857</ID>
    <IDName>funcGetDLControlOffset</IDName>
    <InternalFunctionName>MP_GetDLControlOffset</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>SetDLControlOffset</Name>
    <Version>1250</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Sets the Double Line Preferences control offset.</Description>
    <ShortDesc>Sets the Double Line Preferences control offset.</ShortDesc>
    <SeeAlso>GetDLControlOffset</SeeAlso>
    <ID>2858</ID>
    <IDName>procSetDLControlOffset</IDName>
    <InternalFunctionName>MP_SetDLControlOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>controlOffsetDistance</Name>
        <Type>distanceMode</Type>
        <Desc>The control offset.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDLSeparation</Name>
    <Version>1250</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Gets the Double Line Preferences separation.</Description>
    <ShortDesc>Gets the Double Line Preferences separation.</ShortDesc>
    <SeeAlso>SetDLSeparation</SeeAlso>
    <ID>2859</ID>
    <IDName>funcGetDLSeparation</IDName>
    <InternalFunctionName>MP_GetDLSeparation</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>SetDLSeparation</Name>
    <Version>1250</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Sets the Double Line Preferences separation.</Description>
    <ShortDesc>Sets the Double Line Preferences separation.</ShortDesc>
    <SeeAlso>GetDLSeparation</SeeAlso>
    <ID>2860</ID>
    <IDName>procSetDLSeparation</IDName>
    <InternalFunctionName>MP_SetDLSeparation</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>separationDistance</Name>
        <Type>distanceMode</Type>
        <Desc>The separation.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDLOptions</Name>
    <Version>1250</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the Double Line Preferences options.  0 for Create Lines, 1 for Create Polygons, 2 for Create Lines and Polygons.</Description>
    <ShortDesc>Gets the Double Line Preferences options.  0 for Create Lines, 1 for Create Polygons, 2 for Create Lines and Polygons.</ShortDesc>
    <SeeAlso>SetDLOptions</SeeAlso>
    <ID>2861</ID>
    <IDName>funcGetDLOptions</IDName>
    <InternalFunctionName>MP_GetDLOptions</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>SetDLOptions</Name>
    <Version>1250</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Gets the Double Line Preferences options.  0 for Create Lines, 1 for Create Polygons, 2 for Create Lines and Polygons.</Description>
    <ShortDesc>Gets the Double Line Preferences options.  0 for Create Lines, 1 for Create Polygons, 2 for Create Lines and Polygons.</ShortDesc>
    <SeeAlso>GetDLOptions</SeeAlso>
    <ID>2862</ID>
    <IDName>procSetDLOptions</IDName>
    <InternalFunctionName>MP_SetDLOptions</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>options</Name>
        <Type>intMode</Type>
        <Desc>The options.  0 for Create Lines, 1 for Create Polygons, 2 for Create Lines and Polygons.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLinkHeightToLayerDeltaZ</Name>
    <ChangedDate>2011:03:28T12:08:00</ChangedDate>
    <Version>1250</Version>
    <OldVersion Mode="AsWarning">1700</OldVersion>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns whether or not the wall's height is linked to the layer delta z.</Description>
    <ShortDesc>Returns whether or not the wall's height is linked to the layer delta z.</ShortDesc>
    <SeeAlso>SetLinkHeightToLayerDeltaZ</SeeAlso>
    <ID>2863</ID>
    <IDName>funcGetLinkHeightToLayerDeltaZ</IDName>
    <InternalFunctionName>MP_GetLinkHeightToLayerDeltaZ</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theWall</Name>
        <Type>handleMode</Type>
        <Desc>The wall.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLinkHeightToLayerDeltaZ</Name>
    <ChangedDate>2011:03:28T12:08:00</ChangedDate>
    <Version>1250</Version>
    <OldVersion Mode="AsWarning">1700</OldVersion>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets whether or not the wall's height is linked to the layer delta z.</Description>
    <ShortDesc>Sets whether or not the wall's height is linked to the layer delta z.</ShortDesc>
    <Result>Returns success status.</Result>
    <SeeAlso>GetLinkHeightToLayerDeltaZ</SeeAlso>
    <ID>2864</ID>
    <IDName>funcSetLinkHeightToLayerDeltaZ</IDName>
    <InternalFunctionName>MP_SetLinkHeightToLayerDeltaZ</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theWall</Name>
        <Type>handleMode</Type>
        <Desc>The wall.</Desc>
      </Param>
      <Param>
        <Name>linkToLayerDeltaZ</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the wall's height is linked to the layer delta z.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLayerDeltaZOffset</Name>
    <ChangedDate>2011:03:28T12:08:00</ChangedDate>
    <Version>1250</Version>
    <OldVersion Mode="AsWarning">1700</OldVersion>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the wall height's offset to the layer delta z.</Description>
    <ShortDesc>Returns the wall height's offset to the layer delta z.</ShortDesc>
    <SeeAlso>SetLayerDeltaZOffset</SeeAlso>
    <ID>2865</ID>
    <IDName>funcGetLayerDeltaZOffset</IDName>
    <InternalFunctionName>MP_GetLayerDeltaZOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theWall</Name>
        <Type>handleMode</Type>
        <Desc>The wall.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLayerDeltaZOffset</Name>
    <ChangedDate>2011:03:28T12:08:00</ChangedDate>
    <Version>1250</Version>
    <OldVersion Mode="AsWarning">1700</OldVersion>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the wall height's offset to the layer delta z.</Description>
    <ShortDesc>Sets the wall height's offset to the layer delta z.</ShortDesc>
    <Result>Returns success status.</Result>
    <SeeAlso>GetLayerDeltaZOffset</SeeAlso>
    <ID>2866</ID>
    <IDName>funcSetLayerDeltaZOffset</IDName>
    <InternalFunctionName>MP_SetLayerDeltaZOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theWall</Name>
        <Type>handleMode</Type>
        <Desc>The wall.</Desc>
      </Param>
      <Param>
        <Name>layerDeltaZOffset</Name>
        <Type>realMode</Type>
        <Desc>The wall height's offset to the layer delta z.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWallCaps</Name>
    <Version>1250</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Gets the wall's caps.</Description>
    <ShortDesc>Gets the wall's caps.</ShortDesc>
    <SeeAlso>SetWallCaps</SeeAlso>
    <ID>2867</ID>
    <IDName>procGetWallCaps</IDName>
    <InternalFunctionName>MP_GetWallCaps</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>theWall</Name>
        <Type>handleMode</Type>
        <Desc>The wall.</Desc>
      </Param>
      <Param>
        <Name>leftCap</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the wall has a left cap.</Desc>
      </Param>
      <Param>
        <Name>rightCap</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the wall has a right cap.</Desc>
      </Param>
      <Param>
        <Name>round</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the wall's caps are round.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWallCaps</Name>
    <Version>1250</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Set the wall's caps.</Description>
    <ShortDesc>Sets the wall's caps.</ShortDesc>
    <Result>Returns success status.</Result>
    <SeeAlso>GetWallCaps</SeeAlso>
    <ID>2868</ID>
    <IDName>funcSetWallCaps</IDName>
    <InternalFunctionName>MP_SetWallCaps</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theWall</Name>
        <Type>handleMode</Type>
        <Desc>The wall.</Desc>
      </Param>
      <Param>
        <Name>leftCap</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the wall has a left cap.</Desc>
      </Param>
      <Param>
        <Name>rightCap</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the wall has a right cap.</Desc>
      </Param>
      <Param>
        <Name>round</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the wall's caps are round.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWallCapsOffsets</Name>
    <Version>1250</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Set the wall's caps' offsets.</Description>
    <ShortDesc>Sets the wall's caps' offsets.</ShortDesc>
    <Result>Returns success status.</Result>
    <SeeAlso>GetWallCapsOffsets</SeeAlso>
    <ID>2869</ID>
    <IDName>funcSetWallCapsOffsets</IDName>
    <InternalFunctionName>MP_SetWallCapsOffsets</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theWall</Name>
        <Type>handleMode</Type>
        <Desc>The wall.</Desc>
      </Param>
      <Param>
        <Name>leftCapLeftDistance</Name>
        <Type>distanceMode</Type>
        <Desc>The left offset of the left wall cap.</Desc>
      </Param>
      <Param>
        <Name>leftCapRightDistance</Name>
        <Type>distanceMode</Type>
        <Desc>The right offset of the left wall cap.</Desc>
      </Param>
      <Param>
        <Name>rightCapLeftDistance</Name>
        <Type>distanceMode</Type>
        <Desc>The left offset of the right wall cap.</Desc>
      </Param>
      <Param>
        <Name>rightCapRightDistance</Name>
        <Type>distanceMode</Type>
        <Desc>The right offset of the right wall cap.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWallCapsOffsets</Name>
    <Version>1250</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Get the wall's caps' offsets.</Description>
    <ShortDesc>Gets the wall's caps' offsets.</ShortDesc>
    <SeeAlso>SetWallCapsOffsets</SeeAlso>
    <ID>2870</ID>
    <IDName>procGetWallCapsOffsets</IDName>
    <InternalFunctionName>MP_GetWallCapsOffsets</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theWall</Name>
        <Type>handleMode</Type>
        <Desc>The wall.</Desc>
      </Param>
      <Param>
        <Name>leftCapLeftOffset</Name>
        <Type>rVarMode</Type>
        <Desc>Returns the left offset of the left wall cap.</Desc>
      </Param>
      <Param>
        <Name>leftCapRightOffset</Name>
        <Type>rVarMode</Type>
        <Desc>Returns the right offset of the left wall cap.</Desc>
      </Param>
      <Param>
        <Name>rightCapLeftOffset</Name>
        <Type>rVarMode</Type>
        <Desc>Returns the left offset of the right wall cap.</Desc>
      </Param>
      <Param>
        <Name>rightCapRightOffset</Name>
        <Type>rVarMode</Type>
        <Desc>Returns the right offset of the right wall cap.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWallStyle</Name>
    <Version>1250</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Applies the given Wall Style to the given wall, aligning to the given offsets.</Description>
    <ShortDesc>Applies the given Wall Style to the given wall, aligning to the given offsets.</ShortDesc>
    <Result>Returns success status.</Result>
    <SeeAlso>GetWallStyle</SeeAlso>
    <ID>2871</ID>
    <IDName>funcSetWallStyle</IDName>
    <InternalFunctionName>MP_SetWallStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theWall</Name>
        <Type>handleMode</Type>
        <Desc>The wall.</Desc>
      </Param>
      <Param>
        <Name>wallStyle</Name>
        <Type>stringMode</Type>
        <Desc>The Wall Style to apply.</Desc>
      </Param>
      <Param>
        <Name>selectedOffDistance</Name>
        <Type>distanceMode</Type>
        <Desc>The offset of the wall to align to.</Desc>
      </Param>
      <Param>
        <Name>replacingOffDistance</Name>
        <Type>distanceMode</Type>
        <Desc>The offset of the Wall Style to align to.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateWallStyle</Name>
    <ChangedDate>2010:08:09T23:32:00</ChangedDate>
    <Version>1250</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a new Wall Style of the give name.  If the name is already in use, the next available name will be used.</Description>
    <ShortDesc>Creates a new Wall Style of the given name. If the name is already in use, the next available name will be used.</ShortDesc>
    <Result>Returns a handle to the new Wall Style.</Result>
    <Example>PROCEDURE Example;[[BR]]CONST[[BR]]   wallStyleName = 'Example Wall Style';[[BR]]VAR[[BR]]   wallStyleHandle :HANDLE;[[BR]]   wdth :REAL;[[BR]]   fill :LONGINT;[[BR]]   pwLeft, pwRight, psLeft, psRight :INTEGER;[[BR]]   boo :BOOLEAN;[[BR]]BEGIN[[BR]]   wallStyleHandle := CreateWallStyle(wallStyleName);[[BR]]   wdth    := 1";[[BR]]   fill    :=  1; {solid white}[[BR]]   pwLeft  := 14; {in mils}[[BR]]   pwRight := 14; {in mils}[[BR]]   psLeft  :=  2; {solid black}[[BR]]   psRight :=  2; {solid black}[[BR]]   boo := InsertNewComponent(wallStyleHandle, 1, wdth, fill, pwLeft, pwRight, psLeft, psRight);[[BR]]   SetName(wallStyleHandle, wallStyleName); {Reset the wall style name.}[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2872</ID>
    <IDName>funcCreateWallStyle</IDName>
    <InternalFunctionName>MP_CreateWallStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>wallStyleName</Name>
        <Type>stringMode</Type>
        <Desc>The name of the new Wall Style. If the name is already in use, the next available name will be used.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSelectionRange</Name>
    <Version>1201</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Returns the range of the current selection for the specified control.</Description>
    <ShortDesc>Returns the range of the current selection for the specified control.</ShortDesc>
    <ID>2873</ID>
    <IDName>procGetSelectionRange</IDName>
    <InternalFunctionName>MP_GetSelectionRange</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>controlID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>startPos</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>endPos</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetSelectionRange</Name>
    <Version>1201</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the range of the current selection for the specified control.</Description>
    <ShortDesc>Sets the range of the current selection for the specified control.</ShortDesc>
    <ID>2874</ID>
    <IDName>procSetSelectionRange</IDName>
    <InternalFunctionName>MP_SetSelectionRange</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>controlID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>startPos</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>endPos</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DeselectEditText</Name>
    <Version>1201</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Deselects all text in the specified edit control.</Description>
    <ShortDesc>Deselects all text in the specified edit control.</ShortDesc>
    <ID>2875</ID>
    <IDName>procDeselectEditText</IDName>
    <InternalFunctionName>MP_DeselectEditText</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>controlID</Name>
        <Type>longMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetActiveEditItem</Name>
    <Version>1201</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Returns the active edit control in the specified dialog.  If no edit control has the focus, -1 is returned.</Description>
    <ShortDesc>Returns the active edit control in the specified dialog.  If no edit control has the focus, -1 is returned.</ShortDesc>
    <ID>2876</ID>
    <IDName>funcGetActiveEditItem</IDName>
    <InternalFunctionName>MP_GetActiveEditItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateRightStaticText</Name>
    <Version>1201</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Similar to CreateStaticText, but creates static text that is right-justified in its control field on the dialog.</Description>
    <ShortDesc>Similar to CreateStaticText, but creates static text that is right-justified in its control field on the dialog.</ShortDesc>
    <SeeAlso>GetDlgCtrlWidthStdCh</SeeAlso>
    <ID>2877</ID>
    <IDName>procCreateRightStaticText</IDName>
    <InternalFunctionName>MP_CreateRightStaticText</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>text</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>intMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateCenteredStaticText</Name>
    <Version>1201</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Similar to CreateStaticText, but creates static text that is centered in its control field on the dialog.</Description>
    <ShortDesc>Similar to CreateStaticText, but creates static text that is centered in its control field on the dialog.</ShortDesc>
    <SeeAlso>GetDlgCtrlWidthStdCh</SeeAlso>
    <ID>2878</ID>
    <IDName>procCreateCenteredStaticText</IDName>
    <InternalFunctionName>MP_CreateCenteredStaticText</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>controlID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>text</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>intMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateCustomControl</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a layout manager control in a VectorScript to be used in conjuction with GS_OverrideControl in an external dialog handler.</Description>
    <ShortDesc>Creates a layout manager control in a VectorScript to be used in conjuction with GS_OverrideControl in an external dialog handler.</ShortDesc>
    <ID>2879</ID>
    <IDName>procCreateCustomControl</IDName>
    <InternalFunctionName>MP_CreateCustomControl</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>widthInPixels</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>heightInPixels</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EditProperties</Name>
    <Version>1250</Version>
    <Category>Criteria</Category>
    <Type>Procedure</Type>
    <Description>Displays the 'Properties' dialog for all objects matching the specified search criteria </Description>
    <ShortDesc>Displays the Properties dialog for all objects matching the specified search criteria </ShortDesc>
    <Comments>Displays the Properties dialog for all objects matching the specified search criteria</Comments>
    <IDName>procEditProperties</IDName>
    <InternalFunctionName>MP_EditProperties</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetMarkerValue</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets MarkerPopup value in dialog (replaces MarkerPopup procedures prior to VW2008).</Description>
    <ShortDesc>Sets MarkerPopup value in dialog (replaces MarkerPopup procedures prior to VW2008).</ShortDesc>
    <SeeAlso>GetMarkerValue</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   int, dialogID   :INTEGER;[[BR]]   style, angle, thicknessBasis :INTEGER;[[BR]]   width, length, thickness :REAL;[[BR]][[BR]]PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]   CASE item OF[[BR]]      SetupDialogC:[[BR]]         BEGIN[[BR]]            style := 130;[[BR]]            angle := 0;[[BR]]            width  := .125;[[BR]]		length := .125;[[BR]]		thickness := 0;[[BR]]		thicknessBasis := 0;[[BR]]            SetMarkerValue(dialogID, 4, style, angle, width, length, thicknessBasis, thickness);[[BR]]         END;[[BR]]      5: [[BR]]         BEGIN[[BR]]           GetMarkerValue(dialogID, 4, style, angle, width, length, thicknessBasis, thickness);[[BR]][[BR]]            AlrtDialog(Concat([[BR]]               'style: ', style, Chr(13), [[BR]]               'angle: ', angle, Chr(13), [[BR]]		 'width: ', width,Chr(13),[[BR]]               'length: ', length, Chr(13),[[BR]]		  'thickness: ', thickness, Chr(13),[[BR]]		  'thicknessBasis: ', thicknessBasis));[[BR]][[BR]]         END;[[BR]]   END;[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]   dialogID := CreateLayout('Test', False, 'OK', '');[[BR]]   CreateMarkerPopup(dialogID, 4);[[BR]]   CreatePushButton(dialogID, 5, '  Display Values  ');[[BR]]   SetFirstLayoutItem(dialogID, 4);[[BR]]   SetBelowItem(dialogID, 4, 5, 0, 2);[[BR]]   int := RunLayoutDialog(dialogID, Dialog_Handler);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2882</ID>
    <IDName>procSetMarkerValue</IDName>
    <InternalFunctionName>MP_SetMarkerValue</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>ID of the dialog</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>ID of the marker popup control</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
        <Desc>Marker Style</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intMode</Type>
        <Desc>Marker Angle</Desc>
      </Param>
      <Param>
        <Name>length</Name>
        <Type>realMode</Type>
        <Desc>Marker Length (In Inches)</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>realMode</Type>
        <Desc>Marker Width (In Inches)</Desc>
      </Param>
      <Param>
        <Name>basis</Name>
        <Type>intMode</Type>
        <Desc>Marker Thickness Basis</Desc>
      </Param>
      <Param>
        <Name>thickness</Name>
        <Type>realMode</Type>
        <Desc>Marker Thickness</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetMarkerValue</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Gets MarkerPopup value in dialog (replaces MarkerPopup procedures prior to VW2008).</Description>
    <ShortDesc>Gets MarkerPopup value in dialog (replaces MarkerPopup procedures prior to VW2008).</ShortDesc>
    <SeeAlso>SetmarkerValue</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   int, dialogID   :INTEGER;[[BR]]   style, angle, thicknessBasis :INTEGER;[[BR]]   width, length, thickness :REAL;[[BR]][[BR]]PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]   CASE item OF[[BR]]      SetupDialogC:[[BR]]         BEGIN[[BR]]            style := 130;[[BR]]            angle := 0;[[BR]]            width  := .125;[[BR]]		length := .125;[[BR]]		thickness := 0;[[BR]]		thicknessBasis := 0;[[BR]]            SetMarkerValue(dialogID, 4, style, angle, width, length, thicknessBasis, thickness);[[BR]]         END;[[BR]]      5: [[BR]]         BEGIN[[BR]]           GetMarkerValue(dialogID, 4, style, angle, width, length, thicknessBasis, thickness);[[BR]][[BR]]            AlrtDialog(Concat([[BR]]               'style: ', style, Chr(13), [[BR]]               'angle: ', angle, Chr(13), [[BR]]		 'width: ', width,Chr(13),[[BR]]               'length: ', length, Chr(13),[[BR]]		  'thickness: ', thickness, Chr(13),[[BR]]		  'thicknessBasis: ', thicknessBasis));[[BR]][[BR]]         END;[[BR]]   END;[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]   dialogID := CreateLayout('Test', False, 'OK', '');[[BR]]   CreateMarkerPopup(dialogID, 4);[[BR]]   CreatePushButton(dialogID, 5, '  Display Values  ');[[BR]]   SetFirstLayoutItem(dialogID, 4);[[BR]]   SetBelowItem(dialogID, 4, 5, 0, 2);[[BR]]   int := RunLayoutDialog(dialogID, Dialog_Handler);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2883</ID>
    <IDName>procGetMarkerValue</IDName>
    <InternalFunctionName>MP_GetMarkerValue</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>ID of the dialog</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>ID of the marker popup control</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intVarMode</Type>
        <Desc>On return, indicates the style of the selected marker</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>intVarMode</Type>
        <Desc>On return, indicates the angle of the selected marker (deg)</Desc>
      </Param>
      <Param>
        <Name>length</Name>
        <Type>rVarMode</Type>
        <Desc>On return, indicates the length of the selected marker (inches)</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>rVarMode</Type>
        <Desc>On return, indicates the width of the selected marker (inches)</Desc>
      </Param>
      <Param>
        <Name>basis</Name>
        <Type>intVarMode</Type>
        <Desc>On return, indicates the thickness basis of the selected marker.</Desc>
      </Param>
      <Param>
        <Name>thickness</Name>
        <Type>rVarMode</Type>
        <Desc>On return, indicates the thickness of the selected marker.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetImageControlPath</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the image control path for the specified layout manager image control.  Use with CreateImageControl.</Description>
    <ShortDesc>Sets the image control path for the specified layout manager image control.  Use with CreateImageControl.</ShortDesc>
    <ID>2884</ID>
    <IDName>funcSetImageControlPath</IDName>
    <InternalFunctionName>MP_SetImageControlPath</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>strPath</Name>
        <Type>stringMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentTextWidth</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Retrieves the static text's width in Layout Manager Units.</Description>
    <ShortDesc>Retrieves the static text's width in Layout Manager Units.</ShortDesc>
    <ID>2885</ID>
    <IDName>funcGetComponentTextWidth</IDName>
    <InternalFunctionName>MP_GetComponentTextWidth</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nWidthInLMUnits</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBColumnImage</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Draws an icon instead of text on a list browser header column.  Use with AddLBImage.</Description>
    <ShortDesc>Draws an icon instead of text on a list browser header column.  Use with AddLBImage.</ShortDesc>
    <ID>2886</ID>
    <IDName>funcSetLBColumnImage</IDName>
    <InternalFunctionName>MP_SetLBColumnImage</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nColumnIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>nImageIndex</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateClassPullDownMenu</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a Layout Manager class pull down menu control.</Description>
    <ShortDesc>Creates a Layout Manager class pull down menu control.</ShortDesc>
    <SeeAlso>CreateImageControl,GetDlgCtrlWidthStdCh</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   dialog1 :INTEGER;[[BR]]   result  :INTEGER;[[BR]]PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]END;[[BR]]BEGIN[[BR]]   dialog1 := CreateLayout('Example Dialog', FALSE, 'OK', 'Cancel');[[BR]]   CreateClassPullDownMenu(dialog1, 4, 24);[[BR]]   SetFirstLayoutItem(dialog1, 4);[[BR]]   result := RunLayoutDialog(dialog1, Dialog_Handler);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2887</ID>
    <IDName>procCreateClassPullDownMenu</IDName>
    <InternalFunctionName>MP_CreateClassPullDownMenu</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>intMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateDesignLayerPullDownMenu</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a Layout Manager design layer pull down menu control.</Description>
    <ShortDesc>Creates a Layout Manager design layer pull down menu control.</ShortDesc>
    <SeeAlso>GetDlgCtrlWidthStdCh</SeeAlso>
    <ID>2888</ID>
    <IDName>procCreateDesignLayerPullDownMenu</IDName>
    <InternalFunctionName>MP_CreateDesignLayerPullDownMenu</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>intMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateSheetLayerPullDownMenu</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a Layout Manager sheet layer pull down menu control.</Description>
    <ShortDesc>Creates a Layout Manager sheet layer pull down menu control.</ShortDesc>
    <SeeAlso>GetDlgCtrlWidthStdCh</SeeAlso>
    <ID>2889</ID>
    <IDName>procCreateSheetLayerPullDownMenu</IDName>
    <InternalFunctionName>MP_CreateSheetLayerPullDownMenu</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>intMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertProposedClassOrLayerItem</Name>
    <ChangedDate>2011:03:02T09:19:00</ChangedDate>
    <Version>1300</Version>
    <OldVersion>1700</OldVersion>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Inserts a class or layer item in the proposed section of a Class, Design Layer, or Sheet Layer Layout Manager Pull Down.</Description>
    <ShortDesc>Inserts a class or layer item in the proposed section of a Class, Design Layer, or Sheet Layer Layout Manager Pull Down. This call has been deprecated, use InsertPropClassOrLayerItem" instead.</ShortDesc>
    <ID>2890</ID>
    <IDName>funcInsertProposedClassOrLayerItem</IDName>
    <InternalFunctionName>MP_InsertProposedClassOrLayerItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>strLabel</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>nIconIndex</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateTreeControl</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a Layout Manager tree control.</Description>
    <ShortDesc>Creates a Layout Manager tree control.</ShortDesc>
    <SeeAlso>GetTreeControlSelectedItem, InsertTreeControlItem, RemoveTreeControlItem,GetDlgCtrlWidthStdCh</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   dialog1 :INTEGER;[[BR]]   result  :INTEGER;[[BR]]   widthInStdChar, heightInLines :INTEGER;[[BR]]   root1, root2, child1, child2 :INTEGER;[[BR]][[BR]]PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]   CASE item OF[[BR]]      SetupDialogC:[[BR]]         BEGIN[[BR]]            root1 := InsertTreeControlItem(dialog1, 4, 'root1', -1, 0);[[BR]]            child1 := InsertTreeControlItem(dialog1, 4, 'child1', root1, 0);[[BR]]            child2 := InsertTreeControlItem(dialog1, 4, 'child2', root1, child1);[[BR]]            root2 := InsertTreeControlItem(dialog1, 4, 'root2', -1, root1);[[BR]]            child1 := InsertTreeControlItem(dialog1, 4, 'child1', root2, 0);[[BR]]            child2 := InsertTreeControlItem(dialog1, 4, 'child2', root2, child1);[[BR]]         END;[[BR]]   END;[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]   dialog1 := CreateLayout('Example Dialog', FALSE, 'OK', 'Cancel');[[BR]]   widthInStdChar := 28;[[BR]]   heightInLines := 8;[[BR]]   CreateTreeControl(dialog1, 4, widthInStdChar, heightInLines);[[BR]]   SetFirstLayoutItem(dialog1, 4);[[BR]]   result := RunLayoutDialog(dialog1, Dialog_Handler);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2891</ID>
    <IDName>procCreateTreeControl</IDName>
    <InternalFunctionName>MP_CreateTreeControl</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>intMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
      <Param>
        <Name>heightInLines</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertTreeControlItem</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Inserts an item into a Layout Manager tree control.</Description>
    <ShortDesc>Inserts an item into a Layout Manager tree control.</ShortDesc>
    <ID>2892</ID>
    <IDName>funcInsertTreeControlItem</IDName>
    <InternalFunctionName>MP_InsertTreeControlItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>strItemLabel</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>nParentID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>nAfterID</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveTreeControlItem</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Removes an item from a Layout Manager tree control.</Description>
    <ShortDesc>Removes an item from a Layout Manager tree control.</ShortDesc>
    <ID>2893</ID>
    <IDName>funcRemoveTreeControlItem</IDName>
    <InternalFunctionName>MP_RemoveTreeControlItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nItemID</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTreeControlSelectedItem</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Retrieves the itemID of the selected item from a Layout Manager tree control.</Description>
    <ShortDesc>Retrieves the itemID of the selected item from a Layout Manager tree control.</ShortDesc>
    <ID>2894</ID>
    <IDName>funcGetTreeControlSelectedItem</IDName>
    <InternalFunctionName>MP_GetTreeControlSelectedItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nItemID</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetItemToolTipText</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the tooltip text for list browsers, list boxes, edit controls, pull down menus, and enhanced static text.  Parameters nIndex and nSubIndex are used for list browsers and list boxes only.[[BR]]</Description>
    <ShortDesc>Sets the tooltip text for list browsers, edit controls, and pull down menus.  nIndex and nSubIndex are used for list browsers only.</ShortDesc>
    <ID>2895</ID>
    <IDName>procSetItemToolTipText</IDName>
    <InternalFunctionName>MP_SetItemToolTipText</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>strToolTip</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>strSubToolTip</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>nIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>nSubIndex</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetIconPushButtonState</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Retrieves the state of the specified Layout Manager icon push button (pressed or not pressed).</Description>
    <ShortDesc>Retrieves the state of the specified Layout Manager icon push button (pressed or not pressed).</ShortDesc>
    <ID>2896</ID>
    <IDName>funcSetIconPushButtonState</IDName>
    <InternalFunctionName>MP_SetIconPushButtonState</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>bPressed</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetIconPushButtonState</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Retrieves the state of the specified Layout Manager icon push button (pressed or not pressed).</Description>
    <ShortDesc>Retrieves the state of the specified Layout Manager icon push button (pressed or not pressed).</ShortDesc>
    <ID>2897</ID>
    <IDName>funcGetIconPushButtonState</IDName>
    <InternalFunctionName>MP_GetIconPushButtonState</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>bPressed</Name>
        <Type>boolVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentRect</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Retrieves the bounding rect coordinates of the specified Layout Manager component.</Description>
    <ShortDesc>Retrieves the bounding rect coordinates of the specified Layout Manager component.</ShortDesc>
    <ID>2898</ID>
    <IDName>funcGetComponentRect</IDName>
    <InternalFunctionName>MP_GetComponentRect</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nLeft</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>nTop</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>nRight</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>nBottom</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentSize</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the width and height of the specified Layout Manager component.</Description>
    <ShortDesc>Sets the width and height of the specified Layout Manager component.</ShortDesc>
    <ID>2899</ID>
    <IDName>funcSetComponentSize</IDName>
    <InternalFunctionName>MP_SetComponentSize</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nWidthPixels</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>nHeightPixels</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AdjustComponentPixelPos</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Adjust the pixel width and height of the specified Layout Manager component.</Description>
    <ShortDesc>Adjust the pixel width and height of the specified Layout Manager component. Can be used before or after SetBelowComponent or SetRightComponent.</ShortDesc>
    <ID>2900</ID>
    <IDName>funcAdjustComponentPixelPos</IDName>
    <InternalFunctionName>MP_AdjustComponentPixelPos</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nHorizontalPixels</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>nVerticalPixels</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentIndeterminate</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determines if the specified Layout Manager attribute control (line, weight, color, etc) should be set to the third, indeterminate state.</Description>
    <ShortDesc>Determines if the specified Layout Manager attribute control (line, weight, color, etc) should be set to the third, indeterminate state.</ShortDesc>
    <ID>2901</ID>
    <IDName>funcSetComponentIndeterminate</IDName>
    <InternalFunctionName>MP_SetComponentIndeterminate</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>bIndeterminateState</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ModelPt2DToScreenPt</Name>
    <Version>1300</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Transforms a point from world coordinate to the screen coordinates in plan rotation.</Description>
    <ShortDesc>Transforms a point from world coordinate to the screen coordinates in plan rotation.</ShortDesc>
    <Comments>This routine transform  a given point from model(object) to VCS. </Comments>
    <ID>2902</ID>
    <IDName>procModelPt2DToScreenPt</IDName>
    <SpecialOverride>MPModelPt2DToScreenPt</SpecialOverride>
    <InternalFunctionName>MPModelPt2DToScreenPt</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtInOutMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ScreenPtToModelPt2D</Name>
    <Version>1300</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Transforms a point from screen coordinate in plan rotation to the model coordinates.</Description>
    <ShortDesc>Transforms a point from screen coordinate in plan rotation to the model coordinates.</ShortDesc>
    <Comments>Takes into account both translation and rotation.</Comments>
    <ID>2904</ID>
    <IDName>procScreenPtToModelPt2D</IDName>
    <SpecialOverride>MPScreenPtToModelPt2D</SpecialOverride>
    <InternalFunctionName>MPScreenPtToModelPt2D</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtInOutMode</Type>
        <Desc>Input output parameter. Coordinates of the point to be translated.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSSubrowActualCellString</Name>
    <ChangedDate>2011:04:22T10:59:00</ChangedDate>
    <Version>1300</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the actual string in a database subrow cell.</Description>
    <ShortDesc>Returns the actual string in a database subrow cell.</ShortDesc>
    <Comments>Gets the specified worksheet subrow cell's actual string.[[BR]]WARNING: Because database subrow cells and their contents are dynamically created based on the current database of objects and the current critieria string any return values from this function are not guaranteed to be correct beyond this function call. Use this function carefully and at your own risk.</Comments>
    <ID>2905</ID>
    <IDName>procGetWSSubrowActualCellString</IDName>
    <InternalFunctionName>MP_GetWSSubrowActualCellString</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Database row to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column to be queried.</Desc>
      </Param>
      <Param>
        <Name>subrow</Name>
        <Type>intMode</Type>
        <Desc>Index of subrow cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>cellString</Name>
        <Type>strVarMode</Type>
        <Desc>Actual string of subrow cell.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ForEachObjectAtPoint</Name>
    <Version>1300</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Performs an action for each object at the specified point in the drawing. This call was implemented to get past the practical limitations of PickObject, which only finds the topmost object. This call will find all of the objects at a given point.[[BR]][[BR]]"actionFunc" should actually be a function, not a procedure as the declaration indicates.[[BR]][[BR]]If the callback function returns FALSE, ForEachObjectAtPoint will not process any more objects at the specified point.[[BR]][[BR]][[note:ForEachObjectAtPoint]]</Description>
    <ShortDesc>Performs an action for each point in an object.</ShortDesc>
    <SeeAlso>PickObject, GetPickObjectInfo</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   gx1, gy1 : REAL;[[BR]][[BR]]FUNCTION DoIt(h1 :HANDLE) :BOOLEAN;[[BR]]BEGIN[[BR]]   DSelectAll;[[BR]]   SetSelect(h1);[[BR]]   Redraw;[[BR]]   Wait(1);[[BR]]END;[[BR]][[BR]]BEGIN[[BR]]   GetPt(gx1, gy1);[[BR]]   ForEachObjectAtPoint(DoIt, 0, 0, gx1, gy1, 5);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2906</ID>
    <IDName>procForEachObjectAtPoint</IDName>
    <SpecialOverride>CHECKFEOATPOINT(procForEachObjectAtPoint, MP_FEOAtPoint, userProcMode, intMode, intMode, globPtMode, realMode);</SpecialOverride>
    <Implemented>True</Implemented>
    <ImplementationDetails>Special</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>actionFunc</Name>
        <Type>userProcMode</Type>
      </Param>
      <Param>
        <Name>objOptions</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>travOptions</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>loc</Name>
        <Type>globPtMode</Type>
      </Param>
      <Param>
        <Name>pickRadius</Name>
        <Type>realMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DisplayContextualHelp</Name>
    <Version>1200</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Using the identifier string for a GUI element given by the Contextual Help Manager displays the associated contextual help. This could be a WebWorks webpage, a Internet webpage or even a local file.</Description>
    <ShortDesc>Using the identifier string for a GUI element given by the Contextual Help Manager displays the associated contextual help. This could be a WebWorks webpage, a Internet webpage or even a local file.</ShortDesc>
    <ID>2907</ID>
    <IDName>funcDisplayContextualHelp</IDName>
    <InternalFunctionName>MP_DisplayContextualHelp</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>Identifier</Name>
        <Type>stringMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ModelVecToScreenVec</Name>
    <Version>1300</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Takes Data from one space to another.</Description>
    <ShortDesc>Transforms a vector from world coordinate to the screen coordinates in plan rotation. The transformation ignores translation and just takes into account rotation.</ShortDesc>
    <Comments>This routine transforms a given vector from model(object) to VCS.</Comments>
    <ID>2909</ID>
    <IDName>procModelVecToScreenVec</IDName>
    <SpecialOverride>MPModelVecToScreenVec</SpecialOverride>
    <InternalFunctionName>MPModelVecToScreenVec</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtInOutMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ScreenVecToModelVec</Name>
    <Version>1300</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Takes data from one space to another</Description>
    <ShortDesc>Transforms a vector from screen coordinate in plan rotation to the model coordinates. The translation part of the transformation is ignored and only rotation is taken into account.</ShortDesc>
    <Comments>This routine transform  a given point from VCS(object) to Model.  Ignores the translation of the plan rotation matrix. Just takes into account the rotation</Comments>
    <ID>2911</ID>
    <IDName>procScreenVecToModelVec</IDName>
    <SpecialOverride>MPScreenVecToModelVec</SpecialOverride>
    <InternalFunctionName>MPScreenVecToModelVec</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtInOutMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RectangleN</Name>
    <Version>1300</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Creates and returns a handle to a new rectangle object with the specified bounds.</Description>
    <ShortDesc>Creates and returns a handle to a new rectangle object with the specified properties.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]BEGIN[[BR]]	RectangleN(0, 0, 1, 0, 1, 1);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2912</ID>
    <IDName>procRectangleN</IDName>
    <InternalFunctionName>MP_RectangleN</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>orgin</Name>
        <Type>globPtMode</Type>
      </Param>
      <Param>
        <Name>direction</Name>
        <Type>globPtMode</Type>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>realMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>OvalN</Name>
    <Version>1300</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Creates an oval with the specified bounds.</Description>
    <ShortDesc>Creates an oval with the specified properties.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]BEGIN[[BR]]	OvalN(0, 0, 1, 0, 1, 1);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>2914</ID>
    <IDName>procOvalN</IDName>
    <InternalFunctionName>MP_OvalN</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>orgin</Name>
        <Type>globPtMode</Type>
      </Param>
      <Param>
        <Name>direction</Name>
        <Type>globPtMode</Type>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>realMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RRectangleN</Name>
    <Version>1300</Version>
    <Category>Objects - 2D</Category>
    <Type>Procedure</Type>
    <Description>Creates and returns a handle to a new rotated rectangle object with the specified bounds</Description>
    <ShortDesc>Creates and returns a handle to a new rounded rectangle object with the specified prperties</ShortDesc>
    <ID>2915</ID>
    <IDName>procRRectangleN</IDName>
    <SpecialOverride>GetRRectN</SpecialOverride>
    <InternalFunctionName>GetRRectN</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>orgin</Name>
        <Type>globPtMode</Type>
      </Param>
      <Param>
        <Name>direction</Name>
        <Type>globPtMode</Type>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>xDiam</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>yDiam</Name>
        <Type>realMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DisplayDialogHelpC</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Constant</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>This constant is passed to the event handler routine to signal the dialog that it should display its contextual help using the help string given by the Contextual Help Manager menu.</Description>
    <ShortDesc>This constant is passed to the event handler routine to signal the dialog that it should display its contextual help using the help string given by the Contextual Help Manager menu.</ShortDesc>
    <Comments>Added 2/09/2007 by Lyndsey Ferguson</Comments>
    <ID>12916</ID>
    <IDName>kVSDisplayDialogHelpC</IDName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>IsItemEnabled</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determines if the specified item is currently enabled.</Description>
    <ShortDesc>Determines if the specified item is currently enabled.</ShortDesc>
    <ID>2917</ID>
    <IDName>funcIsItemEnabled</IDName>
    <InternalFunctionName>MP_IsItemEnabled</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsItemVisible</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determines if the specified item is currently visible.</Description>
    <ShortDesc>Determines if the specified item is currently visible.</ShortDesc>
    <ID>2918</ID>
    <IDName>funcIsItemVisible</IDName>
    <InternalFunctionName>MP_IsItemVisible</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBItemData</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>Sets the user data associated with the list browser item.</Description>
    <ShortDesc>Sets the user data associated with the list browser item.</ShortDesc>
    <ID>2919</ID>
    <IDName>procSetLBItemData</IDName>
    <InternalFunctionName>MP_SetLBItemData</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nItemIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>nSubItemIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>nUserData</Name>
        <Type>longMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBItemData</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>Retrieves the user data associated with the list browser item.</Description>
    <ShortDesc>Retrieves the user data associated with the list browser item.</ShortDesc>
    <ID>2920</ID>
    <IDName>procGetLBItemData</IDName>
    <InternalFunctionName>MP_GetLBItemData</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nItemIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>nSubItemIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>nUserData</Name>
        <Type>lngVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTreeControlItemData</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the user data of the specified item from a tree control.</Description>
    <ShortDesc>Sets the user data of the specified item from a tree control.</ShortDesc>
    <ID>2921</ID>
    <IDName>procSetTreeControlItemData</IDName>
    <InternalFunctionName>MP_SetTreeControlItemData</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nItemID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>nUserData</Name>
        <Type>longMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTreeControlItemData</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Retrieves the user data of the specified item from a tree control.</Description>
    <ShortDesc>Retrieves the user data of the specified item from a tree control.</ShortDesc>
    <ID>2922</ID>
    <IDName>procGetTreeControlItemData</IDName>
    <InternalFunctionName>MP_GetTreeControlItemData</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nItemID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>nUserData</Name>
        <Type>lngVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SelectTreeControlItem</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Selects the specified tree control item.</Description>
    <ShortDesc>Selects the specified tree control item.</ShortDesc>
    <ID>2923</ID>
    <IDName>procSelectTreeControlItem</IDName>
    <InternalFunctionName>MP_SelectTreeControlItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nItemID</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ExpandTreeControlItem</Name>
    <Version>1250</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Expands or collapses the specified tree control item.</Description>
    <ShortDesc>Expands or collapses the specified tree control item.</ShortDesc>
    <ID>2924</ID>
    <IDName>procExpandTreeControlItem</IDName>
    <InternalFunctionName>MP_ExpandTreeControlItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nItemID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>bExpand</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Opacity</Name>
    <Version>1300</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Sets the active opacity.</Description>
    <ShortDesc>Sets the active opacity.</ShortDesc>
    <ID>2925</ID>
    <IDName>procOpacity</IDName>
    <InternalFunctionName>MP_Opacity</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>opacity</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClOpacity</Name>
    <Version>1300</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Sets the opacity persentage of a class. The opacity is specified by percentage value in range [0-100].</Description>
    <ShortDesc>Sets the opacity of the specified class.</ShortDesc>
    <Example>{set opacity of 25%}[[BR]][[name]]('Cold Water Supply',25);</Example>
    <ID>2926</ID>
    <IDName>procSetClOpacity</IDName>
    <InternalFunctionName>MP_SetClOpacity</InternalFunctionName>
    <ModernName>SetClassPenFore</ModernName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
      <Param>
        <Name>opacity</Name>
        <Type>intMode</Type>
        <Desc>Opacity specified by percentage value in range [0-100].</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentName</Name>
    <ChangedDate>2017:05:09T15:56:00</ChangedDate>
    <Version>1300</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Gets the name of a component in an object.</Description>
    <ShortDesc>Gets the name of a component in an object.</ShortDesc>
    <Result>The name of the component.</Result>
    <SeeAlso>SetComponentName</SeeAlso>
    <ID>2928</ID>
    <IDName>funcGetComponentName</IDName>
    <InternalFunctionName>MP_GetComponentName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentName</Name>
    <ChangedDate>2015:08:10T05:10:00</ChangedDate>
    <Version>1300</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the name of a component in an object.</Description>
    <ShortDesc>Sets the name of a component in an object.</ShortDesc>
    <SeeAlso>GetComponentName</SeeAlso>
    <ID>2929</ID>
    <IDName>funcSetComponentName</IDName>
    <InternalFunctionName>MP_SetComponentName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>componentName</Name>
        <Type>stringMode</Type>
        <Desc>The name of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentClass</Name>
    <ChangedDate>2015:08:10T05:10:00</ChangedDate>
    <Version>1300</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the class of a component in an object.</Description>
    <ShortDesc>Gets the class of a component in an object.</ShortDesc>
    <SeeAlso>SetComponentClass</SeeAlso>
    <ID>2930</ID>
    <IDName>funcGetComponentClass</IDName>
    <InternalFunctionName>MP_GetComponentClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>componentClass</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns the class of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentClass</Name>
    <ChangedDate>2015:08:10T05:11:00</ChangedDate>
    <Version>1300</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the class of a component in an object.</Description>
    <ShortDesc>Sets the class of a component in an object.</ShortDesc>
    <SeeAlso>GetComponentClass</SeeAlso>
    <ID>2931</ID>
    <IDName>funcSetComponentClass</IDName>
    <InternalFunctionName>MP_SetComponentClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>componentClass</Name>
        <Type>longMode</Type>
        <Desc>The class of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentFillColors</Name>
    <ChangedDate>2015:08:10T05:28:00</ChangedDate>
    <Version>1300</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the fore and back fill colors of a component in an object.</Description>
    <ShortDesc>Gets the fore and back fill colors of a component in an object.</ShortDesc>
    <SeeAlso>SetComponentFillColors</SeeAlso>
    <ID>2932</ID>
    <IDName>funcGetComponentFillColors</IDName>
    <InternalFunctionName>MP_GetComponentFillColors</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>fillForeColor</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the fore color of the fill.</Desc>
      </Param>
      <Param>
        <Name>fillBackColor</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the back color of the fill.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentPenColors</Name>
    <ChangedDate>2015:08:10T05:28:00</ChangedDate>
    <Version>1300</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the colors of the pens of a component in an object.</Description>
    <ShortDesc>Gets the colors of the pens of a component in an object.</ShortDesc>
    <SeeAlso>SetComponentPenColors</SeeAlso>
    <ID>2933</ID>
    <IDName>funcGetComponentPenColors</IDName>
    <InternalFunctionName>MP_GetComponentPenColors</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>leftPenForeColor</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the fore color of the left pen.</Desc>
      </Param>
      <Param>
        <Name>leftPenBackColor</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the back color of the left pen.</Desc>
      </Param>
      <Param>
        <Name>rightPenForeColor</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the fore color of the right pen.</Desc>
      </Param>
      <Param>
        <Name>rightPenBackColor</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the back color of the right pen.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentFillColors</Name>
    <ChangedDate>2015:08:10T05:28:00</ChangedDate>
    <Version>1300</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the fore and back fill colors of a component in an object.</Description>
    <ShortDesc>Sets the fore and back fill colors of a component in an object.</ShortDesc>
    <SeeAlso>GetComponentFillColors</SeeAlso>
    <ID>2934</ID>
    <IDName>funcSetComponentFillColors</IDName>
    <InternalFunctionName>MP_SetComponentFillColors</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>fillForeColor</Name>
        <Type>intMode</Type>
        <Desc>The fore color of the fill.</Desc>
      </Param>
      <Param>
        <Name>fillBackColor</Name>
        <Type>intMode</Type>
        <Desc>The back color of the fill.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentPenColors</Name>
    <ChangedDate>2015:08:10T05:28:00</ChangedDate>
    <Version>1300</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the colors of the pens of a component in an object.</Description>
    <ShortDesc>Sets the colors of the pens of a component in an object.</ShortDesc>
    <SeeAlso>GetComponentPenColors</SeeAlso>
    <ID>2935</ID>
    <IDName>funcSetComponentPenColors</IDName>
    <InternalFunctionName>MP_SetComponentPenColors</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>leftPenForeColor</Name>
        <Type>intMode</Type>
        <Desc>The fore color of the left pen.</Desc>
      </Param>
      <Param>
        <Name>leftPenBackColor</Name>
        <Type>intMode</Type>
        <Desc>The back color of the left pen.</Desc>
      </Param>
      <Param>
        <Name>rightPenForeColor</Name>
        <Type>intMode</Type>
        <Desc>The fore color of the right pen.</Desc>
      </Param>
      <Param>
        <Name>rightPenBackColor</Name>
        <Type>intMode</Type>
        <Desc>The back color of the right pen.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDLComponentName</Name>
    <Version>1300</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Gets the name of the component at index in the Double Line Preferences.</Description>
    <ShortDesc>Gets the name of the component at index in the Double Line Preferences.</ShortDesc>
    <Result>The name of the component.</Result>
    <SeeAlso>SetDLComponentName</SeeAlso>
    <ID>2936</ID>
    <IDName>funcGetDLComponentName</IDName>
    <InternalFunctionName>MP_GetDLComponentName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDLComponentName</Name>
    <Version>1300</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the name of the component at index in the Double Line Preferences.</Description>
    <ShortDesc>Sets the name of the component at index in the Double Line Preferences.</ShortDesc>
    <SeeAlso>GetDLComponentName</SeeAlso>
    <ID>2937</ID>
    <IDName>funcSetDLComponentName</IDName>
    <InternalFunctionName>MP_SetDLComponentName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>componentName</Name>
        <Type>stringMode</Type>
        <Desc>The name of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDLComponentClass</Name>
    <Version>1300</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the class of the component at index in the Double Line Preferences.</Description>
    <ShortDesc>Gets the class of the component at index in the Double Line Preferences.</ShortDesc>
    <SeeAlso>SetDLComponentClass</SeeAlso>
    <ID>2938</ID>
    <IDName>funcGetDLComponentClass</IDName>
    <InternalFunctionName>MP_GetDLComponentClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>componentClass</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns the class of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDLComponentClass</Name>
    <Version>1300</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the class of the component at index in the Double Line Preferences.</Description>
    <ShortDesc>Sets the class of the component at index in the Double Line Preferences.</ShortDesc>
    <SeeAlso>GetDLComponentClass</SeeAlso>
    <ID>2939</ID>
    <IDName>funcSetDLComponentClass</IDName>
    <InternalFunctionName>MP_SetDLComponentClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>componentClass</Name>
        <Type>longMode</Type>
        <Desc>The class of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDLComponentFillColors</Name>
    <Version>1300</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the fore and back fill colors of the component at index in the Double Line Preferences.</Description>
    <ShortDesc>Gets the fore and back fill colors of the component at index in the Double Line Preferences.</ShortDesc>
    <SeeAlso>SetDLComponentFillColors</SeeAlso>
    <ID>2940</ID>
    <IDName>funcGetDLComponentFillColors</IDName>
    <InternalFunctionName>MP_GetDLComponentFillColors</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>fillForeColor</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the fore color of the fill.</Desc>
      </Param>
      <Param>
        <Name>fillBackColor</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the back color of the fill.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDLComponentFillColors</Name>
    <Version>1300</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the fore and back fill colors of the component at index in the Double Line Preferences.</Description>
    <ShortDesc>Sets the fore and back fill colors of the component at index in the Double Line Preferences.</ShortDesc>
    <SeeAlso>GetDLComponentFillColors</SeeAlso>
    <ID>2941</ID>
    <IDName>funcSetDLComponentFillColors</IDName>
    <InternalFunctionName>MP_SetDLComponentFillColors</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>fillForeColor</Name>
        <Type>intMode</Type>
        <Desc>The fore color of the fill.</Desc>
      </Param>
      <Param>
        <Name>fillBackColor</Name>
        <Type>intMode</Type>
        <Desc>The back color of the fill.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDLComponentPenColors</Name>
    <Version>1300</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the fore and back colors of the left and right side pens of the component at index in the Double Line Preferences.</Description>
    <ShortDesc>Gets the fore and back colors of the left and right side pens of the component at index in the Double Line Preferences.</ShortDesc>
    <SeeAlso>SetDLComponentPenColors</SeeAlso>
    <ID>2942</ID>
    <IDName>funcGetDLComponentPenColors</IDName>
    <InternalFunctionName>MP_GetDLComponentPenColors</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>leftPenForeColor</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the fore color of the left pen.</Desc>
      </Param>
      <Param>
        <Name>leftPenBackColor</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the back color of the left pen.</Desc>
      </Param>
      <Param>
        <Name>rightPenForeColor</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the fore color of the right pen.</Desc>
      </Param>
      <Param>
        <Name>rightPenBackColor</Name>
        <Type>intVarMode</Type>
        <Desc>Resturns the back color of the right pen.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDLComponentPenColors</Name>
    <Version>1300</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the fore and back colors of the left and right side pens of the component at index in the Double Line Preferences.</Description>
    <ShortDesc>Sets the fore and back colors of the left and right side pens of the component at index in the Double Line Preferences.</ShortDesc>
    <SeeAlso>GetDLComponentPenColors</SeeAlso>
    <ID>2943</ID>
    <IDName>funcSetDLComponentPenColors</IDName>
    <InternalFunctionName>MP_SetDLComponentPenColors</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>leftPenForeColor</Name>
        <Type>intMode</Type>
        <Desc>The fore color of the left pen.</Desc>
      </Param>
      <Param>
        <Name>leftPenBackColor</Name>
        <Type>intMode</Type>
        <Desc>The back color of the left pen.</Desc>
      </Param>
      <Param>
        <Name>rightPenForeColor</Name>
        <Type>intMode</Type>
        <Desc>The fore color of the right pen.</Desc>
      </Param>
      <Param>
        <Name>rightPenBackColor</Name>
        <Type>intMode</Type>
        <Desc>The back color of the right pen.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentUseFillClassAttr</Name>
    <ChangedDate>2015:08:10T05:30:00</ChangedDate>
    <Version>1300</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the use fill class attributes flag of a component in an object.</Description>
    <ShortDesc>Gets the use fill class attributes flag of a component in an object.</ShortDesc>
    <SeeAlso>SetComponentUseFillClassAttr</SeeAlso>
    <ID>2945</ID>
    <IDName>funcGetComponentUseFillClassAttr</IDName>
    <InternalFunctionName>MP_GetComponentUseFillClassAttr</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useFillClassAttributes</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component is using class attributes for its fill.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentUseFillClassAttr</Name>
    <ChangedDate>2015:08:10T05:30:00</ChangedDate>
    <Version>1300</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the use fill class attributes flag of a component in an object.</Description>
    <ShortDesc>Sets the use fill class attributes flag of a component in an object.</ShortDesc>
    <SeeAlso>GetComponentUseFillClassAttr</SeeAlso>
    <ID>2946</ID>
    <IDName>funcSetComponentUseFillClassAttr</IDName>
    <InternalFunctionName>MP_SetComponentUseFillClassAttr</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useFillClassAttributes</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component will use class attributes for its fill.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDLComponentUseFillClassAttr</Name>
    <Version>1300</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the use fill class attributes flag of the component at index in the Double Line Preferences.</Description>
    <ShortDesc>Sets the use fill class attributes flag of the component at index in the Double Line Preferences.</ShortDesc>
    <SeeAlso>GetDLComponentUseFillClassAttr</SeeAlso>
    <ID>2948</ID>
    <IDName>funcSetDLComponentUseFillClassAttr</IDName>
    <InternalFunctionName>MP_SetDLComponentUseFillClassAttr</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassAttr</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component will use class attributes for its fill.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentUsePenClassAttr</Name>
    <ChangedDate>2015:08:10T05:30:00</ChangedDate>
    <Version>1300</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the use class attributes flags of the pens of a component in an object.</Description>
    <ShortDesc>Gets the use class attributes flags of the pens of a component in an object.</ShortDesc>
    <SeeAlso>SetComponentUsePenClassAttr</SeeAlso>
    <ID>2949</ID>
    <IDName>funcGetComponentUsePenClassAttr</IDName>
    <InternalFunctionName>MP_GetComponentUsePenClassAttr</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useLeftPenClassAttributes</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component is using class attributes for its left pen.</Desc>
      </Param>
      <Param>
        <Name>useRightPenClassAttributes</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component is using class attributes for its right pen.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentUsePenClassAttr</Name>
    <ChangedDate>2015:08:10T05:31:00</ChangedDate>
    <Version>1300</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the use class attributes flags of the pens of a component in an object.</Description>
    <ShortDesc>Sets the use class attributes flags of the pens of a component in an object.</ShortDesc>
    <SeeAlso>GetComponentUsePenClassAttr</SeeAlso>
    <ID>2950</ID>
    <IDName>funcSetComponentUsePenClassAttr</IDName>
    <InternalFunctionName>MP_SetComponentUsePenClassAttr</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useLeftPenClassAttributes</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component will use class attributes for its left pen.</Desc>
      </Param>
      <Param>
        <Name>useRightPenClassAttributes</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component will use class attributes for its right pen.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDLComponentUsePenClassAttr</Name>
    <Version>1300</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the useclass attributes flags of the left and right side pens of the component at index in the Double Line Preferences.</Description>
    <ShortDesc>Gets the useclass attributes flags of the left and right side pens of the component at index in the Double Line Preferences.</ShortDesc>
    <SeeAlso>SetDLComponentUsePenClassAttr</SeeAlso>
    <ID>2951</ID>
    <IDName>funcGetDLComponentUsePenClassAttr</IDName>
    <InternalFunctionName>MP_GetDLComponentUsePenClassAttr</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>leftPenUseClassAttr</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component is using class attributes for its left pen.</Desc>
      </Param>
      <Param>
        <Name>rightPenUseClassAttr</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component is using class attributes for right pen.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDLComponentUsePenClassAttr</Name>
    <Version>1300</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the useclass attributes flags of the left and right side pens of the component at index in the Double Line Preferences.</Description>
    <ShortDesc>Sets the useclass attributes flags of the left and right side pens of the component at index in the Double Line Preferences.</ShortDesc>
    <SeeAlso>GetDLComponentUsePenClassAttr</SeeAlso>
    <ID>2952</ID>
    <IDName>funcSetDLComponentUsePenClassAttr</IDName>
    <InternalFunctionName>MP_SetDLComponentUsePenClassAttr</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>leftPenUseClassAttr</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component will use class attributes for its left pen.</Desc>
      </Param>
      <Param>
        <Name>rightPenUseClassAttr</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component will use class attributes for its right pen.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDLComponentUseFillClassAttr</Name>
    <Version>1300</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the use fill class attributes flag of the component at index in the Double Line Preferences.</Description>
    <ShortDesc>Gets the use fill class attributes flag of the component at index in the Double Line Preferences.</ShortDesc>
    <SeeAlso>SetDLComponentUseFillClassAttr</SeeAlso>
    <ID>2956</ID>
    <IDName>funcGetDLComponentUseFillClassAttr</IDName>
    <InternalFunctionName>MP_GetDLComponentUseFillClassAttr</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassAttr</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component is using class attributes for its fill.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NotifyPullDownClicked</Name>
    <Version>1300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sends an item hit notification when the pull down menu is clicked, allowing developers to dynamically populate the menu.</Description>
    <ShortDesc>Sends an item hit notification when the pull down menu is clicked, allowing developers to dynamically populate the menu.</ShortDesc>
    <ID>2957</ID>
    <IDName>procNotifyPullDownClicked</IDName>
    <InternalFunctionName>MP_NotifyPullDownClicked</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPlantToolInitialized</Name>
    <Version>1300</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns whether or not the plant tool has been initialized or not.</Description>
    <ShortDesc>Returns whether or not the plant tool has been initialized or not.</ShortDesc>
    <ID>2958</ID>
    <IDName>funcGetPlantToolInitialized</IDName>
    <InternalFunctionName>MP_GetPlantToolInitialized</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>GetPlantToolPlantName</Name>
    <Version>1300</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Returns the name of the current plant that is stored in the plant tool.</Description>
    <ShortDesc>Returns the name of the current plant that is stored in the plant tool.</ShortDesc>
    <ID>2959</ID>
    <IDName>funcGetPlantToolPlantName</IDName>
    <InternalFunctionName>MP_GetPlantToolPlantName</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>GetPlantToolPlacementMode</Name>
    <Version>1300</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>This returns the current placement mode stored in the plant tool</Description>
    <ShortDesc>This returns the current placement mode stored in the plant tool</ShortDesc>
    <ID>2960</ID>
    <IDName>funcGetPlantToolPlacementMode</IDName>
    <InternalFunctionName>MP_GetPlantToolPlacementMode</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>GetPlantToolSpacing</Name>
    <Version>1300</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>This returns the spacing that is currently stored in the plant tool.</Description>
    <ShortDesc>This returns the spacing that is currently stored in the plant tool.</ShortDesc>
    <ID>2961</ID>
    <IDName>funcGetPlantToolSpacing</IDName>
    <InternalFunctionName>MP_GetPlantToolSpacing</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>GetOpacity</Name>
    <Version>1300</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Gets the opacity of and object. Opacity is obtained as percentage value in range [0-100].</Description>
    <ShortDesc>Gets the opacity of and object.</ShortDesc>
    <ID>2963</ID>
    <IDName>procGetOpacity</IDName>
    <InternalFunctionName>MP_GetOpacity</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>The object which opacity will be get.</Desc>
      </Param>
      <Param>
        <Name>opacity</Name>
        <Type>intVarMode</Type>
        <Desc>Output parameter. Return the object's opacity as percentage value in range [0-100].</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOpacity</Name>
    <Version>1300</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Sets the opacity of the object to the opacity passed in.</Description>
    <ShortDesc>Sets the opacity of the object to the opacity passed in.</ShortDesc>
    <ID>2965</ID>
    <IDName>procSetOpacity</IDName>
    <InternalFunctionName>MP_SetOpacity</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>opacity</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDefaultOpacity</Name>
    <Version>1300</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Sets the default opacity to document.</Description>
    <ShortDesc>Sets the default opacity to document.</ShortDesc>
    <ID>2966</ID>
    <IDName>procSetDefaultOpacity</IDName>
    <InternalFunctionName>MP_SetDefaultOpacity</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>opacity</Name>
        <Type>intMode</Type>
        <Desc>The opacity as percent value in range [0-100].</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDefaultOpacity</Name>
    <Version>1300</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Returns the default opacity.</Description>
    <ShortDesc>Returns the default opacity.</ShortDesc>
    <ID>2967</ID>
    <IDName>procGetDefaultOpacity</IDName>
    <InternalFunctionName>MP_GetDefaultOpacity</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>opacity</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDefaultOpacityByClass</Name>
    <Version>1300</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Sets the default opacity to use the current class opacity.</Description>
    <ShortDesc>Sets the default opacity to use the current class opacity.</ShortDesc>
    <ID>2968</ID>
    <IDName>procSetDefaultOpacityByClass</IDName>
    <InternalFunctionName>MP_SetDefaultOpacityByClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>SetOpacityByClass</Name>
    <Version>1300</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Sets the specified class to use the class opacity.</Description>
    <ShortDesc>Sets the specified class to use the class opacity.</ShortDesc>
    <ID>2969</ID>
    <IDName>procSetOpacityByClass</IDName>
    <InternalFunctionName>MP_SetOpacityByClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOpacityByClass</Name>
    <Version>1300</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Returns whether the object is using the class opacity.</Description>
    <ShortDesc>Set isByClass to whether the object is using the class opacity.</ShortDesc>
    <ID>2970</ID>
    <IDName>procGetOpacityByClass</IDName>
    <InternalFunctionName>MP_GetOpacityByClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>isByClass</Name>
        <Type>boolVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClOpacity</Name>
    <Version>1300</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the opacity of the specified class.</Description>
    <ShortDesc>Gets the opacity of the specified class.</ShortDesc>
    <ID>2971</ID>
    <IDName>funcGetClOpacity</IDName>
    <InternalFunctionName>MP_GetClOpacity</InternalFunctionName>
    <ModernName>GetClassOpacity</ModernName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumOfWallBreaks</Name>
    <Version>1300</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the number of breaks in a wall.</Description>
    <ShortDesc>Gets the number of breaks in a wall.</ShortDesc>
    <ID>2972</ID>
    <IDName>funcGetNumOfWallBreaks</IDName>
    <InternalFunctionName>MP_GetNumOfWallBreaks</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>wallH</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>numWallBreaks</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWallHalfBreakInfo</Name>
    <Version>1300</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the start point, center point and end point of a half break in a wall along the wall line.</Description>
    <ShortDesc>Gets the start point, center point and end point of a half break in a wall along the wall line.</ShortDesc>
    <ID>2973</ID>
    <IDName>funcGetWallHalfBreakInfo</IDName>
    <InternalFunctionName>MP_GetWallHalfBreakInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>wallH</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>breakIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>startPt</Name>
        <Type>globPtVarMode</Type>
      </Param>
      <Param>
        <Name>centerPt</Name>
        <Type>globPtVarMode</Type>
      </Param>
      <Param>
        <Name>endPt</Name>
        <Type>globPtVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjExtentsInWall</Name>
    <Version>1300</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the extents of a Plugin object or symbol that is in a wall.  Returns the object's start point and end point along the wall line.</Description>
    <ShortDesc>Gets the extents of a Plugin object or symbol that is in a wall.  Returns the object's start point and end point along the wall line.</ShortDesc>
    <ID>2974</ID>
    <IDName>funcGetObjExtentsInWall</IDName>
    <InternalFunctionName>MP_GetObjExtentsInWall</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>symH</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>wallH</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>startPt</Name>
        <Type>globPtVarMode</Type>
      </Param>
      <Param>
        <Name>endPt</Name>
        <Type>globPtVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCustomObjectColor</Name>
    <Version>1300</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Store/Set an auxilary color  index  in 'objectHand' so GetCustomObjectColor  can access it later.  Application will preserve the color mapped to inTagID.</Description>
    <ShortDesc>Store/Set an auxilary color  index  in 'objectHand' so GetCustomObjectColor  can access it later.  Application will preserve the color mapped to inTagID.</ShortDesc>
    <Result>Returns TRUE if the operation was successful.</Result>
    <SeeAlso>GetCustomObjectColor</SeeAlso>
    <ID>2975</ID>
    <IDName>funcSetCustomObjectColor</IDName>
    <InternalFunctionName>MP_SetCustomObjectColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHand</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>inTagID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>inColoIndex</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCustomObjectColor</Name>
    <Version>1300</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Get an auxilary color index stored in'objectHand' previously  with SetCustomObjectColor .  Aplication will preserve the color mapped to inTagID.</Description>
    <ShortDesc>Get an auxilary color index stored in'objectHand' previously  with SetCustomObjectColor .  Aplication will preserve the color mapped to inTagID.</ShortDesc>
    <Result>Returns TRUE if the operation was successful.</Result>
    <SeeAlso>SetCustomObjectColor</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	objName :STRING;[[BR]]	objHand, recHand, wallHand :HANDLE;[[BR]]	colorIndexBefore, colorIndexAfter :INTEGER;[[BR]]	boo :BOOLEAN;[[BR]]BEGIN[[BR]]	IF GetCustomObjectInfo(objName, objHand, recHand, wallHand) THEN BEGIN[[BR]]		RGBToColorIndex(pRed, pGreen, pBlue, colorIndexBefore);[[BR]]		Rect(0, 0, 1, 1);[[BR]]		SetFillBack(LNewObj, colorIndexBefore);[[BR]]		IF SetCustomObjectColor(objHand, 1, colorIndexBefore) THEN BEGIN[[BR]]			boo := GetCustomObjectColor(objHand, 1, colorIndexAfter);[[BR]]			AlrtDialog(Concat('before: ', colorIndexBefore, Chr(13), 'after: ', colorIndexAfter));[[BR]]		END;[[BR]]	END;[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>2976</ID>
    <IDName>funcGetCustomObjectColor</IDName>
    <InternalFunctionName>MP_GetCustomObjectColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHand</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>inTagID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>outColorIndex</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NumColors</Name>
    <Version>1300</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the last used color index in the current document.</Description>
    <ShortDesc>Returns the last used color index in the current document.</ShortDesc>
    <ID>2978</ID>
    <IDName>funcNumColors</IDName>
    <InternalFunctionName>MP_NumColors</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>IsUserColor</Name>
    <Version>1300</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns True if the color is a user color.</Description>
    <ShortDesc>Returns True if the color is a user color.</ShortDesc>
    <Comments>ColorName returns the name of the color associated with the ColorIDX</Comments>
    <ID>2979</ID>
    <IDName>funcIsUserColor</IDName>
    <InternalFunctionName>MP_IsUserColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>ColorIDX</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>ColorName</Name>
        <Type>eCharDynarrayVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>OpacityByClass</Name>
    <Version>1300</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Sets the document default settings to the opacity of the active class.</Description>
    <ShortDesc>Sets the document default settings to the opacity of the active class.</ShortDesc>
    <Comments>Sets the global attributes to use the opacityof the default class.</Comments>
    <ID>2980</ID>
    <IDName>procOpacityByClass</IDName>
    <InternalFunctionName>MP_OpacityByClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>RemoveCustomObjectColor</Name>
    <Version>1300</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deletes an auxilary color index stored in 'objectHand' previously  with SetCustomObjectColor. </Description>
    <ShortDesc>Deletes an auxilary color index stored in 'objectHand' previously  with SetCustomObjectColor. </ShortDesc>
    <ID>2983</ID>
    <IDName>funcRemoveCustomObjectColor</IDName>
    <InternalFunctionName>MP_RemoveCustomObjectColor</InternalFunctionName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>objectHand</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>inTagID</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FOpacityByClass</Name>
    <Version>1300</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns whether the global attributes are set to use the opacity of the default class.</Description>
    <ShortDesc>Returns whether the global attributes are set to use the opacity of the default class.</ShortDesc>
    <Comments>Returns whether the global attributes are set to use the opacity of the default class.[[BR]][rl 8/30/07]</Comments>
    <Example>useClassOpacity:=[[name]];</Example>
    <ID>2984</ID>
    <IDName>funcFOpacityByClass</IDName>
    <InternalFunctionName>MP_FOpacityByClass</InternalFunctionName>
    <ModernName>ActOpacityByClass</ModernName>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
  </Item>

  <Item>
    <Name>GetProjection</Name>
    <Version>1300</Version>
    <Category>View / Zoom</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the projection index from the specified layer.</Description>
    <ShortDesc>Returns the projection index from the specified layer.</ShortDesc>
    <ID>2986</ID>
    <IDName>funcGetProjection</IDName>
    <InternalFunctionName>MP_GetProjection</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>theyLayer</Name>
        <Type>handleMode</Type>
        <Desc>Layer which the projection is returned for.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBHeaderTextWidth</Name>
    <Version>1400</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Produces the width in pixels that will show the given string without truncation in a listbrowser column header.  This will provide a guaranteed appropriate width for InsertLBColumn.</Description>
    <ShortDesc>Returns the pixel width  that will show the given string without truncation in a listbrowser column header.  This will provide a guaranteed appropriate width for InsertLBColumn.</ShortDesc>
    <ID>2987</ID>
    <IDName>funcGetLBHeaderTextWidth</IDName>
    <InternalFunctionName>MP_GetLBHeaderTextWidth</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>allowForSortIcon</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDefaultTexMap</Name>
    <ChangedDate>2009:01:28T14:43:00</ChangedDate>
    <Version>1400</Version>
    <OldVersion>1500</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Set the object to have default texture mapping info. Texture resource being used is set with SetTextureRef. Similar to SetDefaultTextureSpace except that routine has been superseded in version 2009.</Description>
    <ShortDesc>NOTE: Use SetDefaultTexMapN with version 2010 and above.</ShortDesc>
    <ID>2989</ID>
    <IDName>procSetDefaultTexMap</IDName>
    <InternalFunctionName>MP_SetDefaultTexMap</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexMapBool</Name>
    <ChangedDate>2009:01:28T14:43:00</ChangedDate>
    <Version>1400</Version>
    <OldVersion>1500</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Set map info for specific part of object. partID is texture part, overall is 3. Selector: init:1, flip:2, repH:3, repV:4, long edge:5, worldZ:6, auto align:7</Description>
    <ShortDesc>NOTE: Use SetTexMapxxxN with version 2010 and above.</ShortDesc>
    <ID>2990</ID>
    <IDName>procSetTexMapBool</IDName>
    <InternalFunctionName>MP_SetTexMapBool</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>partID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>selector</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexMapBool</Name>
    <ChangedDate>2009:01:28T14:43:00</ChangedDate>
    <Version>1400</Version>
    <OldVersion>1500</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Get map info for specific part of object. partID is texture part, overall is 3. Selector: init:1, flip:2, repH:3, repV:4, long edge:5, worldZ:6, auto align:7</Description>
    <ShortDesc>NOTE: Use GetTexMapxxxN with version 2010 and above.</ShortDesc>
    <ID>2991</ID>
    <IDName>funcGetTexMapBool</IDName>
    <InternalFunctionName>MP_GetTexMapBool</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>partID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>selector</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexMapInt</Name>
    <ChangedDate>2009:01:28T14:43:00</ChangedDate>
    <Version>1400</Version>
    <OldVersion>1500</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Get map info for specific part of object. partID is texture part, overall is 3. Selector should be1, to return the texture map type integer.</Description>
    <ShortDesc>NOTE: Use GetTexMapxxxN with version 2010 and above.</ShortDesc>
    <ID>2992</ID>
    <IDName>funcGetTexMapInt</IDName>
    <InternalFunctionName>MP_GetTexMapInt</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>partID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>selector</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexMapInt</Name>
    <ChangedDate>2009:01:28T14:43:00</ChangedDate>
    <Version>1400</Version>
    <OldVersion>1500</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Set map info for specific part of object. partID is texture part, overall is 3. Selector should be 1 to set the map type integer.</Description>
    <ShortDesc>NOTE: Use SetTexMapxxxN with version 2010 and above.</ShortDesc>
    <ID>2993</ID>
    <IDName>procSetTexMapInt</IDName>
    <InternalFunctionName>MP_SetTexMapInt</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>partID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>selector</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexMapReal</Name>
    <ChangedDate>2009:01:28T14:43:00</ChangedDate>
    <Version>1400</Version>
    <OldVersion>1500</OldVersion>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Set map info for specific part of object. partID is texture part, overall is 3. Selector: offsetX:1, offsetY:2, scale2D:3, rotate2D:4, radius:5, matrix mat00 through mat32: 6-17</Description>
    <ShortDesc>NOTE: Use SetTexMapxxxN with version 2010 and above.</ShortDesc>
    <ID>2994</ID>
    <IDName>procSetTexMapReal</IDName>
    <InternalFunctionName>MP_SetTexMapReal</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>partID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>selector</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>realMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexMapReal</Name>
    <ChangedDate>2009:01:28T14:43:00</ChangedDate>
    <Version>1400</Version>
    <OldVersion>1500</OldVersion>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Get map info for specific part of object. partID is texture part, overall is 3. Selector: offsetX:1, offsetY:2, scale2D:3, rotate2D:4, radius:5, matrix mat00 through mat32: 6-17</Description>
    <ShortDesc>NOTE: Use GetTexMapxxxN with version 2010 and above.</ShortDesc>
    <ID>2995</ID>
    <IDName>funcGetTexMapReal</IDName>
    <InternalFunctionName>MP_GetTexMapReal</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>partID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>selector</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateRWBackground</Name>
    <ChangedDate>2008:08:11T10:17:00</ChangedDate>
    <Version>1400</Version>
    <Category>Objects - 2D</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a Renderworks Background resource using the image from an existing Image resource. Width and height are set to default sizes relative to the page size.</Description>
    <ShortDesc>Creates a Renderworks Background resource using the image from an existing Image resource. Width and height are set to default sizes relative to the page size.</ShortDesc>
    <ID>2996</ID>
    <IDName>funcCreateRWBackground</IDName>
    <InternalFunctionName>MP_CreateRWBackground</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>imageResource</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCustomObjectSelectionGroup</Name>
    <ChangedDate>2008:09:14T09:17:00</ChangedDate>
    <Version>1400</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Access the handle to selection group. This group contains geometry that defines the selection and pre-selection indication of this object.</Description>
    <ShortDesc>Access the handle to selection group. This group contains geometry that defines the selection and pre-selection indication of this object.</ShortDesc>
    <Result>Returns a HANDLE to the selection group.</Result>
    <ID>2997</ID>
    <IDName>funcGetCustomObjectSelectionGroup</IDName>
    <InternalFunctionName>MP_GetCustomObjectSelectionGroup</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHand</Name>
        <Type>handleMode</Type>
        <Desc>Handle to custom object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCustomObjectSelectionGroup</Name>
    <ChangedDate>2008:09:14T09:19:00</ChangedDate>
    <Version>1400</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Set selection indication geometry for a parametric object.</Description>
    <ShortDesc>Set selection indication geometry for a parametric object.</ShortDesc>
    <Result>Returns TRUE if the operation was successful.</Result>
    <ID>2998</ID>
    <IDName>funcSetCustomObjectSelectionGroup</IDName>
    <InternalFunctionName>MP_SetCustomObjectSelectionGroup</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHand</Name>
        <Type>handleMode</Type>
        <Desc>Handle to parametric object.</Desc>
      </Param>
      <Param>
        <Name>selGroup</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object or group that contains geometry for selection indication.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCustomObjectWallHoleGroup</Name>
    <ChangedDate>2008:09:14T09:18:00</ChangedDate>
    <Version>1400</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Access the handle to wall hole group. This group contains geometry that defines the opening that will be cut into the wall for this parametric object.</Description>
    <ShortDesc>Access the handle to wall hole group. This group contains geometry that defines the opening that will be cut into the wall for this parametric object.</ShortDesc>
    <Result>Returns a HANDLE to the wall hole group.</Result>
    <ID>2999</ID>
    <IDName>funcGetCustomObjectWallHoleGroup</IDName>
    <InternalFunctionName>MP_GetCustomObjectWallHoleGroup</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHand</Name>
        <Type>handleMode</Type>
        <Desc>Handle to custom object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCustomObjectWallHoleGroup</Name>
    <ChangedDate>2008:08:14T09:23:00</ChangedDate>
    <Version>1400</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Set wall hole geometry for a parametric object.</Description>
    <ShortDesc>Set wall hole geometry for a parametric object.</ShortDesc>
    <Result>Returns TRUE if the operation was successful.</Result>
    <ID>3000</ID>
    <IDName>funcSetCustomObjectWallHoleGroup</IDName>
    <InternalFunctionName>MP_SetCustomObjectWallHoleGroup</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHand</Name>
        <Type>handleMode</Type>
        <Desc>Handle to parametric object.</Desc>
      </Param>
      <Param>
        <Name>holeGroup</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object or group that contains geometry for wall hole.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ZCenter</Name>
    <ChangedDate>2011:05:16T16:30:00</ChangedDate>
    <Version>1400</Version>
    <OldVersion>1700</OldVersion>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the z-coordinate value of the center of an object matching the search criteria</Description>
    <ShortDesc>Returns the z-coordinate value of the center of an object matching the search criteria</ShortDesc>
    <IDName>funcZCenterLegacy</IDName>
    <InternalFunctionName>MP_ZCenter</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WallArea_Gross</Name>
    <ChangedDate>2009:07:06T16:30:00</ChangedDate>
    <Version>1200</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the average of the gross area of the interior and exterior face of the wall. The gross area ignores holes in the wall.</Description>
    <ShortDesc>Returns the average of the gross area of the interior and exterior face of the wall. The gross area ignores holes in the wall.</ShortDesc>
    <IDName>funcWallAreaGross</IDName>
    <InternalFunctionName>MP_WallArea_Gross</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WallArea_Net</Name>
    <ChangedDate>2009:07:06T16:30:00</ChangedDate>
    <Version>1200</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the average of the net area of the interior and exterior face of the wall. The net area is adjusted for holes in the wall.</Description>
    <ShortDesc>Returns the average of the net area of the interior and exterior face of the wall. The net area is adjusted for holes in the wall.</ShortDesc>
    <IDName>funcWallAreaNet</IDName>
    <InternalFunctionName>MP_WallArea_Net</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WallAverageHeight</Name>
    <ChangedDate>2009:07:06T16:30:00</ChangedDate>
    <Version>1200</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the average height of walls, including wall peaks and different starting and ending heights.</Description>
    <ShortDesc>Returns the average height of walls, including wall peaks and different starting and ending heights.</ShortDesc>
    <IDName>funcWallAverageHeight</IDName>
    <InternalFunctionName>MP_WallAverageHeight</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WallThickness</Name>
    <ChangedDate>2009:07:06T16:30:00</ChangedDate>
    <Version>1200</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the thickness of walls that meet the criteria.</Description>
    <ShortDesc>Returns the thickness of walls that meet the criteria.</ShortDesc>
    <IDName>funcWallThickness</IDName>
    <InternalFunctionName>MP_WallThickness</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SlabThickness</Name>
    <ChangedDate>2009:07:06T16:29:00</ChangedDate>
    <Version>1200</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the thickness of slab objects that meet the criteria.</Description>
    <ShortDesc>Returns the thickness of slab objects that meet the criteria.</ShortDesc>
    <IDName>funcSlabThickness</IDName>
    <InternalFunctionName>MP_SlabThickness</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RoofArea_Total</Name>
    <ChangedDate>2008:08:11T15:35:00</ChangedDate>
    <Version>1400</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the total area along the slope of roofs or roof faces that meet the criteria.</Description>
    <ShortDesc>Returns the total area along the slope of roofs or roof faces that meet the criteria.</ShortDesc>
    <IDName>funcRoofAreaTotal</IDName>
    <InternalFunctionName>MP_RoofArea_Total</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RoofArea_Heated</Name>
    <ChangedDate>2008:08:11T15:36:00</ChangedDate>
    <Version>1400</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the heated (interior) area along the slope of roofs or roof faces  that meet the criteria.</Description>
    <ShortDesc>Returns the heated (interior) area along the slope of roofs or roof faces  that meet the criteria.</ShortDesc>
    <IDName>funcRoofAreaHeated</IDName>
    <InternalFunctionName>MP_RoofArea_Heated</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RoofArea_TotalProj</Name>
    <ChangedDate>2008:08:11T15:41:00</ChangedDate>
    <Version>1400</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the total area projected on the ground plane of roofs or roof faces that meet the criteria.</Description>
    <ShortDesc>Returns the total area projected on the ground plane of roofs or roof faces that meet the criteria.</ShortDesc>
    <IDName>funcRoofAreaTotalProj</IDName>
    <InternalFunctionName>MP_RoofArea_TotalProj</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RoofArea_HeatedProj</Name>
    <ChangedDate>2008:08:11T15:36:00</ChangedDate>
    <Version>1400</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the heated (interior) area projected on the ground plane of roofs or roof faces that meet the criteria.</Description>
    <ShortDesc>Returns the heated (interior) area projected on the ground plane of roofs or roof faces that meet the criteria.</ShortDesc>
    <IDName>funcRoofAreaHeatedProj</IDName>
    <InternalFunctionName>MP_RoofArea_HeatedProj</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSSubrowHeight</Name>
    <ChangedDate>2008:08:11T10:22:00</ChangedDate>
    <Version>1400</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Return the height of a database subrow in the referenced worksheet.</Description>
    <ShortDesc>Return the height of a database subrow in the referenced worksheet.</ShortDesc>
    <Result>Return the height of a database subrow in the referenced worksheet.</Result>
    <ID>3001</ID>
    <IDName>procGetWSSubrowHeight</IDName>
    <InternalFunctionName>MP_GetWSSubrowHeight</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>databaserow</Name>
        <Type>intMode</Type>
        <Desc>The database row</Desc>
      </Param>
      <Param>
        <Name>subrow</Name>
        <Type>intMode</Type>
        <Desc>The database subrow to be queried</Desc>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>intVarMode</Type>
        <Desc>Output parameter. Return the height (in pixels)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetHeight</Name>
    <ChangedDate>2008:07:23T17:32:00</ChangedDate>
    <Version>1400</Version>
    <Category>Object Info</Category>
    <Type>Procedure</Type>
    <Description>Set height of the passed object.</Description>
    <ShortDesc>Set height of the passed object.</ShortDesc>
    <ID>3002</ID>
    <IDName>procSetHeight</IDName>
    <InternalFunctionName>MP_SetHeight</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>realMode</Type>
        <Desc>The new height of the object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWidth</Name>
    <ChangedDate>2008:07:23T17:33:00</ChangedDate>
    <Version>1400</Version>
    <Category>Object Info</Category>
    <Type>Procedure</Type>
    <Description>Set width of the passed object.</Description>
    <ShortDesc>Set width of the passed object.</ShortDesc>
    <ID>3003</ID>
    <IDName>procSetWidth</IDName>
    <InternalFunctionName>MP_SetWidth</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>realMode</Type>
        <Desc>The new width of the object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetAngle</Name>
    <ChangedDate>2008:07:23T17:34:00</ChangedDate>
    <Version>1400</Version>
    <Category>Object Info</Category>
    <Type>Procedure</Type>
    <Description>Set angle of the passed object.</Description>
    <ShortDesc>Set angle of the passed object.</ShortDesc>
    <ID>3004</ID>
    <IDName>procSetAngle</IDName>
    <InternalFunctionName>MP_SetAngle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>realMode</Type>
        <Desc>The new rotation angle of the object. Angle in degrees (-180;180] measured from (1,0) vector.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPrefRGB</Name>
    <ChangedDate>2008:07:28T15:56:00</ChangedDate>
    <Version>1400</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Procedure GetPrefRGB return the RGB color components of the specified preference item. The RGB values are in the range of 0 - 65535.</Description>
    <ShortDesc>Procedure GetPrefRGB return the RGB color components of the specified preference item.</ShortDesc>
    <SeeAlso>SetPrefRGB</SeeAlso>
    <ID>3005</ID>
    <IDName>procGetPrefRGB</IDName>
    <InternalFunctionName>MP_GetPrefRGB</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>prefIndex</Name>
        <Type>intMode</Type>
        <Desc>Preference item constant</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (red)</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (green)</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (blue)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetPrefRGB</Name>
    <ChangedDate>2008:07:28T14:17:00</ChangedDate>
    <Version>1400</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Procedure SetPrefRGB return the RGB color components of the specified preference item. The color must be specified using the RGB components of the desired color. The RGB values are in the range of 0 - 65535.</Description>
    <ShortDesc>Procedure SetPrefRGB sets the RGB color components of the specified preference item.</ShortDesc>
    <ID>3006</ID>
    <IDName>procSetPrefRGB</IDName>
    <InternalFunctionName>MP_SetPrefRGB</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>prefIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>longMode</Type>
        <Desc>The RGB color component (red).</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>longMode</Type>
        <Desc>The RGB color component (green).</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>longMode</Type>
        <Desc>The RGB color component (blue).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnableDrawingWorksheetPalette</Name>
    <ChangedDate>2016:03:31T11:17:00</ChangedDate>
    <Version>1400</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Enables/disables drawing for the specified worksheet or all displayed worksheet palettes if worksheet is nil.[[BR]][[BR]]To improve speed and avoid flickering, it is highly recommended to disable drawing in worksheet palettes before performing several write operations in an opened worksheet. [[BR]]Enable drawing back when the operations are completed. [[BR]]</Description>
    <ShortDesc>Enables/disables drawing for worksheet palettes.</ShortDesc>
    <Example>{Disable drawing in all displayed worksheet palettes.}[[BR]]EnableDrawingWorksheetPalette(false, nil);[[BR]][[BR]]{Write it worksheets ....}[[BR]]...[[BR]]...[[BR]]...[[BR]][[BR]]{Enable back drawing in all displayed worksheet palettes.}[[BR]]EnableDrawingWorksheetPalette(true, nil);</Example>
    <ID>3007</ID>
    <IDName>procEnableDrawingWorksheetPalette</IDName>
    <InternalFunctionName>MP_EnableDrawingWorksheetPalette</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>enable</Name>
        <Type>boolMode</Type>
        <Desc>Specifies if worksheet palettes' drawing  should be enabled or disabled.</Desc>
      </Param>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to specific worksheet for which to enable/disable drawing;  Set it to nil to enable/disable drawing in all displayed worksheet palettes.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSAutoRecalcState</Name>
    <ChangedDate>2008:08:11T12:06:00</ChangedDate>
    <Version>1400</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the AutoRecalc state for the specified worksheet.[[BR]][[BR]]When the AutoRecalc flag is on for a worksheet, it automatically recalculates every time a cell is edited.[[BR]][[BR]]In order to improve speed when editing mutiple cells one after the other or in a loop, it is highly recommended to turn this flag off prior to the edits and restore it, then recalculate the worksheet when all the edits are completed.</Description>
    <ShortDesc>Gets the AutoRecalc state for the specified worksheet.</ShortDesc>
    <SeeAlso>SetWSAutoRecalcState, RecalculateWS</SeeAlso>
    <Example>{Save the current AutoRecalc state}[[BR]]state := GetWSAutoRecalcState(h);[[BR]][[BR]]{Turn off worksheet Auto Recalculation}[[BR]]SetWSAutoRecalcState(h,false);[[BR]][[BR]]{Execute worksheet edit operations ....}[[BR]][[BR]]{Restore AutoRecalc state}[[BR]]SetWSAutoRecalcState(h, state);[[BR]][[BR]]{Recalculate the worksheet}[[BR]]RecalculateWS(h);</Example>
    <ID>3008</ID>
    <IDName>funcGetWSAutoRecalcState</IDName>
    <InternalFunctionName>MP_GetWSAutoRecalcState</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSAutoRecalcState</Name>
    <ChangedDate>2008:08:11T12:09:00</ChangedDate>
    <Version>1400</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the AutoRecalc flag for the specified worksheet.</Description>
    <ShortDesc>Sets the AutoRecalc flag for the specified worksheet.</ShortDesc>
    <SeeAlso>GetWSAutoRecalcState, RecalculateWS</SeeAlso>
    <Example>{Save the current AutoRecalc state}[[BR]]state := GetWSAutoRecalcState(h);[[BR]][[BR]]{Turn off worksheet Auto Recalculation}[[BR]]SetWSAutoRecalcState(h,false);[[BR]][[BR]]{Execute worksheet edit operations ....}[[BR]][[BR]]{Restore AutoRecalc state}[[BR]]SetWSAutoRecalcState(h, state);[[BR]][[BR]]{Recalculate the worksheet}[[BR]]RecalculateWS(h);</Example>
    <ID>3009</ID>
    <IDName>procSetWSAutoRecalcState</IDName>
    <InternalFunctionName>MP_SetWSAutoRecalcState</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>state</Name>
        <Type>boolMode</Type>
        <Desc>Worksheet AutoRecalc flag.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVersionEx</Name>
    <ChangedDate>2008:10:17T10:16:00</ChangedDate>
    <Version>1500</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Returns version information about the Vectorworks application. Parameter [[p:1]] returns the major version number of the application. Parameters [[p:2]] and [[p:3]] return minor version information. Parameter [[p:4]] returns the OS platform on which Vectorworks is running (1 = Macintosh, 2 = Windows).[[BR]]Parameter [[p:5]] returns the build number of the version.[[BR]][[BR]]Vectorworks 2008 has version major number 13, 2009 - 14 and so on.[[BR]][[BR]]For example:[[BR]][[BR]]Vectorworks 2010.0.1 running on a Macintosh would return:[[BR]][[BR]][[p:1]]: 15[[BR]][[p:2]]: 0[[BR]][[p:3]]: 1[[BR]][[p:4]]: 1[[BR]][[p:5]]: 95668[[BR]]</Description>
    <ShortDesc>Returns extended version information on Vectorworks.</ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR [[BR]]	osMajor, osMinor, osIncr, buildNum :LONGINT; [[BR]]	appMajor, appMinor, appMaint, platform :INTEGER;[[BR]]	platformStr :STRING;[[BR]]BEGIN[[BR]]	GetVersionEx(appMajor, appMinor, appMaint, platform, buildNum);[[BR]]	GetOSVersion(osMajor, osMinor, osIncr);[[BR]]	IF (platform = 1) [[BR]]		THEN platformStr := 'MacOS'[[BR]]		ELSE platformStr := 'Windows';[[BR]]	Message('Vectorworks ', appMajor, '.', appMinor, '.', appMaint, ' build ', buildNum, ' running on ', platformStr, ' ', osMajor, '.', osMinor, '.', osIncr);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>3010</ID>
    <IDName>procGetVersionEx</IDName>
    <InternalFunctionName>MP_GetVersionEx</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>major</Name>
        <Type>intVarMode</Type>
        <Desc>Returns major version number of application.</Desc>
      </Param>
      <Param>
        <Name>minor</Name>
        <Type>intVarMode</Type>
        <Desc>Returns minor version number of application.</Desc>
      </Param>
      <Param>
        <Name>maintenance</Name>
        <Type>intVarMode</Type>
        <Desc>Returns maintenance version number of application.</Desc>
      </Param>
      <Param>
        <Name>platform</Name>
        <Type>intVarMode</Type>
        <Desc>Returns platform of application.</Desc>
      </Param>
      <Param>
        <Name>buildNum</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns the build number of application.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ConvertHSF2PosixPath</Name>
    <ChangedDate>2008:11:04T10:17:00</ChangedDate>
    <Version>1500</Version>
    <Category>File I/O</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Machintosh only![[BR]][[BR]]Converts HSF (using ':' as delimiter) file path to Posix (using '/' as delimiter) file path.</Description>
    <ShortDesc>Machintosh only! Converts HSF (using ':' as delimiter) file path to Posix (using '/' as delimiter) file path.</ShortDesc>
    <Result>Returns true if the conversion succeeds. False if it fails.[[BR]]The resulted Posix path will be the same as the passed HSF path if the function fails.</Result>
    <SeeAlso>ConvertPosix2HSFPath</SeeAlso>
    <ID>3011</ID>
    <IDName>funcConvertHSF2PosixPath</IDName>
    <InternalFunctionName>MP_ConvertHSF2PosixPath</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>HSFPath</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The HSF path that is to be converted.</Desc>
      </Param>
      <Param>
        <Name>outPosixPath</Name>
        <Type>eCharDynarrayVarMode</Type>
        <Desc>Output parameter. Returns the converted path. If the function does not succeed the returned value is the passed 'HSFPath' value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ConvertPosix2HSFPath</Name>
    <ChangedDate>2008:11:04T10:17:00</ChangedDate>
    <Version>1500</Version>
    <Category>File I/O</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Machintosh only! [[BR]][[BR]]Converts Posix (using '/' as delimiter) file path to HSF (using ':' as delimiter) file path.</Description>
    <ShortDesc>Machintosh only! Converts Posix (using '/' as delimiter) file path to HSF (using ':' as delimiter) file path.</ShortDesc>
    <Result>Returns true if the conversion succeeds. False if it fails.[[BR]]The resulted Posix path will be the same as the passed Posix path if the function fails.</Result>
    <SeeAlso>ConvertHSF2PosixPath</SeeAlso>
    <ID>3012</ID>
    <IDName>funcConvertPosix2HSFPath</IDName>
    <InternalFunctionName>MP_ConvertPosix2HSFPath</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>PosixPath</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The Posix path that is to be converted.</Desc>
      </Param>
      <Param>
        <Name>outHSFPath</Name>
        <Type>eCharDynarrayVarMode</Type>
        <Desc>Output parameter. Returns the converted path. If the function does not succeed the returned value is the passed 'PosixPath' value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>TrackObject</Name>
    <ChangedDate>2009:06:22T16:10:00</ChangedDate>
    <Version>1500</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Interactively, including highlighting, allows the user to select one object meeting the specified criteria.[[BR]][[BR]]The callback function (any of these depending on what info is needed):[[BR]][[BR]]FUNCTION Callback(h : HANDLE): BOOLEAN;[[BR]]FUNCTION CheckObjCallback(h : HANDLE; px, py : REAL) : BOOLEAN;[[BR]]FUNCTION CheckObjCallback(h : HANDLE; px, py, pz : REAL) : BOOLEAN;[[BR]][[BR]]is used to let the user filter the object that can be returned from the function.[[BR]][[BR]]The parameteri px,py,pz pass into the function information about current cursor position in document units.[[BR]][[BR]]This callback function is called when tracking over an object; also when click happens over an object.[[BR]][[BR]]The callback function return true if the passed handle can be returned.</Description>
    <ShortDesc>Interactively, including highlighting, allows the user to select one object meeting the specified criteria.</ShortDesc>
    <Example>PROCEDURE Test;[[BR]]VAR[[BR]]  h : HANDLE;[[BR]]  x, y, z : REAL;[[BR]]  [[BR]]  FUNCTION CheckObjCallback(h : HANDLE) : BOOLEAN;[[BR]]  {or FUNCTION CheckObjCallback(h : HANDLE; px, py : REAL) : BOOLEAN;}[[BR]]  {or FUNCTION CheckObjCallback(h : HANDLE; px, py, pz : REAL) : BOOLEAN;}[[BR]]  BEGIN[[BR]]     {any object is ok}[[BR]]     CheckObjCallback := true;[[BR]]  END;[[BR]][[BR]]BEGIN[[BR]]	TrackObject( CheckObjCallback, h, x, y, z );[[BR]]	SetSelect( h );[[BR]]END;[[BR]]RUN( Test );[[BR]]</Example>
    <ID>3013</ID>
    <IDName>procTrackObject</IDName>
    <SpecialOverride>CHECKTRACKOBJECT(procTrackObject, MP_TrackObject, userProcMode, handleVarMode, d3PtVarMode);</SpecialOverride>
    <InternalFunctionName>MP_TrackObject</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Special</ImplementationDetails>
    <Params>
      <Param>
        <Name>callback</Name>
        <Type>userProcMode</Type>
        <Desc>The callback that will be called to check if an object meets the requrements to be tracked. See remarks.</Desc>
      </Param>
      <Param>
        <Name>outObj</Name>
        <Type>handleVarMode</Type>
        <Desc>Returns handle of the object for which the callback returned TRUE.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Returns coordinates of mouse click.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPt3D</Name>
    <ChangedDate>2008:11:05T13:21:00</ChangedDate>
    <Version>1500</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Procedure GetPt3D switches the cursor to 3D selection mode and allows the user to select a point in a VectorWorks document. This cannot be used if there is a function anywhere in the calling chain.</Description>
    <ShortDesc>Procedure GetPt3D switches the cursor to 3D selection mode and allows the user to select a point in a VectorWorks document. This cannot be used if there is a function anywhere in the calling chain.</ShortDesc>
    <SeeAlso>GetPt,GetPtL,GetLine,GetRect,GetPt3D,GetPtL3D,GetLine3D,GetRect3D</SeeAlso>
    <ID>3014</ID>
    <IDName>procGetPt3D</IDName>
    <InternalFunctionName>MP_GetPt3D</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Returns coordinates of mouse click.</Desc>
      </Param>
      <Param>
        <Name>useWPOnly</Name>
        <Type>boolMode</Type>
        <Desc>TRUE if the returned point have to be on the active Working Plane. Snapping to arbitrary 3D geometry will produce vertical projection result on the WP; FALSE if the point can be arbitrary 3D point (produced, for example, by snapping to a 3D geometry)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPtL3D</Name>
    <ChangedDate>2008:11:05T13:21:00</ChangedDate>
    <Version>1500</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Procedure GetPtL3D creates a temporary "rubberband" 3D line from a specified point to the user selected end point. This cannot be used if there is a function anywhere in the calling chain. </Description>
    <ShortDesc>Procedure GetPtL3D creates a temporary "rubberband" 3D line from a specified point to the user selected end point. This cannot be used if there is a function anywhere in the calling chain. </ShortDesc>
    <SeeAlso>GetPt,GetPtL,GetLine,GetRect,GetPt3D,GetPtL3D,GetLine3D,GetRect3D</SeeAlso>
    <ID>3015</ID>
    <IDName>procGetPtL3D</IDName>
    <InternalFunctionName>MP_GetPtL3D</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p1</Name>
        <Type>d3PtMode</Type>
        <Desc>Coordinates of line start point.</Desc>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Returns coordinates of mouse click.</Desc>
      </Param>
      <Param>
        <Name>useWPOnly</Name>
        <Type>boolMode</Type>
        <Desc>TRUE if the returned point have to be on the active Working Plane. Snapping to arbitrary 3D geometry will produce vertical projection result on the WP; FALSE if the point can be arbitrary 3D point (produced, for example, by snapping to a 3D geometry)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLine3D</Name>
    <ChangedDate>2008:11:05T13:21:00</ChangedDate>
    <Version>1500</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Procedure GetLine3D returns two user selected points, and draws a temporary "rubberband" 3D line when prompting for the second point. This cannot be used if there is a function anywhere in the calling chain. </Description>
    <ShortDesc>Procedure GetLine3D returns two user selected points, and draws a temporary "rubberband" 3D line when prompting for the second point. This cannot be used if there is a function anywhere in the calling chain. </ShortDesc>
    <SeeAlso>GetPt,GetPtL,GetLine,GetRect,GetPt3D,GetPtL3D,GetLine3D,GetRect3D</SeeAlso>
    <ID>3016</ID>
    <IDName>procGetLine3D</IDName>
    <InternalFunctionName>MP_GetLine3D</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p1</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Returns coordinates of first user click.</Desc>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Returns coordinates of second user click.</Desc>
      </Param>
      <Param>
        <Name>useWP</Name>
        <Type>boolMode</Type>
        <Desc>TRUE if the returned point have to be on the active Working Plane. Snapping to arbitrary 3D geometry will produce vertical projection result on the WP; FALSE if the point can be arbitrary 3D point (produced, for example, by snapping to a 3D geometry)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetRect3D</Name>
    <ChangedDate>2008:11:06T10:18:00</ChangedDate>
    <Version>1500</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Procedure GetRect3D draws a temporary "rubberband" 3D rectangle on the working plane. The user defines the rectangle by selecting two points which define the top left and bottom right of the rectangle. This cannot be used if there is a function anywhere in the calling chain.</Description>
    <ShortDesc>Procedure GetRect3D draws a temporary "rubberband" 3D rectangle on the working plane. The user defines the rect by selecting two points - top left and bottom right. This cannot be used if there is a function anywhere in the calling chain.</ShortDesc>
    <SeeAlso>GetPt,GetPtL,GetLine,GetRect,GetPt3D,GetPtL3D,GetLine3D,GetRect3D</SeeAlso>
    <ID>3017</ID>
    <IDName>procGetRect3D</IDName>
    <InternalFunctionName>MP_GetRect3D</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p1</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Returns coordinates of first user click.</Desc>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Returns coordinates of second user click.</Desc>
      </Param>
      <Param>
        <Name>useWP</Name>
        <Type>boolMode</Type>
        <Desc>TRUE if the returned point have to be on the active Working Plane. Snapping to arbitrary 3D geometry will produce vertical projection result on the WP; FALSE if the point can be arbitrary 3D point (produced, for example, by snapping to a 3D geometry)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RunTempTool</Name>
    <ChangedDate>2013:01:29T17:27:00</ChangedDate>
    <Version>1500</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Runs a temp tool. The call waits until the tool has finished. The callback function is notified for the tool events.</Description>
    <ShortDesc>Runs a temp tool. The call waints until the tool has finished. The callback function is notified for the tool events.</ShortDesc>
    <Example>PROCEDURE Test;[[BR]]VAR[[BR]]    pt1, pt2 : POINT;[[BR]][[BR]]    FUNCTION TempToolCallback(action, msg1, msg2 : LONGINT) : LONGINT;[[BR]]    VAR pt : POINT;[[BR]]    BEGIN[[BR]]         TempToolCallback := 0;[[BR]]         CASE action OF[[BR]]             3: BEGIN {kOnToolDoSetupEventID}[[BR]]		             vstSetHelpString ( 'Just click once.' );[[BR]]             END;[[BR]][[BR]]             103 : BEGIN {kToolDrawEventID}[[BR]]                 vstGetCurrPt2D( pt.x, pt.y );[[BR]]                 vstDrawCoordLine( pt.x, pt.y, pt1.x, pt1.y );[[BR]]                 vstDrawCoordLine( pt.x, pt.y, pt2.x, pt2.y );[[BR]]             END;[[BR]]         END;[[BR]]    END;[[BR]][[BR]]BEGIN[[BR]]    pt1.x := 0; pt1.y := 0;[[BR]]    pt2.x := 100mm; pt2.y := 100mm;[[BR]]    RunTempTool( TempToolCallback, FALSE );[[BR]]END;[[BR]]RUN( Test );</Example>
    <ID>3018</ID>
    <IDName>procRunTempTool</IDName>
    <SpecialOverride>CHECKRUNTEMPTOOL(procRunTempTool, MP_RunTempTool);</SpecialOverride>
    <InternalFunctionName>MP_RunTempTool</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Special</ImplementationDetails>
    <Params>
      <Param>
        <Name>toolCallback</Name>
        <Type>userProcMode</Type>
        <Desc>Procedure that will be called with the tool events.[[BR]]FUNCTION ToolCallback(action, msg1, msg2 : INTEGER) : INTEGER;</Desc>
      </Param>
      <Param>
        <Name>initialScroll</Name>
        <Type>boolMode</Type>
        <Desc>For experts. Pass FALSE if you want a simple temp tool. Setting it to TRUE will add one extra point (0,0) before the tool runs. This will make the tool scroll before the first click. This means that your tool handler must recognize and skip that extra fir</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AlertInformDontShowAgain</Name>
    <ChangedDate>2019:08:14T14:53:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Procedure</Type>
    <Description>Displays an alert dialog which provides the user with information about the result of a command with an option to not show the dialog again. It offers no user choices.[[BR]][[BR]]The parameter 'arrOptions' is of type ARRAY [1..3] OF STRING;[[BR]]arrOpt[1] - Saved setting category to save checkbox value[[BR]]arrOpt[2] - Saved setting item to save checkbox value [[BR]]arrOpt[3] - Specify the string to use in overriding the default 'Dont show this dialog again' checkbox string</Description>
    <ShortDesc>Displays an alert dialog which provides the user with information about the result of a command with an option to not show the dialog again.</ShortDesc>
    <SeeAlso>AlertInform, AlertQuestion, AlertCritical, AlertQuestionDontShowAgain, AlertCriticalHLink, AlertInformHLink, AlertInformHLinkN</SeeAlso>
    <Comments>Created by TTF 1/9/2009</Comments>
    <Example>PROCEDURE Example;[[BR]][[BR]]VAR[[BR]]	arrayText : ARRAY[1..3] OF STRING;[[BR]][[BR]]BEGIN[[BR]]	arrayText[1] := 'DontShowDialogAgainCategory';[[BR]]	arrayText[2] := 'DontShowDialogAgainItem'; {Should be unique for every AlertInformDontShowAgain}[[BR]]	arrayText[3] := '';[[BR]][[BR]]	AlertInformDontShowAgain('This is an invalid item.', '', false, arrayText);[[BR]]END;[[BR]][[BR]]RUN(Example);</Example>
    <ID>3019</ID>
    <IDName>procAlertInformDontShowAgain</IDName>
    <InternalFunctionName>MP_AlertInformDontShowAgain</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>text</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The information to be displayed.</Desc>
      </Param>
      <Param>
        <Name>advice</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The text to be added in a smaller font under the main information message.</Desc>
      </Param>
      <Param>
        <Name>minorAlert</Name>
        <Type>boolMode</Type>
        <Desc>The severity of the alert: minor(true) or major(false).</Desc>
      </Param>
      <Param>
        <Name>arrOptions</Name>
        <Type>arrayMode</Type>
        <Desc>ARRAY [1..3] OF STRING; arrOpt[1] - Saved setting category to save checkbox value arrOpt[2] - Saved setting item to save checkbox value  arrOpt[3] - Specify a string to use in overriding the default 'Dont show this dialog again' checkbox string</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AlertQuestionDontShowAgain</Name>
    <ChangedDate>2019:08:14T14:49:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Displays an alert dialog which alerts the user to a condition or situation that requires the user's decision and input before preceding; such as an impending action with potentially destructive or irreversible consequences with the option to always do the selected action and not show the dialog again. The message should be in the form of a question.[[BR]][[BR]]The parameter 'arrOptions' is of type ARRAY [1..3] OF STRING;[[BR]]arrOpt[1] - Saved setting category to save checkbox value[[BR]]arrOpt[2] - Saved setting item to save checkbox value [[BR]]arrOpt[3] - Specify a string to use in overriding the default 'Always do the selection action' checkbox string</Description>
    <ShortDesc>Alerts the user to a condition  that requires the user's decision with an option to not show the dialog again.</ShortDesc>
    <Result>Return Values[[BR]]0:  the negative button was hit[[BR]]1:  the positive button was hit[[BR]]2:  custom button A was hit[[BR]]3:  custom button B was hit</Result>
    <SeeAlso>AlertInform, AlertQuestion, AlertCritical, AlertInformDontShowAgain, AlertCriticalHLink, AlertInformHLink, AlertInformHLinkN</SeeAlso>
    <Comments>Created by TTF 1/9/2009</Comments>
    <Example>PROCEDURE Example;[[BR]][[BR]]VAR[[BR]]	result :INTEGER;[[BR]]	arrayText : ARRAY[1..3] OF STRING;[[BR]][[BR]]BEGIN[[BR]]	arrayText[1] := 'DontShowDialogAgainCategory';[[BR]]	arrayText[2] := 'DontShowDialogAgainItem'; {Should be unique for every AlertQuestionDontShowAgain}[[BR]]	arrayText[3] := '';[[BR]][[BR]]	result := AlertQuestionDontShowAgain('Do you want to continue?', '', 0, 'Yes', 'No', '', '', arrayText);[[BR]]END;[[BR]][[BR]]RUN(Example);</Example>
    <ID>3020</ID>
    <IDName>funcAlertQuestionDontShowAgain</IDName>
    <InternalFunctionName>MP_AlertQuestionDontShowAgain</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>question</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The question to display</Desc>
      </Param>
      <Param>
        <Name>advice</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The text to be added in a smaller font under the main information/message</Desc>
      </Param>
      <Param>
        <Name>defaultButton</Name>
        <Type>intMode</Type>
        <Desc>Specifies which button is to be made the default[[BR]]0:	the negative button is the default[[BR]]1:	the positive button is the default[[BR]]2:	custom button A is the default [[BR]]3:	custom button B is the default </Desc>
      </Param>
      <Param>
        <Name>OKOverrideText</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Specifies a string to use in overriding the 'OK' string</Desc>
      </Param>
      <Param>
        <Name>CancelOverrideText</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Specifies a string to use in overriding the 'Cancel' string</Desc>
      </Param>
      <Param>
        <Name>customButtonAText</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Specifies a string to use for an optional custom button A</Desc>
      </Param>
      <Param>
        <Name>customButtonBText</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Specifies a string to use for a second optional custom button B</Desc>
      </Param>
      <Param>
        <Name>arrOptions</Name>
        <Type>arrayMode</Type>
        <Desc>ARRAY [1..3] OF STRING;    arrOpt[1] - Saved setting category to save checkbox value    arrOpt[2] - Saved setting item to save checkbox value     arrOpt[3] - Specify a string to use in overriding the default 'Always do the selection action' checkbox string</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextureRefN</Name>
    <ChangedDate>2009:01:28T12:43:00</ChangedDate>
    <Version>1500</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>LongInt</ReturnType>
    <Description>Returns the texture reference for a specified object.</Description>
    <ShortDesc>Returns the texture reference for a specified object.</ShortDesc>
    <ID>3021</ID>
    <IDName>funcGetTextureRefN</IDName>
    <InternalFunctionName>MP_GetTextureRefN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>texPartID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>texLayerID</Name>
        <Type>longMode</Type>
        <Desc>Texture layer ID, 0 for base, &gt;0 for decals</Desc>
      </Param>
      <Param>
        <Name>resolveByClass</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextureRefN</Name>
    <ChangedDate>2009:01:28T12:45:00</ChangedDate>
    <Version>1500</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Sets the texture reference for a specified object</Description>
    <ShortDesc>Sets the texture reference for a specified object</ShortDesc>
    <ID>3022</ID>
    <IDName>procSetTextureRefN</IDName>
    <InternalFunctionName>MP_SetTextureRefN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>textureRef</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>texPartID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>texLayerID</Name>
        <Type>longMode</Type>
        <Desc>0 for base, &gt;0 for decals</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDefaultTexMapN</Name>
    <ChangedDate>2009:01:28T14:53:00</ChangedDate>
    <Version>1500</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Set the object to have default texture mapping info. Texture resource being used is set with SetTextureRef. This routine replaces SetDefaultTexMap with version 2010 and above.</Description>
    <ShortDesc>Set the object to have default texture mapping info. Texture resource being used is set with SetTextureRef. This routine replaces SetDefaultTexMap with version 2010 and above.</ShortDesc>
    <ID>3023</ID>
    <IDName>procSetDefaultTexMapN</IDName>
    <InternalFunctionName>MP_SetDefaultTexMapN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>The textured object</Desc>
      </Param>
      <Param>
        <Name>texPartID</Name>
        <Type>longMode</Type>
        <Desc>The texture part ID</Desc>
      </Param>
      <Param>
        <Name>texLayerID</Name>
        <Type>longMode</Type>
        <Desc>The texture layer ID, 0 for base, &gt;0 for decals</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexMapBoolN</Name>
    <ChangedDate>2009:01:28T12:47:00</ChangedDate>
    <Version>1500</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Set map info for specific part of object. partID is texture part, overall is 3. Selector: init:1, flip:2, repH:3, repV:4, long edge:5, worldZ:6, auto align:7</Description>
    <ShortDesc>Set map info for specific part of object. partID is texture part, overall is 3. Selector: init:1, flip:2, repH:3, repV:4, long edge:5, worldZ:6, auto align:7</ShortDesc>
    <ID>3024</ID>
    <IDName>procSetTexMapBoolN</IDName>
    <InternalFunctionName>MP_SetTexMapBoolN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>texPartID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>texLayerID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>selector</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexMapBoolN</Name>
    <ChangedDate>2009:01:28T12:50:00</ChangedDate>
    <Version>1500</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Get map info for specific part of object. partID is texture part, overall is 3. Selector: init:1, flip:2, repH:3, repV:4, long edge:5, worldZ:6, auto align:7</Description>
    <ShortDesc>Get map info for specific part of object. partID is texture part, overall is 3. Selector: init:1, flip:2, repH:3, repV:4, long edge:5, worldZ:6, auto align:7</ShortDesc>
    <ID>3025</ID>
    <IDName>funcGetTexMapBoolN</IDName>
    <InternalFunctionName>MP_GetTexMapBoolN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>texPartID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>texLayerID</Name>
        <Type>longMode</Type>
        <Desc>0 for base, &gt;0 for decals</Desc>
      </Param>
      <Param>
        <Name>selector</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexMapIntN</Name>
    <ChangedDate>2009:01:28T14:53:00</ChangedDate>
    <Version>1500</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Set map info for specific part of object. partID is texture part, overall is 3. Selector should be 1 to set the map type integer.</Description>
    <ShortDesc>Set map info for specific part of object. partID is texture part, overall is 3. Selector should be 1 to set the map type integer.</ShortDesc>
    <ID>3026</ID>
    <IDName>procSetTexMapIntN</IDName>
    <InternalFunctionName>MP_SetTexMapIntN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>texPartID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>texLayerID</Name>
        <Type>longMode</Type>
        <Desc>0 for base, &gt;0 for decals</Desc>
      </Param>
      <Param>
        <Name>selector</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexMapIntN</Name>
    <ChangedDate>2009:01:28T14:53:00</ChangedDate>
    <Version>1500</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Get map info for specific part of object. partID is texture part, overall is 3. Selector should be1, to return the texture map type integer.</Description>
    <ShortDesc>Get map info for specific part of object. partID is texture part, overall is 3. Selector should be1, to return the texture map type integer.</ShortDesc>
    <ID>3027</ID>
    <IDName>funcGetTexMapIntN</IDName>
    <InternalFunctionName>MP_GetTexMapIntN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>texPartID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>texLayerID</Name>
        <Type>longMode</Type>
        <Desc>0 for base, &gt;0 for decals</Desc>
      </Param>
      <Param>
        <Name>selector</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTexMapRealN</Name>
    <ChangedDate>2009:01:28T12:53:00</ChangedDate>
    <Version>1500</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Set map info for specific part of object. partID is texture part, overall is 3. Selector: offsetX:1, offsetY:2, scale2D:3, rotate2D:4, radius:5, matrix mat00 through mat32: 6-17</Description>
    <ShortDesc>Set map info for specific part of object. partID is texture part, overall is 3. Selector: offsetX:1, offsetY:2, scale2D:3, rotate2D:4, radius:5, matrix mat00 through mat32: 6-17</ShortDesc>
    <ID>3028</ID>
    <IDName>procSetTexMapRealN</IDName>
    <InternalFunctionName>MP_SetTexMapRealN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>texPartID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>texLayerID</Name>
        <Type>longMode</Type>
        <Desc>0 for base, &gt;0 for decals</Desc>
      </Param>
      <Param>
        <Name>selector</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>realMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTexMapRealN</Name>
    <ChangedDate>2009:01:28T12:54:00</ChangedDate>
    <Version>1500</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Get map info for specific part of object. partID is texture part, overall is 3. Selector: offsetX:1, offsetY:2, scale2D:3, rotate2D:4, radius:5, matrix mat00 through mat32: 6-17</Description>
    <ShortDesc>Get map info for specific part of object. partID is texture part, overall is 3. Selector: offsetX:1, offsetY:2, scale2D:3, rotate2D:4, radius:5, matrix mat00 through mat32: 6-17</ShortDesc>
    <ID>3029</ID>
    <IDName>funcGetTexMapRealN</IDName>
    <InternalFunctionName>MP_GetTexMapRealN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>texPartID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>texLayerID</Name>
        <Type>longMode</Type>
        <Desc>0 for base, &gt;0 for decals</Desc>
      </Param>
      <Param>
        <Name>selector</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumTexLayers</Name>
    <ChangedDate>2009:01:28T16:53:00</ChangedDate>
    <Version>1500</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Returns number of texture layers (base + decals) for the specified part.</Description>
    <ShortDesc>Returns number of texture layers (base + decals) for the specified part.</ShortDesc>
    <ID>3030</ID>
    <IDName>funcGetNumTexLayers</IDName>
    <InternalFunctionName>MP_GetNumTexLayers</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>texPartID</Name>
        <Type>longMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetStaticTextStyle</Name>
    <ChangedDate>2009:02:02T14:18:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the style for the Layout Manager static Text[[BR]][[BR]]Plain 0[[BR]]Bold 1[[BR]]Italic 2[[BR]]Underline 4[[BR]][[BR]]Can combine styles (bold + italic = 3)</Description>
    <ShortDesc>Sets the style for the Layout Manager static Text</ShortDesc>
    <ID>3031</ID>
    <IDName>procSetStaticTextStyle</IDName>
    <InternalFunctionName>MP_SetStaticTextStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetStaticTextColor</Name>
    <ChangedDate>2009:02:02T14:16:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the color for the Layout Manager static Text</Description>
    <ShortDesc>Sets the color for the Layout Manager static Text</ShortDesc>
    <ID>3032</ID>
    <IDName>procSetStaticTextColor</IDName>
    <InternalFunctionName>MP_SetStaticTextColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetItemClickable</Name>
    <ChangedDate>2009:03:03T11:22:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the specified item to generate events when clicked.  Currently only static text and images are supported.</Description>
    <ShortDesc>Sets the specified item to generate events when clicked.  Currently only static text and images are supported.</ShortDesc>
    <ID>3033</ID>
    <IDName>procSetItemClickable</IDName>
    <InternalFunctionName>MP_SetItemClickable</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>clickable</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetSliderLiveUpdate</Name>
    <ChangedDate>2009:03:03T11:56:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the specified slider to generate events during a drag.</Description>
    <ShortDesc>Sets the specified slider to generate events during a drag.</ShortDesc>
    <ID>3034</ID>
    <IDName>procSetSliderLiveUpdate</IDName>
    <InternalFunctionName>MP_SetSliderLiveUpdate</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>liveUpdate</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveChoice</Name>
    <ChangedDate>2008:12:10T16:12:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Remove a menu item from a control that can display a menu.</Description>
    <ShortDesc>Remove a menu item from a control that can display a menu.</ShortDesc>
    <ID>3035</ID>
    <IDName>procRemoveChoice</IDName>
    <InternalFunctionName>MP_RemoveChoice</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The dialog identifier given by CreateLayout or CreateResizableLayout</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The identifier of the control that will have its menu item removed.</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>The zero-based index of the menu item to remove.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetChoiceText</Name>
    <ChangedDate>2008:12:10T16:37:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Using the index, gets the text of the menu item of the given component.</Description>
    <ShortDesc>Using the index, gets the text of the menu item of the given component.</ShortDesc>
    <ID>3036</ID>
    <IDName>procGetChoiceText</IDName>
    <InternalFunctionName>MP_GetChoiceText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The dialog identifier given by CreateLayout or CreateResizableLayout</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The identifier of the control that contains the menu items from which the text will be retrieved from.</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>The item index that contains the desired text.</Desc>
      </Param>
      <Param>
        <Name>itemText</Name>
        <Type>strVarMode</Type>
        <Desc>The text of the item.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetMultilineText</Name>
    <ChangedDate>2008:12:10T17:23:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Gets the text that is contained in the given componentID.</Description>
    <ShortDesc>Gets the text that is contained in the given componentID.</ShortDesc>
    <ID>3037</ID>
    <IDName>procGetMultilineText</IDName>
    <InternalFunctionName>MP_GetMultilineText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The dialog identifier given by CreateLayout or CreateResizableLayout</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The identifier of the component that the text will be retrieved from.</Desc>
      </Param>
      <Param>
        <Name>text</Name>
        <Type>eCharDynarrayVarMode</Type>
        <Desc>The text of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSelectedChoiceIndex</Name>
    <ChangedDate>2008:12:10T18:49:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Gets the index of the selected choice.</Description>
    <ShortDesc>Gets the index of the selected choice.</ShortDesc>
    <ID>3038</ID>
    <IDName>procGetSelectedChoiceIndex</IDName>
    <InternalFunctionName>MP_GetSelectedChoiceIndex</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The dialog identifier given by CreateLayout or CreateResizableLayout</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The identifier for the component that contains the choices.</Desc>
      </Param>
      <Param>
        <Name>startIndex</Name>
        <Type>intMode</Type>
        <Desc>The index at which to start looking for a selected item.</Desc>
      </Param>
      <Param>
        <Name>outSelectedIndex</Name>
        <Type>intVarMode</Type>
        <Desc>The index of the selected item or -1 if there is no selected item.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSelectedChoiceInfo</Name>
    <ChangedDate>2008:12:10T18:49:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Gets the index of the selected item and the text of the selected item in a menu.</Description>
    <ShortDesc>Gets the index of the selected item and the text of the selected item in a menu.</ShortDesc>
    <ID>3039</ID>
    <IDName>procGetSelectedChoiceInfo</IDName>
    <InternalFunctionName>MP_GetSelectedChoiceInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The dialog identifier given by CreateLayout or CreateResizableLayout</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The identifier for the component that contains the choices.</Desc>
      </Param>
      <Param>
        <Name>startIndex</Name>
        <Type>intMode</Type>
        <Desc>The index at which to start looking for a selected item.</Desc>
      </Param>
      <Param>
        <Name>outSelectedIndex</Name>
        <Type>intVarMode</Type>
        <Desc>The index of the selected item or -1 if there is no selected item.</Desc>
      </Param>
      <Param>
        <Name>outSelectedChoiceText</Name>
        <Type>strVarMode</Type>
        <Desc>The text of the selected item if it was found, otherwise this parameter is unchanged from when this function was called.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddChoice</Name>
    <ChangedDate>2008:12:10T17:48:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Adds an item to the component's choices.</Description>
    <ShortDesc>Adds an item to the component's choices.</ShortDesc>
    <ID>3040</ID>
    <IDName>procAddChoice</IDName>
    <InternalFunctionName>MP_AddChoice</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>the dialog identifier given by CreateLayout or CreateResizableLayout</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The identifier for the component that contains the choices.</Desc>
      </Param>
      <Param>
        <Name>choiceText</Name>
        <Type>stringMode</Type>
        <Desc>The text for the item that is about to be added.</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>The index after which the new item is to be added.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetBooleanItem</Name>
    <ChangedDate>2008:12:10T17:32:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Determines if a radio or checkbox button is selected or not.</Description>
    <ShortDesc>Determines if a radio or checkbox button is selected or not.</ShortDesc>
    <ID>3041</ID>
    <IDName>procGetBooleanItem</IDName>
    <InternalFunctionName>MP_GetBooleanItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>the dialog identifier given by CreateLayout or CreateResizableLayout</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The identifier for the radio or checkbox button component.</Desc>
      </Param>
      <Param>
        <Name>outState</Name>
        <Type>boolVarMode</Type>
        <Desc>True if the button is selected, false otherwise.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetChoiceCount</Name>
    <ChangedDate>2008:12:10T17:40:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Gets the number of items in the component that contains the choices.</Description>
    <ShortDesc>Gets the number of items in the component that contains the choices.</ShortDesc>
    <ID>3042</ID>
    <IDName>procGetChoiceCount</IDName>
    <InternalFunctionName>MP_GetChoiceCount</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>the dialog identifier given by CreateLayout or CreateResizableLayout</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The identifier for the component that contains the choices.</Desc>
      </Param>
      <Param>
        <Name>outCount</Name>
        <Type>intVarMode</Type>
        <Desc>The number of items in the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SelectChoice</Name>
    <ChangedDate>2008:12:10T18:49:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Set the selection state of the given item in a control of choices.</Description>
    <ShortDesc>Set the selection state of the given item in a control of choices.</ShortDesc>
    <ID>3043</ID>
    <IDName>procSelectChoice</IDName>
    <InternalFunctionName>MP_SelectChoice</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>the dialog identifier given by CreateLayout or CreateResizableLayout</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The identifier for the component that contains the choices.</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the item to set the selection state for.</Desc>
      </Param>
      <Param>
        <Name>selectState</Name>
        <Type>boolMode</Type>
        <Desc>True if the item at the given index should be selected. False otherwise.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SelectEditText</Name>
    <ChangedDate>2008:12:10T17:47:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Activates the given text component and selects its text.</Description>
    <ShortDesc>Activates the given text component and selects its text.</ShortDesc>
    <ID>3044</ID>
    <IDName>procSelectEditText</IDName>
    <InternalFunctionName>MP_SelectEditText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>the dialog identifier given by CreateLayout or CreateResizableLayout</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The identifier of the component that is to be activated and selected.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetItemText</Name>
    <ChangedDate>2008:12:10T18:00:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the text for the specified text component.</Description>
    <ShortDesc>Sets the text for the specified text component.</ShortDesc>
    <ID>3045</ID>
    <IDName>procSetItemText</IDName>
    <InternalFunctionName>MP_SetItemText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>the dialog identifier given by CreateLayout or CreateResizableLayout</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The identifier of the text component.</Desc>
      </Param>
      <Param>
        <Name>text</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The text that should be placed in the text component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetHelpText</Name>
    <ChangedDate>2017:07:05T17:15:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the help text for the given component.</Description>
    <ShortDesc>Sets the help text for the given component.</ShortDesc>
    <ID>3046</ID>
    <IDName>procSetHelpText</IDName>
    <InternalFunctionName>MP_SetHelpText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>the dialog identifier given by CreateLayout or CreateResizableLayout</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The identifier of the component for which to set the help text.</Desc>
      </Param>
      <Param>
        <Name>helpText</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The help text to set for the given component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetBooleanItem</Name>
    <ChangedDate>2008:12:10T18:11:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Selects or deselects the specified check box or radio button.</Description>
    <ShortDesc>Selects or deselects the specified check box or radio button.</ShortDesc>
    <ID>3047</ID>
    <IDName>procSetBooleanItem</IDName>
    <InternalFunctionName>MP_SetBooleanItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>the dialog identifier given by CreateLayout or CreateResizableLayout</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The identifier for the radio or checkbox button component.</Desc>
      </Param>
      <Param>
        <Name>setState</Name>
        <Type>boolMode</Type>
        <Desc>The selection state to set for the given component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnableItem</Name>
    <ChangedDate>2008:12:10T18:55:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Sets the enable state of a dialog item.</Description>
    <ShortDesc>Sets the enable state of a dialog item.</ShortDesc>
    <ID>3048</ID>
    <IDName>procEnableItem</IDName>
    <InternalFunctionName>MP_EnableItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>the dialog identifier given by CreateLayout or CreateResizableLayout</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The identifier of the component to enable or disable given the state.</Desc>
      </Param>
      <Param>
        <Name>enableState</Name>
        <Type>boolMode</Type>
        <Desc>True if the component should be enabled, false otherwise.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnableTextEdit</Name>
    <ChangedDate>2018:03:05T14:59:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Enables text editing for the given component.</Description>
    <ShortDesc>Enables text editing for the given component.</ShortDesc>
    <ID>3049</ID>
    <IDName>procEnableTextEdit</IDName>
    <InternalFunctionName>MP_EnableTextEdit</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>the dialog identifier given by CreateLayout or CreateResizableLayout</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The identifier of the text component.</Desc>
      </Param>
      <Param>
        <Name>editableState</Name>
        <Type>boolMode</Type>
        <Desc>True if this text component should be editable, false otherwise.    </Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RegisterDialogForTimerEvents</Name>
    <ChangedDate>2008:12:11T11:57:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Register the dialog so that it can receive events periodically using the given time delay. Using the command will make Vectorworks send the event 'DialogTimerEventMessageC' to the dialog handler on the specified time interval.</Description>
    <ShortDesc>Register the dialog so that it can receive events periodically using the given time delay.</ShortDesc>
    <ID>3050</ID>
    <IDName>procRegisterDialogForTimerEvents</IDName>
    <InternalFunctionName>MP_RegisterDialogForTimerEvents</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>the dialog identifier given by CreateLayout or CreateResizableLayout</Desc>
      </Param>
      <Param>
        <Name>timerDelayInMilliseconds</Name>
        <Type>longMode</Type>
        <Desc>The amount of time in milliseconds between each event DialogTimerEventMessageC that is going to be sent to the dialog handler function.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DeregisterDialogFromTimerEvents</Name>
    <ChangedDate>2008:12:11T11:59:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Removes the dialog from the timer event registry system.</Description>
    <ShortDesc>Removes the dialog from the timer event registry system.</ShortDesc>
    <ID>3051</ID>
    <IDName>procDeregisterDialogFromTimerEvents</IDName>
    <InternalFunctionName>MP_DeregisterDialogFromTimerEvents</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>the dialog identifier given by CreateLayout or CreateResizableLayout</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DialogTimerEventMessageC</Name>
    <ChangedDate>2008:12:11T12:00:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Constant</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>This constant represents the message that is sent periodically to a dialog handler after it has been registered to receive timer events.</Description>
    <ShortDesc>This constant represents the message that is sent periodically to a dialog handler after it has been registered to receive timer events.</ShortDesc>
    <ID>13028</ID>
    <IDName>kVSDialogTimerEventMessageC</IDName>
    <InternalFunctionName>MP_DialogTimerEventMessageC</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetItemText</Name>
    <ChangedDate>2009:04:07T15:53:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Gets the text that is contained in the given componentID.</Description>
    <ShortDesc>Gets the text that is contained in the given componentID.</ShortDesc>
    <ID>3052</ID>
    <IDName>procGetItemText</IDName>
    <InternalFunctionName>MP_GetItemText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>the dialog identifier given by CreateLayout or CreateResizableLayout</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The identifier of the component that the text will be retrieved from.</Desc>
      </Param>
      <Param>
        <Name>text</Name>
        <Type>strVarMode</Type>
        <Desc>The text of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjectAsCornerBreak</Name>
    <ChangedDate>2009:05:07T10:57:00</ChangedDate>
    <Version>1500</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets an object's corner break flag in it's corner break record. [[BR]][[BR]]Setting the flag to TRUE will force the object into the closest end of the wall and set the offset position of the break record to reflect this.[[BR]][[BR]]Setting the flag to FALSE will unset the corner flag, but no further updating to the object will occur.[[BR]][[BR]]The oject (objH) must be contained in wall (wallH) for the setting to succeed.</Description>
    <ShortDesc>Set an object's break record Corner Break flag.</ShortDesc>
    <Result>True or False upon successfull setting of the flag.[[BR]][[BR]]False can occur for the following conditions:[[BR]]objH is null.[[BR]]wallH is null.[[BR]]objH is not contained in wallH.[[BR]]</Result>
    <ID>3053</ID>
    <IDName>funcSetObjectAsCornerBreak</IDName>
    <InternalFunctionName>MP_SetObjectAsCornerBreak</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objH</Name>
        <Type>handleMode</Type>
        <Desc>The handle of the object to update.</Desc>
      </Param>
      <Param>
        <Name>wallH</Name>
        <Type>handleMode</Type>
        <Desc>The handle of the wall cotainting the object referenced in objH.</Desc>
      </Param>
      <Param>
        <Name>cornerBreak</Name>
        <Type>boolMode</Type>
        <Desc>Boolean value to set or unset the cornerBreak flag for the object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjectWallOffset</Name>
    <ChangedDate>2009:05:08T09:26:00</ChangedDate>
    <Version>1500</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets an object's offset value in it's  break record. [[BR]][[BR]]The oject (objH) must be contained in wall (wallH) for the setting to succeed.</Description>
    <ShortDesc>Set the offset for the object within the wall.</ShortDesc>
    <Result>True or False upon successfull setting of the flag.[[BR]][[BR]]False can occur for the following conditions:[[BR]]objH is null.[[BR]]wallH is null.[[BR]]objH is not contained in wallH.</Result>
    <ID>3054</ID>
    <IDName>funcSetObjectWallOffset</IDName>
    <InternalFunctionName>MP_SetObjectWallOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objH</Name>
        <Type>handleMode</Type>
        <Desc>Handle of object to set a new offset value for.</Desc>
      </Param>
      <Param>
        <Name>wallH</Name>
        <Type>handleMode</Type>
        <Desc>Handle of wall containing the object refernces in objH.</Desc>
      </Param>
      <Param>
        <Name>offset</Name>
        <Type>distanceMode</Type>
        <Desc>Value of new offset for object within wall.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWallCapAttributesType</Name>
    <ChangedDate>2009:05:11T16:02:00</ChangedDate>
    <Version>1500</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the wall cap attributes type of a wall or round wall.  The wall cap attributes type determines whether the wall caps have the wall line attributes or the component lines attributes.  If they have the component lines attributes, each wall component is capped with its own left line attributes.</Description>
    <ShortDesc>Gets the wall cap attributes type of a wall or round wall.</ShortDesc>
    <Result>The wall cap attributes type.[[BR]][[BR]]0 - The wall cap attributes are the wall line attributes[[BR]]1 - The wall cap attributes are the wall component lines attributes</Result>
    <SeeAlso>SetWallCapAttributesType</SeeAlso>
    <ID>3055</ID>
    <IDName>funcGetWallCapAttributesType</IDName>
    <InternalFunctionName>MP_GetWallCapAttributesType</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>wall</Name>
        <Type>handleMode</Type>
        <Desc>The handle to the wall or round wall.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWallCapAttributesType</Name>
    <ChangedDate>2009:05:11T16:02:00</ChangedDate>
    <Version>1500</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Sets the wall cap attributes type of a wall or round wall.  The wall cap attributes type determines whether the wall caps have the wall line attributes or the component lines attributes.  If they have the component lines attributes, each wall component is capped with its own left line attributes.</Description>
    <ShortDesc>Sets the wall cap attributes type of a wall or round wall.</ShortDesc>
    <SeeAlso>GetWallCapAttributesType</SeeAlso>
    <ID>3056</ID>
    <IDName>procSetWallCapAttributesType</IDName>
    <InternalFunctionName>MP_SetWallCapAttributesType</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>wall</Name>
        <Type>handleMode</Type>
        <Desc>The handle to the wall or round wall.</Desc>
      </Param>
      <Param>
        <Name>wallCapAttributesType</Name>
        <Type>intMode</Type>
        <Desc>The wall cap attributes type.&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
0 - The wall cap attributes are the wall line attributes&#xD;
&#xD;
&#xD;
&#xD;
1 - The wall cap attributes are the wall component lines attributes</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCoreWallComponent</Name>
    <ChangedDate>2010:10:05T11:38:00</ChangedDate>
    <Version>1500</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the core wall component of an object.</Description>
    <ShortDesc>Gets the core wall component of the object.</ShortDesc>
    <Result>The index of the core wall component.  If it is 0, there is no core wall component.</Result>
    <SeeAlso>SetCoreWallComponent</SeeAlso>
    <ID>3057</ID>
    <IDName>funcGetCoreWallComponent</IDName>
    <InternalFunctionName>MP_GetCoreWallComponent</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCoreWallComponent</Name>
    <ChangedDate>2010:08:09T16:28:00</ChangedDate>
    <Version>1500</Version>
    <Category>Objects - Architectural</Category>
    <Type>Procedure</Type>
    <Description>Sets the core wall component of an object.</Description>
    <ShortDesc>Sets the core wall component of an object.</ShortDesc>
    <SeeAlso>GetCoreWallComponent</SeeAlso>
    <ID>3058</ID>
    <IDName>procSetCoreWallComponent</IDName>
    <InternalFunctionName>MP_SetCoreWallComponent</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>coreWallComponent</Name>
        <Type>intMode</Type>
        <Desc>The index of the core wall component.  0 will cause there to be no core wall component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWallHoleTexturePart</Name>
    <ChangedDate>2009:05:11T12:53:00</ChangedDate>
    <Version>1500</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the wall texture part of an object in the wall hole group of a symbol definition or plug-in object.  This is the wall texture part given to faces of the wall that are created by cutting a hole in the wall with the object.</Description>
    <ShortDesc>Gets the wall texture part of an object in the wall hole group of a symbol definition or plug-in object.</ShortDesc>
    <Result>The wall texture part.[[BR]][[BR]]0 - The wall Holes texture part[[BR]]1 - The wall Left texture part[[BR]]2 - The wall Right texture part</Result>
    <SeeAlso>SetWallHoleTexturePart</SeeAlso>
    <ID>3059</ID>
    <IDName>funcGetWallHoleTexturePart</IDName>
    <InternalFunctionName>MP_GetWallHoleTexturePart</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The handle to the cutting object in the wall hole group of a symbol definition or plug-in object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWallHoleTexturePart</Name>
    <ChangedDate>2009:05:11T12:54:00</ChangedDate>
    <Version>1500</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Sets the wall texture part of an object in the wall hole group of a symbol definition or plug-in object.  This is the wall texture part given to faces of the wall that are created by cutting a hole in the wall with the object.</Description>
    <ShortDesc>Sets the wall texture part of an object in the wall hole group of a symbol definition or plug-in object.</ShortDesc>
    <SeeAlso>GetWallHoleTexturePart</SeeAlso>
    <ID>3060</ID>
    <IDName>procSetWallHoleTexturePart</IDName>
    <InternalFunctionName>MP_SetWallHoleTexturePart</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The handle to the cutting object in the wall hole group of a symbol definition or plug-in object.</Desc>
      </Param>
      <Param>
        <Name>part</Name>
        <Type>intMode</Type>
        <Desc>The wall texture part.&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
0 - The wall Holes texture part&#xD;
&#xD;
&#xD;
&#xD;
1 - The wall Left texture part&#xD;
&#xD;
&#xD;
&#xD;
2 - The wall Right texture part</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateWallFeature</Name>
    <ChangedDate>2009:05:11T12:58:00</ChangedDate>
    <Version>1500</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a Wall Feature in the wall from the profile object.  The Wall Feature can be a projection from the wall or a recess in the wall.</Description>
    <ShortDesc>Creates a Wall Feature in the wall from the profile object.</ShortDesc>
    <Result>The handle to the created Wall Feature.</Result>
    <ID>3061</ID>
    <IDName>funcCreateWallFeature</IDName>
    <InternalFunctionName>MP_CreateWallFeature</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>wall</Name>
        <Type>handleMode</Type>
        <Desc>The handle to the wall in which to create the Wall Feature.</Desc>
      </Param>
      <Param>
        <Name>profile</Name>
        <Type>handleMode</Type>
        <Desc>The handle to the object to use as the Wall Feature profile.</Desc>
      </Param>
      <Param>
        <Name>wallFeatureType</Name>
        <Type>intMode</Type>
        <Desc>The Wall Feature type.&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
0 - Projection&#xD;
&#xD;
&#xD;
&#xD;
1 - Recess</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTempToolHelpStr</Name>
    <ChangedDate>2009:06:03T17:04:00</ChangedDate>
    <Version>1500</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Sets a text to be used as help string for temp tool calls: RunTempTool, TrackObject, GetPt, GetPtL, GetPt3D, and GetPtL3D.[[BR]][[BR]]This function should be called prior to calling the tool.[[BR]][[BR]]The help string will be used for subsequent temp tool runs until changed.</Description>
    <ShortDesc>Sets a text to be used as help string for temp tool calls: RunTempTool, TrackObject, GetPt, GetPtL, GetPt3D, and GetPtL3D</ShortDesc>
    <Example>PROCEDURE Test;[[BR]]VAR h : HANDLE;[[BR]]  [[BR]]  FUNCTION CheckObjCallback(h : HANDLE) : BOOLEAN;[[BR]]  BEGIN[[BR]]     {any object is ok}[[BR]]     CheckObjCallback := true;[[BR]]  END;[[BR]][[BR]]BEGIN[[BR]]SetTempToolHelpStr( 'Select any object' );[[BR]]TrackObject( CheckObjCallback, h );[[BR]]SetSelect( h );[[BR]]END;[[BR]]RUN( Test ); </Example>
    <ID>3062</ID>
    <IDName>procSetTempToolHelpStr</IDName>
    <InternalFunctionName>MP_SetTempToolHelpStr</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>helpString</Name>
        <Type>stringMode</Type>
        <Desc>The help string for the next temp tool.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCurrentLocalization</Name>
    <ChangedDate>2009:06:18T11:09:00</ChangedDate>
    <Version>1500</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Get the Vectorworks language in the ISO 639-3 draft standard Language ID and sublanguage is unused and will be the empty string reserved for future use for a regional dialect.[[BR]][[BR]]Currently this will always return the same language for a given installation of Vectorworks.</Description>
    <ShortDesc>Get the Vectorworks language in the ISO 639-3 draft standard Language ID and sublanguage is unused and will be the empty string ..</ShortDesc>
    <ID>3064</ID>
    <IDName>procGetCurrentLocalization</IDName>
    <InternalFunctionName>MP_GetCurrentLocalization</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>language</Name>
        <Type>strVarMode</Type>
        <Desc>Output parameter. Returns language in ISO 639-3 draft standard Language ID.</Desc>
      </Param>
      <Param>
        <Name>subLanguage</Name>
        <Type>strVarMode</Type>
        <Desc>Output parameter. Unused. Returns empty string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RGBToColorIndexN</Name>
    <ChangedDate>2009:07:06T16:01:00</ChangedDate>
    <Version>1500</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] converts the Vectorworks palette colors from its' red, green, and blue component values to the Vectorworks color index. Parameters [[p:1]], [[p:2]], and [[p:3]] return the color components of the swatch, and parameter [[p:4]] is the Vectorworks color index. RGB values are in the range of 0~65535. Parameter [[p:5]] specifies whether the black background preference should be ignored. If set to TRUE, black and white indexes will not be inverted in black background.[[BR]][[BR]][[note:ColorTableNote]]</Description>
    <ShortDesc>Converts RGB values to color palette index. </ShortDesc>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	red, green, blue :LONGINT;[[BR]]	colorIndex :INTEGER;[[BR]]BEGIN[[BR]]	GetPenFore(FSActLayer, red, green, blue);[[BR]]	RGBToColorIndexN(red, green, blue, colorIndex, TRUE);[[BR]]	Message(colorIndex);[[BR]]END;[[BR]]RUN(Example)</Example>
    <ID>3065</ID>
    <IDName>procRGBToColorIndexN</IDName>
    <InternalFunctionName>MP_RGBToColorIndexN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>red</Name>
        <Type>longMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>longMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>longMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>intVarMode</Type>
        <Desc>Color index.</Desc>
      </Param>
      <Param>
        <Name>ignoreBlackBackground</Name>
        <Type>boolMode</Type>
        <Desc>Ignore black background preference setting or not.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ColorIndexToRGBN</Name>
    <ChangedDate>2009:07:06T16:33:00</ChangedDate>
    <Version>1500</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] converts the Vectorworks palette colors from the colors' palette position index to its red, green, and blue component values. RGB values are in the range of 0~65535.Parameter [[p:5]] specifies whether the black background preference should be ignored. If set to TRUE, black and white indexes will not be inverted in black background.[[BR]][[BR]][[note:ColorTableNote]]</Description>
    <ShortDesc>Converts a color palette index to RGB values.</ShortDesc>
    <Example>[[name]](257,r,g,b,TRUE);[[BR]]{returns the color value components of the color index 257 (black)}[[BR]]{Because ignoreBlackBackground is set to TRUE, the result }[[BR]]{will always be black RGB color regardless of the black background }{preference setting.}</Example>
    <ID>3066</ID>
    <IDName>procColorIndexToRGBN</IDName>
    <InternalFunctionName>MP_ColorIndexToRGBN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>color</Name>
        <Type>intMode</Type>
        <Desc>Color index</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>ignoreBlackBackground</Name>
        <Type>boolMode</Type>
        <Desc>Ignore black background preference setting or not.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>NumSelectedObjects</Name>
    <ChangedDate>2009:07:06T11:44:00</ChangedDate>
    <Version>1500</Version>
    <Category>Selection</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Returns the number of selected objects in all working layers.</Description>
    <ShortDesc>Returns the number of currently selected objects in all working layers.</ShortDesc>
    <ID>3067</ID>
    <IDName>funcNumSelectedObjects</IDName>
    <InternalFunctionName>MP_NumSelectedObjects</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Flip3DObj</Name>
    <ChangedDate>2009:07:09T09:20:00</ChangedDate>
    <Version>1500</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>This function will flip a 3D object either horizontally or vertically. Its main use is for withing plugin objects when building their geometry and there is a need to mirror a piece.[[BR]][[BR]]The supported types are: Extrude, Sweep, MultiExtrude, Symbol, Mesh and CSGNode.</Description>
    <ShortDesc>Flip a 3D object on its X or Y.</ShortDesc>
    <Example>PROCEDURE FlipTest;[[BR]]{This script will create an extrude, dupicate it and then flip it horizontally}[[BR]]VAR h1, h2 : HANDLE;[[BR]][[BR]]BEGIN[[BR]][[BR]]ClosePoly;[[BR]][[BR]]BeginXtrd(0', 4');[[BR]]    BeginPoly;[[BR]]	AddPoint( -5', 3' );[[BR]]	AddPoint( 0, 3' );[[BR]]	AddPoint( 0, 6' );[[BR]]	AddPoint( 5', 0 );[[BR]]	AddPoint( 0, -6');[[BR]]	AddPoint( 0', -3');[[BR]]	AddPoint(-5', -3');[[BR]]    EndPoly;[[BR]]EndXtrd;[[BR]][[BR]]h1 := LNewObj;[[BR]][[BR]][[BR]]Move3DObj( h1, 5', 0 , 0 );[[BR]]h2 := CreateDuplicateObject( h1, NIL );[[BR]][[BR]]Flip3DObj( h2 , TRUE );[[BR]]Move3DObj( h2, -5', 0, 0 );[[BR]][[BR]]END;[[BR]][[BR]]Run(FlipTest);</Example>
    <ID>3068</ID>
    <IDName>procFlip3DObj</IDName>
    <InternalFunctionName>MP_Flip3DObj</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>The handle of the 3D object to flip.</Desc>
      </Param>
      <Param>
        <Name>horiz</Name>
        <Type>boolMode</Type>
        <Desc>TRUE for a horizonal flip, FALSE for a vertical flip.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBItemPatternIndex</Name>
    <ChangedDate>2009:07:14T17:28:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the specified list browser item's pattern index.</Description>
    <ShortDesc>Gets the specified list browser item's pattern index.</ShortDesc>
    <ID>3069</ID>
    <IDName>funcGetLBItemPatternIndex</IDName>
    <InternalFunctionName>MP_GetLBItemPatternIndex</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>the column index</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>outPatIndex</Name>
        <Type>intVarMode</Type>
        <Desc>Output parameter. Returns the pattern index of this item. Value from [1..71]</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBItemPatternIndex</Name>
    <ChangedDate>2009:07:14T17:28:00</ChangedDate>
    <Version>1500</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the specified list browser item's pattern index.</Description>
    <ShortDesc>Sets the specified list browser item's pattern index.</ShortDesc>
    <ID>3070</ID>
    <IDName>funcSetLBItemPatternIndex</IDName>
    <InternalFunctionName>MP_SetLBItemPatternIndex</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>patIndex</Name>
        <Type>intMode</Type>
        <Desc>The pattern index of this item. Value from [1..71]</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDashStyleIndex</Name>
    <ChangedDate>2017:10:26T15:58:00</ChangedDate>
    <Version>1500</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Deprecated - will generate error. Use GetDashStyleIndexN instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use GetDashStyleIndexN instead.</ShortDesc>
    <SeeAlso>GetDashStyleIndexN</SeeAlso>
    <Comments>Deprecated - will generate error. Use GetDashStyleIndexN instead.</Comments>
    <Example>GetDashStyleIndex(TRUE, 2, 0.12, 0.18, 0.03, 0.07);[[BR]][[BR]]GetDashStyleIndex(TRUE, 3, 0.12, 0.18, 0.03, 0.07, 0.2, 0.05);</Example>
    <ID>3701</ID>
    <IDName>funcGetDashStyleIndex</IDName>
    <SpecialOverride>CHECKDASHSTYLE(funcGetDashStyleIndex);</SpecialOverride>
    <Implemented>True</Implemented>
    <ImplementationDetails>Special</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>swt</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>numPairs</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>pair1</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair2</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair3</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair4</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair5</Name>
        <Type>tdPtMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDashStyleN</Name>
    <ChangedDate>2009:08:03T15:00:00</ChangedDate>
    <Version>1500</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a new linestyle in a Vectorworks document. Parameter name defines the name of the linestyle, parameter swt defines whether the linestyle will be scaled with thickness, and parameter numPairs specifies the number of length pairs defining the linestyle.[[BR]][[BR]]The linestyle is defined by up to five black/white length pairs, which are specified in parameters b1,w1 through b5,w5. The minimum length of any given black or white parameter is 1 point, or 1/72 of an inch, and the line specification must be in pairs.</Description>
    <ShortDesc>Creates a new active linestyle.</ShortDesc>
    <Example>SetDashStyle('My Dash Style', True,0,1",1/4",1/4",1/4");</Example>
    <ID>3702</ID>
    <IDName>procSetDashStyleN</IDName>
    <SpecialOverride>CHECKDASHSTYLE(procSetDashStyleN);</SpecialOverride>
    <Implemented>True</Implemented>
    <ImplementationDetails>Special</ImplementationDetails>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>swt</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>numPairs</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>pair1</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair2</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair3</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair4</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair5</Name>
        <Type>tdPtMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RedrawSelection</Name>
    <ChangedDate>2009:08:07T12:56:00</ChangedDate>
    <Version>1500</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>This will update selection indication without redrawing the drawing.</Description>
    <ShortDesc>This will update selection indication without redrawing the drawing.</ShortDesc>
    <ID>3703</ID>
    <IDName>procRedrawSelection</IDName>
    <InternalFunctionName>MP_RedrawSelection</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>LeftButtonC</Name>
    <ChangedDate>2009:10:30T16:47:00</ChangedDate>
    <Version>1600</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Constant</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>This constant is used as a control ID when a button must appear in the lower left corner of a dialog.</Description>
    <ShortDesc>This constant is used as a control ID when a button must appear in the lower left corner of a dialog.</ShortDesc>
    <Comments>Added 10/30/09 by Adam Petrone.</Comments>
    <ID>12605</ID>
    <IDName>kVSLeftButtonC</IDName>
    <InternalFunctionName>MP_LeftButtonC</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>DeleteSymbolDefinition</Name>
    <ChangedDate>2010:01:19T15:01:00</ChangedDate>
    <Version>1600</Version>
    <Category>Object Editing</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] deletes the referenced symbol definition from the document.  If bCompletely is TRUE, all corresponding symbol instances will be deleted completely; otherwise, the symbol instances will be replaced with loci.</Description>
    <ShortDesc>Deletes the referenced symbol definition.</ShortDesc>
    <ID>13029</ID>
    <IDName>procDeleteSymbolDefinition</IDName>
    <InternalFunctionName>MP_DeleteSymbolDefinition</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hSymDef</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the symbol definition.</Desc>
      </Param>
      <Param>
        <Name>bCompletely</Name>
        <Type>boolMode</Type>
        <Desc>Determines whether to replace the corresponding symbol instances with loci or delete the instances completely.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SlabFromPoly</Name>
    <ChangedDate>2010:02:26T17:06:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Procedure</Type>
    <Description>Creates a slab object from the referenced polyline. The current settings for the slab object are used to create the new slab.</Description>
    <ShortDesc>Creates a slab object from the referenced polyline.</ShortDesc>
    <ID>13030</ID>
    <IDName>procSlabFromPoly</IDName>
    <InternalFunctionName>MP_SlabFromPoly</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>poly</Name>
        <Type>handleMode</Type>
        <Desc>The polyline that the slab will be created from.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetEntityMatrix</Name>
    <ChangedDate>2010:03:31T17:14:00</ChangedDate>
    <Version>1600</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the matrix of the plane for a planar object. If there is already a plane in the document with that matrix, the object will be set to be in that plane. Otherwise a new plane will be added to the document.</Description>
    <ShortDesc>Sets the matrix of the plane for a planar object.</ShortDesc>
    <Result>Returns true if the object passed is a planar object.</Result>
    <ID>13031</ID>
    <IDName>funcSetEntityMatrix</IDName>
    <InternalFunctionName>MP_SetEntityMatrix</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>The object whose plane is being set.</Desc>
      </Param>
      <Param>
        <Name>offset</Name>
        <Type>d3PtMode</Type>
        <Desc>The offset of the plane in current document units.</Desc>
      </Param>
      <Param>
        <Name>rotationXAngle</Name>
        <Type>realMode</Type>
        <Desc>The rotation of the plane about the X-axis in degrees.</Desc>
      </Param>
      <Param>
        <Name>rotationYAngle</Name>
        <Type>realMode</Type>
        <Desc>The rotation of the plane about the Y-axis in degrees.</Desc>
      </Param>
      <Param>
        <Name>rotationZAngle</Name>
        <Type>realMode</Type>
        <Desc>The rotation of the plane about the Z-axis in degrees.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetEntityMatrix</Name>
    <ChangedDate>2010:03:31T17:31:00</ChangedDate>
    <Version>1600</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the matrix of the plane for a planar object.</Description>
    <ShortDesc>Gets the matrix of the plane for a planar object.</ShortDesc>
    <Result>Returns true if the object passed is a planar object.</Result>
    <ID>13032</ID>
    <IDName>funcGetEntityMatrix</IDName>
    <InternalFunctionName>MP_GetEntityMatrix</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>The object for which the matrix of its plane is being obtained.</Desc>
      </Param>
      <Param>
        <Name>offset</Name>
        <Type>d3PtVarMode</Type>
        <Desc>The offset of the plane in current document units.</Desc>
      </Param>
      <Param>
        <Name>rotationXAngle</Name>
        <Type>rVarMode</Type>
        <Desc>The rotation of the plane about the X-axis in degrees.</Desc>
      </Param>
      <Param>
        <Name>rotationYAngle</Name>
        <Type>rVarMode</Type>
        <Desc>The rotation of the plane about the Y-axis in degrees.</Desc>
      </Param>
      <Param>
        <Name>rotationZAngle</Name>
        <Type>rVarMode</Type>
        <Desc>The rotation of the plane about the Z-axis in degrees.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextAdorner</Name>
    <ChangedDate>2010:04:30T10:43:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>Boolean</ReturnType>
    <Description>This function creates a relationship between the specified text block and the text adorner such that when theText Block is scaled in a VP, the text adorner is also scaled. Several objects can be adorned to the same text object.    </Description>
    <ShortDesc>This function creates a relationship between the specified text block and the text adorner such that when the Text Block is scaled in a VP, the text adorner is also scaled. Several objects can be adorned to the same text object.    </ShortDesc>
    <Result>- 'true' if the operation was successful.[[BR]]- 'false' otherwise.[[BR]]    </Result>
    <Example>      PROCEDURE Example;[[BR]]VAR[[BR]]theText      :HANDLE;[[BR]]theShape : HANDLE;[[BR]]restult :      BOOLEAN;[[BR]]BEGIN[[BR]]TextVerticalAlign(3);[[BR]]TextJust(2);[[BR]]MoveTo(0,0);[[BR]]RectangleN(-.5",      -.5", 1, 0, 1", 1");[[BR]]theShape :=      lNewObj;[[BR]]CreateText('ID1');[[BR]]theText :=      lNewObj;[[BR]]restult :=      SetTextAdorner(theText,theShape,0,0);[[BR]]END;[[BR]]RUN(Example);    </Example>
    <ID>13033</ID>
    <IDName>funcSetTextAdorner</IDName>
    <InternalFunctionName>MP_SetTextAdorner</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>textBlock</Name>
        <Type>handleMode</Type>
        <Desc>The Text object being adorned.</Desc>
      </Param>
      <Param>
        <Name>textAdorner</Name>
        <Type>handleMode</Type>
        <Desc>The object used to adorn the specified text.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>The point by which texts will be scaled.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateTile</Name>
    <ChangedDate>2017:07:05T10:25:00</ChangedDate>
    <Version>1600</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a new tile resource.</Description>
    <ShortDesc>Creates a new tile resource.</ShortDesc>
    <Result>Returns a handle to a new tile resource if successful, otherwise the function returns nil.</Result>
    <SeeAlso>CreateTile, ShowEditTileDialog, ShowEditTileSettingsDialog, ShowNewTileDialog, GetTileGeometryGroup, BeginGroupN, AddTileGeometryObject, GetTileGroupParent, IsTileGroupContainedObject, GetTileBackgroundColor, SetTileBackgroundColor, GetTileRepetitionPoint, SetTileRepetitionPoint, GetTileOffsetPoint, SetTileOffsetPoint</SeeAlso>
    <Example>tileHandle := CreateTile('My Tile');</Example>
    <ID>13035</ID>
    <IDName>funcCreateTile</IDName>
    <InternalFunctionName>MP_CreateTile</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>tileName</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>A user-specified name by which the newly created tile will be identified.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ShowEditTileDialog</Name>
    <ChangedDate>2010:04:05T11:33:00</ChangedDate>
    <Version>1600</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Displays the edit tile dialog for the specified tile allowing the user to specify whether they wish to edit the tile's geometry or settings.</Description>
    <ShortDesc>Displays the edit tile dialog.</ShortDesc>
    <SeeAlso>CreateTile, ShowEditTileDialog, ShowEditTileSettingsDialog, ShowNewTileDialog, GetTileGeometryGroup, BeginGroupN, AddTileGeometryObject, GetTileGroupParent, IsTileGroupContainedObject, GetTileBackgroundColor, SetTileBackgroundColor, GetTileRepetitionPoint, SetTileRepetitionPoint, GetTileOffsetPoint, SetTileOffsetPoint</SeeAlso>
    <Example>ShowEditTileDialog(tileHandle);</Example>
    <ID>13036</ID>
    <IDName>procShowEditTileDialog</IDName>
    <InternalFunctionName>MP_ShowEditTileDialog</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>tileHandle</Name>
        <Type>handleMode</Type>
        <Desc>The tile for which the dialog should be displayed.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ShowEditTileSettingsDialog</Name>
    <ChangedDate>2010:04:05T11:40:00</ChangedDate>
    <Version>1600</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Displays the edit tile settings dialog for the specified tile.</Description>
    <ShortDesc>Displays the edit tile settings dialog.</ShortDesc>
    <SeeAlso>CreateTile, ShowEditTileDialog, ShowEditTileSettingsDialog, ShowNewTileDialog, GetTileGeometryGroup, BeginGroupN, AddTileGeometryObject, GetTileGroupParent, IsTileGroupContainedObject, GetTileBackgroundColor, SetTileBackgroundColor, GetTileRepetitionPoint, SetTileRepetitionPoint, GetTileOffsetPoint, SetTileOffsetPoint</SeeAlso>
    <Example>ShowEditTileSettingsDialog(tileHandle);[[BR]]{ displays the specified tile resource in the dialog }[[BR]][[BR]]tileHandle := nil;[[BR]]ShowEditTileSettingsDialog(tileHandle);[[BR]]{ creates a new tile resource and displays it in the dialog }</Example>
    <ID>13037</ID>
    <IDName>procShowEditTileSettingsDialog</IDName>
    <InternalFunctionName>MP_ShowEditTileSettingsDialog</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>tileHandle</Name>
        <Type>handleInOutMode</Type>
        <Desc>The tile to display in dialog; passing a handle initialized to nil indicates that a new tile resource should be created and displayed in the dialog.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ShowNewTileDialog</Name>
    <ChangedDate>2010:04:05T11:44:00</ChangedDate>
    <Version>1600</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Displays the new tile dialog.</Description>
    <ShortDesc>Displays the new tile dialog.</ShortDesc>
    <Result>Returns a handle to a new tile resource if successful, otherwise the function returns nil.</Result>
    <SeeAlso>CreateTile, ShowEditTileDialog, ShowEditTileSettingsDialog, ShowNewTileDialog, GetTileGeometryGroup, BeginGroupN, AddTileGeometryObject, GetTileGroupParent, IsTileGroupContainedObject, GetTileBackgroundColor, SetTileBackgroundColor, GetTileRepetitionPoint, SetTileRepetitionPoint, GetTileOffsetPoint, SetTileOffsetPoint</SeeAlso>
    <Example>tileHandle := ShowNewTileDialog;</Example>
    <ID>13038</ID>
    <IDName>funcShowNewTileDialog</IDName>
    <InternalFunctionName>MP_ShowNewTileDialog</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetTileGeometryGroup</Name>
    <ChangedDate>2010:04:05T11:47:00</ChangedDate>
    <Version>1600</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Gets the tile resource's geometry group.</Description>
    <ShortDesc>Gets the tile resource's geometry group.</ShortDesc>
    <Result>A handle to the tile geometry group, if successful; nil otherwise.</Result>
    <SeeAlso>CreateTile, ShowEditTileDialog, ShowEditTileSettingsDialog, ShowNewTileDialog, GetTileGeometryGroup, BeginGroupN, AddTileGeometryObject, GetTileGroupParent, IsTileGroupContainedObject, GetTileBackgroundColor, SetTileBackgroundColor, GetTileRepetitionPoint, SetTileRepetitionPoint, GetTileOffsetPoint, SetTileOffsetPoint</SeeAlso>
    <Example>tileGroupHandle := GetTileGeometryGroup(tileHandle);</Example>
    <ID>13039</ID>
    <IDName>funcGetTileGeometryGroup</IDName>
    <InternalFunctionName>MP_GetTileGeometryGroup</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>tileHandle</Name>
        <Type>handleMode</Type>
        <Desc>The handle to the tile from which to get the group.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddTileGeometryObject</Name>
    <ChangedDate>2010:04:05T11:51:00</ChangedDate>
    <Version>1600</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Adds the specified object to the specified tile resource.</Description>
    <ShortDesc>Adds the specified object to the specified tile resource.</ShortDesc>
    <Result>TRUE if a valid object was successfully added; FALSE otherwise.</Result>
    <SeeAlso>CreateTile, ShowEditTileDialog, ShowEditTileSettingsDialog, ShowNewTileDialog, GetTileGeometryGroup, BeginGroupN, AddTileGeometryObject, GetTileGroupParent, IsTileGroupContainedObject, GetTileBackgroundColor, SetTileBackgroundColor, GetTileRepetitionPoint, SetTileRepetitionPoint, GetTileOffsetPoint, SetTileOffsetPoint</SeeAlso>
    <Example>return := AddTileGeometryGroup(tileHandle, objectHandle);</Example>
    <ID>13040</ID>
    <IDName>funcAddTileGeometryObject</IDName>
    <InternalFunctionName>MP_AddTileGeometryObject</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>tileHandle</Name>
        <Type>handleMode</Type>
        <Desc>The handle to the tile resource.</Desc>
      </Param>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>The handle to the object to add.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTileGroupParent</Name>
    <ChangedDate>2010:04:05T11:54:00</ChangedDate>
    <Version>1600</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Gets the tile resource parent of the specified tile group.</Description>
    <ShortDesc>Gets the tile resource parent of the specified tile group.</ShortDesc>
    <Result>The tile parent handle; nil otherwise.</Result>
    <SeeAlso>CreateTile, ShowEditTileDialog, ShowEditTileSettingsDialog, ShowNewTileDialog, GetTileGeometryGroup, BeginGroupN, AddTileGeometryObject, GetTileGroupParent, IsTileGroupContainedObject, GetTileBackgroundColor, SetTileBackgroundColor, GetTileRepetitionPoint, SetTileRepetitionPoint, GetTileOffsetPoint, SetTileOffsetPoint</SeeAlso>
    <Example>tileHandle := GetTileGroupParent(groupHandle);</Example>
    <ID>13041</ID>
    <IDName>funcGetTileGroupParent</IDName>
    <InternalFunctionName>MP_GetTileGroupParent</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>groupHandle</Name>
        <Type>handleMode</Type>
        <Desc>The group handle of which to get the tile resource parent.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsTileGroupContainedObject</Name>
    <ChangedDate>2010:04:05T11:56:00</ChangedDate>
    <Version>1600</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determines if the specified object is a tile group-contained object.</Description>
    <ShortDesc>Determines if the specified object is a tile group-contained object.</ShortDesc>
    <Result>TRUE if the object is a tile group-contained object; FALSE otherwise.</Result>
    <SeeAlso>CreateTile, ShowEditTileDialog, ShowEditTileSettingsDialog, ShowNewTileDialog, GetTileGeometryGroup, BeginGroupN, AddTileGeometryObject, GetTileGroupParent, IsTileGroupContainedObject, GetTileBackgroundColor, SetTileBackgroundColor, GetTileRepetitionPoint, SetTileRepetitionPoint, GetTileOffsetPoint, SetTileOffsetPoint</SeeAlso>
    <Example>return := IsTileGroupContainedObject(objectHandle);</Example>
    <ID>13042</ID>
    <IDName>funcIsTileGroupContainedObject</IDName>
    <InternalFunctionName>MP_IsTileGroupContainedObject</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>The object handle to check.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTileBackgroundColor</Name>
    <ChangedDate>2010:04:05T13:45:00</ChangedDate>
    <Version>1600</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Gets the specified tile resource's background color.</Description>
    <ShortDesc>Gets the specified tile resource's background color.</ShortDesc>
    <SeeAlso>CreateTile, ShowEditTileDialog, ShowEditTileSettingsDialog, ShowNewTileDialog, GetTileGeometryGroup, BeginGroupN, AddTileGeometryObject, GetTileGroupParent, IsTileGroupContainedObject, GetTileBackgroundColor, SetTileBackgroundColor, GetTileRepetitionPoint, SetTileRepetitionPoint, GetTileOffsetPoint, SetTileOffsetPoint</SeeAlso>
    <Example>GetTileBackgroundColor(tileHandle, backgroundColor);</Example>
    <ID>13043</ID>
    <IDName>procGetTileBackgroundColor</IDName>
    <InternalFunctionName>MP_GetTileBackgroundColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>tileHandle</Name>
        <Type>handleMode</Type>
        <Desc>The tile resource from which to get the background color.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTileBackgroundColor</Name>
    <ChangedDate>2010:04:05T13:46:00</ChangedDate>
    <Version>1600</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Sets the specified tile resource's background color.</Description>
    <ShortDesc>Sets the specified tile resource's background color.</ShortDesc>
    <SeeAlso>CreateTile, ShowEditTileDialog, ShowEditTileSettingsDialog, ShowNewTileDialog, GetTileGeometryGroup, BeginGroupN, AddTileGeometryObject, GetTileGroupParent, IsTileGroupContainedObject, GetTileBackgroundColor, SetTileBackgroundColor, GetTileRepetitionPoint, SetTileRepetitionPoint, GetTileOffsetPoint, SetTileOffsetPoint</SeeAlso>
    <Example>SetTileBackgroundColor(tileHandle, backgroundColor);</Example>
    <ID>13044</ID>
    <IDName>procSetTileBackgroundColor</IDName>
    <InternalFunctionName>MP_SetTileBackgroundColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>tileHandle</Name>
        <Type>handleMode</Type>
        <Desc>The tile resource in which to set the background color.</Desc>
      </Param>
      <Param>
        <Name>backgroundColor</Name>
        <Type>colorMode</Type>
        <Desc>The RGB background color to set.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTileRepetitionPoint</Name>
    <ChangedDate>2010:04:05T12:28:00</ChangedDate>
    <Version>1600</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Gets the specified tile resource's repetition point.</Description>
    <ShortDesc>Gets the specified tile resource's repetition point.</ShortDesc>
    <SeeAlso>CreateTile, ShowEditTileDialog, ShowEditTileSettingsDialog, ShowNewTileDialog, GetTileGeometryGroup, BeginGroupN, AddTileGeometryObject, GetTileGroupParent, IsTileGroupContainedObject, GetTileBackgroundColor, SetTileBackgroundColor, GetTileRepetitionPoint, SetTileRepetitionPoint, GetTileOffsetPoint, SetTileOffsetPoint</SeeAlso>
    <Example>GetTileRepetitionPoint(tileHandle, repetitionPoint);</Example>
    <ID>13045</ID>
    <IDName>procGetTileRepetitionPoint</IDName>
    <InternalFunctionName>MP_GetTileRepetitionPoint</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>tileHandle</Name>
        <Type>handleMode</Type>
        <Desc>The tile resource from which to get the repetition point.</Desc>
      </Param>
      <Param>
        <Name>repetitionPoint</Name>
        <Type>ePointVarMode</Type>
        <Desc>The retrieved repetition point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTileRepetitionPoint</Name>
    <ChangedDate>2010:04:05T12:31:00</ChangedDate>
    <Version>1600</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Sets the specified tile resource's repetition point.</Description>
    <ShortDesc>Sets the specified tile resource's repetition point.</ShortDesc>
    <SeeAlso>CreateTile, ShowEditTileDialog, ShowEditTileSettingsDialog, ShowNewTileDialog, GetTileGeometryGroup, BeginGroupN, AddTileGeometryObject, GetTileGroupParent, IsTileGroupContainedObject, GetTileBackgroundColor, SetTileBackgroundColor, GetTileRepetitionPoint, SetTileRepetitionPoint, GetTileOffsetPoint, SetTileOffsetPoint</SeeAlso>
    <Example>SetTileRepetitionPoint(tileHandle, repetitionPoint);</Example>
    <ID>13046</ID>
    <IDName>procSetTileRepetitionPoint</IDName>
    <InternalFunctionName>MP_SetTileRepetitionPoint</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>tileHandle</Name>
        <Type>handleMode</Type>
        <Desc>The tile resource in which to set the repetition point.</Desc>
      </Param>
      <Param>
        <Name>repetitionPoint</Name>
        <Type>ePointMode</Type>
        <Desc>The repetition point to be set.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTileOffsetPoint</Name>
    <ChangedDate>2010:04:05T12:28:00</ChangedDate>
    <Version>1600</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Gets the specified tile resource's offset point.</Description>
    <ShortDesc>Gets the specified tile resource's offset point.</ShortDesc>
    <SeeAlso>CreateTile, ShowEditTileDialog, ShowEditTileSettingsDialog, ShowNewTileDialog, GetTileGeometryGroup, BeginGroupN, AddTileGeometryObject, GetTileGroupParent, IsTileGroupContainedObject, GetTileBackgroundColor, SetTileBackgroundColor, GetTileRepetitionPoint, SetTileRepetitionPoint, GetTileOffsetPoint, SetTileOffsetPoint</SeeAlso>
    <Example>GetTileOffsetPoint(tileHandle, offsetPoint);</Example>
    <ID>13047</ID>
    <IDName>procGetTileOffsetPoint</IDName>
    <InternalFunctionName>MP_GetTileOffsetPoint</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>tileHandle</Name>
        <Type>handleMode</Type>
        <Desc>The tile resource from which to get the offset point.</Desc>
      </Param>
      <Param>
        <Name>offsetPoint</Name>
        <Type>ePointVarMode</Type>
        <Desc>The retrieved offset point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTileOffsetPoint</Name>
    <ChangedDate>2010:04:05T12:31:00</ChangedDate>
    <Version>1600</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Sets the specified tile resource's offset point.</Description>
    <ShortDesc>Sets the specified tile resource's offset point.</ShortDesc>
    <SeeAlso>CreateTile, ShowEditTileDialog, ShowEditTileSettingsDialog, ShowNewTileDialog, GetTileGeometryGroup, BeginGroupN, AddTileGeometryObject, GetTileGroupParent, IsTileGroupContainedObject, GetTileBackgroundColor, SetTileBackgroundColor, GetTileRepetitionPoint, SetTileRepetitionPoint, GetTileOffsetPoint, SetTileOffsetPoint</SeeAlso>
    <Example>SetTileRepetitionPoint(tileHandle, offsetPoint);</Example>
    <ID>13048</ID>
    <IDName>procSetTileOffsetPoint</IDName>
    <InternalFunctionName>MP_SetTileOffsetPoint</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>tileHandle</Name>
        <Type>handleMode</Type>
        <Desc>The tile resource in which to set the offset point.</Desc>
      </Param>
      <Param>
        <Name>offsetPoint</Name>
        <Type>ePointMode</Type>
        <Desc>The offsets point to be set.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BeginGroupN</Name>
    <ChangedDate>2010:04:05T12:45:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Groups</Category>
    <Type>Procedure</Type>
    <Description>May be used to create objects in an existing group by passing a group handle; if a handle initialized to nil is passed a new group is created.</Description>
    <ShortDesc>May be used to create objects in an existing group by passing a group handle.</ShortDesc>
    <SeeAlso>BeginGroup, EndGroup</SeeAlso>
    <Example>BeginGroupN(groupHandle);[[BR]]  Rect(-1,1,0.5,0);[[BR]]EndGroup;[[BR]]{ adds created rect to existing group }[[BR]][[BR]]groupHandle := nil;[[BR]]BeginGroupN(groupHandle);[[BR]]  Rect(-1,1,0.5,0);[[BR]]EndGroup;[[BR]]{ creates new group and adds created rect to created group }</Example>
    <ID>13049</ID>
    <IDName>procBeginGroupN</IDName>
    <InternalFunctionName>MP_BeginGroupN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>groupHandle</Name>
        <Type>handleInOutMode</Type>
        <Desc>The group handle to be used; if handle is initialized to nil a new group is created.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPopUpChoiceIndex</Name>
    <ChangedDate>2010:04:06T02:18:00</ChangedDate>
    <Version>1600</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Gets the zero based index of the first choice in the pop-up which has itemText name. If there is no choice named itemText in the pop-up itemIndex is set to -1.</Description>
    <ShortDesc>Gets the zero based index of the first choice in the pop-up which has itemText name. If there is no choice named itemText in the pop-up itemIndex is set to -1.</ShortDesc>
    <ID>13050</ID>
    <IDName>procGetPopUpChoiceIndex</IDName>
    <InternalFunctionName>MP_GetPopUpChoiceIndex</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>the dialog identifier given by CreateLayout or CreateResizableLayout</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The identifier of the component which choice index will be retrieved from by a given choice name.</Desc>
      </Param>
      <Param>
        <Name>itemText</Name>
        <Type>stringMode</Type>
        <Desc>The name of the choice which index will be obtained.</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intVarMode</Type>
        <Desc>The index of the given choice's string in the pop-up. If there are duplicate choice name itemIndex is the index of the first choice having itemText name.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTreeControlTextSelectedItem</Name>
    <ChangedDate>2010:09:27T12:05:00</ChangedDate>
    <Version>1700</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Retrieves the item text of the selected item from a tree control.</Description>
    <ShortDesc>Retrieves the item text of the selected item from a tree control.</ShortDesc>
    <ID>13051</ID>
    <IDName>funcGetTreeControlTextSelectedItem</IDName>
    <InternalFunctionName>MP_GetTreeControlTextSelectedItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemText</Name>
        <Type>strVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTreeControlItemText</Name>
    <ChangedDate>2010:04:06T12:06:00</ChangedDate>
    <Version>1600</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Retrieves the item text of the specified item from a tree control.</Description>
    <ShortDesc>Retrieves the item text of the specified item from a tree control.</ShortDesc>
    <ID>13052</ID>
    <IDName>funcGetTreeControlItemText</IDName>
    <InternalFunctionName>MP_GetTreeControlItemText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nItemID</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>itemText</Name>
        <Type>strVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetColorName</Name>
    <ChangedDate>2010:04:28T17:43:00</ChangedDate>
    <Version>1600</Version>
    <Category>Object Names</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the color name of the specified color index.</Description>
    <ShortDesc>Sets the color name of the specified color index.</ShortDesc>
    <Result>'true' if the operation was successful.[[BR]]'false' otherwise.[[BR]]</Result>
    <SeeAlso>GetColorName</SeeAlso>
    <ID>13053</ID>
    <IDName>funcSetColorName</IDName>
    <InternalFunctionName>MP_SetColorName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>ColorIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the color to be named.</Desc>
      </Param>
      <Param>
        <Name>ColorName</Name>
        <Type>stringMode</Type>
        <Desc>The new name of the color specified by the index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetColorName</Name>
    <ChangedDate>2010:04:28T17:46:00</ChangedDate>
    <Version>1600</Version>
    <Category>Object Names</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Retrieves the color name of the specified color index.</Description>
    <ShortDesc>Retrieves the color name of the specified color index.</ShortDesc>
    <Result>The name of the color specified by the index.</Result>
    <SeeAlso>SetColorName</SeeAlso>
    <ID>13054</ID>
    <IDName>funcGetColorName</IDName>
    <InternalFunctionName>MP_GetColorName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>ColorIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the color</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDashStyleName</Name>
    <ChangedDate>2017:10:26T09:44:00</ChangedDate>
    <Version>1600</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Object Names</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deprecated - will generate error. Use SetDashLineTypeName instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use SetDashLineTypeName instead.</ShortDesc>
    <SeeAlso>SetDashLineTypeName</SeeAlso>
    <Comments>Deprecated - will generate error. Use SetDashLineTypeName instead. The dash style index no longer exists. Original description was: Sets the dash style name of the specified dash style index.[[BR]][[BR]]</Comments>
    <ID>13055</ID>
    <IDName>funcSetDashStyleName</IDName>
    <InternalFunctionName>MP_SetDashStyleName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>DashStyleIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the dash style to be named.</Desc>
      </Param>
      <Param>
        <Name>DashStyleName</Name>
        <Type>stringMode</Type>
        <Desc>The new name of the dash style specified by the index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDashStyleName</Name>
    <ChangedDate>2017:10:25T16:15:00</ChangedDate>
    <Version>1600</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Object Names</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Deprecated - will generate error. Use GetDashLineTypeName instead.[[BR]][[BR]]Retrieves the dash style name of the specified dash style index.</Description>
    <ShortDesc>Deprecated - will generate error. Use GetDashLineTypeName instead.</ShortDesc>
    <Result>Name of the dash style specified by the index.</Result>
    <SeeAlso>GetDashLineTypeName</SeeAlso>
    <Comments>Deprecated - will generate error. Use GetDashLineTypeName instead.</Comments>
    <ID>13056</ID>
    <IDName>funcGetDashStyleName</IDName>
    <InternalFunctionName>MP_GetDashStyleName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>DashStyleIndex</Name>
        <Type>intMode</Type>
        <Desc>The the index of the dash style.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextJustN</Name>
    <ChangedDate>2010:06:01T13:57:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the text justification of the referenced text object without changing its location.[[BR]][[BR]][[note:TextHorizontalAlignTable]][[BR]][[fig:textlocus.gif]]</Description>
    <ShortDesc>Sets the justification of the referenced text object without changing its location.</ShortDesc>
    <SeeAlso>SetTextJust</SeeAlso>
    <ID>13057</ID>
    <IDName>procSetTextJustN</IDName>
    <InternalFunctionName>MP_SetTextJustN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>TextHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to text object.</Desc>
      </Param>
      <Param>
        <Name>JustFlag</Name>
        <Type>intMode</Type>
        <Desc>Justification setting for text.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextVertAlignN</Name>
    <ChangedDate>2010:06:01T14:08:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the vertical alignment of the referenced text object without changing its location. [[BR]][[BR]][[note:TextVerticalAlignTable]][[BR]][[BR]][[fig:textlocus.gif]]</Description>
    <ShortDesc>Sets the vertical alignment of the referenced text object without changing its location.</ShortDesc>
    <SeeAlso>SetTextVerticalAlign</SeeAlso>
    <ID>13058</ID>
    <IDName>procSetTextVertAlignN</IDName>
    <InternalFunctionName>MP_SetTextVertAlignN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>TextHd</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the text object.</Desc>
      </Param>
      <Param>
        <Name>verticalAlignment</Name>
        <Type>intMode</Type>
        <Desc>Vertical alignment setting for text.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetParametricRecord</Name>
    <ChangedDate>2010:06:03T16:56:00</ChangedDate>
    <Version>1600</Version>
    <Category>Database / Record</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns the handle to the parametric record attached the referenced object.[[BR]][[BR]]Parametric record is a hidden record format containing the parameter values of the parametric object.[[BR]]Only parametric objects have parametric records.</Description>
    <ShortDesc>Returns the handle to the parametric record attached the referenced object. </ShortDesc>
    <Result>Returns a handle to the record, or NIL if the record doesn't exist (e.g. not a parametric object passed)</Result>
    <ID>13059</ID>
    <IDName>funcGetParametricRecord</IDName>
    <InternalFunctionName>MP_GetParametricRecord</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a parametric object</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BeginMultipleDuplicate</Name>
    <ChangedDate>2010:10:05T11:37:00</ChangedDate>
    <Version>1600</Version>
    <Category>Object Editing</Category>
    <Type>Procedure</Type>
    <Description>Use this function in conjunction with EndMultipleDuplicate to preserve constraints on multiple duplicated objects.</Description>
    <ShortDesc>Use this function in conjunction with EndMultipleDuplicate to preserve constraints on duplicated objects.</ShortDesc>
    <SeeAlso>EndMultipleDuplicate</SeeAlso>
    <ID>13060</ID>
    <IDName>procBeginMultipleDuplicate</IDName>
    <InternalFunctionName>MP_BeginMultipleDuplicate</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>EndMultipleDuplicate</Name>
    <ChangedDate>2010:10:05T11:38:00</ChangedDate>
    <Version>1600</Version>
    <Category>Object Editing</Category>
    <Type>Procedure</Type>
    <Description>Use this function in conjunction with BeginMultipleDuplicate to preserve constraints on duplicated objects.</Description>
    <ShortDesc>Use this function in conjunction with BeginMultipleDuplicate to preserve constraints on duplicated objects.</ShortDesc>
    <SeeAlso>BeginMultipleDuplicate</SeeAlso>
    <ID>13061</ID>
    <IDName>procEndMultipleDuplicate</IDName>
    <InternalFunctionName>MP_EndMultipleDuplicate</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>BuildConstraintModelForObject</Name>
    <ChangedDate>2010:06:04T16:19:00</ChangedDate>
    <Version>1600</Version>
    <Category>Parametric Constraints</Category>
    <Type>Procedure</Type>
    <Description>Create a constraint model for the specified object in the constraint manager. If 'traverseContainers' is true and the specified object is a symbol definition, a group or another container-like objects, it will go deep inside that container.[[BR]]This function should typically be called for constrained objects that have been duplicated and newly inserted into the drawing.</Description>
    <ShortDesc>Create a constraint model for the specified object in the constraint manager.</ShortDesc>
    <ID>13062</ID>
    <IDName>procBuildConstraintModelForObject</IDName>
    <InternalFunctionName>MP_BuildConstraintModelForObject</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object</Desc>
      </Param>
      <Param>
        <Name>traverseContainers</Name>
        <Type>boolMode</Type>
        <Desc>Whether to traverse containers-like objects</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWorksheetGridLinesVisibility</Name>
    <ChangedDate>2010:10:05T11:35:00</ChangedDate>
    <Version>1600</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the visibility of the grid lines for the specified worksheet.</Description>
    <ShortDesc>Sets the visibility of the grid lines for the specified worksheet.</ShortDesc>
    <ID>13063</ID>
    <IDName>procSetWorksheetGridLinesVisibility</IDName>
    <InternalFunctionName>MP_SetWorksheetGridLinesVisibility</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>visible</Name>
        <Type>boolMode</Type>
        <Desc>The grid line visibility flag.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AreWorksheetGridLinesVisible</Name>
    <ChangedDate>2010:10:05T11:36:00</ChangedDate>
    <Version>1600</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns true if the grid lines are enabled for the specified worksheet.</Description>
    <ShortDesc>Returns true if the grid lines are enabled for the specified worksheet.</ShortDesc>
    <ID>13064</ID>
    <IDName>funcAreWorksheetGridLinesVisible</IDName>
    <InternalFunctionName>MP_AreWorksheetGridLinesVisible</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>XCoordinate</Name>
    <ChangedDate>2011:05:16T16:30:00</ChangedDate>
    <Version>1600</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the X coordinate of the object relative to the user origin.</Description>
    <ShortDesc>Returns the X coordinate of the object relative to the user origin.</ShortDesc>
    <IDName>funcXCoordinate</IDName>
    <InternalFunctionName>MP_XCoordinate</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>The search criteria string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>YCoordinate</Name>
    <ChangedDate>2011:05:16T16:30:00</ChangedDate>
    <Version>1600</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the Y coordinate of the object relative to the user origin.</Description>
    <ShortDesc>Returns the Y coordinate of the object relative to the user origin.</ShortDesc>
    <IDName>funcYCoordinate</IDName>
    <InternalFunctionName>MP_YCoordinate</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>The search criteria string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ZCoordinate</Name>
    <ChangedDate>2011:05:16T16:30:00</ChangedDate>
    <Version>1600</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the Z coordinate of the object relative to the layer plane.</Description>
    <ShortDesc>Returns the Z coordinate of the object relative to the layer plane.</ShortDesc>
    <IDName>funcZCoordinate</IDName>
    <InternalFunctionName>MP_ZCoordinate</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>The search criteria string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ComponentArea</Name>
    <ChangedDate>2010:10:05T11:33:00</ChangedDate>
    <Version>1600</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the area of one side the specified component, minus any holes in the 3D object.</Description>
    <ShortDesc>Returns the area of one side the specified component, minus any holes in the 3D object.</ShortDesc>
    <IDName>funcComponentArea</IDName>
    <InternalFunctionName>MP_ComponentArea</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>The search criteria string</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ComponentVolume</Name>
    <ChangedDate>2010:10:05T11:34:00</ChangedDate>
    <Version>1600</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the 3D volume of the specified component, minus any holes in the 3D object.</Description>
    <ShortDesc>Returns the 3D volume of the specified component, minus any holes in the 3D object.</ShortDesc>
    <IDName>funcComponentVolume</IDName>
    <InternalFunctionName>MP_ComponentVolume</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>The search criteria string.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsCoPlanar</Name>
    <ChangedDate>2010:07:13T14:53:00</ChangedDate>
    <Version>1600</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns true if two planes are coplanar.</Description>
    <ShortDesc>Returns true if two planes are coplanar.</ShortDesc>
    <ID>13065</ID>
    <IDName>funcIsCoPlanar</IDName>
    <InternalFunctionName>MP_IsCoPlanar</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>refID1</Name>
        <Type>longMode</Type>
        <Desc>Reference ID of the first plane.</Desc>
      </Param>
      <Param>
        <Name>refID2</Name>
        <Type>longMode</Type>
        <Desc>Reference ID of the second plane.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsPerpPlane</Name>
    <ChangedDate>2010:07:13T14:53:00</ChangedDate>
    <Version>1600</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns true if two planes are perpendicular.</Description>
    <ShortDesc>Returns true if two planes are perpendicular. </ShortDesc>
    <ID>13066</ID>
    <IDName>funcIsPerpPlane</IDName>
    <InternalFunctionName>MP_IsPerpPlane</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>refID1</Name>
        <Type>longMode</Type>
        <Desc>Reference ID of the first plane.</Desc>
      </Param>
      <Param>
        <Name>refID2</Name>
        <Type>longMode</Type>
        <Desc>Reference ID of the second plane.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWorkingPlaneN</Name>
    <ChangedDate>2010:07:13T14:53:00</ChangedDate>
    <Version>1600</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Set the active working plane.</Description>
    <ShortDesc>Set the active working plane.</ShortDesc>
    <ID>13067</ID>
    <IDName>funcSetWorkingPlaneN</IDName>
    <InternalFunctionName>MP_SetWorkingPlaneN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>centerPt</Name>
        <Type>d3PtMode</Type>
        <Desc>Location of the working plane.</Desc>
      </Param>
      <Param>
        <Name>normal</Name>
        <Type>d3PtMode</Type>
        <Desc>Normal vector of the working plane.</Desc>
      </Param>
      <Param>
        <Name>uVec</Name>
        <Type>d3PtMode</Type>
        <Desc>The U Vector of the plane.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWorkingPlaneN</Name>
    <ChangedDate>2010:07:13T14:53:00</ChangedDate>
    <Version>1600</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Get the active working plane.</Description>
    <ShortDesc>Get the active working plane.</ShortDesc>
    <ID>13068</ID>
    <IDName>funcGetWorkingPlaneN</IDName>
    <InternalFunctionName>MP_GetWorkingPlaneN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>outCenterPt</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Output. The working plane center.</Desc>
      </Param>
      <Param>
        <Name>outNormal</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Output. The working plane normal.</Desc>
      </Param>
      <Param>
        <Name>outUVec</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Output. The U Vector of the plane.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PlanarPtTo3DModelPt</Name>
    <ChangedDate>2010:07:13T14:53:00</ChangedDate>
    <Version>1600</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Transform a 2D point on the specified plane into a 3D point.</Description>
    <ShortDesc>Transform a 2D point on the specified plane into a 3D point.</ShortDesc>
    <ID>13069</ID>
    <IDName>funcPlanarPtTo3DModelPt</IDName>
    <InternalFunctionName>MP_PlanarPtTo3DModelPt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>refID</Name>
        <Type>longMode</Type>
        <Desc>Reference ID of the plane.</Desc>
      </Param>
      <Param>
        <Name>pt2D</Name>
        <Type>globPtMode</Type>
        <Desc>The 2D point on the specified plane.</Desc>
      </Param>
      <Param>
        <Name>outPt3D</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Output. The resulted 3D point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PlanarPtToScreenPlanePt</Name>
    <ChangedDate>2010:07:13T14:53:00</ChangedDate>
    <Version>1600</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Projects a 2D point from the specified plane onto the screen plane.</Description>
    <ShortDesc>Projects a 2D point from the specified plane onto the screen plane.</ShortDesc>
    <ID>13070</ID>
    <IDName>funcPlanarPtToScreenPlanePt</IDName>
    <InternalFunctionName>MP_PlanarPtToScreenPlanePt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>refID</Name>
        <Type>longMode</Type>
        <Desc>Reference ID of the plane.</Desc>
      </Param>
      <Param>
        <Name>pt2D</Name>
        <Type>globPtMode</Type>
        <Desc>Input the 2D point on the plane.</Desc>
      </Param>
      <Param>
        <Name>outPt</Name>
        <Type>globPtVarMode</Type>
        <Desc>Output the 2D point on the screen.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ScreenPlanePtToPlanarPt</Name>
    <ChangedDate>2010:07:13T14:53:00</ChangedDate>
    <Version>1600</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Projects a 2D point from the screen plane onto the specified plane.</Description>
    <ShortDesc>Projects a 2D point from the screen plane onto the specified plane.</ShortDesc>
    <ID>13071</ID>
    <IDName>funcScreenPlanePtToPlanarPt</IDName>
    <InternalFunctionName>MP_ScreenPlanePtToPlanarPt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>refID</Name>
        <Type>longMode</Type>
        <Desc>Reference ID of the plane.</Desc>
      </Param>
      <Param>
        <Name>pt2D</Name>
        <Type>globPtMode</Type>
        <Desc>Input the 2D point on the screen.</Desc>
      </Param>
      <Param>
        <Name>outPt</Name>
        <Type>globPtVarMode</Type>
        <Desc>Output the 2D point on the plane.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCurrentPlanarRefID</Name>
    <ChangedDate>2010:07:13T14:53:00</ChangedDate>
    <Version>1600</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Return the current plane ref ID. This could be any plane: a working plane, screen plane (0), ground plane of a container, or any arbitrary plane.</Description>
    <ShortDesc>Return the current plane ref ID.</ShortDesc>
    <ID>13072</ID>
    <IDName>funcGetCurrentPlanarRefID</IDName>
    <InternalFunctionName>MP_GetCurrentPlanarRefID</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>SetPlanarRef</Name>
    <ChangedDate>2010:07:13T14:53:00</ChangedDate>
    <Version>1600</Version>
    <Category>Object Info</Category>
    <Type>Procedure</Type>
    <Description>Set the plane ref ID of the specified object.</Description>
    <ShortDesc>Set the plane ref ID of the specified object.</ShortDesc>
    <ID>13073</ID>
    <IDName>funcSetPlanarRef</IDName>
    <InternalFunctionName>MP_SetPlanarRef</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object.</Desc>
      </Param>
      <Param>
        <Name>refID</Name>
        <Type>longMode</Type>
        <Desc>Reference ID of the plane.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPlanarRef</Name>
    <ChangedDate>2010:07:13T14:53:00</ChangedDate>
    <Version>1600</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Get the plane ref ID of the specified object.</Description>
    <ShortDesc>Get the plane ref ID of the specified object.</ShortDesc>
    <ID>13074</ID>
    <IDName>funcGetPlanarRef</IDName>
    <InternalFunctionName>MP_GetPlanarRef</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetPlanarRefIDToGround</Name>
    <ChangedDate>2010:07:13T14:53:00</ChangedDate>
    <Version>1600</Version>
    <Category>Object Info</Category>
    <Type>Procedure</Type>
    <Description>Set the specified object on the ground plane. This function is to be used inside parametric objects to place objects on the local coordinate system's ground of the parametric.</Description>
    <ShortDesc>Set the specified object on the ground plane. To be used inside reset event of parametric objects.</ShortDesc>
    <ID>13075</ID>
    <IDName>funcSetPlanarRefIDToGround</IDName>
    <InternalFunctionName>MP_SetPlanarRefIDToGround</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTypeN</Name>
    <ChangedDate>2010:07:13T14:53:00</ChangedDate>
    <Version>1600</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the type index of the referenced planar or screen object.[[BR]][[BR]][[note:ObjTypeNote]][[BR]][[BR]]</Description>
    <ShortDesc>Returns the node type of the referenced planar or screen object.</ShortDesc>
    <SeeAlso>GetType</SeeAlso>
    <ID>13076</ID>
    <IDName>funcGetTypeN</IDName>
    <InternalFunctionName>MP_GetTypeN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ConsolidatePlanar</Name>
    <ChangedDate>2012:07:18T10:35:00</ChangedDate>
    <Version>1600</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Modifies the plane of the second planar object so it is on the plane of the first object. Also moves the object so plane change doesn't affect it's position.</Description>
    <ShortDesc>Modifies the plane of the second planar object so it is on the plane of the first object. Also moves the object so plane change doesn't affect it's position.</ShortDesc>
    <ID>13077</ID>
    <IDName>funcConsolidatePlanar</IDName>
    <InternalFunctionName>MP_ConsolidatePlanarObjects</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj1</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the first object.</Desc>
      </Param>
      <Param>
        <Name>obj2</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the second object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreatePaintFromImgN</Name>
    <ChangedDate>2010:07:22T15:01:00</ChangedDate>
    <Version>1600</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a paint node from an image resource on the specified location and rotation.</Description>
    <ShortDesc>Creates a paint node from an image resource on the specified location and rotation.</ShortDesc>
    <ID>13078</ID>
    <IDName>funcCreatePaintFromImgN</IDName>
    <InternalFunctionName>MP_CreatePaintFromImgN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>image</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the image resource from which a paint node is to be created.</Desc>
      </Param>
      <Param>
        <Name>locPt</Name>
        <Type>globPtMode</Type>
        <Desc>Location of the new paint nodet.</Desc>
      </Param>
      <Param>
        <Name>rotDeg</Name>
        <Type>realMode</Type>
        <Desc>Rotation of the paint node in degrees.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDatumSlabComponent</Name>
    <ChangedDate>2010:10:05T11:39:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the datum slab component of an object.</Description>
    <ShortDesc>Gets the datum slab component of the object.</ShortDesc>
    <Result>The index of the datum slab component.</Result>
    <SeeAlso>SetDatumSlabComponent</SeeAlso>
    <ID>13079</ID>
    <IDName>funcGetDatumSlabComponent</IDName>
    <InternalFunctionName>MP_GetDatumSlabComponent</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a slab, Slab Style, or the Slab Preferences.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDatumSlabComponent</Name>
    <ChangedDate>2010:10:05T11:39:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Procedure</Type>
    <Description>Sets the datum slab component of an object.</Description>
    <ShortDesc>Sets the datum slab component of the object.</ShortDesc>
    <SeeAlso>GetDatumSlabComponent</SeeAlso>
    <ID>13080</ID>
    <IDName>procSetDatumSlabComponent</IDName>
    <InternalFunctionName>MP_SetDatumSlabComponent</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a slab, Slab Style, or the Slab Preferences.</Desc>
      </Param>
      <Param>
        <Name>datumSlabComponent</Name>
        <Type>intMode</Type>
        <Desc>The index of the datum slab component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentWallTopOffset</Name>
    <ChangedDate>2010:08:10T00:04:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the offset from wall top of a component in an object.</Description>
    <ShortDesc>Gets the offset from wall top of a component in an object.</ShortDesc>
    <SeeAlso>SetComponentWallTopOffset</SeeAlso>
    <ID>13081</ID>
    <IDName>funcGetComponentWallTopOffset</IDName>
    <InternalFunctionName>MP_GetComponentWallTopOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>offsetFromWallTop</Name>
        <Type>rVarMode</Type>
        <Desc>Returns the offset from wall top of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentWallTopOffset</Name>
    <ChangedDate>2010:08:09T16:56:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the offset from wall top of a component in an object.</Description>
    <ShortDesc>Sets the offset from wall top of a component in an object.</ShortDesc>
    <SeeAlso>GetComponentWallTopOffset</SeeAlso>
    <ID>13082</ID>
    <IDName>funcSetComponentWallTopOffset</IDName>
    <InternalFunctionName>MP_SetComponentWallTopOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>offsetFromWallTop</Name>
        <Type>distanceMode</Type>
        <Desc>The offset from wall top of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentWallBottomOffset</Name>
    <ChangedDate>2010:08:10T00:03:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the offset from wall bottom of a component in an object.</Description>
    <ShortDesc>Gets the offset from wall bottom of a component in an object.</ShortDesc>
    <SeeAlso>SetComponentWallBottomOffset</SeeAlso>
    <ID>13083</ID>
    <IDName>funcGetComponentWallBottomOffset</IDName>
    <InternalFunctionName>MP_GetComponentWallBottomOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>offsetFromWallBottom</Name>
        <Type>rVarMode</Type>
        <Desc>Returns the offset from wall bottom of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentWallBottomOffset</Name>
    <ChangedDate>2010:08:09T16:56:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the offset from wall bottom of a component in an object.</Description>
    <ShortDesc>Sets the offset from wall bottom of a component in an object.</ShortDesc>
    <SeeAlso>GetComponentWallBottomOffset</SeeAlso>
    <ID>13084</ID>
    <IDName>funcSetComponentWallBottomOffset</IDName>
    <InternalFunctionName>MP_SetComponentWallBottomOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>offsetFromWallBottom</Name>
        <Type>distanceMode</Type>
        <Desc>The offset from wall bottom of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentFollowTopWallPeaks</Name>
    <ChangedDate>2010:08:09T20:39:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the follow top wall peaks flag of a component in an object.</Description>
    <ShortDesc>Gets the follow top wall peaks flag of a component in an object.</ShortDesc>
    <SeeAlso>SetComponentFollowTopWallPeaks</SeeAlso>
    <ID>13085</ID>
    <IDName>funcGetComponentFollowTopWallPeaks</IDName>
    <InternalFunctionName>MP_GetComponentFollowTopWallPeaks</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>followTopWallPeaks</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component is following top wall peaks.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentFollowTopWallPeaks</Name>
    <ChangedDate>2010:08:09T20:39:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the follow top wall peaks flag of a component in an object.</Description>
    <ShortDesc>Sets the follow top wall peaks flag of a component in an object.</ShortDesc>
    <SeeAlso>GetComponentFollowTopWallPeaks</SeeAlso>
    <ID>13086</ID>
    <IDName>funcSetComponentFollowTopWallPeaks</IDName>
    <InternalFunctionName>MP_SetComponentFollowTopWallPeaks</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>followTopWallPeaks</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component will follow top wall peaks.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentFollowBottomWallPeaks</Name>
    <ChangedDate>2010:08:09T20:39:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the follow bottom wall peaks flag of a component in an object.</Description>
    <ShortDesc>Gets the follow bottom wall peaks flag of a component in an object.</ShortDesc>
    <SeeAlso>SetComponentFollowBottomWallPeaks</SeeAlso>
    <ID>13087</ID>
    <IDName>funcGetComponentFollowBottomWallPeaks</IDName>
    <InternalFunctionName>MP_GetComponentFollowBottomWallPeaks</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>followBottomWallPeaks</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component is following bottom wall peaks.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentFollowBottomWallPeaks</Name>
    <ChangedDate>2010:08:09T20:42:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the follow bottom wall peaks flag of a component in an object.</Description>
    <ShortDesc>Sets the follow bottom wall peaks flag of a component in an object.</ShortDesc>
    <SeeAlso>GetComponentFollowBottomWallPeaks</SeeAlso>
    <ID>13088</ID>
    <IDName>funcSetComponentFollowBottomWallPeaks</IDName>
    <InternalFunctionName>MP_SetComponentFollowBottomWallPeaks</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>followBottomWallPeaks</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component will follow bottom wall peaks.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentAutoBoundEdgeOffset</Name>
    <ChangedDate>2015:08:10T10:16:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the auto-bound edge offset of a component in an object.</Description>
    <ShortDesc>Gets the auto-bound edge offset of a component in an object.</ShortDesc>
    <SeeAlso>SetComponentAutoBoundEdgeOffset</SeeAlso>
    <ID>13089</ID>
    <IDName>funcGetComponentAutoBoundEdgeOffset</IDName>
    <InternalFunctionName>MP_GetComponentAutoBoundEdgeOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a  slab, Slab Style, or the Slab Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>autoBoundEdgeOffset</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the auto-bound edge offset.  0 - Inner face 1 - Outer face of inner component 2 - Inner face of core 3 - Center of core 4 - Outer face of core 5 - Inner face of outer component</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentAutoBoundEdgeOffset</Name>
    <ChangedDate>2015:08:10T10:17:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the auto-bound edge offset of a component in an object.</Description>
    <ShortDesc>Sets the auto-bound edge offset of a component in an object.</ShortDesc>
    <SeeAlso>GetComponentAutoBoundEdgeOffset</SeeAlso>
    <ID>13090</ID>
    <IDName>funcSetComponentAutoBoundEdgeOffset</IDName>
    <InternalFunctionName>MP_SetComponentAutoBoundEdgeOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a  slab, Slab Style, or the Slab Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>autoBoundEdgeOffset</Name>
        <Type>intMode</Type>
        <Desc>The auto-bound edge offset.  0 - Inner face 1 - Outer face of inner component 2 - Inner face of core 3 - Center of core 4 - Outer face of core 5 - Inner face of outer component</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentManualEdgeOffset</Name>
    <ChangedDate>2010:08:10T00:03:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the manual edge offset of a component in an object.</Description>
    <ShortDesc>Gets the manual edge offset of a component in an object.</ShortDesc>
    <SeeAlso>SetComponentManualEdgeOffset</SeeAlso>
    <ID>13091</ID>
    <IDName>funcGetComponentManualEdgeOffset</IDName>
    <InternalFunctionName>MP_GetComponentManualEdgeOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a  slab, Slab Style, or the Slab Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>manualEdgeOffset</Name>
        <Type>rVarMode</Type>
        <Desc>Returns the manual edge offset.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentManualEdgeOffset</Name>
    <ChangedDate>2010:08:09T21:02:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the manual edge offset of a component in an object.</Description>
    <ShortDesc>Sets the manual edge offset of a component in an object.</ShortDesc>
    <SeeAlso>GetComponentManualEdgeOffset</SeeAlso>
    <ID>13092</ID>
    <IDName>funcSetComponentManualEdgeOffset</IDName>
    <InternalFunctionName>MP_SetComponentManualEdgeOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a  slab, Slab Style, or the Slab Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>manualEdgeOffset</Name>
        <Type>distanceMode</Type>
        <Desc>The manual edge offset.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentTexture</Name>
    <ChangedDate>2015:08:10T05:31:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the texture of a component in an object.</Description>
    <ShortDesc>Gets the texture of a component in an object.</ShortDesc>
    <SeeAlso>SetComponentTexture</SeeAlso>
    <ID>13093</ID>
    <IDName>funcGetComponentTexture</IDName>
    <InternalFunctionName>MP_GetComponentTexture</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>texture</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns the ref number of the texture. 0 for no texture. -1 for class texture.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentTexture</Name>
    <ChangedDate>2015:08:10T05:31:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the texture of a component in an object.</Description>
    <ShortDesc>Sets the texture of a component in an object.</ShortDesc>
    <SeeAlso>GetComponentTexture</SeeAlso>
    <ID>13094</ID>
    <IDName>funcSetComponentTexture</IDName>
    <InternalFunctionName>MP_SetComponentTexture</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>texture</Name>
        <Type>longMode</Type>
        <Desc>The ref number of the texture. 0 for no texture. -1 for class texture.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentNetArea</Name>
    <ChangedDate>2015:08:10T05:33:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Gets the net area of a component in an object.</Description>
    <ShortDesc>Gets the net area of a component in an object.</ShortDesc>
    <Result>The net area of the component.</Result>
    <SeeAlso>GetComponentNetVolume</SeeAlso>
    <ID>13095</ID>
    <IDName>funcGetComponentNetArea</IDName>
    <InternalFunctionName>MP_GetComponentNetArea</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentNetVolume</Name>
    <ChangedDate>2015:08:10T05:33:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Gets the net volume of a component in an object.</Description>
    <ShortDesc>Gets the net volume of a component in an object.</ShortDesc>
    <Result>The net volume of the component.</Result>
    <SeeAlso>GetComponentNetArea</SeeAlso>
    <ID>13096</ID>
    <IDName>funcGetComponentNetVolume</IDName>
    <InternalFunctionName>MP_GetComponentNetVolume</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateSlab</Name>
    <ChangedDate>2010:08:09T21:24:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a slab.</Description>
    <ShortDesc>Creates a slab.</ShortDesc>
    <Result>The slab.</Result>
    <SeeAlso>ModifySlab</SeeAlso>
    <ID>13097</ID>
    <IDName>funcCreateSlab</IDName>
    <InternalFunctionName>MP_CreateSlab</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>profile</Name>
        <Type>handleMode</Type>
        <Desc>The profile from which to create the slab.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ModifySlab</Name>
    <ChangedDate>2010:08:09T21:31:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Adds to or clips from a slab.</Description>
    <ShortDesc>Adds to or clips from a slab.</ShortDesc>
    <Result>Whether or not the modification succeeds.</Result>
    <SeeAlso>CreateSlab</SeeAlso>
    <ID>13098</ID>
    <IDName>funcModifySlab</IDName>
    <InternalFunctionName>MP_ModifySlab</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>slab</Name>
        <Type>handleMode</Type>
        <Desc>The slab.</Desc>
      </Param>
      <Param>
        <Name>modifier</Name>
        <Type>handleMode</Type>
        <Desc>The adding or clipping object.</Desc>
      </Param>
      <Param>
        <Name>isClipObject</Name>
        <Type>boolMode</Type>
        <Desc>Whether the modifier is an add object or a clip object.</Desc>
      </Param>
      <Param>
        <Name>componentFlags</Name>
        <Type>longMode</Type>
        <Desc>Bit flags that indicate which components will be affected by the modification.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSlabStyle</Name>
    <ChangedDate>2010:08:09T21:33:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Gets the Slab Style of a slab.</Description>
    <ShortDesc>Gets the Slab Style of a slab.</ShortDesc>
    <Result>The ref number of the Slab Style of the slab. 0 for unstyled.</Result>
    <SeeAlso>SetSlabStyle</SeeAlso>
    <ID>13099</ID>
    <IDName>funcGetSlabStyle</IDName>
    <InternalFunctionName>MP_GetSlabStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>slab</Name>
        <Type>handleMode</Type>
        <Desc>The slab.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetSlabStyle</Name>
    <ChangedDate>2010:08:09T21:38:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Procedure</Type>
    <Description>Sets the Slab Style of a slab.</Description>
    <ShortDesc>Sets the Slab Style of a slab.</ShortDesc>
    <SeeAlso>GetSlabStyle</SeeAlso>
    <ID>13100</ID>
    <IDName>procSetSlabStyle</IDName>
    <InternalFunctionName>MP_SetSlabStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>slab</Name>
        <Type>handleMode</Type>
        <Desc>The slab.</Desc>
      </Param>
      <Param>
        <Name>slabStyle</Name>
        <Type>longMode</Type>
        <Desc>The ref number of the Slab Style to apply to the slab. 0 for unstyled.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ConvertToUnstyledSlab</Name>
    <ChangedDate>2010:08:09T21:44:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Procedure</Type>
    <Description>Sets a slab to be unstyled.</Description>
    <ShortDesc>Sets a slab to be unstyled.</ShortDesc>
    <ID>13101</ID>
    <IDName>procConvertToUnstyledSlab</IDName>
    <InternalFunctionName>MP_ConvertToUnstyledSlab</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>slab</Name>
        <Type>handleMode</Type>
        <Desc>The slab.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSlabPreferencesStyle</Name>
    <ChangedDate>2010:08:09T21:47:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Gets the Slab Style of the Slab Preferences.</Description>
    <ShortDesc>Gets the Slab Style of the Slab Preferences.</ShortDesc>
    <Result>The ref number of the Slab Style of the Slab Preferences. 0 for unstyled.</Result>
    <SeeAlso>SetSlabPreferencesStyle</SeeAlso>
    <ID>13102</ID>
    <IDName>funcGetSlabPreferencesStyle</IDName>
    <InternalFunctionName>MP_GetSlabPreferencesStyle</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>SetSlabPreferencesStyle</Name>
    <ChangedDate>2010:08:09T21:52:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Procedure</Type>
    <Description>Sets the Slab Style of the Slab Preferences.</Description>
    <ShortDesc>Sets the Slab Style of the Slab Preferences.</ShortDesc>
    <SeeAlso>GetSlabPreferencesStyle</SeeAlso>
    <ID>13103</ID>
    <IDName>procSetSlabPreferencesStyle</IDName>
    <InternalFunctionName>MP_SetSlabPreferencesStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>slabStyle</Name>
        <Type>longMode</Type>
        <Desc>The ref number of the Slab Style to apply to the Slab Preferences. 0 for unstyled.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSlabHeight</Name>
    <ChangedDate>2010:08:09T23:20:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Gets the height of a slab.</Description>
    <ShortDesc>Gets the height of a slab.</ShortDesc>
    <Result>The height of the slab.</Result>
    <SeeAlso>SetSlabHeight</SeeAlso>
    <ID>13104</ID>
    <IDName>funcGetSlabHeight</IDName>
    <InternalFunctionName>MP_GetSlabHeight</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>slab</Name>
        <Type>handleMode</Type>
        <Desc>The slab.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetSlabHeight</Name>
    <ChangedDate>2010:08:09T23:28:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Procedure</Type>
    <Description>Sets the height of a slab.</Description>
    <ShortDesc>Sets the height of a slab.</ShortDesc>
    <SeeAlso>GetSlabHeight</SeeAlso>
    <ID>13105</ID>
    <IDName>procSetSlabHeight</IDName>
    <InternalFunctionName>MP_SetSlabHeight</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>slab</Name>
        <Type>handleMode</Type>
        <Desc>The slab.</Desc>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>distanceMode</Type>
        <Desc>The height of the slab.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateSlabStyle</Name>
    <ChangedDate>2010:08:09T23:35:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a new Slab Style of the given name. If the name is already in use, the next available name will be used.</Description>
    <ShortDesc>Creates a new Slab Style of the given name. If the name is already in use, the next available name will be used.</ShortDesc>
    <Result>The new Slab Style.</Result>
    <ID>13106</ID>
    <IDName>funcCreateSlabStyle</IDName>
    <InternalFunctionName>MP_CreateSlabStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>slabStyleName</Name>
        <Type>stringMode</Type>
        <Desc>The name of the new Slab Style.  If the name is already in use, the next available name will be used.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWallPreferences</Name>
    <ChangedDate>2010:08:09T23:45:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Gets the Wall Preferences. This can be used with the component calls and the Style selectors.</Description>
    <ShortDesc>Gets the Wall Preferences. This can be used with the component calls and the Style selectors.</ShortDesc>
    <Result>The Wall Preferences.</Result>
    <ID>13107</ID>
    <IDName>funcGetWallPreferences</IDName>
    <InternalFunctionName>MP_GetWallPreferences</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetSlabPreferences</Name>
    <ChangedDate>2010:08:09T23:46:00</ChangedDate>
    <Version>1600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Gets the Slab Preferences. This can be used with the component calls and the Style selectors.</Description>
    <ShortDesc>Gets the Slab Preferences. This can be used with the component calls and the Style selectors.</ShortDesc>
    <Result>The Slab Preferences.</Result>
    <ID>13108</ID>
    <IDName>funcGetSlabPreferences</IDName>
    <InternalFunctionName>MP_GetSlabPreferences</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetTextureSet</Name>
    <ChangedDate>2010:08:09T23:52:00</ChangedDate>
    <Version>1600</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the texture set of an object.</Description>
    <ShortDesc>Gets the texture set of an object.</ShortDesc>
    <Result>The texture set.[[BR]][[BR]]0 - Object textures[[BR]]1 - Component textures</Result>
    <SeeAlso>SetTextureSet</SeeAlso>
    <ID>13109</ID>
    <IDName>funcGetTextureSet</IDName>
    <InternalFunctionName>MP_GetTextureSet</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextureSet</Name>
    <ChangedDate>2015:08:10T05:34:00</ChangedDate>
    <Version>1600</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Sets the texture set of an object.</Description>
    <ShortDesc>Sets the texture set of an object.</ShortDesc>
    <SeeAlso>GetTextureSet</SeeAlso>
    <ID>13110</ID>
    <IDName>procSetTextureSet</IDName>
    <InternalFunctionName>MP_SetTextureSet</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object.</Desc>
      </Param>
      <Param>
        <Name>textureSet</Name>
        <Type>intMode</Type>
        <Desc>           The texture set.            0 - Object textures           1 - Component textures         </Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjectVariablePoint</Name>
    <ChangedDate>2010:08:11T11:59:00</ChangedDate>
    <Version>1600</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns the value of a Vectorworks object property. Used with properties returning a 2D or 3D point value.[[BR]][[BR]]For specific object selector index values, see the Appendix. </Description>
    <ShortDesc>Returns the value of a Vectorworks object property. Used with properties returning a 2D or 3D point value.</ShortDesc>
    <SeeAlso>SetObjectVariablePoint,GetObjectVariableBoolean,SetObjectVariableBoolean,GetObjectVariableHandle,SetObjectVariableHandle,GetObjectVariableInt,SetObjectVariableInt,GetObjectVariableLongInt,SetObjectVariableLongInt,GetObjectVariableReal,SetObjectVariableReal,GetObjectVariableString,SetObjectVariableString</SeeAlso>
    <ID>13111</ID>
    <IDName>funcGetObjectVariablePoint</IDName>
    <InternalFunctionName>MP_GetObjectVariablePoint</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Object property index.</Desc>
      </Param>
      <Param>
        <Name>outP</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Return the object variable data point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjectVariablePoint</Name>
    <ChangedDate>2010:08:11T11:59:00</ChangedDate>
    <Version>1600</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the value of a Vectorworks object property. Used with properties requiring a 2D or 3D point value.[[BR]][[BR]]For specific object selector index values, see the Appendix. </Description>
    <ShortDesc>Sets the value of a Vectorworks object property. Used with properties requiring a 2D or 3D point value.</ShortDesc>
    <SeeAlso>GetObjectVariablePoint,GetObjectVariableBoolean,SetObjectVariableBoolean,GetObjectVariableHandle,SetObjectVariableHandle,GetObjectVariableInt,SetObjectVariableInt,GetObjectVariableLongInt,SetObjectVariableLongInt,GetObjectVariableReal,SetObjectVariableReal,GetObjectVariableString,SetObjectVariableString</SeeAlso>
    <ID>13112</ID>
    <IDName>funcSetObjectVariablePoint</IDName>
    <InternalFunctionName>MP_SetObjectVariablePoint</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Object property index.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>d3PtMode</Type>
        <Desc>The object variable data point.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWorkingPlaneMat</Name>
    <ChangedDate>2010:08:11T11:59:00</ChangedDate>
    <Version>1600</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Get the specified working plane matrix.</Description>
    <ShortDesc>Get the specified working plane matrix.</ShortDesc>
    <ID>13113</ID>
    <IDName>funcGetWorkingPlaneMat</IDName>
    <InternalFunctionName>MP_GetWorkingPlaneMat</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>refID</Name>
        <Type>longMode</Type>
        <Desc>Reference ID of the working plane.</Desc>
      </Param>
      <Param>
        <Name>outCenterPt</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Output. The working plane center.</Desc>
      </Param>
      <Param>
        <Name>outNormal</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Output. The working plane normal.</Desc>
      </Param>
      <Param>
        <Name>outUVec</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Output. The U Vector of the plane.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AreaN</Name>
    <ChangedDate>2011:01:03T13:51:00</ChangedDate>
    <Version>1700</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the area of an object. If more than one object matches the search criteria, the function will return the sum of all the matching object areas.</Description>
    <ShortDesc>Returns the area of the objects matching the search criteria. </ShortDesc>
    <Example>totalA:=[[name]]((C='Plywood'));[[BR]]{returns the area of all objects in class 'Plywood'}</Example>
    <IDName>funcArea</IDName>
    <InternalFunctionName>MP_AreaN</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BotBoundN</Name>
    <ChangedDate>2011:01:03T13:52:00</ChangedDate>
    <Version>1700</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the y-coordinate of the bounding box (bottom right corner) of an object matching the search criteria. If more than one object matches the search criteria, the function will return the value of the coordinate of the bottommost matching object found.</Description>
    <ShortDesc>Returns the y-coordinate value of the bottom right corner of the object matching the search criteria.</ShortDesc>
    <Example>BotBValue:=[[name]](N='MyRect');</Example>
    <IDName>funcBotBound</IDName>
    <InternalFunctionName>MP_BotBoundN</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LeftBoundN</Name>
    <ChangedDate>2011:01:03T13:52:00</ChangedDate>
    <Version>1700</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the x-coordinate of the bounding box (top left corner) of an object matching the search criteria. If more than one object matches the search criteria, the function will return the value of the coordinate of the leftmost matching object found.</Description>
    <ShortDesc>Returns the x-coordinate value of the top left corner of the object matching the search criteria.</ShortDesc>
    <Example>LeftBValue:=[[name]](N='MyRect');</Example>
    <IDName>funcLeftBound</IDName>
    <InternalFunctionName>MP_LeftBoundN</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>TopBoundN</Name>
    <ChangedDate>2011:01:03T13:52:00</ChangedDate>
    <Version>1700</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the y-coordinate of the bounding box (top left corner) of an object matching the search criteria. If more than one object matches the search criteria, the function will return the value of the coordinate of the topmost matching object found.</Description>
    <ShortDesc>Returns the y-coordinate value of the top left corner of the object matching the search criteria.</ShortDesc>
    <Example>TopBValue:=[[name]](N='MyRect');</Example>
    <IDName>funcTopBound</IDName>
    <InternalFunctionName>MP_TopBoundN</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RightBoundN</Name>
    <ChangedDate>2011:01:03T13:52:00</ChangedDate>
    <Version>1700</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the x-coordinate of the bounding box (bottom right corner) of an object matching the search criteria If more than one object matches the search criteria, the function will return the value of the coordinate of the rightmost matching object found.</Description>
    <ShortDesc>Returns the y-coordinate value of the bottom right corner of the object matching the search criteria.</ShortDesc>
    <Example>RightBValue:=[[name]](N='MyRect');</Example>
    <IDName>funcRightBound</IDName>
    <InternalFunctionName>MP_RightBoundN</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LengthN</Name>
    <ChangedDate>2011:01:03T13:52:00</ChangedDate>
    <Version>1700</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the length of an object. If more than one object matches the search criteria, the function will return the sum of all the matching object lengths.</Description>
    <ShortDesc>Returns the length of the objects matching the search criteria.</ShortDesc>
    <Example>LengthValue:=[[name]](C='CrossMembers');[[BR]]{returns the length of all objects in class 'CrossMembers'}</Example>
    <IDName>funcLength</IDName>
    <InternalFunctionName>MP_LengthN</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SurfaceAreaN</Name>
    <ChangedDate>2011:01:03T13:52:00</ChangedDate>
    <Version>1700</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the surface area of the items matching the specified criteria. If more than one object matches the search criteria, the sum of all the surface areas of the matching objects will be returned. [[BR]][[BR]][[name]] will only return areas on objects which support the solids modelling functions.</Description>
    <ShortDesc>Returns the surface area of the items matching the current criteria.</ShortDesc>
    <Example>totalArea:=[[name]]((C='Empty Space'));</Example>
    <IDName>funcSurfaceArea</IDName>
    <InternalFunctionName>MP_SurfaceAreaN</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PerimN</Name>
    <ChangedDate>2011:01:03T13:52:00</ChangedDate>
    <Version>1700</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the perimeter of an object. If more than one object matches the search criteria, the function will return the sum of the matching objects' perimeters.</Description>
    <ShortDesc>Returns the perimeter of the objects matching the search criteria.</ShortDesc>
    <Example>PerimValue := PerimN(C='Fence');[[BR]]{returns the total perimeter of all objects in the class 'Fence'}</Example>
    <IDName>funcPerim</IDName>
    <InternalFunctionName>MP_PerimN</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>VolumeN</Name>
    <ChangedDate>2011:01:03T13:52:00</ChangedDate>
    <Version>1700</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the volume of the items matching the specified criteria. If more than one object matches the search criteria, the sum of all the volumes of the matching objects will be returned. [[BR]][[BR]][[name]] will only return volumes on objects which support the solids modelling functions.</Description>
    <ShortDesc>Returns the volume of the items matching the current criteria.</ShortDesc>
    <Example>totalVol:=[[name]]((C='Empty Space'));</Example>
    <IDName>funcVolume</IDName>
    <InternalFunctionName>MP_VolumeN</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>XCenterN</Name>
    <ChangedDate>2011:05:16T16:30:00</ChangedDate>
    <Version>1700</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the x-coordinate of the center point of the bounding box of an object matching the search criteria. If more than one object matches the search criteria, the function will return the x-coordinate of the average center point of all the matching objects</Description>
    <ShortDesc>Returns the x-coordinate value of the center of the bounding box of an object matching the search criteria</ShortDesc>
    <Example>XCenValue:=XCenterN(N='Board');[[BR]]{returns the x-coord of the center of the bounding box the named object 'Board'</Example>
    <IDName>funcXCenter</IDName>
    <InternalFunctionName>MP_XCenterN</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>YCenterN</Name>
    <ChangedDate>2011:05:16T16:30:00</ChangedDate>
    <Version>1700</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the y-coordinate of the center point of the bounding box of an object matching the search criteria. If more than one object matches the search criteria, the function will return the y-coordinate of the average center point of all the matching objects</Description>
    <ShortDesc>Returns the Y center coordinate value of the center of the bounding box of the objects matching the search criteria</ShortDesc>
    <Example>YCenValue:=YCenterN(N='Board');[[BR]]{returns the y-coord of the center of the bounding box of the named object 'Board'</Example>
    <IDName>funcYCenter</IDName>
    <InternalFunctionName>MP_YCenterN</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ZCenterN</Name>
    <ChangedDate>2011:05:16T16:30:00</ChangedDate>
    <Version>1700</Version>
    <Category>Criteria</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the z-coordinate value of the center of the bounding box of an object matching the search criteria. If more than one object matches the search criteria, the function will return the z-coordinate of the average center point of all the matching objects</Description>
    <ShortDesc>Returns the z-coordinate value of the center of the bounding box of an object matching the search criteria</ShortDesc>
    <Example>ZCenValue:=ZCenterN(N='Board');[[BR]]{returns the z-coord of the center of the bounding box of the named object 'Board'</Example>
    <IDName>funcZCenter</IDName>
    <InternalFunctionName>MP_ZCenterN</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBImageIndexes</Name>
    <ChangedDate>2011:05:19T15:46:00</ChangedDate>
    <Version>1700</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the images for the list browser row, Replaces SetLBMultImageIndexes</Description>
    <ShortDesc>Sets the images for the list browser row, Replaces SetLBMultImageIndexes</ShortDesc>
    <ID>13160</ID>
    <IDName>funcSetLBImageIndexes</IDName>
    <InternalFunctionName>MP_SetLBImageIndexes</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The dialog identifier given by the command to create the dialog.</Desc>
      </Param>
      <Param>
        <Name>controlID</Name>
        <Type>longMode</Type>
        <Desc>The identifier of the control to be updated.</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>imageSpecifier0</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The string identifier for the image. It should be of the form "ResourceFileNameWithoutExtension/PathOfImageFile".</Desc>
      </Param>
      <Param>
        <Name>imageSpecifier1</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The string identifier for the image. It should be of the form "ResourceFileNameWithoutExtension/PathOfImageFile".</Desc>
      </Param>
      <Param>
        <Name>imageSpecifier2</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The string identifier for the image. It should be of the form "ResourceFileNameWithoutExtension/PathOfImageFile".</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddButtonMode</Name>
    <ChangedDate>2011:05:19T15:47:00</ChangedDate>
    <Version>1700</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Adds an image button to the mode bar for a tool. Replaces vstAddButtonMode.</Description>
    <ShortDesc>Adds an image button to the mode bar for a tool. Replaces vstAddButtonMode.</ShortDesc>
    <ID>13161</ID>
    <IDName>procAddButtonMode</IDName>
    <InternalFunctionName>MP_AddButtonMode</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>imageSpecifier</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The string identifier for the image. It should be of the form "ResourceFileNameWithoutExtension/PathOfImageFile".</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddRadioMode</Name>
    <ChangedDate>2011:05:19T15:47:00</ChangedDate>
    <Version>1700</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Adds a group of buttons with an image to the mode bar for a tool. Replaces vstAddRadioMode</Description>
    <ShortDesc>Adds a group of buttons with an image to the mode bar for a tool. Replaces vstAddRadioMode</ShortDesc>
    <ID>13162</ID>
    <IDName>procAddRadioMode</IDName>
    <InternalFunctionName>MP_AddRadioMode</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>initialSetting</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>buttonCount</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>imageSpecifier1</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The string identifier for the image. It should be of the form "ResourceFileNameWithoutExtension/PathOfImageFile".</Desc>
      </Param>
      <Param>
        <Name>imageSpecifier2</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The string identifier for the image. It should be of the form "ResourceFileNameWithoutExtension/PathOfImageFile".</Desc>
      </Param>
      <Param>
        <Name>imageSpecifier3</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The string identifier for the image. It should be of the form "ResourceFileNameWithoutExtension/PathOfImageFile".</Desc>
      </Param>
      <Param>
        <Name>imageSpecifier4</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The string identifier for the image. It should be of the form "ResourceFileNameWithoutExtension/PathOfImageFile".</Desc>
      </Param>
      <Param>
        <Name>imageSpecifier5</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The string identifier for the image. It should be of the form "ResourceFileNameWithoutExtension/PathOfImageFile".</Desc>
      </Param>
      <Param>
        <Name>imageSpecifier</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The string identifier for the image. It should be of the form "ResourceFileNameWithoutExtension/PathOfImageFile".</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertPropClassOrLayerItem</Name>
    <ChangedDate>2011:05:19T15:49:00</ChangedDate>
    <Version>1700</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Inserts a class or layer item in the proposed section of a Class, Design Layer, or Sheet Layer Layout Manager Pull Down.</Description>
    <ShortDesc>Inserts a class or layer item in the proposed section of a Class, Design Layer, or Sheet Layer Layout Manager Pull Down.</ShortDesc>
    <ID>13163</ID>
    <IDName>funcInsertPropClassOrLayerItem</IDName>
    <InternalFunctionName>MP_InsertPropClassOrLayerItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The dialog identifier given by the command to create the dialog.</Desc>
      </Param>
      <Param>
        <Name>controlID</Name>
        <Type>longMode</Type>
        <Desc>The control identifier.</Desc>
      </Param>
      <Param>
        <Name>strLabel</Name>
        <Type>stringMode</Type>
        <Desc>Text for the label of the Pull Down.</Desc>
      </Param>
      <Param>
        <Name>imageSpecifier</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The string identifier for the image. It should be of the form "ResourceFileNameWithoutExtension/PathOfImageFile".</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertEnhanPullDownMenuItem</Name>
    <ChangedDate>2011:05:19T15:49:00</ChangedDate>
    <Version>1700</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Inserts a image Replaces InsertEnhancedPulldownMenuItem</Description>
    <ShortDesc>Inserts a image Replaces InsertEnhancedPulldownMenuItem</ShortDesc>
    <ID>13164</ID>
    <IDName>funcInsertEnhanPullDownMenuItem</IDName>
    <InternalFunctionName>MP_InsertEnhanPullDownMenuItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>controlID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>strName</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>imageSpecifier</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The string identifier for the image. It should be of the form "ResourceFileNameWithoutExtension/PathOfImageFile".</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateThumbnailPopup</Name>
    <ChangedDate>2011:05:19T15:41:00</ChangedDate>
    <Version>1700</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a thumbnail popup that can be populated with previews of objects in Vectorworks</Description>
    <ShortDesc>Creates a thumbnail popup that can be populated with previews of objects in Vectorworks</ShortDesc>
    <ID>13165</ID>
    <IDName>procCreateThumbnailPopup</IDName>
    <InternalFunctionName>MP_CreateThumbnailPopup</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>controlID</Name>
        <Type>longMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumStories</Name>
    <ChangedDate>2011:01:14T11:24:00</ChangedDate>
    <Version>1700</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the number of stories in the file. Stories are used to group layers and are shown on the Story pane of the Organization dialog.</Description>
    <ShortDesc>Returns the number of stories in the file.</ShortDesc>
    <Result>Returns the number of stories in the file.</Result>
    <SeeAlso>CreateStory,GetStoryOfLayer,AssociateLayerWithStory</SeeAlso>
    <ID>13114</ID>
    <IDName>funcGetNumStories</IDName>
    <InternalFunctionName>MP_GetNumStories</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetNumLayerLevelTypes</Name>
    <ChangedDate>2011:01:14T11:43:00</ChangedDate>
    <Version>1700</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the number of layer level types in the file. A layer can be assigned a layer level type, which defines its location within a story.</Description>
    <ShortDesc>Returns the number of layer level types in the file.</ShortDesc>
    <Result>The number of layer level types in the file.</Result>
    <SeeAlso>GetLayerLevelType,SetLayerLevelType,CreateLayerLevelType</SeeAlso>
    <ID>13115</ID>
    <IDName>funcGetNumLayerLevelTypes</IDName>
    <InternalFunctionName>MP_GetNumLayerLevelTypes</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetNumStoryLayerTemplates</Name>
    <ChangedDate>2011:01:14T11:50:00</ChangedDate>
    <Version>1700</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the number of story layer templates in the file. Story Layer Templates are used to define what Layers are typically found in a Story. When a Story is created, the user has the option to automatically create the Layers defined by the Story Layer Templates.</Description>
    <ShortDesc>Returns the number of Story Layer Templates in the file.</ShortDesc>
    <Result>The number of Story Layer Templates in the file.</Result>
    <SeeAlso>CreateStoryLayerTemplate</SeeAlso>
    <ID>13116</ID>
    <IDName>funcGetNumStoryLayerTemplates</IDName>
    <InternalFunctionName>MP_GetNumStoryLayerTemplates</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetLayerLevelType</Name>
    <ChangedDate>2011:01:14T12:00:00</ChangedDate>
    <Version>1700</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Returns the Layer Level Type of the Layer.</Description>
    <ShortDesc>Returns the Layer Level Type of the Layer.</ShortDesc>
    <Result>The Layer Level Type of the Layer.</Result>
    <SeeAlso>SetLayerLevelType, CreateLayerLevelType</SeeAlso>
    <Example>VAR[[BR]][[BR]]layerLevelType:STRING;[[BR]][[BR]]BEGIN[[BR]][[BR]]layerLevelType := GetLayerLevelType(ActLayer);</Example>
    <ID>13117</ID>
    <IDName>funcGetLayerLevelType</IDName>
    <InternalFunctionName>MP_GetLayerLevelType</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>layer</Name>
        <Type>handleMode</Type>
        <Desc>The Layer whose Layer Level Type is desired.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLayerLevelType</Name>
    <ChangedDate>2011:01:14T12:31:00</ChangedDate>
    <Version>1700</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the Layer Level Type of a Layer. If the type passed in does not exist or if it already used by another Layer on the same Story, then the operation will fail.</Description>
    <ShortDesc>Set the Layer Level Type of a Layer.</ShortDesc>
    <Result>Whether the attempt to set the Layer Level Type was successful.</Result>
    <SeeAlso>GetLayerLevelType,CreateLayerLevelType</SeeAlso>
    <Example>SetLayerLevelType(ActLayer, 'LT_SLAB');</Example>
    <ID>13118</ID>
    <IDName>funcSetLayerLevelType</IDName>
    <InternalFunctionName>MP_SetLayerLevelType</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>layer</Name>
        <Type>handleMode</Type>
        <Desc>The Layer for which the Layer Level Type is being set.</Desc>
      </Param>
      <Param>
        <Name>layerLevelType</Name>
        <Type>stringMode</Type>
        <Desc>The Layer Level Type.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetStoryLayerTemplateName</Name>
    <ChangedDate>2011:01:14T12:32:00</ChangedDate>
    <Version>1700</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Returns the name of the nth Story Layer Template in the file. For example, if 3 is passed in, it will return the name of the 3rd Story Layer Template in the file.</Description>
    <ShortDesc>Returns the name of the Story Layer Template with the indicated index.</ShortDesc>
    <Result>The name of the nth Story Layer Template.</Result>
    <SeeAlso>GetNumStoryLayerTemplates,CreateStoryLayerTemplate</SeeAlso>
    <Example>VAR[[BR]][[BR]]templateName:STRING;[[BR]][[BR]]BEGIN[[BR]][[BR]]templateName:=GetStoryLayerTemplateName(2);</Example>
    <ID>13119</ID>
    <IDName>funcGetStoryLayerTemplateName</IDName>
    <InternalFunctionName>MP_GetStoryLayerTemplateName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the Story Layer Template whose name is desired.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetStoryOfLayer</Name>
    <ChangedDate>2011:01:14T12:33:00</ChangedDate>
    <Version>1700</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns the Story that the indicated Layer is associated with. Returns NULL if the Layer is not associated with a Story.</Description>
    <ShortDesc>Returns the Story that a Layer is associated with.</ShortDesc>
    <Result>The Story associated with the Layer, which may be NULL.</Result>
    <SeeAlso>GetLayerForStory, GetNumStories,CreateStory,AssociateLayerWithStory</SeeAlso>
    <Example>VAR[[BR]][[BR]]story:HANDLE;[[BR]][[BR]]BEGIN[[BR]][[BR]]story:=GetStoryOfLayer(ActLayer);</Example>
    <ID>13120</ID>
    <IDName>funcGetStoryOfLayer</IDName>
    <InternalFunctionName>MP_GetStoryOfLayer</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>layer</Name>
        <Type>handleMode</Type>
        <Desc>The Layer for which the associated Story is returned.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLayerForStory</Name>
    <ChangedDate>2011:01:14T12:33:00</ChangedDate>
    <Version>1700</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Gets the layer with the story and layer level type specified.</Description>
    <ShortDesc>Gets the layer with the story and layer level type specified.</ShortDesc>
    <Result>The Layer associated with the Story and layer level specified, which may be NULL.</Result>
    <SeeAlso>GetStoryOfLayer, GetNumStories,CreateStory,AssociateLayerWithStory</SeeAlso>
    <Example>VAR[[BR]][[BR]]layer:HANDLE;[[BR]][[BR]]BEGIN[[BR]][[BR]]layer:=GetLayerForStory(story);</Example>
    <ID>13121</ID>
    <IDName>funcGetLayerForStory</IDName>
    <InternalFunctionName>MP_GetLayerForStory</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>story</Name>
        <Type>handleMode</Type>
        <Desc>The Story for which the will be looked up for level types.</Desc>
      </Param>
      <Param>
        <Name>levelType</Name>
        <Type>stringMode</Type>
        <Desc>The level type of the story, which associated layer will be returned.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateStory</Name>
    <ChangedDate>2011:01:14T14:07:00</ChangedDate>
    <Version>1700</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Creates a Story. Stories are used to group layers and are shown on the Story pane of the Organization dialog.</Description>
    <ShortDesc>Creates a Story.</ShortDesc>
    <Result>Whether the Story was successfully created. </Result>
    <SeeAlso>GetNumStories,GetStoryOfLayer,AssociateLayerWithStory</SeeAlso>
    <Example>VAR[[BR]][[BR]]success:BOOLEAN[[BR]][[BR]]BEGIN[[BR]][[BR]]success := CreateStory('4th Floor', '4');</Example>
    <ID>13122</ID>
    <IDName>funcCreateStory</IDName>
    <InternalFunctionName>MP_CreateStory</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>The name of the Story to create.</Desc>
      </Param>
      <Param>
        <Name>suffix</Name>
        <Type>stringMode</Type>
        <Desc>The suffix to be used at the end of the name of a Layer assoiciated with the Story.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateLayerLevelType</Name>
    <ChangedDate>2011:01:14T15:32:00</ChangedDate>
    <Version>1700</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Creates a Layer Level Type.  A Layer can be assigned a Layer Level Type, which defines its location within a Story.</Description>
    <ShortDesc>Creates a Layer Level Typel</ShortDesc>
    <Result>Whether a Layer Level Type was successfully created.</Result>
    <SeeAlso>GetNumLayerLevelTypes,GetLayerLevelType,SetLayerLevelType</SeeAlso>
    <ID>13123</ID>
    <IDName>funcCreateLayerLevelType</IDName>
    <InternalFunctionName>MP_CreateLayerLevelType</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>The name of the Layer Level Type to create.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateStoryLayerTemplate</Name>
    <ChangedDate>2011:01:18T15:47:00</ChangedDate>
    <Version>1700</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Creates a Story Layer Template in the current file. Sets the index parameter to the index of the new template in the list of templates. Story Layer Templates are used to define what Layers are typically found in a Story. When a Story is created, the user has the option to automatically create the Layers defined by the Story Layer Templates.</Description>
    <ShortDesc>Creates a Story Layer Template.</ShortDesc>
    <Result>Whether a Story Layer Template is successfully created.</Result>
    <SeeAlso>GetNumStoryLayerTemplates,GetStoryLayerTemplateName,DeleteStoryLayerTemplate</SeeAlso>
    <Example>VAR[[BR]][[BR]]success:BOOLEAN;[[BR]][[BR]]BEGIN[[BR]][[BR]]success := CreateStoryLayerTemplate('Mod-Slab', 1, 'LT_Slab', 0, 6);</Example>
    <ID>13124</ID>
    <IDName>funcCreateStoryLayerTemplate</IDName>
    <InternalFunctionName>MP_CreateStoryLayerTemplate</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>The name of the Story Layer Template.</Desc>
      </Param>
      <Param>
        <Name>scaleFactor</Name>
        <Type>realMode</Type>
        <Desc>The scale to be assinged to any Layers created from this template.</Desc>
      </Param>
      <Param>
        <Name>layerLevelType</Name>
        <Type>stringMode</Type>
        <Desc>The Layer Level Type to be assigned to any Layers created from this template.</Desc>
      </Param>
      <Param>
        <Name>elevationOffset</Name>
        <Type>realMode</Type>
        <Desc>The offset of the elevation of any Layer created from this template from the elevation of its Story.</Desc>
      </Param>
      <Param>
        <Name>defaultWallHeight</Name>
        <Type>realMode</Type>
        <Desc>The wall height to be assigned to any Layer created from this template.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intVarMode</Type>
        <Desc>The index of the new template in the list of templates.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DeleteStoryLayerTemplate</Name>
    <ChangedDate>2011:01:14T14:26:00</ChangedDate>
    <Version>1700</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deletes the nth Story Layer Template from the current file. For example, if 3 is passed in, it will delete the 3rd Story Layer Template in the file. </Description>
    <ShortDesc>Deletes the Story Layer Template with the specified index from the current file.</ShortDesc>
    <Result>Whether a Story Layer Template with the indicated index existed in the file.</Result>
    <SeeAlso>GetNumStoryLayerTemplates,GetStoryLayerTemplateName,CreateStoryLayerTemplate</SeeAlso>
    <Example>VAR[[BR]][[BR]]success:BOOLEAN;[[BR]][[BR]]BEGIN[[BR]][[BR]]success := DeleteStoryTemplate(3);</Example>
    <ID>13125</ID>
    <IDName>funcDeleteStoryLayerTemplate</IDName>
    <InternalFunctionName>MP_DeleteStoryLayerTemplate</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Index of the Story Layer Template to delete.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AssociateLayerWithStory</Name>
    <ChangedDate>2011:01:14T14:38:00</ChangedDate>
    <Version>1700</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Associates a Layer with a Story. When a Layer is associated with a Story, the Layer's elevation is displayed relative to the Story elevation. If the elevation of the associated Story is changed, the elevation of the Layer changes with it.</Description>
    <ShortDesc>Associates a Layer with a Story.</ShortDesc>
    <Result>Whether the Layer was successfully associated with the Story. This will fail if there is already another Layer associated with the Story that has the same Layer Level Type as the Layer passed in.</Result>
    <SeeAlso>GetNumStories,GetStoryOfLayer,CreateStory</SeeAlso>
    <Example>VAR[[BR]][[BR]]success:BOOLEAN;[[BR]]story:HANDLE;[[BR]]layer:HANDLE;[[BR]][[BR]]BEGIN[[BR]][[BR]]story := GetObject('4th Floor');[[BR]]layer := GetObject('Plan 4');[[BR]]success := AssociateLayerWithStory(layer, story);[[BR]]</Example>
    <ID>13126</ID>
    <IDName>funcAssociateLayerWithStory</IDName>
    <InternalFunctionName>MP_AssociateLayerWithStory</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>layer</Name>
        <Type>handleMode</Type>
        <Desc>The Layer to associate.</Desc>
      </Param>
      <Param>
        <Name>story</Name>
        <Type>handleMode</Type>
        <Desc>The Story to associate.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetStoryAbove</Name>
    <ChangedDate>2011:01:14T14:45:00</ChangedDate>
    <Version>1700</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns the Story above the indicated Story. Returns NULL if there is none. If passed a NULL handle, returns the top-most Story in the current drawing.</Description>
    <ShortDesc>Returns the Story above the indicated Story.</ShortDesc>
    <Result>The Story above the indicated Story, or NULL if there is none. If a NULL handle is passed in, the topmost Story in the current drawing.</Result>
    <SeeAlso>GetStoryBelow,GetNumStories,GetStoryOfLayer</SeeAlso>
    <Example>VAR[[BR]][[BR]]baseStory:HANDLE;[[BR]]storyAbove:HANDLE;[[BR]][[BR]]BEGIN[[BR]][[BR]]baseStory := GetStoryOfLayer(ActLayer);[[BR]]storyAbove := StoryAbove(baseStory);</Example>
    <ID>13127</ID>
    <IDName>funcGetStoryAbove</IDName>
    <InternalFunctionName>MP_GetStoryAbove</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>story</Name>
        <Type>handleMode</Type>
        <Desc>The indicated Story for which the Story above it is desired.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetStoryBelow</Name>
    <ChangedDate>2011:01:14T14:49:00</ChangedDate>
    <Version>1700</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns the Story below the indicated Story. Returns NULL if there is none. If passed a NULL handle, returns the bottom-most Story in the current drawing.</Description>
    <ShortDesc>Returns the Story below the indicated Story.</ShortDesc>
    <Result>The Story below the indicated Story, or NULL if there is none. If a NULL handle is passed in, the bottom-most Story in the current drawing.</Result>
    <SeeAlso>GetStoryAbove,GetNumStories,GetStoryOfLayer</SeeAlso>
    <Example>VAR[[BR]][[BR]]baseStory:HANDLE;[[BR]]storyBelow:HANDLE;[[BR]][[BR]]BEGIN[[BR]][[BR]]baseStory := GetStoryOfLayer(ActLayer);[[BR]]storyBelow := StoryBelow(baseStory);</Example>
    <ID>13128</ID>
    <IDName>funcGetStoryBelow</IDName>
    <InternalFunctionName>MP_GetStoryBelow</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>story</Name>
        <Type>handleMode</Type>
        <Desc>The indicated Story for which the Story below it is desired</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetStoryElevation</Name>
    <ChangedDate>2011:01:14T14:52:00</ChangedDate>
    <Version>1700</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the elevaton of the indicated Story.</Description>
    <ShortDesc>Returns the elevaton of the indicated Story.</ShortDesc>
    <Result>The elevation of the Story.</Result>
    <SeeAlso>CreateStory,SetStoryElevation</SeeAlso>
    <ID>13129</ID>
    <IDName>funcGetStoryElevation</IDName>
    <InternalFunctionName>MP_GetStoryElevation</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>story</Name>
        <Type>handleMode</Type>
        <Desc>The Story whose elevation is desired.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetStoryElevation</Name>
    <ChangedDate>2011:01:14T14:57:00</ChangedDate>
    <Version>1700</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the elevation of the indicated Story. Returns whether the elevation was successfully set. If the elevaton change would cause Layers associated with the Story to overlap Layers associated with another Story, then the change in elevation will be prevented.</Description>
    <ShortDesc>Sets the elevation of the indicated Story.</ShortDesc>
    <Result>Whether the elevation is successfully changed.</Result>
    <SeeAlso>CreateStory,GetStoryElevation</SeeAlso>
    <ID>13130</ID>
    <IDName>funcSetStoryElevation</IDName>
    <InternalFunctionName>MP_SetStoryElevation</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>story</Name>
        <Type>handleMode</Type>
        <Desc>The Story whose elevation is to be set.</Desc>
      </Param>
      <Param>
        <Name>elevation</Name>
        <Type>realMode</Type>
        <Desc>The elevation to set the Story to.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ShowByClassChoice</Name>
    <Version>1700</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Adds a 'By Class' choice to a marker, line style, or color popup control.  (Dialog must be running)</Description>
    <ShortDesc>Adds a 'By Class' choice to a marker, line style, or color popup control.</ShortDesc>
    <ID>13136</ID>
    <IDName>procShowByClassChoice</IDName>
    <InternalFunctionName>MP_ShowByClassChoice</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Id of the dialog</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Id of the popup control</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsClassChoiceSelected</Name>
    <Version>1700</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns if 'By Class' is the selected choice in a marker, line style, or color popup control.</Description>
    <ShortDesc>Returns if 'By Class' is the selected choice in a marker, line style, or color popup control.</ShortDesc>
    <ID>13137</ID>
    <IDName>funcIsClassChoiceSelected</IDName>
    <InternalFunctionName>MP_IsClassChoiceSelected</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Id of the dialog</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Id of the popup control</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SelectClassChoice</Name>
    <Version>1700</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Use to select the class option in a popup that ShowByClassChoice has been called on.  This function must be called with FALSE param if the popup currently has the class selection and the script wishes to change to a non-class selection.</Description>
    <ShortDesc>Use to select the class option in a popup that ShowByClassChoice has been called on.</ShortDesc>
    <ID>13138</ID>
    <IDName>procSelectClassChoice</IDName>
    <InternalFunctionName>MP_SelectClassChoice</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Id of the dialog</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Id of the popup control</Desc>
      </Param>
      <Param>
        <Name>select</Name>
        <Type>boolMode</Type>
        <Desc>TRUE if setting by class or FALSE if programmatically restoring the value to a non-class setting after class setting was applied</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Rpstr_RemoveValues</Name>
    <ChangedDate>2011:01:26T08:30:00</ChangedDate>
    <Version>1700</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Removes all values from the VectorScript value repository.</Description>
    <ShortDesc>Removes all values from the VectorScript value repository.</ShortDesc>
    <SeeAlso>Rpstr_RemoveValues, Rpstr_RemoveValue, Rpstr_GetValueBool, Rpstr_SetValueBool, Rpstr_GetValueInt, Rpstr_SetValueInt, Rpstr_GetValueReal, Rpstr_SetValueReal, Rpstr_GetValueStr, Rpstr_SetValueStr</SeeAlso>
    <ID>13139</ID>
    <IDName>procRpstr_RemoveValues</IDName>
    <InternalFunctionName>MP_Rpstr_RemoveValues</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>Rpstr_RemoveValue</Name>
    <ChangedDate>2011:01:25T17:07:00</ChangedDate>
    <Version>1700</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Removes a named value from the VectorScript value repository.</Description>
    <ShortDesc>Removes a named value from the VectorScript value repository.</ShortDesc>
    <Result>Return true if the value was found and removed.</Result>
    <SeeAlso>Rpstr_RemoveValues, Rpstr_RemoveValue, Rpstr_GetValueBool, Rpstr_SetValueBool, Rpstr_GetValueInt, Rpstr_SetValueInt, Rpstr_GetValueReal, Rpstr_SetValueReal, Rpstr_GetValueStr, Rpstr_SetValueStr</SeeAlso>
    <ID>13140</ID>
    <IDName>funcRpstr_RemoveValue</IDName>
    <InternalFunctionName>MP_Rpstr_RemoveValue</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>The name of the value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Rpstr_GetValueBool</Name>
    <ChangedDate>2011:01:26T08:32:00</ChangedDate>
    <Version>1700</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Get a boolean value from the VectorScript value repository.</Description>
    <ShortDesc>Get a boolean value from the VectorScript value repository.</ShortDesc>
    <SeeAlso>Rpstr_RemoveValues, Rpstr_RemoveValue, Rpstr_GetValueBool, Rpstr_SetValueBool, Rpstr_GetValueInt, Rpstr_SetValueInt, Rpstr_GetValueReal, Rpstr_SetValueReal, Rpstr_GetValueStr, Rpstr_SetValueStr</SeeAlso>
    <ID>13141</ID>
    <IDName>funcRpstr_GetValueBool</IDName>
    <InternalFunctionName>MP_Rpstr_GetValueBool</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>The name of the value.</Desc>
      </Param>
      <Param>
        <Name>defaultValue</Name>
        <Type>boolMode</Type>
        <Desc>Default value if the name does not exist in the VectorScript value repository.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Rpstr_SetValueBool</Name>
    <ChangedDate>2011:01:25T17:04:00</ChangedDate>
    <Version>1700</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Set a boolean value from the VectorScript value repository.</Description>
    <ShortDesc>Set a boolean value from the VectorScript value repository.</ShortDesc>
    <SeeAlso>Rpstr_RemoveValues, Rpstr_RemoveValue, Rpstr_GetValueBool, Rpstr_SetValueBool, Rpstr_GetValueInt, Rpstr_SetValueInt, Rpstr_GetValueReal, Rpstr_SetValueReal, Rpstr_GetValueStr, Rpstr_SetValueStr</SeeAlso>
    <ID>13142</ID>
    <IDName>procRpstr_SetValueBool</IDName>
    <InternalFunctionName>MP_Rpstr_SetValueBool</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>The name of the value.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>boolMode</Type>
        <Desc>Set a value associated with the name in the VectorScript value repository.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Rpstr_GetValueInt</Name>
    <ChangedDate>2011:01:26T09:00:00</ChangedDate>
    <Version>1700</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Get an integer value from the VectorScript value repository.</Description>
    <ShortDesc>Get an integer value from the VectorScript value repository.</ShortDesc>
    <SeeAlso>Rpstr_RemoveValues, Rpstr_RemoveValue, Rpstr_GetValueBool, Rpstr_SetValueBool, Rpstr_GetValueInt, Rpstr_SetValueInt, Rpstr_GetValueReal, Rpstr_SetValueReal, Rpstr_GetValueStr, Rpstr_SetValueStr</SeeAlso>
    <ID>13143</ID>
    <IDName>funcRpstr_GetValueInt</IDName>
    <InternalFunctionName>MP_Rpstr_GetValueInt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>The name of the value.</Desc>
      </Param>
      <Param>
        <Name>defaultValue</Name>
        <Type>intMode</Type>
        <Desc>Default value if the name does not exist in the VectorScript value repository.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Rpstr_SetValueInt</Name>
    <ChangedDate>2011:01:25T17:04:00</ChangedDate>
    <Version>1700</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Set an integer value from the VectorScript value repository.</Description>
    <ShortDesc>Set an integer value from the VectorScript value repository.</ShortDesc>
    <SeeAlso>Rpstr_RemoveValues, Rpstr_RemoveValue, Rpstr_GetValueBool, Rpstr_SetValueBool, Rpstr_GetValueInt, Rpstr_SetValueInt, Rpstr_GetValueReal, Rpstr_SetValueReal, Rpstr_GetValueStr, Rpstr_SetValueStr</SeeAlso>
    <ID>13144</ID>
    <IDName>procRpstr_SetValueInt</IDName>
    <InternalFunctionName>MP_Rpstr_SetValueInt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>The name of the value.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>intMode</Type>
        <Desc>Set a value associated with the name in the VectorScript value repository.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Rpstr_GetValueReal</Name>
    <ChangedDate>2011:01:26T09:00:00</ChangedDate>
    <Version>1700</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Get a real value from the VectorScript value repository.</Description>
    <ShortDesc>Get a real value from the VectorScript value repository.</ShortDesc>
    <SeeAlso>Rpstr_RemoveValues, Rpstr_RemoveValue, Rpstr_GetValueBool, Rpstr_SetValueBool, Rpstr_GetValueInt, Rpstr_SetValueInt, Rpstr_GetValueReal, Rpstr_SetValueReal, Rpstr_GetValueStr, Rpstr_SetValueStr</SeeAlso>
    <ID>13145</ID>
    <IDName>funcRpstr_GetValueReal</IDName>
    <InternalFunctionName>MP_Rpstr_GetValueReal</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>The name of the value.</Desc>
      </Param>
      <Param>
        <Name>defaultValue</Name>
        <Type>realMode</Type>
        <Desc>Default value if the name does not exist in the VectorScript value repository.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Rpstr_SetValueReal</Name>
    <ChangedDate>2011:01:25T17:04:00</ChangedDate>
    <Version>1700</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Set a real value from the VectorScript value repository.</Description>
    <ShortDesc>Set a real value from the VectorScript value repository.</ShortDesc>
    <SeeAlso>Rpstr_RemoveValues, Rpstr_RemoveValue, Rpstr_GetValueBool, Rpstr_SetValueBool, Rpstr_GetValueInt, Rpstr_SetValueInt, Rpstr_GetValueReal, Rpstr_SetValueReal, Rpstr_GetValueStr, Rpstr_SetValueStr</SeeAlso>
    <ID>13146</ID>
    <IDName>procRpstr_SetValueReal</IDName>
    <InternalFunctionName>MP_Rpstr_SetValueReal</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>The name of the value.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>realMode</Type>
        <Desc>Set a value associated with the name in the VectorScript value repository.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Rpstr_GetValueStr</Name>
    <ChangedDate>2011:01:26T09:00:00</ChangedDate>
    <Version>1700</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>DYNARRAY[] of CHAR</ReturnType>
    <Description>Get a string value from the VectorScript value repository.</Description>
    <ShortDesc>Get a string value from the VectorScript value repository.</ShortDesc>
    <SeeAlso>Rpstr_RemoveValues, Rpstr_RemoveValue, Rpstr_GetValueBool, Rpstr_SetValueBool, Rpstr_GetValueInt, Rpstr_SetValueInt, Rpstr_GetValueReal, Rpstr_SetValueReal, Rpstr_GetValueStr, Rpstr_SetValueStr</SeeAlso>
    <ID>13147</ID>
    <IDName>funcRpstr_GetValueStr</IDName>
    <InternalFunctionName>MP_Rpstr_GetValueStr</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>The name of the value.</Desc>
      </Param>
      <Param>
        <Name>defaultValue</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Default value if the name does not exist in the VectorScript value repository.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Rpstr_SetValueStr</Name>
    <ChangedDate>2011:01:25T17:05:00</ChangedDate>
    <Version>1700</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Set a string value from the VectorScript value repository.</Description>
    <ShortDesc>Set a string value from the VectorScript value repository.</ShortDesc>
    <SeeAlso>Rpstr_RemoveValues, Rpstr_RemoveValue, Rpstr_GetValueBool, Rpstr_SetValueBool, Rpstr_GetValueInt, Rpstr_SetValueInt, Rpstr_GetValueReal, Rpstr_SetValueReal, Rpstr_GetValueStr, Rpstr_SetValueStr</SeeAlso>
    <ID>13148</ID>
    <IDName>procRpstr_SetValueStr</IDName>
    <InternalFunctionName>MP_Rpstr_SetValueStr</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>The name of the value.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Set a value associated with the name in the VectorScript value repository.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetMeshVertsCnt</Name>
    <ChangedDate>2011:01:27T09:15:00</ChangedDate>
    <Version>1700</Version>
    <Category>Objects - 3D</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the number of vertices of the passed mesh handle.</Description>
    <ShortDesc>Returns the number of vertices of the passed mesh handle.</ShortDesc>
    <SeeAlso>GetMeshVertsCnt, GetMeshVertex, SetMeshVertex</SeeAlso>
    <ID>13149</ID>
    <IDName>funcGetMeshVertsCnt</IDName>
    <InternalFunctionName>MP_GetMeshVertsCnt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hMesh</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the mesh object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetMeshVertex</Name>
    <ChangedDate>2011:01:27T09:15:00</ChangedDate>
    <Version>1700</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Return the specified vertex of a mesh object.</Description>
    <ShortDesc>Return the specified vertex of a mesh object.</ShortDesc>
    <SeeAlso>GetMeshVertsCnt, GetMeshVertex, SetMeshVertex</SeeAlso>
    <ID>13150</ID>
    <IDName>procGetMeshVertex</IDName>
    <InternalFunctionName>MP_GetMeshVertex</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hMesh</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the mesh object.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The Index of the vertex.</Desc>
      </Param>
      <Param>
        <Name>outPt</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Output parameter. The 3D coordinates of the vertex.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetMeshVertex</Name>
    <ChangedDate>2011:01:27T09:16:00</ChangedDate>
    <Version>1700</Version>
    <Category>Objects - 3D</Category>
    <Type>Procedure</Type>
    <Description>Set a mesh vertex.</Description>
    <ShortDesc>Set a mesh vertex.</ShortDesc>
    <SeeAlso>GetMeshVertsCnt, GetMeshVertex, SetMeshVertex</SeeAlso>
    <ID>13151</ID>
    <IDName>procSetMeshVertex</IDName>
    <InternalFunctionName>MP_SetMeshVertex</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hMesh</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the mesh object.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The Index of the vertex.</Desc>
      </Param>
      <Param>
        <Name>pt</Name>
        <Type>d3PtMode</Type>
        <Desc>The new vertex coordinates.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetStorySuffix</Name>
    <ChangedDate>2011:02:10T16:18:00</ChangedDate>
    <Version>1700</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Returns the suffix of the indicated Story.</Description>
    <ShortDesc>Returns the suffix of the indicated Story.</ShortDesc>
    <Result>The suffix of the indicated Story.</Result>
    <SeeAlso>GetStoryElevation,SetStorySuffix</SeeAlso>
    <ID>13153</ID>
    <IDName>funcGetStorySuffix</IDName>
    <InternalFunctionName>MP_GetStorySuffix</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>story</Name>
        <Type>handleMode</Type>
        <Desc>The Story whose suffix is desired.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetStorySuffix</Name>
    <ChangedDate>2011:02:10T17:18:00</ChangedDate>
    <Version>1700</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the suffix of the indicated Story. Returns whether the suffix was successfully set. If the suffix is already used by another Story, then the change in suffix will be prevented.</Description>
    <ShortDesc>Sets the suffix of the indicated story.</ShortDesc>
    <Result>Whether the suffix is successfully changed.</Result>
    <SeeAlso>GetStorySuffix,SetStoryElevation</SeeAlso>
    <ID>13154</ID>
    <IDName>funcSetStorySuffix</IDName>
    <InternalFunctionName>MP_SetStorySuffix</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>story</Name>
        <Type>handleMode</Type>
        <Desc>The story whose suffix is being set.</Desc>
      </Param>
      <Param>
        <Name>suffix</Name>
        <Type>stringMode</Type>
        <Desc>The new value of the suffix of the indicated Story.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateImageControl2</Name>
    <ChangedDate>2011:03:10T13:39:00</ChangedDate>
    <Version>1700</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <ShortDesc>This replaces the usage of CreateControl with control kinds 1 and 10. This function uses the new image APIs.</ShortDesc>
    <ID>13155</ID>
    <IDName>procCreateImageControl2</IDName>
    <InternalFunctionName>MP_CreateImageControl2</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The dialog identifier given by the command to create the dialog.</Desc>
      </Param>
      <Param>
        <Name>controlID</Name>
        <Type>longMode</Type>
        <Desc>The identifier that should be assigned to the control.</Desc>
      </Param>
      <Param>
        <Name>widthInPixels</Name>
        <Type>intMode</Type>
        <Desc>The width of the control. Use zero to let the image dictate the dimension</Desc>
      </Param>
      <Param>
        <Name>heightInPixels</Name>
        <Type>intMode</Type>
        <Desc>The height of the control. Use zero to let the image dictate the dimension</Desc>
      </Param>
      <Param>
        <Name>imageSpecifier</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The string identifier for the image. It should be of the form "ResourceFileNameWithoutExtension/PathOfImageFile".</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>UpdateImageControl2</Name>
    <ChangedDate>2011:05:19T15:41:00</ChangedDate>
    <Version>1700</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Updates the image control created with CreateImageControl2</Description>
    <ShortDesc>Updates the image control created with CreateImageControl2</ShortDesc>
    <ID>13156</ID>
    <IDName>procUpdateImageControl2</IDName>
    <InternalFunctionName>MP_UpdateImageControl2</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The dialog identifier given by the command to create the dialog.</Desc>
      </Param>
      <Param>
        <Name>controlID</Name>
        <Type>longMode</Type>
        <Desc>The identifier of the control to be updated.</Desc>
      </Param>
      <Param>
        <Name>imageSpecifier</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The string identifier for the image. It should be of the form "ResourceFileNameWithoutExtension/PathOfImageFile".</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateImagePushButton</Name>
    <ChangedDate>2011:05:19T15:45:00</ChangedDate>
    <Version>1700</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates an image push button. Replaces CreateIconPushButton</Description>
    <ShortDesc>Creates an image push button. Replaces CreateIconPushButton</ShortDesc>
    <ID>13157</ID>
    <IDName>procCreateImagePushButton</IDName>
    <InternalFunctionName>MP_CreateImagePushButton</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The dialog identifier given by the command to create the dialog.</Desc>
      </Param>
      <Param>
        <Name>controlID</Name>
        <Type>longMode</Type>
        <Desc>The identifier that should be assigned to the control.</Desc>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>intMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
      <Param>
        <Name>imageSpecifier</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The string identifier for the image. It should be of the form "ResourceFileNameWithoutExtension/PathOfImageFile".</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>UpdateImagePushButton</Name>
    <ChangedDate>2011:05:19T15:45:00</ChangedDate>
    <Version>1700</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Updates the image button created with CreateImagePushButton.</Description>
    <ShortDesc>Updates the image button created with CreateImagePushButton.</ShortDesc>
    <ID>13158</ID>
    <IDName>procUpdateImagePushButton</IDName>
    <InternalFunctionName>MP_UpdateImagePushButton</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The dialog identifier given by the command to create the dialog.</Desc>
      </Param>
      <Param>
        <Name>controlID</Name>
        <Type>longMode</Type>
        <Desc>The identifier of the control to be updated.</Desc>
      </Param>
      <Param>
        <Name>imageSpecifier</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The string identifier for the image. It should be of the form "ResourceFileNameWithoutExtension/PathOfImageFile".</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddListBrowserImage</Name>
    <ChangedDate>2014:09:24T16:40:00</ChangedDate>
    <Version>1700</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Adds an image to a list browser. Replaces AddLBImage.</Description>
    <ShortDesc>Adds an image to a list browser. Replaces AddLBImage.</ShortDesc>
    <ID>13159</ID>
    <IDName>funcAddListBrowserImage</IDName>
    <InternalFunctionName>MP_AddListBrowserImage</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The dialog identifier given by the command to create the dialog.</Desc>
      </Param>
      <Param>
        <Name>controlID</Name>
        <Type>longMode</Type>
        <Desc>The identifier of the control to be updated.</Desc>
      </Param>
      <Param>
        <Name>imageSpecifier</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The string identifier for the image. It should be of the form "ResourceFileNameWithoutExtension/PathOfImageFile".</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HasObjStoryBounds</Name>
    <ChangedDate>2011:03:01T10:00:00</ChangedDate>
    <Version>1700</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determine if the object has any story bounds.</Description>
    <ShortDesc>Determine if the object has any story bounds.</ShortDesc>
    <Result>Return TRUE if the object has any story bounds. Otherwise - FALSE.</Result>
    <SeeAlso>HasObjStoryBounds,HasObjStoryBound,GetObjStoryBound,SetObjectStoryBound,DelObjStoryBounds,DelObjStoryBound,GetObjStoryBoundsCnt,GetObjStoryBoundsAt</SeeAlso>
    <ID>13166</ID>
    <IDName>funcHasObjStoryBounds</IDName>
    <InternalFunctionName>MP_HasObjStoryBounds</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HasObjStoryBound</Name>
    <ChangedDate>2011:03:01T10:00:00</ChangedDate>
    <Version>1700</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determine if the object has the specified story bound ID present.</Description>
    <ShortDesc>Determine if the object has the specified story bound ID present.</ShortDesc>
    <Result>Retrun TRUE if the story bound ID is present. Otherwise - FALSE.</Result>
    <SeeAlso>HasObjStoryBounds,HasObjStoryBound,GetObjStoryBound,SetObjectStoryBound,DelObjStoryBounds,DelObjStoryBound,GetObjStoryBoundsCnt,GetObjStoryBoundsAt</SeeAlso>
    <ID>13167</ID>
    <IDName>funcHasObjStoryBound</IDName>
    <InternalFunctionName>MP_HasObjStoryBound</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object.</Desc>
      </Param>
      <Param>
        <Name>boundID</Name>
        <Type>intMode</Type>
        <Desc>The identifier of the story bound.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjStoryBound</Name>
    <ChangedDate>2016:08:01T10:21:00</ChangedDate>
    <Version>1700</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Get the data of the specified story bound of this object.</Description>
    <ShortDesc>Get the data of the specified story bound of this object.</ShortDesc>
    <Result>Return TRUE if the operation is successful.</Result>
    <SeeAlso>HasObjStoryBounds,HasObjStoryBound,GetObjStoryBound,SetObjectStoryBound,DelObjStoryBounds,DelObjStoryBound,GetObjStoryBoundsCnt,GetObjStoryBoundsAt</SeeAlso>
    <ID>13168</ID>
    <IDName>funcGetObjStoryBound</IDName>
    <InternalFunctionName>MP_GetObjStoryBound</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object.</Desc>
      </Param>
      <Param>
        <Name>boundID</Name>
        <Type>intMode</Type>
        <Desc>The identifier of the story bound.</Desc>
      </Param>
      <Param>
        <Name>boundType</Name>
        <Type>intVarMode</Type>
        <Desc>Bounding type: 0 - DefaultWallHeight; 1 - LayerZ; 2 - Story</Desc>
      </Param>
      <Param>
        <Name>boundStory</Name>
        <Type>intVarMode</Type>
        <Desc>The story identified by 'boundType' = (2 - Story). If 'boundStory' = 0 then it is this story (the object's story); If 'boundStory' = 1 then it is the story above; If 'boundStory' = -1 then it is the story below.</Desc>
      </Param>
      <Param>
        <Name>layerLevelType</Name>
        <Type>strVarMode</Type>
        <Desc>The layer type which defines this bound</Desc>
      </Param>
      <Param>
        <Name>offset</Name>
        <Type>rVarMode</Type>
        <Desc>The offset distance from the specified bound story</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjectStoryBound</Name>
    <ChangedDate>2016:08:01T10:21:00</ChangedDate>
    <Version>1700</Version>
    <Category>Objects - Architectural</Category>
    <Type>Procedure</Type>
    <Description>Set the data of the specified story bound of this object.</Description>
    <ShortDesc>Set the data of the specified story bound of this object.</ShortDesc>
    <SeeAlso>HasObjStoryBounds,HasObjStoryBound,GetObjStoryBound,SetObjectStoryBound,DelObjStoryBounds,DelObjStoryBound,GetObjStoryBoundsCnt,GetObjStoryBoundsAt</SeeAlso>
    <ID>13169</ID>
    <IDName>funcSetObjectStoryBound</IDName>
    <InternalFunctionName>MP_SetObjectStoryBound</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object.</Desc>
      </Param>
      <Param>
        <Name>boundID</Name>
        <Type>intMode</Type>
        <Desc>The identifier of the story bound.</Desc>
      </Param>
      <Param>
        <Name>boundType</Name>
        <Type>intMode</Type>
        <Desc>Bounding type: 0 - LayerZ; 1 - DefaultWallHeight; 2 - Story</Desc>
      </Param>
      <Param>
        <Name>boundStory</Name>
        <Type>intMode</Type>
        <Desc>The story identified by 'boundType' = (2 - Story). If 'boundStory' = 0 then it is this story (the object's story); If 'boundStory' = 1 then it is the story above; If 'boundStory' = -1 then it is the story below.</Desc>
      </Param>
      <Param>
        <Name>layerLevelType</Name>
        <Type>stringMode</Type>
        <Desc>The layer type which defines this bound</Desc>
      </Param>
      <Param>
        <Name>offset</Name>
        <Type>realMode</Type>
        <Desc>The offset distance from the specified bound story</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DelObjStoryBounds</Name>
    <ChangedDate>2011:03:01T10:00:00</ChangedDate>
    <Version>1700</Version>
    <Category>Objects - Architectural</Category>
    <Type>Procedure</Type>
    <Description>Delete all story bounds for this object.</Description>
    <ShortDesc>Delete all story bounds for this object.</ShortDesc>
    <SeeAlso>HasObjStoryBounds,HasObjStoryBound,GetObjStoryBound,SetObjectStoryBound,DelObjStoryBounds,DelObjStoryBound,GetObjStoryBoundsCnt,GetObjStoryBoundsAt</SeeAlso>
    <ID>13170</ID>
    <IDName>funcDelObjStoryBounds</IDName>
    <InternalFunctionName>MP_DelObjStoryBounds</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DelObjStoryBound</Name>
    <ChangedDate>2011:03:01T10:00:00</ChangedDate>
    <Version>1700</Version>
    <Category>Objects - Architectural</Category>
    <Type>Procedure</Type>
    <Description>Delete the specified story bounds from this object.</Description>
    <ShortDesc>Delete the specified story bounds from this object.</ShortDesc>
    <SeeAlso>HasObjStoryBounds,HasObjStoryBound,GetObjStoryBound,SetObjectStoryBound,DelObjStoryBounds,DelObjStoryBound,GetObjStoryBoundsCnt,GetObjStoryBoundsAt</SeeAlso>
    <ID>13171</ID>
    <IDName>funcDelObjStoryBound</IDName>
    <InternalFunctionName>MP_DelObjStoryBound</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object.</Desc>
      </Param>
      <Param>
        <Name>boundID</Name>
        <Type>intMode</Type>
        <Desc>The identifier of the story bound.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjStoryBoundsCnt</Name>
    <ChangedDate>2011:03:01T10:00:00</ChangedDate>
    <Version>1700</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Return the number of story bounds defined for this object.</Description>
    <ShortDesc>Return the number of story bounds defined for this object.</ShortDesc>
    <Result>The number of story bounds for this object.</Result>
    <SeeAlso>HasObjStoryBounds,HasObjStoryBound,GetObjStoryBound,SetObjectStoryBound,DelObjStoryBounds,DelObjStoryBound,GetObjStoryBoundsCnt,GetObjStoryBoundsAt</SeeAlso>
    <ID>13172</ID>
    <IDName>funcGetObjStoryBoundsCnt</IDName>
    <InternalFunctionName>MP_GetObjStoryBoundsCnt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjStoryBoundsAt</Name>
    <ChangedDate>2011:03:01T10:00:00</ChangedDate>
    <Version>1700</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Return the story bound ID of the specified story bound index. The index is between 1 and the result of GetObjStoryBoundsCnt.</Description>
    <ShortDesc>Return the story bound ID of the specified story bound index.</ShortDesc>
    <Result>Return the story bound ID.</Result>
    <SeeAlso>HasObjStoryBounds,HasObjStoryBound,GetObjStoryBound,SetObjectStoryBound,DelObjStoryBounds,DelObjStoryBound,GetObjStoryBoundsCnt,GetObjStoryBoundsAt</SeeAlso>
    <ID>13173</ID>
    <IDName>funcGetObjStoryBoundsAt</IDName>
    <InternalFunctionName>MP_GetObjStoryBoundsAt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Index of the story bound which ID will be returned. This index should be between 1 and the result of GetObjStoryBoundsCnt.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjBoundElevation</Name>
    <ChangedDate>2011:03:23T13:51:00</ChangedDate>
    <Version>1700</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Get the elevation of the specified bound ID relative to the object's layer.</Description>
    <ShortDesc>Get the elevation of the specified bound ID relative to the object's layer.</ShortDesc>
    <Result>Return the elevation of the specified bound ID relative to the object's layer.</Result>
    <SeeAlso>HasObjStoryBounds,HasObjStoryBound,GetObjStoryBound,SetObjectStoryBound,DelObjStoryBounds,DelObjStoryBound,GetObjStoryBoundsCnt,GetObjStoryBoundsAt</SeeAlso>
    <ID>13174</ID>
    <IDName>procGetObjBoundElevation</IDName>
    <InternalFunctionName>MP_GetObjBoundElevation</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object.</Desc>
      </Param>
      <Param>
        <Name>boundID</Name>
        <Type>intMode</Type>
        <Desc>The identifier of the story bound.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWallCornerHeights</Name>
    <ChangedDate>2011:03:28T15:36:00</ChangedDate>
    <Version>1700</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Gets the corner heights of a wall or round wall.</Description>
    <ShortDesc>Gets the corner heights of a wall or round wall.</ShortDesc>
    <SeeAlso>SetWallCornerHeights</SeeAlso>
    <ID>13184</ID>
    <IDName>procGetWallCornerHeights</IDName>
    <InternalFunctionName>MP_GetWallCornerHeights</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theWall</Name>
        <Type>handleMode</Type>
        <Desc>The wall or round wall</Desc>
      </Param>
      <Param>
        <Name>startHeightTop</Name>
        <Type>rVarMode</Type>
        <Desc>The height of the start top corner</Desc>
      </Param>
      <Param>
        <Name>startHeightBottom</Name>
        <Type>rVarMode</Type>
        <Desc>The height of the start bottom corner</Desc>
      </Param>
      <Param>
        <Name>endHeightTop</Name>
        <Type>rVarMode</Type>
        <Desc>The height of the end top corner</Desc>
      </Param>
      <Param>
        <Name>endHeightBottom</Name>
        <Type>rVarMode</Type>
        <Desc>The height of the end bottom corner</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWallCornerHeights</Name>
    <ChangedDate>2011:03:29T16:15:00</ChangedDate>
    <Version>1700</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the corner heights of a wall or round wall.</Description>
    <ShortDesc>Sets the corner heights of a wall or round wall.</ShortDesc>
    <Result>Whether or not the call succeeded</Result>
    <SeeAlso>GetWallCornerHeights</SeeAlso>
    <ID>13176</ID>
    <IDName>funcSetWallCornerHeights</IDName>
    <InternalFunctionName>MP_SetWallCornerHeights</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theWall</Name>
        <Type>handleMode</Type>
        <Desc>The wall or round wall</Desc>
      </Param>
      <Param>
        <Name>startHeightTop</Name>
        <Type>distanceMode</Type>
        <Desc>The height of the start top corner</Desc>
      </Param>
      <Param>
        <Name>startHeightBottom</Name>
        <Type>distanceMode</Type>
        <Desc>The height of the start bottom corner</Desc>
      </Param>
      <Param>
        <Name>endHeightTop</Name>
        <Type>distanceMode</Type>
        <Desc>The height of the end top corner</Desc>
      </Param>
      <Param>
        <Name>endHeightBottom</Name>
        <Type>distanceMode</Type>
        <Desc>The height of the end bottom corner</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWallOverallHeights</Name>
    <ChangedDate>2011:03:28T16:06:00</ChangedDate>
    <Version>1700</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Gets the overall heights of a wall or round wall.</Description>
    <ShortDesc>Gets the overall heights of a wall or round wall.</ShortDesc>
    <SeeAlso>SetWallOverallHeights</SeeAlso>
    <ID>13177</ID>
    <IDName>procGetWallOverallHeights</IDName>
    <InternalFunctionName>MP_GetWallOverallHeights</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theWall</Name>
        <Type>handleMode</Type>
        <Desc>The wall or round wall</Desc>
      </Param>
      <Param>
        <Name>overallHeightTop</Name>
        <Type>rVarMode</Type>
        <Desc>The overall height of the top</Desc>
      </Param>
      <Param>
        <Name>overallHeightBottom</Name>
        <Type>rVarMode</Type>
        <Desc>The overall height of the bottom</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWallOverallHeights</Name>
    <ChangedDate>2011:03:29T16:15:00</ChangedDate>
    <Version>1700</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the overall heights of a wall or round wall.</Description>
    <ShortDesc>Sets the overall heights of a wall or round wall.</ShortDesc>
    <Result>Whether or not the call succeeded</Result>
    <SeeAlso>GetWallOverallHeights</SeeAlso>
    <ID>13178</ID>
    <IDName>funcSetWallOverallHeights</IDName>
    <InternalFunctionName>MP_SetWallOverallHeights</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theWall</Name>
        <Type>handleMode</Type>
        <Desc>The wall or round wall</Desc>
      </Param>
      <Param>
        <Name>botBoundType</Name>
        <Type>intMode</Type>
        <Desc>The type of the bottom bound&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
0 - Layer Z; 1 - Default Wall Height; 2 - Story</Desc>
      </Param>
      <Param>
        <Name>botBoundStory</Name>
        <Type>intMode</Type>
        <Desc>The story of the bottom bound&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
0 - Object's story; 1 -  Story above; 2 - Story below</Desc>
      </Param>
      <Param>
        <Name>botLayerLevelType</Name>
        <Type>stringMode</Type>
        <Desc>The layer level type of the bottom bound</Desc>
      </Param>
      <Param>
        <Name>botOffset</Name>
        <Type>distanceMode</Type>
        <Desc>The offset of the bottom bound</Desc>
      </Param>
      <Param>
        <Name>topBoundType</Name>
        <Type>intMode</Type>
        <Desc>The type of the top bound&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
0 - Layer Z; 1 - Default Wall Height; 2 - Story</Desc>
      </Param>
      <Param>
        <Name>topBoundStory</Name>
        <Type>intMode</Type>
        <Desc>The story of the top bound&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
0 - Object's story; 1 -  Story above; 2 - Story below</Desc>
      </Param>
      <Param>
        <Name>topLayerLevelType</Name>
        <Type>stringMode</Type>
        <Desc>The layer level type of the top bound</Desc>
      </Param>
      <Param>
        <Name>topOffset</Name>
        <Type>distanceMode</Type>
        <Desc>The offset of the top bound</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Add2DVertex</Name>
    <ChangedDate>2011:04:25T17:20:00</ChangedDate>
    <Version>1700</Version>
    <Category>Objects - Polys</Category>
    <Type>Procedure</Type>
    <Description>This procedure will add to a polyline a vertex defined by its position, its type(0 to 4) and the radius if type is 3 or 4. A vertex of type 4 should be followed and preceded by corner vertices. If the type is equal to 4, the point will be a middle point of an arc. In this case if the radius is not given (0) it will be computed.</Description>
    <ShortDesc>This procedure will add a vertex to a polyline.</ShortDesc>
    <Example>beginPoly;[[BR]]Add2DVertex(0,0,0,0);[[BR]]Add2DVertex(1,1,4,0);[[BR]]Add2DVertex(2,0,0,0);[[BR]]Add2DVertex(3,1,4,0);[[BR]]Add2DVertex(4,0,0,0);[[BR]]endPoly;</Example>
    <ID>13175</ID>
    <IDName>procAdd2DVertex</IDName>
    <InternalFunctionName>MP_Add2DVertex</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>p</Name>
        <Type>globPtMode</Type>
        <Desc>The vertex to add to a polyline.</Desc>
      </Param>
      <Param>
        <Name>vertexType</Name>
        <Type>intMode</Type>
        <Desc>The type of the vertex it could be 0, 1, 2, 3 or 4.</Desc>
      </Param>
      <Param>
        <Name>arcRadius</Name>
        <Type>distanceMode</Type>
        <Desc>The arc radius if the vertex type is 3 or 4.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSCellStringN</Name>
    <ChangedDate>2011:04:22T17:00:00</ChangedDate>
    <Version>1700</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the displayed string value of a cell in the referenced worksheet.</Description>
    <ShortDesc>Returns the displayed string value of a cell in the referenced worksheet.</ShortDesc>
    <Comments>Gets the specified worksheet cell's displayed string.[[BR]]If the cell contains a string, the displayed string IS that string.[[BR]]If the cell contains a number, the displayed string is that number PLUS any formatting applied to that number.[[BR]]Use IsWSCellString and/or MP_IsWSCellNumber to determine what type of value the cell actually contains. [[BR]]Use GetWSCellValue to retrieve actual numerical value without formatting from a cell that contains a number.</Comments>
    <Example>PROCEDURE WStest;[[BR]]    VAR[[BR]]       worksheet : HANDLE;[[BR]]       inString, outString : DYNARRAY [] OF CHAR;[[BR]]BEGIN[[BR]]   worksheet := CreateWS('MyWS', 5, 5);[[BR]]   inString := '';[[BR]]   outString := '';[[BR]][[BR]]   { inserts a formula into a single cell }[[BR]]   inString := '=3*2';[[BR]]   SetWSCellFormulaN(worksheet, 1, 2, 1, 2, inString);[[BR]][[BR]]   { gets string from cell }[[BR]]   GetWSCellStringN(worksheet, 1, 2, outString);[[BR]][[BR]]   AlrtDialog(outString); { the cell formula }[[BR]]END;[[BR]]RUN(WStest);</Example>
    <ID>13179</ID>
    <IDName>procGetWSCellStringN</IDName>
    <InternalFunctionName>MP_GetWSCellStringN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>cellString</Name>
        <Type>eCharDynarrayVarMode</Type>
        <Desc>The string value contained in the worksheet cell.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSCellFormulaN</Name>
    <ChangedDate>2011:04:22T17:00:00</ChangedDate>
    <Version>1700</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the formula from a cell in the referenced worksheet.</Description>
    <ShortDesc>Returns the formula from a cell in the referenced worksheet.</ShortDesc>
    <Example>PROCEDURE WStest;[[BR]]    VAR[[BR]]       worksheet : HANDLE;[[BR]]       inString, outString : DYNARRAY [] OF CHAR;[[BR]]BEGIN[[BR]]   worksheet := CreateWS('MyWS', 5, 5);[[BR]]   inString := '';[[BR]]   outString := '';[[BR]][[BR]]   { inserts a formula into a single cell }[[BR]]   inString := '=3*2';[[BR]]   SetWSCellFormulaN(worksheet, 1, 2, 1, 2, inString);[[BR]][[BR]]   { gets formula from cell }[[BR]]   GetWSCellFormulaN(worksheet, 1, 2, outString);[[BR]][[BR]]   AlrtDialog(outString); { the cell formula }[[BR]]END;[[BR]]RUN(WStest);</Example>
    <ID>13180</ID>
    <IDName>procGetWSCellFormulaN</IDName>
    <InternalFunctionName>MP_GetWSCellFormulaN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Row of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column of cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>formula</Name>
        <Type>eCharDynarrayVarMode</Type>
        <Desc>Formula contained in worksheet cell.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellFormulaN</Name>
    <ChangedDate>2011:04:22T17:21:00</ChangedDate>
    <Version>1700</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Inserts a formula into a cell of the referenced worksheet.[[BR]][[BR]][[name]] allows a formula to be inserted into a rectangular range of cells. To insert a formula into a single cell, specify identical values for the top/bottom and left/right range boundaries.[[BR]][[BR]][[name]] triggers a worksheet recalculation if the AutoRecalc flag is set.[[BR]]It is best to turn off that flag before using [[name]] repeatedly or in a loop and restore the flag after all operations are done (see GetWSAutoRecalcState and SetWSAutoRecalcState). [[BR]]At the end, the worksheet should be recalculated by calling RecalculateWS.</Description>
    <ShortDesc>Inserts a formula into a cell of the referenced worksheet.</ShortDesc>
    <SeeAlso>GetWSAutoRecalcState, SetWSAutoRecalcState</SeeAlso>
    <Comments>Sets specified formula string in specified worksheet cell(s).[[BR]]If the 0 column is specified, a database row is created and the formula set as the database row criteria.</Comments>
    <Example>PROCEDURE WStest;[[BR]]   VAR[[BR]]       autoRecalcState : BOOLEAN;[[BR]]       worksheet : HANDLE;[[BR]]       inString : DYNARRAY [] OF CHAR;[[BR]]BEGIN[[BR]]   inString := '';[[BR]][[BR]]   worksheet := CreateWS('MyWS', 5, 5);[[BR]][[BR]]   RectangleN(0, 0, 1, 0, 1, 1);[[BR]][[BR]]   {Save the current AutoRecalc state}[[BR]]   autoRecalcState := GetWSAutoRecalcState(worksheet);[[BR]][[BR]]   {Turn off worksheet Auto Recalculation}[[BR]]   SetWSAutoRecalcState(worksheet, false);[[BR]][[BR]]   { inserts a formula into a single cell }[[BR]]   inString := '=3*2';[[BR]]   SetWSCellFormulaN(worksheet, 1, 2, 1, 2, inString);[[BR]][[BR]]   { inserts a formula into a range of cells }[[BR]]   inString := '&lt;empty&gt;';[[BR]]   SetWSCellFormulaN(worksheet, 1, 3, 2, 4, inString);[[BR]][[BR]]   { creates a database subrow for the type 'RECT' }[[BR]]   inString := '=DATABASE((T=RECT))';[[BR]]   SetWSCellFormulaN(worksheet, 3, 0, 3, 0, inString);[[BR]][[BR]]   { inserts a formula into a database row cell }[[BR]]   inString := '=T';[[BR]]   SetWSCellFormulaN(worksheet, 3, 1, 3, 1, inString);[[BR]][[BR]]   {Restore AutoRecalc state}[[BR]]   SetWSAutoRecalcState(worksheet, autoRecalcState);[[BR]][[BR]]   {Now recalculate the worksheet}[[BR]]   RecalculateWS(worksheet);[[BR]]END;[[BR]]RUN(WStest);</Example>
    <ID>13181</ID>
    <IDName>procSetWSCellFormulaN</IDName>
    <InternalFunctionName>MP_SetWSCellFormulaN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell insertion range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Leftmost column of cell insertion range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell insertion range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Rightmost column of cell insertion range.</Desc>
      </Param>
      <Param>
        <Name>formula</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Formula to be inserted into cell range.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSSubrowCellStrN</Name>
    <ChangedDate>2012:08:08T13:30:00</ChangedDate>
    <Version>1700</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the displayed string in a database subrow cell.</Description>
    <ShortDesc>Returns the displayed string in a database subrow cell.</ShortDesc>
    <Comments>Gets the specified worksheet subrow cell's displayed string.[[BR]]WARNING: Because database subrow cells and their contents are dynamically created based on the current database of objects and the current critieria string, any return values from this function are not guaranteed to be correct beyond this function call. Use this function carefully and at your own risk.</Comments>
    <Example>PROCEDURE WStest;[[BR]]   VAR[[BR]]       autoRecalcState : BOOLEAN;[[BR]]       worksheet : HANDLE;[[BR]]       inString, outString : DYNARRAY [] OF CHAR;[[BR]]BEGIN[[BR]]   inString := '';[[BR]]   outString := '';[[BR]][[BR]]   worksheet := CreateWS('MyWS', 5, 5);[[BR]][[BR]]   RectangleN(0, 0, 1, 0, 1, 1);[[BR]][[BR]]   {Save the current AutoRecalc state}[[BR]]   autoRecalcState := GetWSAutoRecalcState(worksheet);[[BR]][[BR]]   {Turn off worksheet Auto Recalculation}[[BR]]   SetWSAutoRecalcState(worksheet, false);[[BR]][[BR]]   { creates a database sub-row for the type 'RECT' }[[BR]]   inString := '=DATABASE((T=RECT))';[[BR]]   SetWSCellFormulaN(worksheet, 3, 0, 3, 0, inString);[[BR]][[BR]]   { inserts a formula into a database row cell }[[BR]]   inString := '=T';[[BR]]   SetWSCellFormulaN(worksheet, 3, 1, 3, 1, inString);[[BR]][[BR]]   {Restore AutoRecalc state}[[BR]]   SetWSAutoRecalcState(worksheet, autoRecalcState);[[BR]][[BR]]   {Now recalculate the worksheet}[[BR]]   RecalculateWS(worksheet);[[BR]][[BR]]   { gets subrow display string }[[BR]]   GetWSSubrowCellStringN(worksheet, 3, 1, 1, outString);[[BR]][[BR]]   AlrtDialog(outString); { the subrow cell display string }[[BR]]END;[[BR]]RUN(WStest);</Example>
    <ID>13182</ID>
    <IDName>procGetWSSubrowCellStrN</IDName>
    <InternalFunctionName>MP_GetWSSubrowCellStrN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Database row to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column to be queried.</Desc>
      </Param>
      <Param>
        <Name>subrow</Name>
        <Type>intMode</Type>
        <Desc>Index of subrow cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>cellString</Name>
        <Type>eCharDynarrayVarMode</Type>
        <Desc>Display string of subrow cell.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSSubrowActualStringN</Name>
    <ChangedDate>2011:04:22T17:36:00</ChangedDate>
    <Version>1700</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Returns the actual string in a database subrow cell.</Description>
    <ShortDesc>Returns the actual string in a database subrow cell.</ShortDesc>
    <Comments>Gets the specified worksheet subrow cell's actual string.[[BR]]WARNING: Because database subrow cells and their contents are dynamically created based on the current database of objects and the current critieria string, any return values from this function are not guaranteed to be correct beyond this function call. Use this function carefully and at your own risk.</Comments>
    <Example>PROCEDURE WStest;[[BR]]   VAR[[BR]]       autoRecalcState : BOOLEAN;[[BR]]       worksheet : HANDLE;[[BR]]       inString, outString : DYNARRAY [] OF CHAR;[[BR]]BEGIN[[BR]]   inString := '';[[BR]]   outString := '';[[BR]][[BR]]   worksheet := CreateWS('MyWS', 5, 5);[[BR]][[BR]]   RectangleN(0, 0, 1, 0, 1, 1);[[BR]][[BR]]   {Save the current AutoRecalc state}[[BR]]   autoRecalcState := GetWSAutoRecalcState(worksheet);[[BR]][[BR]]   {Turn off worksheet Auto Recalculation}[[BR]]   SetWSAutoRecalcState(worksheet, false);[[BR]][[BR]]   { creates a database sub-row for the type 'RECT' }[[BR]]   inString := '=DATABASE((T=RECT))';[[BR]]   SetWSCellFormulaN(worksheet, 3, 0, 3, 0, inString);[[BR]][[BR]]   { inserts a formula into a database row cell }[[BR]]   inString := '=T';[[BR]]   SetWSCellFormulaN(worksheet, 3, 1, 3, 1, inString);[[BR]][[BR]]   {Restore AutoRecalc state}[[BR]]   SetWSAutoRecalcState(worksheet, autoRecalcState);[[BR]][[BR]]   {Now recalculate the worksheet}[[BR]]   RecalculateWS(worksheet);[[BR]][[BR]]   { gets subrow actual string }[[BR]]   GetWSSubrowActualStringN(worksheet, 3, 1, 1, outString);[[BR]][[BR]]   AlrtDialog(outString); { the subrow cell actual string }[[BR]]END;[[BR]]RUN(WStest);</Example>
    <ID>13183</ID>
    <IDName>procGetWSSubrowActualStringN</IDName>
    <InternalFunctionName>MP_GetWSSubrowActualStringN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>Database row to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column to be queried.</Desc>
      </Param>
      <Param>
        <Name>subrow</Name>
        <Type>intMode</Type>
        <Desc>Index of subrow cell to be queried.</Desc>
      </Param>
      <Param>
        <Name>cellString</Name>
        <Type>eCharDynarrayVarMode</Type>
        <Desc>Actual string of subrow cell.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetChoiceIndex</Name>
    <ChangedDate>2011:04:27T14:43:00</ChangedDate>
    <Version>1700</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Finds the index of the given string in a layout manager list box or pull down menu. The index is zero based and is set to -1 if the item is not found.</Description>
    <ShortDesc>Finds the index of the given string in a layout manager list box or pull down menu.</ShortDesc>
    <ID>13185</ID>
    <IDName>procGetChoiceIndex</IDName>
    <InternalFunctionName>MP_GetChoiceIndex</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>itemText</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetListBoxTabStops</Name>
    <ChangedDate>2011:04:27T14:45:00</ChangedDate>
    <Version>1700</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Set tab stops for list control.</Description>
    <ShortDesc>Set tab stops for list control.</ShortDesc>
    <ID>13186</ID>
    <IDName>procSetListBoxTabStops</IDName>
    <InternalFunctionName>MP_SetListBoxTabStops</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>tabStops</Name>
        <Type>arrayMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HasWSColumnOperator</Name>
    <ChangedDate>2011:05:01T23:18:00</ChangedDate>
    <Version>1700</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determines if specified column operator is set in column.</Description>
    <ShortDesc>Determines if specified column operator is set in column.</ShortDesc>
    <Comments>Operator type constants:[[BR]]All operators = -1[[BR]]Sort operator = 0[[BR]]Summarize operatory = 1</Comments>
    <ID>13187</ID>
    <IDName>funcHasWSColumnOperator</IDName>
    <InternalFunctionName>MP_HasWSColumnOperator</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>databaseRow</Name>
        <Type>intMode</Type>
        <Desc>Database row to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column to be queried.</Desc>
      </Param>
      <Param>
        <Name>operatorType</Name>
        <Type>intMode</Type>
        <Desc>Operator type.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSColumnSortType</Name>
    <ChangedDate>2011:05:01T23:18:00</ChangedDate>
    <Version>1700</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets database column's sort type.</Description>
    <ShortDesc>Gets database column's sort type.</ShortDesc>
    <Comments>Sort type constants:[[BR]]Sort ascending = 0[[BR]]Sort descending = 1</Comments>
    <ID>13188</ID>
    <IDName>funcGetWSColumnSortType</IDName>
    <InternalFunctionName>MP_GetWSColumnSortType</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>databaseRow</Name>
        <Type>intMode</Type>
        <Desc>Database row to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column to be queried.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSColumnSortType</Name>
    <ChangedDate>2011:05:01T23:19:00</ChangedDate>
    <Version>1700</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets database column sort type.</Description>
    <ShortDesc>Sets database column sort type.</ShortDesc>
    <Comments>Sort type constants:[[BR]]Sort ascending = 0[[BR]]Sort descending = 1</Comments>
    <ID>13189</ID>
    <IDName>procSetWSColumnSortType</IDName>
    <InternalFunctionName>MP_SetWSColumnSortType</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>databaseRow</Name>
        <Type>intMode</Type>
        <Desc>Database row to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column to be queried.</Desc>
      </Param>
      <Param>
        <Name>sortType</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSColumnSortPrecedence</Name>
    <ChangedDate>2011:05:01T23:13:00</ChangedDate>
    <Version>1700</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets database column sort precedence, if any.</Description>
    <ShortDesc>Gets database column sort precedence, if any.</ShortDesc>
    <ID>13190</ID>
    <IDName>funcGetWSColumnSortPrecedence</IDName>
    <InternalFunctionName>MP_GetWSColumnSortPrecedence</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>databaseRow</Name>
        <Type>intMode</Type>
        <Desc>Database row to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column to be queried.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>MoveWSColumnOperator</Name>
    <ChangedDate>2011:05:01T23:18:00</ChangedDate>
    <Version>1700</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Moves database column operator between columns.</Description>
    <ShortDesc>Moves database column operator between columns.</ShortDesc>
    <Comments>Operator type constants:[[BR]]All operators = -1[[BR]]Sort operator = 0[[BR]]Summarize operatory = 1</Comments>
    <ID>13191</ID>
    <IDName>procMoveWSColumnOperator</IDName>
    <InternalFunctionName>MP_MoveWSColumnOperator</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>databaseRow</Name>
        <Type>intMode</Type>
        <Desc>Database row to be queried.</Desc>
      </Param>
      <Param>
        <Name>fromColumn</Name>
        <Type>intMode</Type>
        <Desc>From column to be queried.</Desc>
      </Param>
      <Param>
        <Name>toColumn</Name>
        <Type>intMode</Type>
        <Desc>To column to be queried.</Desc>
      </Param>
      <Param>
        <Name>operatorType</Name>
        <Type>intMode</Type>
        <Desc>Operator type.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddWSColumnOperator</Name>
    <ChangedDate>2011:05:01T23:18:00</ChangedDate>
    <Version>1700</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Adds database column operator to specified column.</Description>
    <ShortDesc>Adds database column operator to specified column.</ShortDesc>
    <Comments>Operator type constants:[[BR]]All operators = -1[[BR]]Sort operator = 0[[BR]]Summarize operatory = 1</Comments>
    <ID>13192</ID>
    <IDName>procAddWSColumnOperator</IDName>
    <InternalFunctionName>MP_AddWSColumnOperator</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>databaseRow</Name>
        <Type>intMode</Type>
        <Desc>Database row to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column to be queried.</Desc>
      </Param>
      <Param>
        <Name>operatorType</Name>
        <Type>intMode</Type>
        <Desc>Operator type.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveWSColumnOperator</Name>
    <ChangedDate>2011:05:01T23:18:00</ChangedDate>
    <Version>1700</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Removes database column operator from specified column.</Description>
    <ShortDesc>Removes database column operator from specified column.</ShortDesc>
    <Comments>Operator type constants:[[BR]]All operators = -1[[BR]]Sort operator = 0[[BR]]Summarize operatory = 1</Comments>
    <ID>13193</ID>
    <IDName>procRemoveWSColumnOperator</IDName>
    <InternalFunctionName>MP_RemoveWSColumnOperator</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>databaseRow</Name>
        <Type>intMode</Type>
        <Desc>Database row to be queried.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>Column to be queried.</Desc>
      </Param>
      <Param>
        <Name>operatorType</Name>
        <Type>intMode</Type>
        <Desc>Operator type.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveAllWSColumnOperators</Name>
    <ChangedDate>2011:05:01T23:18:00</ChangedDate>
    <Version>1700</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Removes all database column operators from specified database row.</Description>
    <ShortDesc>Removes all database column operators from specified database row.</ShortDesc>
    <Comments>Operator type constants:[[BR]]All operators = -1[[BR]]Sort operator = 0[[BR]]Summarize operatory = 1</Comments>
    <ID>13194</ID>
    <IDName>procRemoveAllWSColumnOperators</IDName>
    <InternalFunctionName>MP_RemoveAllWSColumnOperators</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Handle to worksheet.</Desc>
      </Param>
      <Param>
        <Name>databaseRow</Name>
        <Type>intMode</Type>
        <Desc>Database row to be queried.</Desc>
      </Param>
      <Param>
        <Name>operatorType</Name>
        <Type>intMode</Type>
        <Desc>Operator type.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HAreaN</Name>
    <ChangedDate>2011:05:02T16:22:00</ChangedDate>
    <Version>1700</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Compute the area of a given object, it has the same function as HArea(), but the result in case of polyline is more accurate.</Description>
    <ShortDesc>Compute the rea of a given 2D Object.</ShortDesc>
    <Example>HAreaN(object);</Example>
    <ID>13195</ID>
    <IDName>funcHAreaN</IDName>
    <InternalFunctionName>MP_HAreaN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>ObjectHandle</Name>
        <Type>handleMode</Type>
        <Desc>It is the object we want to calculate its area.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ObjAreaN</Name>
    <ChangedDate>2011:05:03T09:33:00</ChangedDate>
    <Version>1700</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>HObjAreaN, this VS Call is the same as HOBJArea() call but it gives more accurate result when the object is a polyline.</Description>
    <ShortDesc>Compute the area of a given object.</ShortDesc>
    <Example>area := HOBJAreaN(object);</Example>
    <ID>13196</ID>
    <IDName>funcObjAreaN</IDName>
    <InternalFunctionName>MP_ObjAreaN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>ObjectHandle </Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HPerimN</Name>
    <ChangedDate>2011:05:02T16:33:00</ChangedDate>
    <Version>1700</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Calculate a perimeter of an object. Same as HPerim(), but it gives more accurate result when the object is a polyline.</Description>
    <ShortDesc>Calculate a perimeter of an object.</ShortDesc>
    <Example>perimeter := HPerim(object);</Example>
    <ID>13197</ID>
    <IDName>funcHPerimN</IDName>
    <InternalFunctionName>MP_HPerimN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>ObjectHandle</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateRenderworksStyle</Name>
    <ChangedDate>2011:05:16T16:40:00</ChangedDate>
    <Version>1700</Version>
    <Category>View / Zoom</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <ShortDesc>Returns a handle to a RenderStyle.  The RenderStyle parameters can be set through get/set objectvariab</ShortDesc>
    <ID>13198</ID>
    <IDName>funcCreateRenderworksStyle</IDName>
    <InternalFunctionName>MP_CreateRenderworksStyle</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetStoryBoundChoiceStrings</Name>
    <ChangedDate>2011:05:19T14:56:00</ChangedDate>
    <Version>1700</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Gets the choice strings for a story bound control.</Description>
    <ShortDesc>Gets the choice strings for a story bound control.</ShortDesc>
    <SeeAlso>GetStoryBoundDataFromChoiceString, GetChoiceStringFromStoryBoundData</SeeAlso>
    <ID>13199</ID>
    <IDName>procGetStoryBoundChoiceStrings</IDName>
    <InternalFunctionName>MP_GetStoryBoundChoiceStrings</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>story</Name>
        <Type>handleMode</Type>
        <Desc>The story relative to which to get the strings. Nil gets a generic list of strings.</Desc>
      </Param>
      <Param>
        <Name>topBound</Name>
        <Type>boolMode</Type>
        <Desc>Whether to get the strings for a top bound or a bottom bound.</Desc>
      </Param>
      <Param>
        <Name>strings</Name>
        <Type>arrayVarMode</Type>
        <Desc>Returns the strings.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetStoryBoundDataFromChoiceString</Name>
    <ChangedDate>2011:05:19T15:09:00</ChangedDate>
    <Version>1700</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Gets the story bound data from a story bound choice string.</Description>
    <ShortDesc>Gets the story bound data from a story bound choice string.</ShortDesc>
    <SeeAlso>GetStoryBoundChoiceStrings, GetChoiceStringFromStoryBoundData</SeeAlso>
    <ID>13200</ID>
    <IDName>procGetStoryBoundDataFromChoiceString</IDName>
    <InternalFunctionName>MP_GetStoryBoundDataFromChoiceString</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>choiceString</Name>
        <Type>stringMode</Type>
        <Desc>The choice string that represents the story bound data.</Desc>
      </Param>
      <Param>
        <Name>boundType</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the bounding type: 0 - DefaultWallHeight; 1 - LayerZ; 2 - Story.</Desc>
      </Param>
      <Param>
        <Name>boundStory</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the story identified by 'boundType' = (2 - Story). If 'boundStory' = 0 then it is this story (the object's story); If 'boundStory' = 1 then it is the story above; If 'boundStory' = 2 then it is the story below.</Desc>
      </Param>
      <Param>
        <Name>layerLevelType</Name>
        <Type>strVarMode</Type>
        <Desc>Returns the layer type which defines this bound.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetChoiceStringFromStoryBoundData</Name>
    <ChangedDate>2011:05:19T15:09:00</ChangedDate>
    <Version>1700</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Gets the story bound choice string from story bound data.</Description>
    <ShortDesc>Gets the story bound choice string from story bound data.</ShortDesc>
    <SeeAlso>GetStoryBoundChoiceStrings, GetStoryBoundDataFromChoiceString</SeeAlso>
    <ID>13201</ID>
    <IDName>procGetChoiceStringFromStoryBoundData</IDName>
    <InternalFunctionName>MP_GetChoiceStringFromStoryBoundData</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>boundType</Name>
        <Type>intMode</Type>
        <Desc>Bounding type: 0 - DefaultWallHeight; 1 - LayerZ; 2 - Story.</Desc>
      </Param>
      <Param>
        <Name>boundStory</Name>
        <Type>intMode</Type>
        <Desc>The story identified by 'boundType' = (2 - Story). If 'boundStory' = 0 then it is this story (the object's story); If 'boundStory' = 1 then it is the story above; If 'boundStory' = 2 then it is the story below.</Desc>
      </Param>
      <Param>
        <Name>layerLevelType</Name>
        <Type>stringMode</Type>
        <Desc>The layer type which defines this bound.</Desc>
      </Param>
      <Param>
        <Name>choiceString</Name>
        <Type>strVarMode</Type>
        <Desc>Returns the choice string that represents the story bound data.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetStoryLayerInfo</Name>
    <ChangedDate>2011:06:30T15:01:00</ChangedDate>
    <Version>1700</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>Boolean</ReturnType>
    <Description>Returns information on the given story layer template</Description>
    <ShortDesc>Gets Story Layer Template info for a given story layer template.</ShortDesc>
    <Result>Boolean - TRUE if the story at given index was found, FALSE if no story was found at the given index.</Result>
    <ID>13202</ID>
    <IDName>funcGetStoryLayerInfo</IDName>
    <InternalFunctionName>MP_GetStoryLayerInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Index of story.</Desc>
      </Param>
      <Param>
        <Name>name</Name>
        <Type>strVarMode</Type>
        <Desc>Returns with Name of story layer template</Desc>
      </Param>
      <Param>
        <Name>scaleFactor</Name>
        <Type>rVarMode</Type>
        <Desc>Returns with Scale Factor of story layer template</Desc>
      </Param>
      <Param>
        <Name>layerLevelType</Name>
        <Type>strVarMode</Type>
        <Desc>Returns with Level Type of story layer template</Desc>
      </Param>
      <Param>
        <Name>eleveationOffset</Name>
        <Type>rVarMode</Type>
        <Desc>Returns with the Elevation Offset of story layer template</Desc>
      </Param>
      <Param>
        <Name>defaultWallHeight</Name>
        <Type>rVarMode</Type>
        <Desc>Returns with the Default Wall Height of story layer template</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPolylineArcMaxRadius</Name>
    <ChangedDate>2011:08:08T08:43:00</ChangedDate>
    <Version>1700</Version>
    <Category>Objects - Polys</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Return a maximum radius of the specified vertex of type arc or radius of a polyline. [[BR]]</Description>
    <ShortDesc>Return a maximum radius of the specified vertex of type arc or radius of a polyline. </ShortDesc>
    <Result>If the vertex type is not arc or radius it returns -1.</Result>
    <SeeAlso>GetPolylineVertex,SetPolylineVertex</SeeAlso>
    <ID>13203</ID>
    <IDName>funcGetPolylineArcMaxRadius</IDName>
    <InternalFunctionName>MP_GetPolylineArcMaxRadius</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hPoly</Name>
        <Type>handleMode</Type>
        <Desc>Handle of the poliline</Desc>
      </Param>
      <Param>
        <Name>vertexNum</Name>
        <Type>intMode</Type>
        <Desc>Index of vertex to be queried.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AlertSetAlwaysDoVal</Name>
    <ChangedDate>2017:07:05T17:11:00</ChangedDate>
    <Version>1700</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Procedure</Type>
    <Description>Set the 'always do' value for the AlertQuestionDontShowAgain and AlertInformDontShowAgain standard dialogs.</Description>
    <ShortDesc>Set the 'always do' value for the AlertQuestionDontShowAgain and AlertInformDontShowAgain standard dialogs. Set value of -1 to clear the value out.</ShortDesc>
    <SeeAlso>AlertQuestionDontShowAgain,AlertInformDontShowAgain</SeeAlso>
    <ID>13204</ID>
    <IDName>procAlertSetAlwaysDoVal</IDName>
    <InternalFunctionName>MP_AlertSetAlwaysDoVal</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>category</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>category name of the value.</Desc>
      </Param>
      <Param>
        <Name>item</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>item name in the category.</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>intMode</Type>
        <Desc>new value for the default. Pass in -1 for the entry to be cleared out and the dialog to show up again.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ImportSAT</Name>
    <ChangedDate>2017:04:14T10:40:00</ChangedDate>
    <Version>1800</Version>
    <Category>File I/O</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Import a SAT file.</Description>
    <ShortDesc>Import a SAT file.</ShortDesc>
    <Result>Return handle to the imported symbol, or to the first imported object (first selected).</Result>
    <ID>13209</ID>
    <IDName>funcImportSAT</IDName>
    <InternalFunctionName>MP_ImportSAT</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>filePath</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>full path to the file for import</Desc>
      </Param>
      <Param>
        <Name>doSingleSym</Name>
        <Type>boolMode</Type>
        <Desc>import the file as a symbol</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ExportSAT</Name>
    <ChangedDate>2017:04:14T10:40:00</ChangedDate>
    <Version>1800</Version>
    <Category>File I/O</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Export the selection into a SAT file.</Description>
    <ShortDesc>Export the selection into a SAT file.</ShortDesc>
    <Result>Return TRUE if successful.</Result>
    <ID>13210</ID>
    <IDName>funcExportSAT</IDName>
    <InternalFunctionName>MP_ExportSAT</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>filePath</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Output file path.</Desc>
      </Param>
      <Param>
        <Name>solidAsSurface</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLevelTypeName</Name>
    <ChangedDate>2011:09:28T16:58:00</ChangedDate>
    <Version>1800</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Returns the name of the nth Level Type in the file. For example, if 3 is passed in, it will return the name of the 3rd Level Type in the file.</Description>
    <ShortDesc>Returns the name of the indicated level type.</ShortDesc>
    <Result>The name of the indicated level type.</Result>
    <SeeAlso>GetNumLayerLevelTypes, SetLevelTypeName</SeeAlso>
    <Example>VAR[[BR]][[BR]]levelTypeName:STRING;[[BR]][[BR]]BEGIN[[BR]][[BR]]levelTypeName:=GetLayerLevelTypeName(2);</Example>
    <ID>13211</ID>
    <IDName>funcGetLevelTypeName</IDName>
    <InternalFunctionName>MP_GetLevelTypeName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the level type whose name is desired.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLevelTypeName</Name>
    <ChangedDate>2011:09:28T16:58:00</ChangedDate>
    <Version>1800</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the name of the nth Level Type in the file. For example, if 3 is passed in, it will set the name of the 3rd Level Type in the file.</Description>
    <ShortDesc>Sets the name of the indicated level type.</ShortDesc>
    <Result>Whether the setting of the name of the level type succeeded. It will fail if passed an invalid index. The name must not have more than 63 characters and must not be used by another level type in the file.</Result>
    <SeeAlso>GetNumLayerLevelTypes, GetLevelTypeName</SeeAlso>
    <Example>VAR[[BR]][[BR]]result : BOOLEAN;[[BR]][[BR]]BEGIN[[BR]][[BR]]result := SetLayerLevelTypeName(2, "Subfloor");</Example>
    <ID>13212</ID>
    <IDName>funcSetLevelTypeName</IDName>
    <InternalFunctionName>MP_SetLevelTypeName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the level type whose name is being set.</Desc>
      </Param>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>The name the indicated level type should be set to.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDefStoryLayerName</Name>
    <ChangedDate>2011:09:28T17:00:00</ChangedDate>
    <Version>1800</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the name of the nth Default Story Layer in the file. For example, if 3 is passed in, it will set the name of the 3rd Default Story Layer in the file.</Description>
    <ShortDesc>Sets the name of the indicated default story layer.</ShortDesc>
    <Result>Whether the setting of the name of the default story layer succeeded. It will fail if passed an invalid index. The name must not have more than 63 characters and must not be used by another default story layer in the file.</Result>
    <SeeAlso>GetNumStoryLayerTemplates, GetStoryLayerTemplateName</SeeAlso>
    <Example>VAR[[BR]][[BR]]result : BOOLEAN;[[BR]][[BR]]BEGIN[[BR]][[BR]]result := SetStoryLayerTemplateName(2, "Subfloor");</Example>
    <ID>13213</ID>
    <IDName>funcSetDefStoryLayerName</IDName>
    <InternalFunctionName>MP_SetDefStoryLayerName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the default story layer whose name should be set.</Desc>
      </Param>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>The name that the indicated default story layer should be set to.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateRenderBkg</Name>
    <ChangedDate>2020:02:25T13:50:00</ChangedDate>
    <Version>1800</Version>
    <Category>Objects - 2D</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <ShortDesc>This function returns a background of the chose type with a default shader record attached.  </ShortDesc>
    <ID>13214</ID>
    <IDName>funcCreateRenderBkg</IDName>
    <InternalFunctionName>MP_CreateRenderBkg</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>Background</Name>
        <Type>intMode</Type>
        <Desc>Background is the type of background the function should rerturn.        0 returns a background with no shader attached.    1 returns a cloud background    2 returns a one color background    3 returns a two color background    4 returns a physical sky background. </Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DetailGraphicOptDlg</Name>
    <ChangedDate>2012:03:14T16:45:00</ChangedDate>
    <Version>1800</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>This brings up the Graphic Options dialog for Detail-Callout Marker and Detail Callout objects.</Description>
    <ShortDesc>This brings up the Graphic Options dialog for Detail-Callout Marker and Detail Callout objects.</ShortDesc>
    <Result>Whether the user clicked on the OK button.</Result>
    <ID>13215</ID>
    <IDName>funcDetailGraphicOptDlg</IDName>
    <InternalFunctionName>MP_DetailGraphicOptDlg</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>Marker</Name>
        <Type>stringInOutMode</Type>
        <Desc>The name of the selected Marker symbol.</Desc>
      </Param>
      <Param>
        <Name>ShoulderLength</Name>
        <Type>realInOutMode</Type>
        <Desc>The shoulder length for the detail callout object.</Desc>
      </Param>
      <Param>
        <Name>TagPosIndex</Name>
        <Type>intInOutMode</Type>
        <Desc>The index of the selected Tag Position.</Desc>
      </Param>
      <Param>
        <Name>LeaderType</Name>
        <Type>longInOutMode</Type>
        <Desc>The linetype for the leader lines.</Desc>
      </Param>
      <Param>
        <Name>LeaderThick</Name>
        <Type>intInOutMode</Type>
        <Desc>The line thickness for the leader line.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnableLBHierDisplay</Name>
    <ChangedDate>2012:01:12T16:39:00</ChangedDate>
    <Version>1800</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>This function enables/disables the list browser to display items hierarchically. Calling this along will not change the display. The hierarchical display column must be set.</Description>
    <ShortDesc>This function enables/disables the list browser to display items hierarchically.</ShortDesc>
    <SeeAlso>SetLBHierDispColumn</SeeAlso>
    <ID>13216</ID>
    <IDName>procEnableLBHierDisplay</IDName>
    <InternalFunctionName>MP_EnableLBHierDisplay</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The id of the dialog containing the list browser.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The id of the list browser.</Desc>
      </Param>
      <Param>
        <Name>enableHierDisplay</Name>
        <Type>boolMode</Type>
        <Desc>Whether to enable hierarchical display in the list browser.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBHierDispColumn</Name>
    <ChangedDate>2012:01:12T16:38:00</ChangedDate>
    <Version>1800</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>This function sets which column to display hierarchically in a list browser. This will only work on a text column. Items with dashes in the string value for the hierarchical column will be displayed hierarchically. This will work on items already entered. When new items are entered, this will need to be called again.</Description>
    <ShortDesc>This function sets which column to display hierarchically in a list browser.</ShortDesc>
    <SeeAlso>EnableLBHierDisplay</SeeAlso>
    <ID>13217</ID>
    <IDName>procSetLBHierDispColumn</IDName>
    <InternalFunctionName>MP_SetLBHierDispColumn</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The id of the dialog.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The id of the list browser.</Desc>
      </Param>
      <Param>
        <Name>columnID</Name>
        <Type>intMode</Type>
        <Desc>The index of the hierarchical column.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HierLBItemOpened</Name>
    <ChangedDate>2012:04:25T16:06:00</ChangedDate>
    <Version>1800</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>This function is called when the user clicks on a container item to open it. It wil redisplay items inside the container that were hidden (unless they are inside a lower level container that is closed), but only with the hierarchical name set. If other data needs to be redisplayed, it will need to be done with other functions. numbRedisplItems indicates how many non-container items were redisplayed.</Description>
    <ShortDesc>This function is called when the user clicks on a container item to open it. It wil redisplay items inside the container that were hidden, unless they are insided a lower level container that is closed.</ShortDesc>
    <SeeAlso>HierLBItemClosed</SeeAlso>
    <ID>13218</ID>
    <IDName>procHierLBItemOpened</IDName>
    <InternalFunctionName>MP_HierLBItemOpened</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The id of the dialog containing the list browser.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The id of the list browser.</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the item that was clicked on.</Desc>
      </Param>
      <Param>
        <Name>recursive</Name>
        <Type>boolMode</Type>
        <Desc>Indicates whether any subcontainers should also be opened.</Desc>
      </Param>
      <Param>
        <Name>numbRedisplItems</Name>
        <Type>intVarMode</Type>
        <Desc>The number of items that were redisplayed.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HierLBItemClosed</Name>
    <ChangedDate>2012:04:25T16:11:00</ChangedDate>
    <Version>1800</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>This function is called when the user clicks on a container item to close it. It will remove items that are inside the container being closed.</Description>
    <ShortDesc>This function is called when the user clicks on a container item to close it. It will remove items that are inside the container being closed.</ShortDesc>
    <SeeAlso>HierLBItemOpened</SeeAlso>
    <ID>13219</ID>
    <IDName>procHierLBItemClosed</IDName>
    <InternalFunctionName>MP_HierLBItemClosed</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The id of the dialog containing the list browser.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The id of the list browser.</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the item that was clicked on.</Desc>
      </Param>
      <Param>
        <Name>recursive</Name>
        <Type>boolMode</Type>
        <Desc>Whether to also close any containers inside the container that was clicked on.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetToolHelpMessage</Name>
    <ChangedDate>2012:03:06T15:11:00</ChangedDate>
    <Version>1800</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Sets the Tool Bar Help Text by new standard - Tool Name[: Tool Mode][. Brief usage advice.].</Description>
    <ShortDesc>Sets the Tool Bar Help Text by new standard - Tool Name[: Tool Mode][. Brief usage advice.].</ShortDesc>
    <ID>13220</ID>
    <IDName>procSetToolHelpMessage</IDName>
    <InternalFunctionName>MP_SetToolHelpMessage</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>modeText</Name>
        <Type>stringMode</Type>
        <Desc>The text that will be showed like as a name of the mode.</Desc>
      </Param>
      <Param>
        <Name>descriptionText</Name>
        <Type>stringMode</Type>
        <Desc>The text that will be showed like as an advice text.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BeginModeButtonsText</Name>
    <ChangedDate>2012:03:06T15:03:00</ChangedDate>
    <Version>1800</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Creates a mode bar buttons help text.</Description>
    <ShortDesc>Creates a mode bar buttons help text.</ShortDesc>
    <SeeAlso>EndModeButtonsText,SetModeButtonText</SeeAlso>
    <Example>BeginModeButtonsText;[[BR]]SetModeButtonText( 'Mode1', 1 );[[BR]]SetModeButtonText( 'Mode2', 0 );[[BR]]EndModeButtonsText;</Example>
    <ID>13221</ID>
    <IDName>procBeginModeButtonsText</IDName>
    <InternalFunctionName>MP_BeginModeButtonsText</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>EndModeButtonsText</Name>
    <ChangedDate>2012:03:06T15:02:00</ChangedDate>
    <Version>1800</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Ends the creation of a mode bar buttons help text.</Description>
    <ShortDesc>Ends the creation of a mode bar buttons help text.</ShortDesc>
    <SeeAlso>BeginModeButtonsText,SetModeButtonText</SeeAlso>
    <Example>BeginModeButtonsText;[[BR]]SetModeButtonText( 'Mode1', 1 );[[BR]]SetModeButtonText( 'Mode2', 0 );[[BR]]EndModeButtonsText;</Example>
    <ID>13222</ID>
    <IDName>procEndModeButtonsText</IDName>
    <InternalFunctionName>MP_EndModeButtonsText</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>SetModeButtonText</Name>
    <ChangedDate>2012:03:06T15:02:00</ChangedDate>
    <Version>1800</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Sets a mode bar button help text.</Description>
    <ShortDesc>Sets a mode bar button help text.</ShortDesc>
    <SeeAlso>BeginModeButtonsText,EndModeButtonsText</SeeAlso>
    <Example>BeginModeButtonsText;[[BR]]SetModeButtonText( 'Mode1', 1 );[[BR]]SetModeButtonText( 'Mode2', 0 );[[BR]]EndModeButtonsText;</Example>
    <ID>13223</ID>
    <IDName>procSetModeButtonText</IDName>
    <InternalFunctionName>MP_SetModeButtonText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>modeName</Name>
        <Type>stringMode</Type>
        <Desc>The name of the mode.</Desc>
      </Param>
      <Param>
        <Name>modeType</Name>
        <Type>intMode</Type>
        <Desc>The type of the mode.&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
Types:&#xD;
&#xD;
&#xD;
&#xD;
        RadioMode = 0,&#xD;
&#xD;
&#xD;
&#xD;
        ButtonMode = 1,&#xD;
&#xD;
&#xD;
&#xD;
        PrefButtonMode = 2,&#xD;
&#xD;
&#xD;
&#xD;
        CheckMode = 3,&#xD;
&#xD;
&#xD;
&#xD;
        EditTextMode = 4,&#xD;
&#xD;
&#xD;
&#xD;
        PullDownMode = 5</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateStyledStatic</Name>
    <ChangedDate>2018:03:05T14:59:00</ChangedDate>
    <Version>1800</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Creates a new static text field control in a dialog layout. Text will have the indicated style.[[BR]][[BR]]To allow the control to size automatically to the text width, pass -1 as the width parameter of the control.[[BR]][[BR]]0 = eStaticTextTypeRegular[[BR]]1 = eStaticTextTypeCaption[[BR]]2 = eStaticTextTypeBold,	[[BR]]3 = eStaticTextTypeReduced[[BR]][[BR]]</Description>
    <ShortDesc>Creates a static text with one of a set of predefined text styles.</ShortDesc>
    <Result>Boolean indicating the control was created successfully.</Result>
    <SeeAlso>CreateStaticText,GetDlgCtrlWidthStdCh</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]   dialog1 :INTEGER;[[BR]]   result  :INTEGER;[[BR]]PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]END;[[BR]]BEGIN[[BR]]   dialog1 := CreateLayout('Example Dialog', FALSE, 'OK', 'Cancel');[[BR]]   CreateEditText(dialog1, 4, 'default text', 16);[[BR]]   CreateStyledStatic(dialog1, 5, 'default text', 16, 2);[[BR]]   SetFirstLayoutItem(dialog1, 4);[[BR]]   SetBelowItem(dialog1, 4, 5, 0, 0);[[BR]]   result := RunLayoutDialog(dialog1, Dialog_Handler);[[BR]]END;[[BR]]RUN(Example);[[BR]]</Example>
    <ID>13224</ID>
    <IDName>procCreateStyledStatic</IDName>
    <InternalFunctionName>MP_CreateStyledStatic</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>text</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>intMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>intMode</Type>
        <Desc>Type of this static text control. One of:        0 = eStaticTextTypeRegular    1 = eStaticTextTypeCaption    2 = eStaticTextTypeBold,	    3 = eStaticTextTypeReduced,    101-116 = Custom size, normal    201-216 = Custom size, bold                        </Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateCustThumbPopup</Name>
    <ChangedDate>2012:03:07T17:13:00</ChangedDate>
    <Version>1800</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a custom thumbnail popup that can be populated with previews of objects in Vectorworks. </Description>
    <ShortDesc>Creates a custom thumbnail popup that can be populated with previews of objects in Vectorworks</ShortDesc>
    <ID>13225</ID>
    <IDName>procCreateCustThumbPopup</IDName>
    <InternalFunctionName>MP_CreateCustThumbPopup</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The dialog identifier given by the command to create the dialog.</Desc>
      </Param>
      <Param>
        <Name>controlID</Name>
        <Type>longMode</Type>
        <Desc>The identifier that should be assigned to the control.</Desc>
      </Param>
      <Param>
        <Name>sizeType</Name>
        <Type>intMode</Type>
        <Desc>The size type of the control</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBNumericItemInfo</Name>
    <ChangedDate>2012:03:07T16:37:00</ChangedDate>
    <Version>1800</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets numeric data for item.</Description>
    <ShortDesc>Sets numeric data for item.</ShortDesc>
    <ID>13226</ID>
    <IDName>funcSetLBNumericItemInfo</IDName>
    <InternalFunctionName>MP_SetLBNumericItemInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>ID of the dialog that contains the list browser.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>ID of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the item index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the subitem index </Desc>
      </Param>
      <Param>
        <Name>itemString</Name>
        <Type>stringMode</Type>
        <Desc>the item text</Desc>
      </Param>
      <Param>
        <Name>itemNumVal</Name>
        <Type>realMode</Type>
        <Desc>the item numeric value</Desc>
      </Param>
      <Param>
        <Name>imageIndex</Name>
        <Type>intMode</Type>
        <Desc>the item image list index</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PenPatN</Name>
    <ChangedDate>2012:03:23T16:03:00</ChangedDate>
    <Version>1800</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the active pen pattern (line style) for the document. [[BR]][[BR]]If [[p:1]] is in the range 0 to 71 the linestyle will be set to the corresponding fill pattern. A negative value, will set the linestyle to the line type resource whose index is the negative of the value.</Description>
    <ShortDesc>Sets the active pen pattern / linestyle.</ShortDesc>
    <SeeAlso>FPenPatN</SeeAlso>
    <Example>PenPat(25);[[BR]]{ uses fill pattern 25 as the active pen pattern }[[BR]][[BR]]PenPat(-10);[[BR]]{ sets the line type with the index of 10 as the active pen pattern }</Example>
    <ID>13227</ID>
    <IDName>procPenPatN</IDName>
    <InternalFunctionName>MP_PenPatN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>patNumber</Name>
        <Type>longMode</Type>
        <Desc>Pattern/linestyle ID value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>FPenPatN</Name>
    <ChangedDate>2012:03:23T16:04:00</ChangedDate>
    <Version>1800</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the active pen pattern setting.</Description>
    <ShortDesc>Returns the active pen pattern setting.</ShortDesc>
    <SeeAlso>PenPatN</SeeAlso>
    <ID>13228</ID>
    <IDName>funcFPenPatN</IDName>
    <InternalFunctionName>MP_FPenPatN</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetLSN</Name>
    <ChangedDate>2012:03:23T16:07:00</ChangedDate>
    <Version>1800</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the line style of the referenced object.</Description>
    <ShortDesc>Returns the line style of the referenced object.</ShortDesc>
    <SeeAlso>SetLSN</SeeAlso>
    <ID>13229</ID>
    <IDName>funcGetLSN</IDName>
    <InternalFunctionName>MP_GetLSN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLSN</Name>
    <ChangedDate>2012:03:23T16:10:00</ChangedDate>
    <Version>1800</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the linestyle of the referenced object.[[BR]][[BR]]If the value is in the range 0 to 71, the specified fill pattern is applied as the linestyle; a negative value will apply the line type whose index is the negative of the value.</Description>
    <ShortDesc>Sets the linestyle of the referenced object.</ShortDesc>
    <SeeAlso>GetLSN</SeeAlso>
    <ID>13230</ID>
    <IDName>procSetLSN</IDName>
    <InternalFunctionName>MP_SetLSN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>ls</Name>
        <Type>longMode</Type>
        <Desc>Linestyle to apply to object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClLSN</Name>
    <ChangedDate>2012:03:23T16:14:00</ChangedDate>
    <Version>1800</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Returns the line style of the specified class.[[BR]]</Description>
    <ShortDesc>Returns the line style of a specified class.</ShortDesc>
    <SeeAlso>SetClLSN</SeeAlso>
    <ID>13231</ID>
    <IDName>funcGetClLSN</IDName>
    <InternalFunctionName>MP_GetClLSN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClLSN</Name>
    <ChangedDate>2012:03:23T16:18:00</ChangedDate>
    <Version>1800</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Sets the line style of the specified class.</Description>
    <ShortDesc>Sets the line style of a specified class.</ShortDesc>
    <SeeAlso>GetClLSN</SeeAlso>
    <ID>13232</ID>
    <IDName>procSetClLSN</IDName>
    <InternalFunctionName>MP_SetClLSN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
      <Param>
        <Name>lineStyle</Name>
        <Type>longMode</Type>
        <Desc>Line style index value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EditObjectSpecial</Name>
    <ChangedDate>2012:03:30T09:40:00</ChangedDate>
    <Version>1800</Version>
    <Category>Object Editing</Category>
    <Type>Procedure</Type>
    <Description>Edit the specified object.</Description>
    <ShortDesc>Edit the specified object.</ShortDesc>
    <ID>13233</ID>
    <IDName>procEditObjectSpecial</IDName>
    <InternalFunctionName>MP_EditObjectSpecial</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>The object to edit.</Desc>
      </Param>
      <Param>
        <Name>editMode</Name>
        <Type>intMode</Type>
        <Desc>The edit mode: 0-Default; 2-Properties; 3-Reshape; 4-Edit group like;</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsLBDisplayHier</Name>
    <ChangedDate>2012:04:25T15:52:00</ChangedDate>
    <Version>1800</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns whether the indicated list browser is set to display items hierarchically. One column in the list browser can be set to display names heirarchically.</Description>
    <ShortDesc>Returns whether the indicated list browser is set to display items hierarchically.</ShortDesc>
    <SeeAlso>EnableLBHierDisplay</SeeAlso>
    <ID>13234</ID>
    <IDName>funcIsLBDisplayHier</IDName>
    <InternalFunctionName>MP_IsLBDisplayHier</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The id of the dialog containing the list browser.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The id of the list browser.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HierLBItemIsClosed</Name>
    <ChangedDate>2012:04:25T17:27:00</ChangedDate>
    <Version>1800</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns whether the indicated container item is closed.</Description>
    <ShortDesc>Returns whether the indicated container item is closed.</ShortDesc>
    <ID>13235</ID>
    <IDName>funcHierLBItemIsClosed</IDName>
    <InternalFunctionName>MP_HierLBItemIsClosed</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The id of the dialog.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The id of the list browser.</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the item.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HierLBItemIsContain</Name>
    <ChangedDate>2012:04:25T16:18:00</ChangedDate>
    <Version>1800</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns whether the indicated item is a container item.</Description>
    <ShortDesc>Returns whether the indicated item is a container item.</ShortDesc>
    <Result>Whether the indicated item is a container item.</Result>
    <SeeAlso>HierLBItemIsClosed</SeeAlso>
    <ID>13236</ID>
    <IDName>funcHierLBItemIsContain</IDName>
    <InternalFunctionName>MP_HierLBItemIsContain</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The id of the dialog containing the list browser.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The ID of the list browser.</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the item.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBItemOrigName</Name>
    <ChangedDate>2012:04:25T16:23:00</ChangedDate>
    <Version>1800</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Returns the original name for a list browser item when hierarchical display is on. If the item is a container item, it will return an empty string.</Description>
    <ShortDesc>Returns the original name for a list browser item when hierarchical display is on. If the item is a container item, it will return an empty string.</ShortDesc>
    <Result>The original name of the indicated item.</Result>
    <SeeAlso>AddLBOriginalName</SeeAlso>
    <ID>13237</ID>
    <IDName>funcGetLBItemOrigName</IDName>
    <InternalFunctionName>MP_GetLBItemOrigName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The id of the dialog.</Desc>
      </Param>
      <Param>
        <Name>compenentID</Name>
        <Type>longMode</Type>
        <Desc>The id of the list browser.</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the item for which the original name is returned.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddLBOriginalName</Name>
    <ChangedDate>2012:04:25T16:26:00</ChangedDate>
    <Version>1800</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>This function is called when hierarchical display is on and a new item is added to the list browser.</Description>
    <ShortDesc>This function is called when hierarchical display is on and a new item is added to the list browser.</ShortDesc>
    <ID>13238</ID>
    <IDName>procAddLBOriginalName</IDName>
    <InternalFunctionName>MP_AddLBOriginalName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The id of the dialog.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The id of the list browser.</Desc>
      </Param>
      <Param>
        <Name>originalName</Name>
        <Type>stringMode</Type>
        <Desc>The original name of the new item being added to the list browser.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBOrigNameClLevel</Name>
    <ChangedDate>2012:04:25T16:31:00</ChangedDate>
    <Version>1800</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>This function returns the close levels for an original name in the list browser. If the item for the name is displayed, then all the closeLevels will be false.</Description>
    <ShortDesc>This function returns the close levels for an original name in the list browser.</ShortDesc>
    <ID>13239</ID>
    <IDName>procGetLBOrigNameClLevel</IDName>
    <InternalFunctionName>MP_GetLBOrigNameClLevel</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The id of the dialog.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The id of the list browser.</Desc>
      </Param>
      <Param>
        <Name>originalName</Name>
        <Type>stringMode</Type>
        <Desc>The original name of the item.</Desc>
      </Param>
      <Param>
        <Name>level1Closed</Name>
        <Type>boolVarMode</Type>
        <Desc>Whether the item's level 1 container is closed.</Desc>
      </Param>
      <Param>
        <Name>level2Closed</Name>
        <Type>boolVarMode</Type>
        <Desc>Whether the item's level 2 container is closed.</Desc>
      </Param>
      <Param>
        <Name>level3Closed</Name>
        <Type>boolVarMode</Type>
        <Desc>Whether the item's level 3 container is closed.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBOrigNameClLevel</Name>
    <ChangedDate>2012:04:25T16:37:00</ChangedDate>
    <Version>1800</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>This function sets the closed levels for an original item in the list browser. The item will be hidden and the proper container closed.</Description>
    <ShortDesc>This function sets the closed levels for an original item in the list browser. The item will be hidden and the proper container closed.</ShortDesc>
    <ID>13240</ID>
    <IDName>procSetLBOrigNameClLevel</IDName>
    <InternalFunctionName>MP_SetLBOrigNameClLevel</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The id of the dialog.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The id of the list browser.</Desc>
      </Param>
      <Param>
        <Name>originalName</Name>
        <Type>stringMode</Type>
        <Desc>The original name of the item.</Desc>
      </Param>
      <Param>
        <Name>level1Closed</Name>
        <Type>boolMode</Type>
        <Desc>Whether the item's level 1 container is closed.</Desc>
      </Param>
      <Param>
        <Name>level2Closed</Name>
        <Type>boolMode</Type>
        <Desc>Whether the item's level 2 container is closed.</Desc>
      </Param>
      <Param>
        <Name>level3Closed</Name>
        <Type>boolMode</Type>
        <Desc>Whether the item's level 3 container is closed.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CollapseAllLBItems</Name>
    <ChangedDate>2012:04:25T16:42:00</ChangedDate>
    <Version>1800</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>This function is called when a list browser is in hierarchical display mode, and it removes all items that are not at the top level and closes all container items.</Description>
    <ShortDesc>This function is called when a list browser is in hierarchical display mode, and it removes all items that are not at the top level and closes all container items.</ShortDesc>
    <ID>13241</ID>
    <IDName>procCollapseAllLBItems</IDName>
    <InternalFunctionName>MP_CollapseAllLBItems</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The id of the dialog.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The id of the list browser.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ExpandAllLBItems</Name>
    <ChangedDate>2012:04:25T16:48:00</ChangedDate>
    <Version>1800</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>This function is called when a list browser is in hierarchical display mode, and it redisplays all items that were hidden and opens all the containers.</Description>
    <ShortDesc>This function is called when a list browser is in hierarchical display mode, and it redisplays all items that were hidden and opens all the containers.</ShortDesc>
    <ID>13242</ID>
    <IDName>procExpandAllLBItems</IDName>
    <InternalFunctionName>MP_ExpandAllLBItems</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The id of the dialog.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>The id of the list browser.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BuildResourceListN</Name>
    <ChangedDate>2012:04:30T13:49:00</ChangedDate>
    <Version>1800</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Build a resource list from the specified file.</Description>
    <ShortDesc>Build a resource list from the specified file.</ShortDesc>
    <SeeAlso>BuildResourceList</SeeAlso>
    <ID>13243</ID>
    <IDName>procBuildResourceListN</IDName>
    <InternalFunctionName>MP_BuildResourceListN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>type</Name>
        <Type>intMode</Type>
        <Desc>the type of resource to put in the list</Desc>
      </Param>
      <Param>
        <Name>fullPath</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The path to the file that provides the resources.</Desc>
      </Param>
      <Param>
        <Name>numItems</Name>
        <Type>lngVarMode</Type>
        <Desc>the number of items in the list built</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>TrimNurbsSurface</Name>
    <ChangedDate>2012:05:18T14:38:00</ChangedDate>
    <Version>1800</Version>
    <Category>Objects - NURBS</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Trims the NURBS surface by a given NURBS curve.</Description>
    <ShortDesc>Trims the NURBS surface by a given NURBS curve.</ShortDesc>
    <Result>Returns TRUE if trimmed the surface, otherwise returns FALSE.</Result>
    <SeeAlso>CreateNurbsSurface,CreateNurbsCurve</SeeAlso>
    <Comments>It returns true if the curve is attached to the surface as trimmed curve.</Comments>
    <Example>PROCEDURE Example;[[BR]][[BR]]VAR[[BR]]surfaceH, curveH :HANDLE;[[BR]]bFlag :BOOLEAN;[[BR]][[BR]]BEGIN[[BR]]surfaceH := CreateNurbsSurface(3, 3, 1, 1);[[BR]]NurbsSetPt3D(h, 0, 0, 0, 0, 0);[[BR]]NurbsSetPt3D(h, 0, 1, 1, 0, 0);[[BR]]NurbsSetPt3D(h, 0, 2, 2, 0, 0);[[BR]]NurbsSetPt3D(h, 1, 0, 0, 1, 0);[[BR]]NurbsSetPt3D(h, 1, 1, 1, 1, 1);[[BR]]NurbsSetPt3D(h, 1, 2, 2, 1, 0);[[BR]]NurbsSetPt3D(h, 2, 0, 0, 2, 0);[[BR]]NurbsSetPt3D(h, 2, 1, 1, 2, 0);[[BR]]NurbsSetPt3D(h, 2, 2, 2, 2, 0);[[BR]][[BR]]curveH := CreateNurbsCurve(0, 0, 0, TRUE, 2);[[BR]]AddVertex3D(nC, 1, 1, 0);[[BR]]AddVertex3D(nC, 2, 0, 0);[[BR]][[BR]]bFlag := TrimNurbsSurface(surfaceH, curveH);[[BR]]END;[[BR]][[BR]]RUN(Example);</Example>
    <ID>13244</ID>
    <IDName>funcTrimNurbsSurface</IDName>
    <InternalFunctionName>MP_TrimNurbsSurface</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>surfaceHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a NURBS surface to trim.</Desc>
      </Param>
      <Param>
        <Name>curveHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a NURBS curve for trimming.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLayerTransparency</Name>
    <ChangedDate>2012:06:18T15:14:00</ChangedDate>
    <Version>1800</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Return the tranparency of the current layer.</Description>
    <ShortDesc>Return the tranparency of the current layer.</ShortDesc>
    <SeeAlso>SetLayerTransparency</SeeAlso>
    <ID>13245</ID>
    <IDName>funcGetLayerTransparency</IDName>
    <InternalFunctionName>MP_GetLayerTransparency</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>HSetLayerTransp</Name>
    <ChangedDate>2012:06:18T15:25:00</ChangedDate>
    <Version>1800</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Set the transparency of the specified layer.</Description>
    <ShortDesc>Set the transparency of the specified layer.</ShortDesc>
    <SeeAlso>SetLayerTransparency, HGetLayerTransp</SeeAlso>
    <ID>13246</ID>
    <IDName>procHSetLayerTransp</IDName>
    <InternalFunctionName>MP_HSetLayerTransp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hLayer</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the layer.</Desc>
      </Param>
      <Param>
        <Name>transparency</Name>
        <Type>realMode</Type>
        <Desc>The transparency for the layer. Value between 0.0 and 100.0</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>HGetLayerTransp</Name>
    <ChangedDate>2012:06:18T15:25:00</ChangedDate>
    <Version>1800</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Get the transparency of the spcified layer.</Description>
    <ShortDesc>Get the transparency of the spcified layer.</ShortDesc>
    <SeeAlso>HSetLayerTransp, GetLayerTransparency</SeeAlso>
    <ID>13247</ID>
    <IDName>funcHGetLayerTransp</IDName>
    <InternalFunctionName>MP_HGetLayerTransp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hLayer</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the layer.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SyncMatrixToBound</Name>
    <ChangedDate>2012:08:08T13:22:00</ChangedDate>
    <Version>1800</Version>
    <Category>Objects - Architectural</Category>
    <Type>Procedure</Type>
    <Description>Synchronize the object's matrix with the specified story bound.</Description>
    <ShortDesc>Synchronize the object's matrix with the specified story bound.</ShortDesc>
    <ID>13248</ID>
    <IDName>procSyncMatrixToBound</IDName>
    <InternalFunctionName>MP_SyncMatrixToBound</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object handle.</Desc>
      </Param>
      <Param>
        <Name>BoundID</Name>
        <Type>intMode</Type>
        <Desc>The identifier of the story bound.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsWSImg</Name>
    <ChangedDate>2012:09:24T10:22:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determines if worksheet cell is set to display an image.</Description>
    <ShortDesc>Determines if worksheet cell is set to display an image.</ShortDesc>
    <Result>A BOOLEAN value indicating whether the cell contains an image or not.</Result>
    <ID>13249</ID>
    <IDName>funcIsWSImg</IDName>
    <InternalFunctionName>MP_IsWSImg</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>The cell row.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>The cell column.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSImgType</Name>
    <ChangedDate>2012:09:24T10:26:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Gets the specified worksheet cell's image type.</Description>
    <ShortDesc>Gets the specified worksheet cell's image type.</ShortDesc>
    <Comments>Thumbnail image type     = 0,[[BR]]2D Attributes image type = 1.</Comments>
    <ID>13250</ID>
    <IDName>procGetWSImgType</IDName>
    <InternalFunctionName>MP_GetWSImgType</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>The cell row.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>The cell column.</Desc>
      </Param>
      <Param>
        <Name>type</Name>
        <Type>intVarMode</Type>
        <Desc>The image type.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSImgSizeType</Name>
    <ChangedDate>2012:09:24T10:29:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the worksheet cell's image size type.</Description>
    <ShortDesc>Gets the worksheet cell's image size type.</ShortDesc>
    <Result>INTEGER specifying the cell image size type.</Result>
    <Comments>AutoSize size type = 0,[[BR]]Fixed size type      = 1,[[BR]]Scale size type     = 2</Comments>
    <ID>13251</ID>
    <IDName>funcGetWSImgSizeType</IDName>
    <InternalFunctionName>MP_GetWSImgSizeType</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>The cell row.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>The cell column.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSImgSize</Name>
    <ChangedDate>2012:09:24T10:41:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Gets the specified worksheet cell's image size.</Description>
    <ShortDesc>Gets the specified worksheet cell's image size.</ShortDesc>
    <ID>13252</ID>
    <IDName>procGetWSImgSize</IDName>
    <InternalFunctionName>MP_GetWSImgSize</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>The cell row.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>The cell column.</Desc>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>intVarMode</Type>
        <Desc>The image height.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>intVarMode</Type>
        <Desc>The image width.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSImgAngle</Name>
    <ChangedDate>2012:09:24T10:42:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Gets the specified worksheet cell's image angle.</Description>
    <ShortDesc>Gets the specified worksheet cell's image angle.</ShortDesc>
    <ID>13253</ID>
    <IDName>procGetWSImgAngle</IDName>
    <InternalFunctionName>MP_GetWSImgAngle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>The cell row.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>The cell column.</Desc>
      </Param>
      <Param>
        <Name>NewParam</Name>
        <Type>rVarMode</Type>
        <Desc>The image angle.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSImgView</Name>
    <ChangedDate>2012:09:24T10:44:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Gets the specified worksheet cell's image view.</Description>
    <ShortDesc>Gets the specified worksheet cell's image view.</ShortDesc>
    <ID>13254</ID>
    <IDName>procGetWSImgView</IDName>
    <InternalFunctionName>MP_GetWSImgView</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>The cell row.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>The cell column.</Desc>
      </Param>
      <Param>
        <Name>view</Name>
        <Type>intVarMode</Type>
        <Desc>The image view.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSImgRenderMode</Name>
    <ChangedDate>2012:09:24T10:46:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Gets the specified worksheet cell's image render mode</Description>
    <ShortDesc>Gets the specified worksheet cell's image render mode.</ShortDesc>
    <Comments>Wire Frame render mode  = 0,[[BR]]Hidden Line render mode = 6,[[BR]]OpenGL render mode       = 11.</Comments>
    <ID>13255</ID>
    <IDName>procGetWSImgRenderMode</IDName>
    <InternalFunctionName>MP_GetWSImgRenderMode</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>The cell row.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>The cell column.</Desc>
      </Param>
      <Param>
        <Name>renderMode</Name>
        <Type>intVarMode</Type>
        <Desc>The image render mode.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSImgUseLayScale</Name>
    <ChangedDate>2012:09:24T10:48:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determines if the image size type is Layer Scale.</Description>
    <ShortDesc>Determines if the image size type is Layer Scale.</ShortDesc>
    <Result>BOOLEAN indicating if state of cell's use layer scale.</Result>
    <ID>13256</ID>
    <IDName>funcGetWSImgUseLayScale</IDName>
    <InternalFunctionName>MP_GetWSImgUseLayScale</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>The cell row.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>The cell column.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSImgScale</Name>
    <ChangedDate>2012:09:24T10:50:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Gets the worksheet cell's image scale.</Description>
    <ShortDesc>Gets the worksheet cell's image scale.</ShortDesc>
    <ID>13257</ID>
    <IDName>procGetWSImgScale</IDName>
    <InternalFunctionName>MP_GetWSImgScale</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>The cell row.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>The cell column.</Desc>
      </Param>
      <Param>
        <Name>scale</Name>
        <Type>rVarMode</Type>
        <Desc>The image scale.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSImgUseObjectImg</Name>
    <ChangedDate>2012:09:24T11:18:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Determines if cell uses object image.</Description>
    <ShortDesc>Determines if cell uses object image.</ShortDesc>
    <Result>BOOLEAN indicating state of cell's use object image.</Result>
    <ID>13258</ID>
    <IDName>funcGetWSImgUseObjectImg</IDName>
    <InternalFunctionName>MP_GetWSImgUseObjectImg</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>The cell row.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>The cell column.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSImgMarginSize</Name>
    <ChangedDate>2012:09:24T10:53:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Gets the worksheet cell's image margin size.</Description>
    <ShortDesc>Gets the worksheet cell's image margin size.</ShortDesc>
    <ID>13259</ID>
    <IDName>procGetWSImgMarginSize</IDName>
    <InternalFunctionName>MP_GetWSImgMarginSize</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>The cell row.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>The cell column.</Desc>
      </Param>
      <Param>
        <Name>marginSize</Name>
        <Type>intVarMode</Type>
        <Desc>The image margin size.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSImgType</Name>
    <ChangedDate>2012:09:24T15:06:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the worksheet cells' image type.</Description>
    <ShortDesc>Sets the worksheet cells' image type.</ShortDesc>
    <ID>13260</ID>
    <IDName>procSetWSImgType</IDName>
    <InternalFunctionName>MP_SetWSImgType</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of cell range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of cell range.</Desc>
      </Param>
      <Param>
        <Name>type</Name>
        <Type>intMode</Type>
        <Desc>The image type.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSImgSizeType</Name>
    <ChangedDate>2012:09:24T10:59:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets specified image size type in specified worksheet cells.</Description>
    <ShortDesc>Sets specified image size type in specified worksheet cells.</ShortDesc>
    <ID>13261</ID>
    <IDName>procSetWSImgSizeType</IDName>
    <InternalFunctionName>MP_SetWSImgSizeType</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of cell range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of cell range.</Desc>
      </Param>
      <Param>
        <Name>imageSizeType</Name>
        <Type>intMode</Type>
        <Desc>The image size type.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSImgSize</Name>
    <ChangedDate>2012:09:24T11:00:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets specified image size in specified worksheet cells.</Description>
    <ShortDesc>Sets specified image size in specified worksheet cells.</ShortDesc>
    <ID>13262</ID>
    <IDName>procSetWSImgSize</IDName>
    <InternalFunctionName>MP_SetWSImgSize</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of cell range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of cell range.</Desc>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>intMode</Type>
        <Desc>The image height.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>intMode</Type>
        <Desc>The image width.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSImgAngle</Name>
    <ChangedDate>2012:09:24T11:02:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets specified image angle in specified worksheet cells.</Description>
    <ShortDesc>Sets specified image angle in specified worksheet cells.</ShortDesc>
    <ID>13263</ID>
    <IDName>procSetWSImgAngle</IDName>
    <InternalFunctionName>MP_SetWSImgAngle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of cell range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of cell range.</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>realMode</Type>
        <Desc>The image angle.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSImgView</Name>
    <ChangedDate>2012:09:24T11:04:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets specified image view in specified worksheet cells.</Description>
    <ShortDesc>Sets specified image view in specified worksheet cells.</ShortDesc>
    <ID>13264</ID>
    <IDName>procSetWSImgView</IDName>
    <InternalFunctionName>MP_SetWSImgView</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of cell range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of cell range.</Desc>
      </Param>
      <Param>
        <Name>view</Name>
        <Type>intMode</Type>
        <Desc>The image view.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSImgRenderMode</Name>
    <ChangedDate>2012:09:24T11:06:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets specified image render mode in specified worksheet cells.</Description>
    <ShortDesc>Sets specified image render mode in specified worksheet cells.</ShortDesc>
    <ID>13265</ID>
    <IDName>procSetWSImgRenderMode</IDName>
    <InternalFunctionName>MP_SetWSImgRenderMode</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of cell range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of cell range.</Desc>
      </Param>
      <Param>
        <Name>renderMode</Name>
        <Type>intMode</Type>
        <Desc>The image render mode.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSImgUseLayScale</Name>
    <ChangedDate>2012:09:24T11:10:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the worksheet cells' image use layer scale state.</Description>
    <ShortDesc>Sets the worksheet cells' image use layer scale state.</ShortDesc>
    <ID>13266</ID>
    <IDName>procSetWSImgUseLayScale</IDName>
    <InternalFunctionName>MP_SetWSImgUseLayScale</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of cell range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of cell range.</Desc>
      </Param>
      <Param>
        <Name>useLayerScale</Name>
        <Type>boolMode</Type>
        <Desc>The user layer scale state.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSImgScale</Name>
    <ChangedDate>2012:09:24T11:12:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets specified image scale in specified worksheet cells.</Description>
    <ShortDesc>Sets specified image scale in specified worksheet cells.</ShortDesc>
    <ID>13267</ID>
    <IDName>procSetWSImgScale</IDName>
    <InternalFunctionName>MP_SetWSImgScale</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of cell range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of cell range.</Desc>
      </Param>
      <Param>
        <Name>scale</Name>
        <Type>realMode</Type>
        <Desc>The image scale.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSImgUseObjectImg</Name>
    <ChangedDate>2012:09:24T11:13:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Set state of worksheet cell's use object image..</Description>
    <ShortDesc>Set state of worksheet cell's use object image.</ShortDesc>
    <ID>13268</ID>
    <IDName>procSetWSImgUseObjectImg</IDName>
    <InternalFunctionName>MP_SetWSImgUseObjectImg</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of cell range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of cell range.</Desc>
      </Param>
      <Param>
        <Name>useObjectImage</Name>
        <Type>boolMode</Type>
        <Desc>The use object image state.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSImgMarginSize</Name>
    <ChangedDate>2012:09:24T11:15:00</ChangedDate>
    <Version>1900</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets specified image margin size in specified worksheet cells.</Description>
    <ShortDesc>Sets specified image margin size in specified worksheet cells.</ShortDesc>
    <ID>13269</ID>
    <IDName>procSetWSImgMarginSize</IDName>
    <InternalFunctionName>MP_SetWSImgMarginSize</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of cell range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of cell range.</Desc>
      </Param>
      <Param>
        <Name>marginSize</Name>
        <Type>intMode</Type>
        <Desc>The image margin size.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>TrackObjectN</Name>
    <ChangedDate>2013:01:29T16:59:00</ChangedDate>
    <Version>1900</Version>
    <Category>User Interactive</Category>
    <Type>Procedure</Type>
    <Description>Interactively, including highlighting, allows the user to select one object meeting the specified criteria.[[BR]][[BR]]The callback function (any of these depending on what info is needed):[[BR]][[BR]]FUNCTION Callback(h : HANDLE): BOOLEAN;[[BR]]FUNCTION CheckObjCallback(h : HANDLE; px, py : REAL) : BOOLEAN;[[BR]]FUNCTION CheckObjCallback(h : HANDLE; px, py, pz : REAL) : BOOLEAN;[[BR]][[BR]]is used to let the user filter the object that can be returned from the function.[[BR]][[BR]]The parameteri px,py,pz pass into the function information about current cursor position in document units.[[BR]][[BR]]This callback function is called when tracking over an object; also when click happens over an object.[[BR]][[BR]]The callback function return true if the passed handle can be returned.</Description>
    <ShortDesc>Interactively, including highlighting, allows the user to select one object meeting the specified criteria.</ShortDesc>
    <SeeAlso>TrackObject,GetPickObjectInfo</SeeAlso>
    <Example>PROCEDURE Test;[[BR]]VAR[[BR]]  h : HANDLE;[[BR]]  x, y, z : REAL;[[BR]]  [[BR]]  FUNCTION CheckObjCallback(h : HANDLE) : BOOLEAN;[[BR]]  {or FUNCTION CheckObjCallback(h : HANDLE; px, py : REAL) : BOOLEAN;}[[BR]]  {or FUNCTION CheckObjCallback(h : HANDLE; px, py, pz : REAL) : BOOLEAN;}[[BR]]  BEGIN[[BR]]     {any object is ok}[[BR]]     CheckObjCallback := true;[[BR]]  END;[[BR]][[BR]]BEGIN[[BR]]	TrackObjectN( 0, CheckObjCallback, h, x, y, z );[[BR]]	SetSelect( h );[[BR]]END;[[BR]]RUN( Test );[[BR]]</Example>
    <ID>13270</ID>
    <IDName>procTrackObjectN</IDName>
    <SpecialOverride>CHECKTRACKOBJECTN(procTrackObjectN, MP_TrackObjectN, intMode, userProcMode, handleVarMode, d3PtVarMode);</SpecialOverride>
    <InternalFunctionName>MP_TrackObjectN</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Special</ImplementationDetails>
    <Params>
      <Param>
        <Name>traverseType</Name>
        <Type>intMode</Type>
        <Desc>Specify how to traverse the drawing.&#xD;
&#xD;
&#xD;
&#xD;
0 - traverses only the high-level objects (the same as the TrakcObject function);&#xD;
&#xD;
&#xD;
&#xD;
1 - traverses the objects deep (uses GetPickObjectInfo, the 'subH' parameter).&#xD;
&#xD;
&#xD;
&#xD;
2 - traverses the objects shallow (uses GetPickObjectInfo</Desc>
      </Param>
      <Param>
        <Name>callback</Name>
        <Type>userProcMode</Type>
        <Desc>The callback that will be called to check if an object meets the requrements to be tracked. See remarks.</Desc>
      </Param>
      <Param>
        <Name>outObj</Name>
        <Type>handleVarMode</Type>
        <Desc>Returns handle of the object for which the callback returned TRUE.</Desc>
      </Param>
      <Param>
        <Name>p</Name>
        <Type>d3PtVarMode</Type>
        <Desc>Returns coordinates of mouse click.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVWRString</Name>
    <ChangedDate>2017:07:05T10:24:00</ChangedDate>
    <Version>1900</Version>
    <Category>Strings</Category>
    <Type>Procedure</Type>
    <Description>Replaces GetResourceString -- load a string from VWR file</Description>
    <ShortDesc>Replaces GetResourceString -- load a string from VWR file</ShortDesc>
    <ID>13271</ID>
    <IDName>procGetVWRString</IDName>
    <InternalFunctionName>MP_GetVWRString</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>outputString</Name>
        <Type>eCharDynarrayVarMode</Type>
        <Desc>result value</Desc>
      </Param>
      <Param>
        <Name>resIdentifier</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>VWR identifier and path to vwstrings file</Desc>
      </Param>
      <Param>
        <Name>stringIdentifier</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>key in vwstrings file</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SubString</Name>
    <ChangedDate>2013:01:10T15:39:00</ChangedDate>
    <Version>1900</Version>
    <Category>Strings</Category>
    <Type>Function</Type>
    <ReturnType>DYNARRAY[] of CHAR</ReturnType>
    <Description>Function [[name]] splits the Text string using characters specified in the Delemiters and returns the token located at the Index position. [[BR]]The first token is located at index 1. [[BR]]If there is an error the function returns ''(empty string).[[BR]]If  index is less  than 1 or grater than max number of tokens the function returns ''(empty string).</Description>
    <ShortDesc>Tokenizes the Text and returns a token located at the Index position.</ShortDesc>
    <Example>middleStr:=[[name]]('Left;Middle;Right',';',2);</Example>
    <ID>13272</ID>
    <IDName>funcSubString</IDName>
    <InternalFunctionName>MP_SubString</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>text</Name>
        <Type>eCharDynarrayMode</Type>
      </Param>
      <Param>
        <Name>delimiter</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateGroupOutline</Name>
    <ChangedDate>2013:01:14T12:37:00</ChangedDate>
    <Version>1900</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns a handle to the polygon which is the outline of a group.</Description>
    <ShortDesc>Returns a handle to the polygon which is the outline of a group.</ShortDesc>
    <ID>13273</ID>
    <IDName>funcCreateGroupOutline</IDName>
    <InternalFunctionName>MP_CreateGroupOutline</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectName</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BuildResourceList2</Name>
    <ChangedDate>2017:07:05T10:24:00</ChangedDate>
    <Version>1900</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Creates an implicit list of resources of a specified type, and returns an ID for the list. Values in the list can be retrieved using GetNameFromResourceList.[[BR]][[BR]]If the Display Default Content preference (#130) is on and folderIndex is not 0, it will also include all the resources of the specified type in all the files in the selected folder. [[BR]][[BR]]If folderIndex is positive, the list will include all the resources of that type from the current document, as well as from the specified folder. If folderIndex is 0, only the resources in the current document will be in the list. If folderIndex is negative, only the resources in the specified folder will be in the list.[[BR]][[BR]][[note:ObjTypeNote]][[BR]][[BR]][[note:FolderPath]]</Description>
    <ShortDesc>Creates a list of all the resources of the specified type in the current file and, if a preference is on, in the specified folder. Returns list ID.</ShortDesc>
    <SeeAlso>BuildResourceList,BuildResourceListN,BuildResourceListN2,AddResourceToList,DeleteResourceFromList,GetNameFromResourceList,GetResourceFromList,ImportResourceToCurrentFile</SeeAlso>
    <ID>13274</ID>
    <IDName>funcBuildResourceList2</IDName>
    <InternalFunctionName>MP_BuildResourceList2</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>type</Name>
        <Type>intMode</Type>
        <Desc>the type of resource to put in the list</Desc>
      </Param>
      <Param>
        <Name>folderIndex</Name>
        <Type>intMode</Type>
        <Desc>the index of a VW folder.</Desc>
      </Param>
      <Param>
        <Name>subFolderName</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>the name of a subfolder inside the folder specified by folderIndex. This can also be a partial path. Use an empty string to request the resources from all files in the folderIndex folder.</Desc>
      </Param>
      <Param>
        <Name>numItems</Name>
        <Type>lngVarMode</Type>
        <Desc>the number of items in the list built</Desc>
      </Param>
      <Param>
        <Name>useDefaultContent</Name>
        <Type>boolMode</Type>
        <Desc>determine if the list should contain default content</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BuildResourceListN2</Name>
    <ChangedDate>2013:01:22T13:49:00</ChangedDate>
    <Version>1900</Version>
    <Category>Document List Handling</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Build a resource list from the specified file.</Description>
    <ShortDesc>Build a resource list from the specified file.</ShortDesc>
    <SeeAlso>BuildResourceListN,BuildResourceList,BuildResourceList2</SeeAlso>
    <ID>13275</ID>
    <IDName>procBuildResourceListN2</IDName>
    <InternalFunctionName>MP_BuildResourceListN2</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>type</Name>
        <Type>intMode</Type>
        <Desc>the type of resource to put in the list</Desc>
      </Param>
      <Param>
        <Name>fullPath</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The path to the file that provides the resources.</Desc>
      </Param>
      <Param>
        <Name>numItems</Name>
        <Type>lngVarMode</Type>
        <Desc>the number of items in the list built</Desc>
      </Param>
      <Param>
        <Name>useDefaultContent</Name>
        <Type>boolMode</Type>
        <Desc>determine if the list should contain default content</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PythonExecute</Name>
    <ChangedDate>2013:01:24T10:55:00</ChangedDate>
    <Version>1900</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Execute the given python script.[[BR]][[BR]]You can use 'include' in python to run additional code in python files. However, before you execute the script make sure the python file are foundable through the PythonGetSearchPath. Use PythonSetSearchPath to change it.[[BR]][[BR]]Scripts executed via this function should not contain User Interactive functions like GetPt for example.</Description>
    <ShortDesc>Execute the given python script.</ShortDesc>
    <SeeAlso>PythonGetSearchPath,PythonSetSearchPath</SeeAlso>
    <ID>13276</ID>
    <IDName>procPythonExecute</IDName>
    <InternalFunctionName>MP_PythonExecute</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>script</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The script to be executed.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PythonGetSearchPath</Name>
    <ChangedDate>2013:01:24T10:54:00</ChangedDate>
    <Version>1900</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>DYNARRAY[] of CHAR</ReturnType>
    <Description>Return the search path for python files.</Description>
    <ShortDesc>Return the search path for python files.</ShortDesc>
    <Result>The result is a string of semicolon delimited paths. The path it similar to the 'Open' function path parameter.</Result>
    <SeeAlso>PythonSetSearchPath,PythonExecute</SeeAlso>
    <ID>13277</ID>
    <IDName>funcPythonGetSearchPath</IDName>
    <InternalFunctionName>MP_PythonGetSearchPath</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>PythonSetSearchPath</Name>
    <ChangedDate>2013:01:24T10:51:00</ChangedDate>
    <Version>1900</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Set the search path for python files.</Description>
    <ShortDesc>Set the search path for python files.</ShortDesc>
    <SeeAlso>PythonGetSearchPath,PythonExecute</SeeAlso>
    <ID>13278</ID>
    <IDName>procPythonSetSearchPath</IDName>
    <InternalFunctionName>MP_PythonSetSearchPath</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>pathList</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>A string of semicolon delimited paths. The path it similar to the 'Open' function path parameter.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PythonBeginContext</Name>
    <ChangedDate>2013:01:24T11:31:00</ChangedDate>
    <Version>1900</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>This function creates a context in which PythonExecute scripts are run.[[BR]][[BR]]This function consecutive python scripts to be executed inside the same python environment.</Description>
    <ShortDesc>This function creates a context in which PythonExecute scripts are run.</ShortDesc>
    <SeeAlso>PythonExecute,PythonEndContext</SeeAlso>
    <ID>13279</ID>
    <IDName>procPythonBeginContext</IDName>
    <InternalFunctionName>MP_PythonBeginContext</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>PythonEndContext</Name>
    <ChangedDate>2013:01:24T11:32:00</ChangedDate>
    <Version>1900</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Closes python context previously opened with PythonBeginContext.</Description>
    <ShortDesc>Closes python context previously opened with PythonBeginContext.</ShortDesc>
    <SeeAlso>PythonBeginContext</SeeAlso>
    <ID>13280</ID>
    <IDName>procPythonEndContext</IDName>
    <InternalFunctionName>MP_PythonEndContext</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>IsCurtainWall</Name>
    <ChangedDate>2015:08:10T10:40:00</ChangedDate>
    <Version>1900</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets whether or not a wall is a curtain wall.</Description>
    <ShortDesc>Gets whether or not a wall is a curtain wall.</ShortDesc>
    <SeeAlso>SetIsCurtainWall</SeeAlso>
    <ID>13281</ID>
    <IDName>funcIsCurtainWall</IDName>
    <InternalFunctionName>MP_IsCurtainWall</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>wall</Name>
        <Type>handleMode</Type>
        <Desc>The wall.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCWPanelFromPt</Name>
    <ChangedDate>2019:08:19T15:43:00</ChangedDate>
    <Version>1900</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns information about a panel in a curtain wall from a given point.[[BR]][[BR]]Used for placing objects inside a panel in a curtain wall. When passing the center point of the object in the wall, it will find the panel in the curtain wall and return a new center point and the height and width of the panel.</Description>
    <ShortDesc>Gets Curtain Wall Panel Information from Point in wall</ShortDesc>
    <Result>Returns TRUE if hWall is a curtain wall and a panel is found.[[BR]]Returns FALSE is hWall is not a curtain wall or the test point is not found on the wall.</Result>
    <ID>13282</ID>
    <IDName>funcGetCWPanelFromPt</IDName>
    <InternalFunctionName>MP_GetCWPanelFromPt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hWall</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the curtain wall</Desc>
      </Param>
      <Param>
        <Name>testPt</Name>
        <Type>ePointMode</Type>
        <Desc>Point to test on the curtain wall. Typically the center point of the object to be placed in the curtain wall panel.</Desc>
      </Param>
      <Param>
        <Name>includeBottomFrame</Name>
        <Type>boolMode</Type>
        <Desc>Include the bottom frame in the return height. </Desc>
      </Param>
      <Param>
        <Name>centerPt</Name>
        <Type>ePointVarMode</Type>
        <Desc>Returns the center point of the rectangle in witch to place the object. </Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>rVarMode</Type>
        <Desc>The width of the rectangle in which to place the object.</Desc>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>rVarMode</Type>
        <Desc>The height of the rectangle in which to place the object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Create2DObjShadow</Name>
    <ChangedDate>2013:04:15T15:36:00</ChangedDate>
    <Version>1900</Version>
    <Category>Objects - 2D</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Create a shadow representation of the given 2D object at the specified offset vector.</Description>
    <ShortDesc>Create a shadow representation of the given 2D object at the specified offset vector.</ShortDesc>
    <ID>13283</ID>
    <IDName>funcCreate2DObjShadow</IDName>
    <InternalFunctionName>MP_Create2DObjShadow</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a 2D object.</Desc>
      </Param>
      <Param>
        <Name>offsetVec</Name>
        <Type>globPtMode</Type>
        <Desc>Shadow direction and length.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RunNamedDialog</Name>
    <ChangedDate>2013:01:29T17:55:00</ChangedDate>
    <Version>1900</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Displays the specified dialog with universal name and initiates the dialog event loop. The dialog event loop is specified in a procedure subroutine that is passed as a parameter to the function.</Description>
    <ShortDesc>Displays the specified dialog with universal name and initiates the dialog event loop.</ShortDesc>
    <Result>Returns a LONGINT value indicating the button pressed to exit the dialog.</Result>
    <SeeAlso>RunLayoutDialog</SeeAlso>
    <Comments>[DWD 1/29/13]</Comments>
    <ID>13284</ID>
    <IDName>funcRunNamedDialog</IDName>
    <SpecialOverride>CHECKRUNNAMEDDIALOG(funcRunNamedDialog, MP_RunNamedDialog, longMode, longMode, userProcMode, stringMode);</SpecialOverride>
    <Implemented>True</Implemented>
    <ImplementationDetails>Special</ImplementationDetails>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog to be displayed</Desc>
      </Param>
      <Param>
        <Name>callback</Name>
        <Type>userProcMode</Type>
        <Desc>The event loop subroutine for the dialog</Desc>
      </Param>
      <Param>
        <Name>univName</Name>
        <Type>stringMode</Type>
        <Desc>The universal name of the dialog</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ImportImageFile</Name>
    <ChangedDate>2013:04:17T14:17:00</ChangedDate>
    <Version>1900</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Import the specified image file as an Image object in Vectorworks.</Description>
    <ShortDesc>Import the specified image file as an Image object in Vectorworks.</ShortDesc>
    <ID>13285</ID>
    <IDName>funcImportImageFile</IDName>
    <InternalFunctionName>MP_ImportImageFile</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>filePath</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Full path to the image file.</Desc>
      </Param>
      <Param>
        <Name>importPt</Name>
        <Type>globPtMode</Type>
        <Desc>Location on which the file should be imported.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EditCriteriaWithUI</Name>
    <ChangedDate>2013:05:24T16:08:00</ChangedDate>
    <Version>1900</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Edit a criteria string with Edit Criteria Dialog.</Description>
    <ShortDesc>Edit a criteria string with Edit Criteria Dialog.</ShortDesc>
    <Result>The funtion returns the following values:[[BR]]0 - failed. The input criteria is incorrect.[[BR]]1 - The edit was OK[[BR]]2 - The edit was Cancel[[BR]]</Result>
    <ID>13286</ID>
    <IDName>funcEditCriteriaWithUI</IDName>
    <InternalFunctionName>MP_EditCriteriaWithUI</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>criteria</Name>
        <Type>eCharDynarrayInOutMode</Type>
        <Desc>Pass in a criteria to be edited, and output the modified criteria if the function result is TRUE.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Angle2Str</Name>
    <ChangedDate>2013:05:28T10:17:00</ChangedDate>
    <Version>1900</Version>
    <Category>Strings</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Convert an angle value from a real number to a string using the current document formatting.</Description>
    <ShortDesc>Convert an angle value from a real number to a string using the current document formatting.</ShortDesc>
    <ID>13287</ID>
    <IDName>funcAngle2Str</IDName>
    <InternalFunctionName>MP_Angle2Str</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>value</Name>
        <Type>angleMode</Type>
        <Desc>The angle value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Str2Angle</Name>
    <ChangedDate>2013:05:28T10:18:00</ChangedDate>
    <Version>1900</Version>
    <Category>Strings</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Convert a string representation of an angle value to a real number.</Description>
    <ShortDesc>Convert a string representation of an angle value to a real number.</ShortDesc>
    <ID>13288</ID>
    <IDName>funcStr2Angle</IDName>
    <InternalFunctionName>MP_Str2Angle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>str</Name>
        <Type>stringMode</Type>
        <Desc>The string representation of the angle value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Area2Str</Name>
    <ChangedDate>2013:05:28T10:17:00</ChangedDate>
    <Version>1900</Version>
    <Category>Strings</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Convert an area value from a real number to a string using the current document formatting.</Description>
    <ShortDesc>Convert an area value from a real number to a string using the current document formatting.</ShortDesc>
    <ID>13289</ID>
    <IDName>funcArea2Str</IDName>
    <InternalFunctionName>MP_Area2Str</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>value</Name>
        <Type>realMode</Type>
        <Desc>The area value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Str2Area</Name>
    <ChangedDate>2013:05:28T10:19:00</ChangedDate>
    <Version>1900</Version>
    <Category>Strings</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Convert a string representation of an area value to a real number.</Description>
    <ShortDesc>Convert a string representation of an area value to a real number.</ShortDesc>
    <ID>13290</ID>
    <IDName>funcStr2Area</IDName>
    <InternalFunctionName>MP_Str2Area</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>str</Name>
        <Type>stringMode</Type>
        <Desc>The string representation of the area value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Volume2Str</Name>
    <ChangedDate>2013:05:28T10:17:00</ChangedDate>
    <Version>1900</Version>
    <Category>Strings</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Convert a volume value from a real number to a string using the current document formatting.</Description>
    <ShortDesc>Convert a volume value from a real number to a string using the current document formatting.</ShortDesc>
    <ID>13291</ID>
    <IDName>funcVolume2Str</IDName>
    <InternalFunctionName>MP_Volume2Str</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>value</Name>
        <Type>realMode</Type>
        <Desc>The volume value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Str2Volume</Name>
    <ChangedDate>2013:05:28T10:24:00</ChangedDate>
    <Version>1900</Version>
    <Category>Strings</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Convert a string representation of a volume value to a real number.</Description>
    <ShortDesc>Convert a string representation of a volume value to a real number.</ShortDesc>
    <ID>13292</ID>
    <IDName>funcStr2Volume</IDName>
    <InternalFunctionName>MP_Str2Volume</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>str</Name>
        <Type>stringMode</Type>
        <Desc>The string representation of the angle value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPClOvrdFillBack</Name>
    <ChangedDate>2013:06:14T09:47:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Fetches the fill background color of the class override. The color is returned as three RGB components in the range 0~65535.</Description>
    <ShortDesc>Fetches the fill background color of the class override.</ShortDesc>
    <Result>True if the viewport has an override for the specified class.[[BR]]False if it does not have an override or the class or viewport was invalid.</Result>
    <SeeAlso>SetVPClOvrdFillBack</SeeAlso>
    <ID>13293</ID>
    <IDName>procGetVPClOvrdFillBack</IDName>
    <InternalFunctionName>MP_GetVPClOvrdFillBack</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the viewport.</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns red color component.</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns green color component.</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns blue color component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPClOvrdFillBack</Name>
    <ChangedDate>2013:06:14T09:47:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Sets the fill background color of a class override in a viewport. The color is specified by RGB values in the range 0~65535.</Description>
    <ShortDesc>Sets the fill background color of a class override in a viewport.</ShortDesc>
    <Result>Returns true if the color override was applied.[[BR]]Returns false if the class override does not exist or the handle is invalid.</Result>
    <SeeAlso>GetVPClOvrdFillBack</SeeAlso>
    <ID>13294</ID>
    <IDName>procSetVPClOvrdFillBack</IDName>
    <InternalFunctionName>MP_SetVPClOvrdFillBack</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class to override.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>longMode</Type>
        <Desc>Red color value.</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>longMode</Type>
        <Desc>Green color value.</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>longMode</Type>
        <Desc>Blue color value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateVPClOvrd</Name>
    <ChangedDate>2013:06:14T09:47:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Creates a new override for the specified class in the specified viewport. The override is initially populated with the class's current properties.</Description>
    <ShortDesc>Creates a new override for the specified class in the specified viewport. The override is initially populated with the class's current properties.</ShortDesc>
    <SeeAlso>RemoveVPClOvrd</SeeAlso>
    <ID>13295</ID>
    <IDName>procCreateVPClOvrd</IDName>
    <InternalFunctionName>MP_CreateVPClOvrd</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveVPClOvrd</Name>
    <ChangedDate>2013:06:14T09:47:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Removes a class override from the specified viewport.</Description>
    <ShortDesc>Removes a class override from the specified viewport.</ShortDesc>
    <SeeAlso>CreateVPClOvrd</SeeAlso>
    <ID>13296</ID>
    <IDName>procRemoveVPClOvrd</IDName>
    <InternalFunctionName>MP_RemoveVPClOvrd</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPClOvrdCount</Name>
    <ChangedDate>2013:06:14T09:47:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the number of class overrides associated with a particular viewport.</Description>
    <ShortDesc>Returns the number of class overrides associated with a particular viewport.</ShortDesc>
    <Result>Returns the number of class overrides associated with the given viewport.[[BR]]If the handle is invalid, returns -1.</Result>
    <SeeAlso>GetVPClOvrdName</SeeAlso>
    <ID>13297</ID>
    <IDName>funcGetVPClOvrdCount</IDName>
    <InternalFunctionName>MP_GetVPClOvrdCount</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPClOvrdName</Name>
    <ChangedDate>2013:06:14T09:47:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Gets the name for the override at a particular index in the override list.</Description>
    <ShortDesc>Gets the name for the override at a particular index in the override list.</ShortDesc>
    <Result>Returns the name of the class which is overriden at the specified index.[[BR]]Returns -1 if the index is out of bounds.</Result>
    <SeeAlso>GetVPClOvrdCount</SeeAlso>
    <ID>13298</ID>
    <IDName>funcGetVPClOvrdName</IDName>
    <InternalFunctionName>MP_GetVPClOvrdName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index into the class override list.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPClOvrdFillFore</Name>
    <ChangedDate>2013:06:14T09:47:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Fetches the fill foreground color of the class override. The color is returned as three RGB components in the range 0~65535.</Description>
    <ShortDesc>Fetches the fill foreground color of the class override.</ShortDesc>
    <Result>True if the viewport has an override for the specified class.[[BR]]False if it does not have an override or the class or viewport was invalid.</Result>
    <SeeAlso>SetVPClOvrdFillFore</SeeAlso>
    <ID>13299</ID>
    <IDName>procGetVPClOvrdFillFore</IDName>
    <InternalFunctionName>MP_GetVPClOvrdFillFore</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>lngVarMode</Type>
        <Desc>Red color value.</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>lngVarMode</Type>
        <Desc>Green color value.</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>lngVarMode</Type>
        <Desc>Blue color value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPClOvrdFillFore</Name>
    <ChangedDate>2013:06:14T09:48:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Sets the fill foreground color of a class override in a viewport. The color is specified by RGB values in the range 0~65535.</Description>
    <ShortDesc>Sets the fill foreground color of a class override in a viewport.</ShortDesc>
    <Result>Returns true if the color override was applied.[[BR]]Returns false if the class override does not exist or the handle is invalid.</Result>
    <SeeAlso>GetVPClOvrdFillFore</SeeAlso>
    <ID>13300</ID>
    <IDName>procSetVPClOvrdFillFore</IDName>
    <InternalFunctionName>MP_SetVPClOvrdFillFore</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>longMode</Type>
        <Desc>Red color value.</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>longMode</Type>
        <Desc>Green color value.</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>longMode</Type>
        <Desc>Blue color value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPClOvrdPenBack</Name>
    <ChangedDate>2013:06:14T09:48:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Fetches the pen background color of the class override. The color is returned as three RGB components in the range 0~65535.</Description>
    <ShortDesc>Fetches the pen background color of the class override.</ShortDesc>
    <Result>True if the viewport has an override for the specified class.[[BR]]False if it does not have an override or the class or viewport was invalid.</Result>
    <SeeAlso>SetVPClOvrdPenBack</SeeAlso>
    <ID>13301</ID>
    <IDName>procGetVPClOvrdPenBack</IDName>
    <InternalFunctionName>MP_GetVPClOvrdPenBack</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>lngVarMode</Type>
        <Desc>Red color value.</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>lngVarMode</Type>
        <Desc>Green color value.</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>lngVarMode</Type>
        <Desc>Blue color value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPClOvrdPenBack</Name>
    <ChangedDate>2013:06:14T09:48:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Sets the pen background color of a class override in a viewport. The color is specified by RGB values in the range 0~65535.</Description>
    <ShortDesc>Sets the pen background color of a class override in a viewport.</ShortDesc>
    <Result>Returns true if the color override was applied.[[BR]]Returns false if the class override does not exist or the handle is invalid.</Result>
    <SeeAlso>GetVPClOvrdPenBack</SeeAlso>
    <ID>13302</ID>
    <IDName>procSetVPClOvrdPenBack</IDName>
    <InternalFunctionName>MP_SetVPClOvrdPenBack</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>longMode</Type>
        <Desc>Red color value.</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>longMode</Type>
        <Desc>Green color value.</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>longMode</Type>
        <Desc>Blue color value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPClOvrdPenFore</Name>
    <ChangedDate>2013:06:14T09:48:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Fetches the pen foreground color of the class override. The color is returned as three RGB components in the range 0~65535.</Description>
    <ShortDesc>Fetches the pen foreground color of the class override.</ShortDesc>
    <Result>True if the viewport has an override for the specified class.[[BR]]False if it does not have an override or the class or viewport was invalid.</Result>
    <SeeAlso>SetVPClOvrdPenBack</SeeAlso>
    <ID>13303</ID>
    <IDName>procGetVPClOvrdPenFore</IDName>
    <InternalFunctionName>MP_GetVPClOvrdPenFore</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>lngVarMode</Type>
        <Desc>Red color value.</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>lngVarMode</Type>
        <Desc>Green color value.</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>lngVarMode</Type>
        <Desc>Blue color value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPClOvrdPenFore</Name>
    <ChangedDate>2013:06:14T09:48:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Sets the pen foreground color of a class override in a viewport. The color is specified by RGB values in the range 0~65535.</Description>
    <ShortDesc>Sets the pen foreground color of a class override in a viewport.</ShortDesc>
    <Result>Returns true if the color override was applied.[[BR]]Returns false if the class override does not exist or the handle is invalid.</Result>
    <SeeAlso>GetVPClOvrdPenBack</SeeAlso>
    <ID>13304</ID>
    <IDName>procSetVPClOvrdPenFore</IDName>
    <InternalFunctionName>MP_SetVPClOvrdPenFore</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>longMode</Type>
        <Desc>Red color value.</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>longMode</Type>
        <Desc>Green color value.</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>longMode</Type>
        <Desc>Blue color value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPClOvrdFillOpty</Name>
    <ChangedDate>2013:06:14T09:48:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Retrieves the fill opacity for a viewport class override.</Description>
    <ShortDesc>Retrieves the fill opacity for a viewport class override.</ShortDesc>
    <Result>Returns the fill opacity of the class override.</Result>
    <SeeAlso>SetVPClOvrdFillOpty</SeeAlso>
    <ID>13305</ID>
    <IDName>funcGetVPClOvrdFillOpty</IDName>
    <InternalFunctionName>MP_GetVPClOvrdFillOpty</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of the class.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPClOvrdFillOpty</Name>
    <ChangedDate>2013:06:14T09:48:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Sets the fill opacity for a viewport class override.</Description>
    <ShortDesc>Sets the fill opacity for a viewport class override.</ShortDesc>
    <Result>Returns true if the opacitiy could be set for the viewport override.[[BR]]Returns false otherwise.</Result>
    <ID>13306</ID>
    <IDName>procSetVPClOvrdFillOpty</IDName>
    <InternalFunctionName>MP_SetVPClOvrdFillOpty</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of the class.</Desc>
      </Param>
      <Param>
        <Name>fillOpacity</Name>
        <Type>intMode</Type>
        <Desc>The fill opacity as a percentage (0-100).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPClOvrdPenOpty</Name>
    <ChangedDate>2013:06:14T09:48:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Retrieves the pen opacity for a class override. Opacity is in the range 0-100.</Description>
    <ShortDesc>Retrieves the pen opacity for a class override.</ShortDesc>
    <Result>Returns the pen opacity of the class override.</Result>
    <SeeAlso>SetVPClOvrdPenOpty</SeeAlso>
    <ID>13307</ID>
    <IDName>funcGetVPClOvrdPenOpty</IDName>
    <InternalFunctionName>MP_GetVPClOvrdPenOpty</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of the class.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPClOvrdPenOpty</Name>
    <ChangedDate>2013:06:14T09:48:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Sets the pen opacity for a class override.</Description>
    <ShortDesc>Sets the pen opacity for a class override.</ShortDesc>
    <Result>True if the class override exists.[[BR]]False otherwise.</Result>
    <SeeAlso>GetVPClOvrdPenOpty</SeeAlso>
    <ID>13308</ID>
    <IDName>procSetVPClOvrdPenOpty</IDName>
    <InternalFunctionName>MP_SetVPClOvrdPenOpty</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of the class.</Desc>
      </Param>
      <Param>
        <Name>penOpacity</Name>
        <Type>intMode</Type>
        <Desc>The pen opacity as a percentage (0-100).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateVPLrOvrd</Name>
    <ChangedDate>2013:06:14T09:53:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Creates a new layer override, initially set to the layer's current properties.</Description>
    <ShortDesc>Creates a new layer override, initially set to the layer's current properties.</ShortDesc>
    <SeeAlso>RemoveVPLrOvrd</SeeAlso>
    <ID>13309</ID>
    <IDName>procCreateVPLrOvrd</IDName>
    <InternalFunctionName>MP_CreateVPLrOvrd</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>layerHandle</Name>
        <Type>handleMode</Type>
        <Desc>The layer to override.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveVPLrOvrd</Name>
    <ChangedDate>2013:06:14T09:54:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Removes a layer override.</Description>
    <ShortDesc>Removes a layer override.</ShortDesc>
    <SeeAlso>CreateVPLrOvrd</SeeAlso>
    <ID>13310</ID>
    <IDName>procRemoveVPLrOvrd</IDName>
    <InternalFunctionName>MP_RemoveVPLrOvrd</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>layerHandle</Name>
        <Type>handleMode</Type>
        <Desc>The layer handle.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPLrOvrdCount</Name>
    <ChangedDate>2013:06:14T09:56:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Retrieves the number of layer overrides.</Description>
    <ShortDesc>Retrieves the number of layer overrides.</ShortDesc>
    <Result>Returns the number of layer overrides associated with the specified viewport.[[BR]]If the handle is invalid, returns -1.</Result>
    <SeeAlso>GetVPLrOvrdHandle</SeeAlso>
    <ID>13311</ID>
    <IDName>funcGetVPLrOvrdCount</IDName>
    <InternalFunctionName>MP_GetVPLrOvrdCount</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPLrOvrdHandle</Name>
    <ChangedDate>2013:06:14T09:59:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Retrieves the handle of the layer overridden at the specified index in the overrides list.</Description>
    <ShortDesc>Retrieves the handle of the layer overridden at the specified index in the overrides list.</ShortDesc>
    <Result>Returns a handle to the layer overriden at the given index.[[BR]]Returns 0 if the index is out of range.</Result>
    <SeeAlso>GetVPLrOvrdCount</SeeAlso>
    <ID>13312</ID>
    <IDName>funcGetVPLrOvrdHandle</IDName>
    <InternalFunctionName>MP_GetVPLrOvrdHandle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index into the layer overrides list.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPLrOvrdFillBack</Name>
    <ChangedDate>2013:06:14T10:03:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Gets the fill background color from a layer override.</Description>
    <ShortDesc>Gets the fill background color from a layer override.</ShortDesc>
    <SeeAlso>SetVPLrOvrdFillBack</SeeAlso>
    <ID>13313</ID>
    <IDName>procGetVPLrOvrdFillBack</IDName>
    <InternalFunctionName>MP_GetVPLrOvrdFillBack</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>layerHandle</Name>
        <Type>handleMode</Type>
        <Desc>The layer handle.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>lngVarMode</Type>
        <Desc>Red value (0-65535)</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>lngVarMode</Type>
        <Desc>Green value (0-65535)</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>lngVarMode</Type>
        <Desc>Blue value (0-65535)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPLrOvrdFillBack</Name>
    <ChangedDate>2013:06:14T10:05:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Sets the fill background color for a layer override.</Description>
    <ShortDesc>Sets the fill background color for a layer override.</ShortDesc>
    <SeeAlso>GetVPLrOvrdFillBack</SeeAlso>
    <ID>13314</ID>
    <IDName>procSetVPLrOvrdFillBack</IDName>
    <InternalFunctionName>MP_SetVPLrOvrdFillBack</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>layerHandle</Name>
        <Type>handleMode</Type>
        <Desc>The layer handle.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>longMode</Type>
        <Desc>Red value (0-65535)</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>longMode</Type>
        <Desc>Green value (0-65535)</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>longMode</Type>
        <Desc>Blue value (0-65535)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPLrOvrdFillFore</Name>
    <ChangedDate>2013:06:14T10:03:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Gets the fill foreground color from a layer override.</Description>
    <ShortDesc>Gets the fill foreground color from a layer override.</ShortDesc>
    <SeeAlso>SetVPLrOvrdFillFore</SeeAlso>
    <ID>13315</ID>
    <IDName>procGetVPLrOvrdFillFore</IDName>
    <InternalFunctionName>MP_GetVPLrOvrdFillFore</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>layerHandle</Name>
        <Type>handleMode</Type>
        <Desc>The layer handle.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>lngVarMode</Type>
        <Desc>Red value (0-65535)</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>lngVarMode</Type>
        <Desc>Green value (0-65535)</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>lngVarMode</Type>
        <Desc>Blue value (0-65535)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPLrOvrdFillFore</Name>
    <ChangedDate>2013:06:14T10:05:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Sets the fill foreground color for a layer override.</Description>
    <ShortDesc>Sets the fill foreground color for a layer override.</ShortDesc>
    <SeeAlso>GetVPLrOvrdFillFore</SeeAlso>
    <ID>13316</ID>
    <IDName>procSetVPLrOvrdFillFore</IDName>
    <InternalFunctionName>MP_SetVPLrOvrdFillFore</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>layerHandle</Name>
        <Type>handleMode</Type>
        <Desc>The layer handle.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>longMode</Type>
        <Desc>Red value (0-65535)</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>longMode</Type>
        <Desc>Green value (0-65535)</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>longMode</Type>
        <Desc>Blue value (0-65535)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPLrOvrdPenBack</Name>
    <ChangedDate>2013:06:14T10:03:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Gets the pen background color from a layer override.</Description>
    <ShortDesc>Gets the pen background color from a layer override.</ShortDesc>
    <SeeAlso>SetVPLrOvrdPenBack</SeeAlso>
    <ID>13317</ID>
    <IDName>procGetVPLrOvrdPenBack</IDName>
    <InternalFunctionName>MP_GetVPLrOvrdPenBack</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>layerHandle</Name>
        <Type>handleMode</Type>
        <Desc>The layer handle.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>lngVarMode</Type>
        <Desc>Red value (0-65535)</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>lngVarMode</Type>
        <Desc>Green value (0-65535)</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>lngVarMode</Type>
        <Desc>Blue value (0-65535)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPLrOvrdPenBack</Name>
    <ChangedDate>2013:06:14T10:05:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Sets the pen background color for a layer override.</Description>
    <ShortDesc>Sets the pen background color for a layer override.</ShortDesc>
    <SeeAlso>GetVPLrOvrdPenBack</SeeAlso>
    <ID>13318</ID>
    <IDName>procSetVPLrOvrdPenBack</IDName>
    <InternalFunctionName>MP_SetVPLrOvrdPenBack</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>layerHandle</Name>
        <Type>handleMode</Type>
        <Desc>The layer handle.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>longMode</Type>
        <Desc>Red value (0-65535)</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>longMode</Type>
        <Desc>Green value (0-65535)</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>longMode</Type>
        <Desc>Blue value (0-65535)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPLrOvrdPenFore</Name>
    <ChangedDate>2013:06:14T10:03:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Gets the pen foreground color from a layer override.</Description>
    <ShortDesc>Gets the pen foreground color from a layer override.</ShortDesc>
    <SeeAlso>SetVPLrOvrdPenFore</SeeAlso>
    <ID>13319</ID>
    <IDName>procGetVPLrOvrdPenFore</IDName>
    <InternalFunctionName>MP_GetVPLrOvrdPenFore</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>layerHandle</Name>
        <Type>handleMode</Type>
        <Desc>The layer handle.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>lngVarMode</Type>
        <Desc>Red value (0-65535)</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>lngVarMode</Type>
        <Desc>Green value (0-65535)</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>lngVarMode</Type>
        <Desc>Blue value (0-65535)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPLrOvrdPenFore</Name>
    <ChangedDate>2013:06:14T10:05:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Sets the pen foreground color for a layer override.</Description>
    <ShortDesc>Sets the pen foreground color for a layer override.</ShortDesc>
    <SeeAlso>GetVPLrOvrdPenFore</SeeAlso>
    <ID>13320</ID>
    <IDName>procSetVPLrOvrdPenFore</IDName>
    <InternalFunctionName>MP_SetVPLrOvrdPenFore</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>layerHandle</Name>
        <Type>handleMode</Type>
        <Desc>The layer handle.</Desc>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>longMode</Type>
        <Desc>Red value (0-65535)</Desc>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>longMode</Type>
        <Desc>Green value (0-65535)</Desc>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>longMode</Type>
        <Desc>Blue value (0-65535)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPLrOvrdOpty</Name>
    <ChangedDate>2013:06:14T10:13:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the opacity for a layer override.</Description>
    <ShortDesc>Gets the opacity for a layer override.</ShortDesc>
    <Result>Returns the opacity for a layer override (0-100).</Result>
    <SeeAlso>SetVPLrOvrdOpty</SeeAlso>
    <ID>13321</ID>
    <IDName>funcGetVPLrOvrdOpty</IDName>
    <InternalFunctionName>MP_GetVPLrOvrdOpty</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>layerHandle</Name>
        <Type>handleMode</Type>
        <Desc>The layer handle.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPLrOvrdOpty</Name>
    <ChangedDate>2013:06:14T10:15:00</ChangedDate>
    <Version>1900</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <Description>Sets the opacity for a layer override.</Description>
    <ShortDesc>Sets the opacity for a layer override.</ShortDesc>
    <SeeAlso>GetVPLrOvrdOpty</SeeAlso>
    <ID>13322</ID>
    <IDName>procSetVPLrOvrdOpty</IDName>
    <InternalFunctionName>MP_SetVPLrOvrdOpty</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>layerHandle</Name>
        <Type>handleMode</Type>
        <Desc>The layer handle.</Desc>
      </Param>
      <Param>
        <Name>opacity</Name>
        <Type>intMode</Type>
        <Desc>Opacity (0-100)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DelSavedSetting</Name>
    <ChangedDate>2013:06:17T16:26:00</ChangedDate>
    <Version>1900</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Delete saved settings.</Description>
    <ShortDesc>Delete saved settings.</ShortDesc>
    <Result>Return TRUE when successful.</Result>
    <SeeAlso>DelSavedSettings,SetSavedSetting,GetSavedSetting</SeeAlso>
    <ID>13323</ID>
    <IDName>funcDelSavedSetting</IDName>
    <InternalFunctionName>MP_DelSavedSetting</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>category</Name>
        <Type>stringMode</Type>
        <Desc>The category for the setting.</Desc>
      </Param>
      <Param>
        <Name>setting</Name>
        <Type>stringMode</Type>
        <Desc>The setting to be deleted.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DelSavedSettings</Name>
    <ChangedDate>2013:06:17T16:29:00</ChangedDate>
    <Version>1900</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Delete all saved settings in the specified category.</Description>
    <ShortDesc>Delete all saved settings in the specified category.</ShortDesc>
    <Result>Return TRUE when successful.</Result>
    <SeeAlso>DelSavedSetting,SetSavedSetting,GetSavedSetting</SeeAlso>
    <ID>13324</ID>
    <IDName>funcDelSavedSettings</IDName>
    <InternalFunctionName>MP_DelSavedSettings</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>category</Name>
        <Type>stringMode</Type>
        <Desc>The category to be deleted.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDrawingSizeRectN</Name>
    <ChangedDate>2013:06:20T15:35:00</ChangedDate>
    <Version>1900</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Returns the top left and bottom right coordinates of a rectangle surrounding the entire area of the document containing objects.[[BR]][[BR]]Similar to GetDrawingSizeRect but can work on specified layer.</Description>
    <ShortDesc>Returns the top left and bottom right coordinates of a rectangle surrounding the entire area of the document containing objects.</ShortDesc>
    <SeeAlso>GetDrawingSizeRect</SeeAlso>
    <ID>13325</ID>
    <IDName>procGetDrawingSizeRectN</IDName>
    <InternalFunctionName>MP_GetDrawingSizeRectN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hLayer</Name>
        <Type>handleMode</Type>
        <Desc>The layer to be used for calculating the drawing rectangle.</Desc>
      </Param>
      <Param>
        <Name>p1</Name>
        <Type>globPtVarMode</Type>
        <Desc>Returns top left coordinate of drawing rectangle.</Desc>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>globPtVarMode</Type>
        <Desc>Returns bottom right coordinate of drawing rectangle.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetImageCropObject</Name>
    <ChangedDate>2013:06:21T10:31:00</ChangedDate>
    <Version>1900</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Get the crop of a cropped image.</Description>
    <ShortDesc>Get the crop of a cropped image.</ShortDesc>
    <Result>Returns the handle of the cropper of the image.</Result>
    <ID>13326</ID>
    <IDName>funcGetImageCropObject</IDName>
    <InternalFunctionName>MP_GetImageCropObject</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsImageCropped</Name>
    <ChangedDate>2013:06:21T10:33:00</ChangedDate>
    <Version>1900</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Check is the given image cropped.</Description>
    <ShortDesc>Check is the given image cropped.</ShortDesc>
    <Result>Returns true if the given image is cropped, FALSE otherwise.</Result>
    <ID>13327</ID>
    <IDName>funcIsImageCropped</IDName>
    <InternalFunctionName>MP_IsImageCropped</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsImageCropVisible</Name>
    <ChangedDate>2013:06:21T10:35:00</ChangedDate>
    <Version>1900</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Check is the crop of the image visible.</Description>
    <ShortDesc>Check is the crop of the image visible.</ShortDesc>
    <Result>Returns true if the crop is visible, FALSE otherwise.</Result>
    <ID>13328</ID>
    <IDName>funcIsImageCropVisible</IDName>
    <InternalFunctionName>MP_IsImageCropVisible</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetImageCropObject</Name>
    <ChangedDate>2013:06:21T10:37:00</ChangedDate>
    <Version>1900</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>By given image handle and crop handle, set the crop to the image.</Description>
    <ShortDesc>Set crop to an image.</ShortDesc>
    <Result>Returns TRUE if the cropping is successful.</Result>
    <ID>13329</ID>
    <IDName>funcSetImageCropObject</IDName>
    <InternalFunctionName>MP_SetImageCropObject</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>image</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>crop</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetImageCropVisible</Name>
    <ChangedDate>2013:06:21T10:39:00</ChangedDate>
    <Version>1900</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Set the image crop visibility.</Description>
    <ShortDesc>Set the image crop visibility.</ShortDesc>
    <ID>13330</ID>
    <IDName>procSetImageCropVisible</IDName>
    <InternalFunctionName>MP_SetImageCropVisible</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>isVisible</Name>
        <Type>boolMode</Type>
        <Desc>If TRUE the crop become visible, if FALSE - invisible.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ImportIGES</Name>
    <ChangedDate>2017:04:14T10:40:00</ChangedDate>
    <Version>1900</Version>
    <Category>File I/O</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Import a 3D IGES file.</Description>
    <ShortDesc>Import a 3D IGES file.</ShortDesc>
    <Result>Return TRUE if succeeded.</Result>
    <SeeAlso>ExportIGES</SeeAlso>
    <ID>13331</ID>
    <IDName>funcImportIGES</IDName>
    <InternalFunctionName>MP_ImportIGES</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>fileName</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>full path to the file for import</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ExportIGES</Name>
    <ChangedDate>2017:04:14T10:40:00</ChangedDate>
    <Version>1900</Version>
    <Category>File I/O</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Export the document in 3D IGES file.</Description>
    <ShortDesc>Export the document in 3D IGES file.</ShortDesc>
    <Result>Return TRUE if succeeded.</Result>
    <SeeAlso>ImportIGES</SeeAlso>
    <ID>13332</ID>
    <IDName>funcExportIGES</IDName>
    <InternalFunctionName>MP_ExportIGES</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>fileName</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Output file path.</Desc>
      </Param>
      <Param>
        <Name>exportSolidAsSurface</Name>
        <Type>boolMode</Type>
        <Desc>Export solit objects as surface.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateScriptResource</Name>
    <ChangedDate>2013:07:10T09:16:00</ChangedDate>
    <Version>1900</Version>
    <Category>General Edit</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Create a document script resource.</Description>
    <ShortDesc>Create a document script resource.</ShortDesc>
    <Result>Return TRUE if the creation was successful. The routine will fail if script with the specified name already exist.</Result>
    <SeeAlso>GetScriptResource,SetScriptResource,OpenScriptResPal</SeeAlso>
    <ID>13333</ID>
    <IDName>funcCreateScriptResource</IDName>
    <InternalFunctionName>MP_CreateScriptResource</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>scriptName</Name>
        <Type>stringMode</Type>
        <Desc>A unique name for the new document script.</Desc>
      </Param>
      <Param>
        <Name>paletteName</Name>
        <Type>stringMode</Type>
        <Desc>A name of the script palette that will contain the new script. If the script palette doesn't exist, it will be created.</Desc>
      </Param>
      <Param>
        <Name>paletteOpen</Name>
        <Type>boolMode</Type>
        <Desc>Pass in TRUE if the script palette should be opened when created, and FALSE if it should be closed. If the palette exist, this parameter has no effect.</Desc>
      </Param>
      <Param>
        <Name>script</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The script text.</Desc>
      </Param>
      <Param>
        <Name>python</Name>
        <Type>boolMode</Type>
        <Desc>Pass TRUE if the script text contains python script. Otherwise it will be considered VectorScript.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetScriptResource</Name>
    <ChangedDate>2013:07:10T09:16:00</ChangedDate>
    <Version>1900</Version>
    <Category>General Edit</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Return the script text of the specified script resource.</Description>
    <ShortDesc>Return the script text of the specified script resource.</ShortDesc>
    <Result>Return TRUE if the creation was successful. The routine will fail if script with the specified name does't exist.</Result>
    <SeeAlso>CreateScriptResource,SetScriptResource,OpenScriptResPal</SeeAlso>
    <ID>13334</ID>
    <IDName>funcGetScriptResource</IDName>
    <InternalFunctionName>MP_GetScriptResource</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>scriptName</Name>
        <Type>stringMode</Type>
        <Desc>The script name identifying the resource.</Desc>
      </Param>
      <Param>
        <Name>script</Name>
        <Type>eCharDynarrayVarMode</Type>
        <Desc>Return the script text.</Desc>
      </Param>
      <Param>
        <Name>python</Name>
        <Type>boolVarMode</Type>
        <Desc>Return if the script text is a python script.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetScriptResource</Name>
    <ChangedDate>2013:07:10T09:16:00</ChangedDate>
    <Version>1900</Version>
    <Category>General Edit</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Set the script text of the specified script resource.</Description>
    <ShortDesc>Set the script text of the specified script resource.</ShortDesc>
    <Result>Return TRUE if the creation was successful. The routine will fail if script with the specified name does't exist.</Result>
    <SeeAlso>CreateScriptResource,GetScriptResource,OpenScriptResPal</SeeAlso>
    <ID>13335</ID>
    <IDName>funcSetScriptResource</IDName>
    <InternalFunctionName>MP_SetScriptResource</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>scriptName</Name>
        <Type>stringMode</Type>
        <Desc>The script name identifying the resource.</Desc>
      </Param>
      <Param>
        <Name>script</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The script text.</Desc>
      </Param>
      <Param>
        <Name>python</Name>
        <Type>boolMode</Type>
        <Desc>Pass TRUE if the script text contains python script. Otherwise it will be considered VectorScript.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>OpenScriptResPal</Name>
    <ChangedDate>2013:07:10T09:14:00</ChangedDate>
    <Version>1900</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Open or close a script resource palette.</Description>
    <ShortDesc>Open or close a script resource palette.</ShortDesc>
    <SeeAlso>CreateScriptResource,GetScriptResource,SetScriptResource</SeeAlso>
    <ID>13336</ID>
    <IDName>procOpenScriptResPal</IDName>
    <InternalFunctionName>MP_OpenScriptResPal</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>paletteName</Name>
        <Type>stringMode</Type>
        <Desc>The script resource palette.</Desc>
      </Param>
      <Param>
        <Name>open</Name>
        <Type>boolMode</Type>
        <Desc>Pass in TRUE for the palette to be opened.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ExtrudeAlongPath</Name>
    <ChangedDate>2013:07:23T14:31:00</ChangedDate>
    <Version>1900</Version>
    <Category>Objects - 3D</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a new path extrude object in the document.  The profile defines the shape of the cross-section, and is extruded along the path to generate the resulting object.[[BR]][[BR]]The path argument must be a handle to a NURBS Curve object (type 111).  The profile argument must be a handle to an object of one of the following types: NURBS Curve, Polygon, Polyline, Arc, Rectangle, Rounded Rectangle, Line, Oval.[[BR]]</Description>
    <ShortDesc>Creates a new path extrude object in the document.</ShortDesc>
    <Result>Returns a generic solid HANDLE to the new path extrude if successful, otherwise returns NIL.[[BR]]</Result>
    <SeeAlso>CreateExtrudeAlongPath</SeeAlso>
    <Comments>The generic solid can not be edited[[BR]][[BR]]The following objects are supported as profile objects:[[BR]][[BR]]Line               2[[BR]]Box                3[[BR]]Oval               4[[BR]]Polygon         5[[BR]]Arc                6[[BR]]Freehand       8[[BR]]R Rect           13[[BR]]Polyline        21[[BR]]3D Poly        25[[BR]]NURBS Curve 111[[BR]][[BR]][[BR]]</Comments>
    <ID>13337</ID>
    <IDName>funcExtrudeAlongPath</IDName>
    <InternalFunctionName>MP_ExtrudeAlongPath</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>pathHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the path object.</Desc>
      </Param>
      <Param>
        <Name>profileHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the profile object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateTextStyleRes</Name>
    <ChangedDate>2013:08:29T11:48:00</ChangedDate>
    <Version>1900</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a new text style resource with the specified name.  A handle to the new resource is returned.  Once the resource is created the attributes of the text style resource should be set appropriately.</Description>
    <ShortDesc>Creates a new text style resource with the specified name.  A handle to the new resource is returned.</ShortDesc>
    <Result>A handle to the newly created text style resource will be returned.</Result>
    <ID>13338</ID>
    <IDName>funcCreateTextStyleResource</IDName>
    <InternalFunctionName>MP_CreateTextStyleResource</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>The name for the new text style.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetGradientDataN</Name>
    <ChangedDate>2013:12:12T09:46:00</ChangedDate>
    <Version>2000</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <ReturnType>Boolean</ReturnType>
    <ShortDesc>Gets ths sport position, midpoint position, color, and opacity of the specified gradient segment.</ShortDesc>
    <SeeAlso>SetGradientDataN,InsertGradientData</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]gradient :HANDLE;[[BR]]segmentIndex :INTEGER;[[BR]]spotPosition, midpointPosition :REAL;[[BR]]red, green, blue :LONGINT;[[BR]]opacity :INTEGER[[BR]]BEGIN[[BR]]gradient := GetObject('Cyan-Magenta-Yellow');[[BR]]segmentIndex := 3;[[BR]]GetGradientData(gradient, segmentIndex, spotPosition, midpointPosition, red, green, blue.opacity);[[BR]]Message(red, ' ', green, ' ', blue, ' ', opacity);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>13339</ID>
    <IDName>procGetGradientDataN</IDName>
    <InternalFunctionName>MP_GetGradientDataN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>gradient</Name>
        <Type>handleMode</Type>
        <Desc>Gradient that contains the segment.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intMode</Type>
        <Desc>Segment from which to get the data.</Desc>
      </Param>
      <Param>
        <Name>spotPosition</Name>
        <Type>rVarMode</Type>
        <Desc>Position of the segment's color spot relative to left-most point of the gradient.</Desc>
      </Param>
      <Param>
        <Name>midpointPosition</Name>
        <Type>rVarMode</Type>
        <Desc>Position of the segment's midpoint relative to color spot immediately to left.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Red component of the color spot's color.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Green component of the color spot's color.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Blue component of the color spot's color.</Desc>
      </Param>
      <Param>
        <Name>opacity</Name>
        <Type>intVarMode</Type>
        <Desc>Opacity of the color spot.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetGradientDataN</Name>
    <ChangedDate>2013:12:12T09:46:00</ChangedDate>
    <Version>2000</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <Description>Note: you must use a variable, initialized to the segment index, to pass as a parameter. After the data has been set, this variable will contain the index of the segment, which may have changed because of the spot position specified. </Description>
    <ShortDesc>Sets the spot position, midpoint position, color, and opacity of the specified gradient segment.</ShortDesc>
    <SeeAlso>GetGradientDataN,InsertGradientData</SeeAlso>
    <Example>segmentIndex := 4;[[BR]]SetGradientData(gradientHandle, segmentIndex, 0.9, 0.5, 255, 255, 255,100);</Example>
    <ID>13340</ID>
    <IDName>procSetGradientDataN</IDName>
    <InternalFunctionName>MP_SetGradientDataN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>gradient</Name>
        <Type>handleMode</Type>
        <Desc>Gradient that contains the segment.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intInOutMode</Type>
        <Desc>Segment for which to set the data.</Desc>
      </Param>
      <Param>
        <Name>spotPosition</Name>
        <Type>realMode</Type>
        <Desc>Position of the segment's color spot relative to left-most point of the gradient. </Desc>
      </Param>
      <Param>
        <Name>midpointPosition</Name>
        <Type>realMode</Type>
        <Desc>Position of the segment's midpoint relative to color spot immediately to left. </Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>longMode</Type>
        <Desc>Red component of the color spot's color.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>longMode</Type>
        <Desc>Green component of the color spot's color. </Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>longMode</Type>
        <Desc>Blue component of the color spot's color. </Desc>
      </Param>
      <Param>
        <Name>opacity</Name>
        <Type>intMode</Type>
        <Desc>Opacity of the color spot.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertGradientData</Name>
    <ChangedDate>2013:12:12T09:46:00</ChangedDate>
    <Version>2000</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>A segment consists of a single color spot and the single midpoint immediately to the right of the color spot. </Description>
    <ShortDesc>Inserts a new segment into the gradient and initializes its data to the specified values.</ShortDesc>
    <Result>Returns the index of the newly created segment; 0 otherwise. [[BR]]Note: segment indexes begin with 1. [[BR]]</Result>
    <SeeAlso>GetGradientDataN,SetGradientDataN</SeeAlso>
    <Example>index := InsertGradientData(gradientHandle, 0.35, 0.4, 255, 255, 255, 100);[[BR]]{ inserts a white color spot at position, 0.35, with a midpoint position of 0.4; 100 is max opacity (i.e. opaque) }</Example>
    <ID>13341</ID>
    <IDName>funcInsertGradientData</IDName>
    <InternalFunctionName>MP_InsertGradientData</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>gradient</Name>
        <Type>handleMode</Type>
        <Desc>Gradient into which a segment is to be inserted.</Desc>
      </Param>
      <Param>
        <Name>spotPosition</Name>
        <Type>realMode</Type>
        <Desc>Position of the segment's color spot relative to left-most point of the gradient. </Desc>
      </Param>
      <Param>
        <Name>midpointPosition</Name>
        <Type>realMode</Type>
        <Desc>Position of the segment's midpoint relative to color spot immediately to left. </Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>longMode</Type>
        <Desc>Red component of the color spot's color. </Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>longMode</Type>
        <Desc>Green component of the color spot's color. </Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>longMode</Type>
        <Desc>Blue component of the color spot's color. </Desc>
      </Param>
      <Param>
        <Name>opacity</Name>
        <Type>intMode</Type>
        <Desc>Opacity of the color spot.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetGradientOpacity</Name>
    <ChangedDate>2013:12:12T09:43:00</ChangedDate>
    <Version>2000</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Gets the opacity for the spot color of the specified gradient segment. </ShortDesc>
    <SeeAlso>SetGradientOpacity</SeeAlso>
    <Example>GetGradientOpacity(gradientHandle, 4, opacity);</Example>
    <ID>13342</ID>
    <IDName>procGetGradientOpacity</IDName>
    <InternalFunctionName>MP_GetGradientOpacity</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>gradient</Name>
        <Type>handleMode</Type>
        <Desc>Gradient that contains the segment.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intMode</Type>
        <Desc>Segment from which to get the data.</Desc>
      </Param>
      <Param>
        <Name>opacity</Name>
        <Type>intVarMode</Type>
        <Desc>Opacity at the spot position.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetGradientOpacity</Name>
    <ChangedDate>2013:12:12T09:44:00</ChangedDate>
    <Version>2000</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets the opacity for the spot color of the specified gradient segment. </ShortDesc>
    <SeeAlso>GetGradientOpacity</SeeAlso>
    <Example>SetGradientSpotColor(gradientHandle, 4, 100);</Example>
    <ID>13343</ID>
    <IDName>procSetGradientOpacity</IDName>
    <InternalFunctionName>MP_SetGradientOpacity</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>gradient</Name>
        <Type>handleMode</Type>
        <Desc>Gradient that contains the segment.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intMode</Type>
        <Desc>Segment for which to set the data.</Desc>
      </Param>
      <Param>
        <Name>opacity</Name>
        <Type>intMode</Type>
        <Desc>Opacity at the spot position.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetGradientSlider</Name>
    <ChangedDate>2013:12:12T09:42:00</ChangedDate>
    <Version>2000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <ShortDesc>Gets the spot position, midpoint position, color, and opacity of the specified gradient slider segment.</ShortDesc>
    <SeeAlso>SetGradientSlider,InsertGradientSliSeg</SeeAlso>
    <Example>GetGradientSlider(dialogID, componentID, 4, spotPosition, midpointPosition, red, green, blue,opacity);</Example>
    <ID>13344</ID>
    <IDName>procGetGradientSlider</IDName>
    <InternalFunctionName>MP_GetGradientSlider</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index to the dialog layout that contains the gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Index to a specific gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intMode</Type>
        <Desc>Segment from which to get the data.</Desc>
      </Param>
      <Param>
        <Name>spotPosition</Name>
        <Type>rVarMode</Type>
        <Desc>Position of the segment's color marker relative to left-most point of the slider.</Desc>
      </Param>
      <Param>
        <Name>midpointPosition</Name>
        <Type>rVarMode</Type>
        <Desc>Position of the segment's midpoint marker relative to color marker immediately to left.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Red component of the color spot's color.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Red component of the color spot's color.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Blue component of the color spot's color.</Desc>
      </Param>
      <Param>
        <Name>opacity</Name>
        <Type>intVarMode</Type>
        <Desc>Opacity for the color at the spot position.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetGradientSlider</Name>
    <ChangedDate>2013:12:12T09:23:00</ChangedDate>
    <Version>2000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Note: you must use a variable, initialized to the segment index, to pass as a parameter. After the data has been set, this variable will contain the index of the segment, which may have changed because of the spot position specified. </Description>
    <ShortDesc>Sets the spot position, midpoint position and color of the specified gradient slider segment. </ShortDesc>
    <SeeAlso>GetGradientSlider,InsertGradientSliSeg</SeeAlso>
    <Example>segmentIndex := 4;[[BR]]SetGradientSlider(dialogID, componentID, segmentIndex, 0.9, 0.5, 255, 255, 255,100);</Example>
    <ID>13345</ID>
    <IDName>procSetGradientSlider</IDName>
    <InternalFunctionName>MP_SetGradientSlider</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index to the dialog layout that contains the gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Index to a specific gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>segmentIndex</Name>
        <Type>intInOutMode</Type>
        <Desc>Segment for which to set the data.</Desc>
      </Param>
      <Param>
        <Name>spotPosition</Name>
        <Type>realMode</Type>
        <Desc>Position of the segment's color marker relative to left-most point of the slider.</Desc>
      </Param>
      <Param>
        <Name>midpointPosition</Name>
        <Type>realMode</Type>
        <Desc>Position of the segment's midpoint marker relative to color marker immediately to left.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>longMode</Type>
        <Desc>Red component of the color spot's color.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>longMode</Type>
        <Desc>Green component of the color spot's color.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>longMode</Type>
        <Desc>Blue component of the color spot's color.</Desc>
      </Param>
      <Param>
        <Name>opacity</Name>
        <Type>intMode</Type>
        <Desc>Opacity for the color at the spot position.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertGradientSliSeg</Name>
    <ChangedDate>2013:12:12T12:22:00</ChangedDate>
    <Version>2000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <ShortDesc>Inserts a new segment into the gradient slider and initializes its data to the specified values. </ShortDesc>
    <Result>Returns index to new segment. </Result>
    <SeeAlso>GetGradientSlider,SetGradientSlider</SeeAlso>
    <Example>segmentIndex := InsertGradientSliSeg(dialogID, componentID, 0.4, 255, 255, 255, 100);</Example>
    <ID>13346</ID>
    <IDName>funcInsertGradientSliSeg</IDName>
    <InternalFunctionName>MP_InsertGradientSliSeg</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>Index to the dialog layout that contains the gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>Index to a specific gradient slider component.</Desc>
      </Param>
      <Param>
        <Name>spotPosition</Name>
        <Type>realMode</Type>
        <Desc>Position of the segment's color marker relative to left-most point of the slider. The value should be &gt;= 0.0 and &lt;= 1.0, which represents a percentage distance across the slider.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>longMode</Type>
        <Desc>Red component of the color spot's color.</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>longMode</Type>
        <Desc>Green component of the color spot's color.</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>longMode</Type>
        <Desc>Blue component of the color spot's color.</Desc>
      </Param>
      <Param>
        <Name>opacity</Name>
        <Type>intMode</Type>
        <Desc>Opacity for the color at the spot position.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetFontListSize</Name>
    <ChangedDate>2014:01:09T17:31:00</ChangedDate>
    <Version>2000</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the number of available fonts on the local system.</Description>
    <ShortDesc>Returns the number of available fonts on the local system.</ShortDesc>
    <Example>AlrtDialog(Concat('The number of available fonts is: ', GetFontListSize));[[BR]]</Example>
    <ID>13347</ID>
    <IDName>funcGetFontListSize</IDName>
    <InternalFunctionName>MP_GetFontListSize</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>SetTextStyleRef</Name>
    <ChangedDate>2014:04:30T11:20:00</ChangedDate>
    <Version>2000</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the text style of an object to the referenced style. Reference 0 means Un-Styled.  This procedure will replace by-class styling.</Description>
    <ShortDesc>Sets the text style of an object to the referenced style.</ShortDesc>
    <SeeAlso>SetTextStyleRef, GetTextStyleRef, SetTextStyleRefN, GetTextStyleRefN, SetTextStyleByClass, SetTextStyleByClassN, IsTextStyleByClass, IsTextStyleByClassN</SeeAlso>
    <ID>13348</ID>
    <IDName>procSetTextStyleRef</IDName>
    <InternalFunctionName>MP_SetTextStyleRef</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectId</Name>
        <Type>handleMode</Type>
        <Desc>handle to object</Desc>
      </Param>
      <Param>
        <Name>textStyleRef</Name>
        <Type>longMode</Type>
        <Desc>text style reference id</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextStyleRef</Name>
    <ChangedDate>2014:04:30T11:22:00</ChangedDate>
    <Version>2000</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] returns the text style for the referenced object. The integer returned is the internal index of the text style used by this object. [[BR]][[BR]]If the text object is using class text style, this returns the effective style.  You should use the *TextStyleByClass* functions to check and preserve by-class behavior.</Description>
    <ShortDesc>Returns the text style reference of the specified object.</ShortDesc>
    <SeeAlso>SetTextStyleRef, GetTextStyleRef, SetTextStyleRefN, GetTextStyleRefN, SetTextStyleByClass, SetTextStyleByClassN, IsTextStyleByClass, IsTextStyleByClassN</SeeAlso>
    <ID>13349</ID>
    <IDName>funcGetTextStyleRef</IDName>
    <InternalFunctionName>MP_GetTextStyleRef</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectId</Name>
        <Type>handleMode</Type>
        <Desc>handle to object</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextStyleByClass</Name>
    <ChangedDate>2014:04:30T11:17:00</ChangedDate>
    <Version>2000</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>[[name]] sets the referenced object to use the class text style.  To undo this, use SetTextStyleRef on the object.</Description>
    <ShortDesc>Sets the referenced object to use the class text style.</ShortDesc>
    <SeeAlso>SetTextStyleRef, GetTextStyleRef, SetTextStyleRefN, GetTextStyleRefN, SetTextStyleByClass, SetTextStyleByClassN, IsTextStyleByClass, IsTextStyleByClassN</SeeAlso>
    <ID>13350</ID>
    <IDName>procSetTextStyleByClass</IDName>
    <InternalFunctionName>MP_SetTextStyleByClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectId</Name>
        <Type>handleMode</Type>
        <Desc>handle to object</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsTextStyleByClass</Name>
    <ChangedDate>2014:04:30T11:12:00</ChangedDate>
    <Version>2000</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Procedure [[name]] returns whether the class text style is used for the referenced object.</Description>
    <ShortDesc>Returns whether the class text style is used for the referenced object.</ShortDesc>
    <SeeAlso>SetTextStyleRef, GetTextStyleRef, SetTextStyleRefN, GetTextStyleRefN, SetTextStyleByClass, SetTextStyleByClassN, IsTextStyleByClass, IsTextStyleByClassN</SeeAlso>
    <ID>13351</ID>
    <IDName>funcIsTextStyleByClass</IDName>
    <InternalFunctionName>MP_IsTextStyleByClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectId</Name>
        <Type>handleMode</Type>
        <Desc>handle to object</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClUseTextStyle</Name>
    <ChangedDate>2014:02:11T17:39:00</ChangedDate>
    <Version>2000</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Controls whether the text style of the specified class is used at object creation.</Description>
    <ShortDesc>Controls whether the text style of the specified class is used at object creation.</ShortDesc>
    <SeeAlso>GetClUseTextStyle, SetClTextStyleRef, GetClTextStyleRef</SeeAlso>
    <ID>13352</ID>
    <IDName>procSetClUseTextStyle</IDName>
    <InternalFunctionName>MP_SetClUseTextStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class</Desc>
      </Param>
      <Param>
        <Name>use</Name>
        <Type>boolMode</Type>
        <Desc>Use text style on-off setting.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClUseTextStyle</Name>
    <ChangedDate>2014:02:11T17:43:00</ChangedDate>
    <Version>2000</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] returns whether the text style of the specified class is used at object creation.</Description>
    <ShortDesc>Returns whether the text style of the specified class is used at object creation.</ShortDesc>
    <SeeAlso>SetClUseTextStyle, SetClTextStyleRef, GetClTextStyleRef</SeeAlso>
    <ID>13353</ID>
    <IDName>funcGetClUseTextStyle</IDName>
    <InternalFunctionName>MP_GetClUseTextStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClTextStyleRef</Name>
    <ChangedDate>2014:02:11T17:56:00</ChangedDate>
    <Version>2000</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <Description>Function [[name]] sets the text style of the specified class.  The integer style is the internal index of the text style.</Description>
    <ShortDesc>Sets the text style of the specified class.</ShortDesc>
    <SeeAlso>SetClUseTextStyle, GetClUseTextStyle, GetClTextStyleRef</SeeAlso>
    <ID>13354</ID>
    <IDName>procSetClTextStyleRef</IDName>
    <InternalFunctionName>MP_SetClTextStyleRef</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class</Desc>
      </Param>
      <Param>
        <Name>textStyleRef</Name>
        <Type>longMode</Type>
        <Desc>text style reference id</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClTextStyleRef</Name>
    <ChangedDate>2014:02:11T17:50:00</ChangedDate>
    <Version>2000</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] gets the text style of the specified class.  The integer style is the internal index of the text style.</Description>
    <ShortDesc>Gets the text style reference of the specified class.</ShortDesc>
    <SeeAlso>SetClUseTextStyle, GetClUseTextStyle, SetClTextStyleRef</SeeAlso>
    <ID>13355</ID>
    <IDName>funcGetClTextStyleRef</IDName>
    <InternalFunctionName>MP_GetClTextStyleRef</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>Name of class</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDimNote</Name>
    <ChangedDate>2014:03:06T11:51:00</ChangedDate>
    <Version>2000</Version>
    <Category>Dimensions</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] sets the note text of the referenced dimension to the specified value.</Description>
    <ShortDesc>Sets note text of the referenced dimension to the specified value.</ShortDesc>
    <Comments>Sets note text (text under dimension line or dimension text) of the referenced dimension to the specified value.[[BR]][[BR]][ao 3/6/14]</Comments>
    <Example>SetDimNote(dimHandle,'DLO');</Example>
    <ID>13356</ID>
    <IDName>procSetDimNote</IDName>
    <InternalFunctionName>MP_SetDimNote</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to dimension.</Desc>
      </Param>
      <Param>
        <Name>note</Name>
        <Type>stringMode</Type>
        <Desc>Note string.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjectWallOffset</Name>
    <ChangedDate>2015:08:10T04:59:00</ChangedDate>
    <Version>2000</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets an object's offset value in it's break record. [[BR]][[BR]]The object (objH) must be contained in wall (wallH)  to succeed.</Description>
    <ShortDesc>Get the offset for the object within the wall.</ShortDesc>
    <Result>True or False upon successful setting of the flag.[[BR]][[BR]]False can occur for the following conditions:[[BR]]objH is null.[[BR]]wallH is null.[[BR]]objH is not contained in wallH.</Result>
    <ID>13357</ID>
    <IDName>funcGetObjectWallOffset</IDName>
    <InternalFunctionName>MP_GetObjectWallOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objH</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>wallH</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>offset</Name>
        <Type>rVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjectWallHeight</Name>
    <ChangedDate>2015:08:10T05:00:00</ChangedDate>
    <Version>2000</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets an object's height value in it's break record. [[BR]][[BR]]The object (objH) must be contained in wall (wallH)  to succeed.</Description>
    <ShortDesc>Get the height for the object within the wall.</ShortDesc>
    <Result>True or False upon successful setting of the flag.[[BR]][[BR]]False can occur for the following conditions:[[BR]]objH is null.[[BR]]wallH is null.[[BR]]objH is not contained in wallH.</Result>
    <ID>13358</ID>
    <IDName>funcGetObjectWallHeight</IDName>
    <InternalFunctionName>MP_GetObjectWallHeight</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objH</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>wallH</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>rVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjectWallHeight</Name>
    <ChangedDate>2015:08:10T05:00:00</ChangedDate>
    <Version>2000</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets an object's height value in it's break record. [[BR]][[BR]]The object (objH) must be contained in wall (wallH)  to succeed.</Description>
    <ShortDesc>Set the height for the object within the wall.</ShortDesc>
    <Result>True or False upon successful setting of the flag.[[BR]][[BR]]False can occur for the following conditions:[[BR]]objH is null.[[BR]]wallH is null.[[BR]]objH is not contained in wallH.</Result>
    <ID>13359</ID>
    <IDName>funcSetObjectWallHeight</IDName>
    <InternalFunctionName>MP_SetObjectWallHeight</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objH</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>wallH</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>distanceMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDescriptionText</Name>
    <ChangedDate>2014:04:28T07:55:00</ChangedDate>
    <Version>2000</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the user-supplied description for an object.[[BR]]Adds the description data node if one does not already exist.</Description>
    <ShortDesc>Sets an object's description text</ShortDesc>
    <Result>true if text was successfully set; false if error occurred.</Result>
    <SeeAlso>GetDescriptionText</SeeAlso>
    <Comments>Added for T01363 to add descriptions for classes and layers.</Comments>
    <ID>13360</ID>
    <IDName>funcSetDescriptionText</IDName>
    <InternalFunctionName>MP_SetDescriptionText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle of the object for which the description should be set.</Desc>
      </Param>
      <Param>
        <Name>descriptionText</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The description text to be set for the object</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDescriptionText</Name>
    <ChangedDate>2014:07:30T09:31:00</ChangedDate>
    <Version>2000</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Retrieves any description text that exists for a specified object and passes it back in the descriptionText argument. The descriptionText argument will be empty if the object has no description text.</Description>
    <ShortDesc>Retrieves any description text that exists for a specified object and passes it back in the descriptionText argument.</ShortDesc>
    <SeeAlso>SetDescriptionText</SeeAlso>
    <Comments>Added for T01363 to add descriptions for classes and layers.</Comments>
    <Example>PROCEDURE GetDescExample;[[BR]]VAR[[BR]]	descriptionTextDyn	:DYNARRAY [] of CHAR;[[BR]]	tempH : HANDLE;[[BR]]BEGIN[[BR]]	tempH := GetObject ('Dimension');[[BR]][[BR]]	GetDescriptionText (tempH, descriptionTextDyn);[[BR]][[BR]]	IF descriptionTextDyn &lt;&gt; ''  THEN [[BR]]		Message (descriptionTextDyn)[[BR]]	ELSE[[BR]]		Message ('no description');[[BR]]END;[[BR]]Run (GetDescExample);</Example>
    <ID>13361</ID>
    <IDName>procGetDescriptionText</IDName>
    <InternalFunctionName>MP_GetDescriptionText</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle of object for which to retrieve the text.</Desc>
      </Param>
      <Param>
        <Name>descriptionText</Name>
        <Type>eCharDynarrayVarMode</Type>
        <Desc>Object's description text, if any exists.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ExportImageFile</Name>
    <ChangedDate>2014:04:14T14:17:00</ChangedDate>
    <Version>2000</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Export the specified Image object in Vectorworks as an image file.</Description>
    <ShortDesc>Export the specified Image object in Vectorworks as an image file.</ShortDesc>
    <ID>13362</ID>
    <IDName>funcExportImageFile</IDName>
    <InternalFunctionName>MP_ExportImageFile</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hHmage</Name>
        <Type>handleMode</Type>
        <Desc>The handle of the image object to be exported.</Desc>
      </Param>
      <Param>
        <Name>filePath</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Full path to the output image file.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLineTypeChoice</Name>
    <ChangedDate>2014:04:11T16:36:00</ChangedDate>
    <Version>2000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Set the current choice of the line style popup dialog control to the specified line type.</Description>
    <ShortDesc>Set the current choice of the line style popup dialog control to the specified line type.</ShortDesc>
    <ID>13363</ID>
    <IDName>procSetLineTypeChoice</IDName>
    <InternalFunctionName>MP_SetLineTypeChoice</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the line style control.</Desc>
      </Param>
      <Param>
        <Name>lineType</Name>
        <Type>longMode</Type>
        <Desc>The internal index (reference number) of the line type.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLineTypeChoice</Name>
    <ChangedDate>2014:04:11T16:42:00</ChangedDate>
    <Version>2000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Get current choice of line style popup dialog control.  Choice is the internal index (reference number) of the line type.</Description>
    <ShortDesc>Get current choice of line style popup dialog control.  Choice is the internal index (reference number) of the line type.</ShortDesc>
    <ID>13364</ID>
    <IDName>procGetLineTypeChoice</IDName>
    <InternalFunctionName>MP_GetLineTypeChoice</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the line style control.</Desc>
      </Param>
      <Param>
        <Name>lineType</Name>
        <Type>lngVarMode</Type>
        <Desc>The internal index (reference number) of the line type.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLineTypeAttriData</Name>
    <ChangedDate>2014:04:14T12:20:00</ChangedDate>
    <Version>2000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Set current choices for the line attribute dialog control.  Both the line type and the line weight in mils can be specified.</Description>
    <ShortDesc>Set current choices for the line attribute dialog control.  Both the line type and the line weight in mils can be specified.</ShortDesc>
    <ID>13365</ID>
    <IDName>procSetLineTypeAttriData</IDName>
    <InternalFunctionName>MP_SetLineTypeAttriData</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the line attribute control.</Desc>
      </Param>
      <Param>
        <Name>lineType</Name>
        <Type>longMode</Type>
        <Desc>The internal index (reference number) of the line type.</Desc>
      </Param>
      <Param>
        <Name>lineWeight</Name>
        <Type>intMode</Type>
        <Desc>The line weight.The value is in mils.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLineTypeAttriData</Name>
    <ChangedDate>2014:04:14T12:20:00</ChangedDate>
    <Version>2000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Get the current choices for the combined line style and line weight dialog control.  The line type value is the line type internal index (reference number). The line weight value is in mils. </Description>
    <ShortDesc>Get the current choices for the combined line style and line weight dialog control.  The line type value is the line type internal index (reference number). The line weight value is in mils. </ShortDesc>
    <ID>13366</ID>
    <IDName>procGetLineTypeAttriData</IDName>
    <InternalFunctionName>MP_GetLineTypeAttriData</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the line attribute control.</Desc>
      </Param>
      <Param>
        <Name>lineType</Name>
        <Type>lngVarMode</Type>
        <Desc>The internal index (reference number) of the line type.</Desc>
      </Param>
      <Param>
        <Name>lineWeight</Name>
        <Type>intVarMode</Type>
        <Desc>The line weight.The value is in mils.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLBItemLineType</Name>
    <ChangedDate>2014:04:11T17:09:00</ChangedDate>
    <Version>2000</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the specified list browser item's line type.</Description>
    <ShortDesc>Sets the specified list browser item's line type.</ShortDesc>
    <ID>13367</ID>
    <IDName>funcSetLBItemLineType</IDName>
    <InternalFunctionName>MP_SetLBItemLineType</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>lineType</Name>
        <Type>longMode</Type>
        <Desc>the line type internal index (reference number)</Desc>
      </Param>
      <Param>
        <Name>lineWeight</Name>
        <Type>intMode</Type>
        <Desc>the line weight</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLBItemLineType</Name>
    <ChangedDate>2014:04:11T17:09:00</ChangedDate>
    <Version>2000</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the specified list browser item's line type.</Description>
    <ShortDesc>Gets the specified list browser item's line type.</ShortDesc>
    <ID>13368</ID>
    <IDName>funcGetLBItemLineType</IDName>
    <InternalFunctionName>MP_GetLBItemLineType</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>itemIndex</Name>
        <Type>intMode</Type>
        <Desc>the row index</Desc>
      </Param>
      <Param>
        <Name>subItemIndex</Name>
        <Type>intMode</Type>
        <Desc>the column index</Desc>
      </Param>
      <Param>
        <Name>lineType</Name>
        <Type>lngVarMode</Type>
        <Desc>the line type internal index (reference number)</Desc>
      </Param>
      <Param>
        <Name>lineWeight</Name>
        <Type>intVarMode</Type>
        <Desc>the line weight</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumLineTypeItems</Name>
    <ChangedDate>2014:04:11T17:16:00</ChangedDate>
    <Version>2000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the number of line types in the line style control.</Description>
    <ShortDesc>Returns the number of line types in the line style control.</ShortDesc>
    <ID>13369</ID>
    <IDName>funcGetNumLineTypeItems</IDName>
    <InternalFunctionName>MP_GetNumLineTypeItems</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the line style control.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLineTypeAtIndex</Name>
    <ChangedDate>2014:04:11T17:25:00</ChangedDate>
    <Version>2000</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Get the line type at the specified index in the line style control.</Description>
    <ShortDesc>Get the line type at the specified index in the line style control.</ShortDesc>
    <ID>13370</ID>
    <IDName>procGetLineTypeAtIndex</IDName>
    <InternalFunctionName>MP_GetLineTypeAtIndex</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index of the line style control.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The choice index.</Desc>
      </Param>
      <Param>
        <Name>lineType</Name>
        <Type>lngVarMode</Type>
        <Desc>The internal index (reference number) of the line type.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumDashDataPairs</Name>
    <ChangedDate>2017:10:27T08:23:00</ChangedDate>
    <Version>2000</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Deprecated - will generate error. Use GetNumDashDataPairsN instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use GetNumDashDataPairsN instead.</ShortDesc>
    <SeeAlso>GetNumDashDataPairsN </SeeAlso>
    <Comments>Deprecated - will generate error. Use GetNumDashDataPairsN instead.</Comments>
    <Example>The dash-related functions here have been deprecated and will return errors. [[BR]]PROCEDURE Example;[[BR]]VAR[[BR]]n, numPairs, dashIndex : INTEGER;[[BR]]scaleWThick  :BOOLEAN;[[BR]]arrayDashDat : ARRAY[1..5] OF POINT;[[BR]]x,y : REAL;[[BR]][[BR]]BEGIN[[BR]][[BR]]dashIndex := GetDashStyleIndex(TRUE, 2, 0.12, 0.18, 0.03, 0.07);[[BR]][[BR]]numPairs := GetNumDashDataPairs(dashIndex,scaleWThick);[[BR]][[BR]]FOR n := 1 TO numPairs DO BEGIN[[BR]] IF (GetDashDataValPairAt(dashIndex, n , x, y)) THEN BEGIN[[BR]]   arrayDashDat[n].x := x ;[[BR]]   arrayDashDat[n].y := y ;[[BR]] END; [[BR]]END;[[BR]][[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>13372</ID>
    <IDName>funcGetNumDashDataPairs</IDName>
    <InternalFunctionName>MP_GetNumDashDataPairs</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dashIndex</Name>
        <Type>intMode</Type>
        <Desc>The dash style index.</Desc>
      </Param>
      <Param>
        <Name>swt</Name>
        <Type>boolVarMode</Type>
        <Desc>The "scale with thickness" setting.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDashDataValPairAt</Name>
    <ChangedDate>2017:10:27T08:06:00</ChangedDate>
    <Version>2000</Version>
    <OldVersion Mode="AsError">2400</OldVersion>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deprecated - will generate error. Use GetDashDataValPrAtN instead.</Description>
    <ShortDesc>Deprecated - will generate error. Use GetDashDataValPrAtN instead.</ShortDesc>
    <SeeAlso>GetDashDataValPrAtN</SeeAlso>
    <Comments>Deprecated - will generate error. Use GetDashDataValPrAtN instead.</Comments>
    <Example>The dash-related functions here have been deprecated and will return errors. [[BR]]PROCEDURE Example;[[BR]]VAR[[BR]]n, numPairs, dashIndex : INTEGER;[[BR]]scaleWThick  :BOOLEAN;[[BR]]arrayDashDat : ARRAY[1..5] OF POINT;[[BR]]x,y : REAL;[[BR]][[BR]]BEGIN[[BR]][[BR]]dashIndex := GetDashStyleIndex(TRUE, 2, 0.12, 0.18, 0.03, 0.07);[[BR]][[BR]]numPairs := GetNumDashDataPairs(dashIndex,scaleWThick);[[BR]][[BR]]FOR n := 1 TO numPairs DO BEGIN[[BR]] IF (GetDashDataValPairAt(dashIndex, n , x, y)) THEN BEGIN[[BR]]   arrayDashDat[n].x := x ;[[BR]]   arrayDashDat[n].y := y ;[[BR]] END; [[BR]]END;[[BR]][[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>13373</ID>
    <IDName>funcGetDashDataValPairAt</IDName>
    <InternalFunctionName>MP_GetDashDataValPairAt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dashStyleIndex</Name>
        <Type>intMode</Type>
        <Desc>The dash style index.</Desc>
      </Param>
      <Param>
        <Name>dataIndex</Name>
        <Type>intMode</Type>
        <Desc>Index fo the data value pair.</Desc>
      </Param>
      <Param>
        <Name>dash</Name>
        <Type>rVarMode</Type>
        <Desc>The dash segement value.</Desc>
      </Param>
      <Param>
        <Name>gap</Name>
        <Type>rVarMode</Type>
        <Desc>The gap segment value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextStyleRefN</Name>
    <ChangedDate>2014:04:30T11:28:00</ChangedDate>
    <Version>2000</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>[[name]] sets the text style of a specified substring of a text object to the referenced style. Reference 0 means Un-Styled. This procedure will replace by-class styling.</Description>
    <ShortDesc>Sets the text style of a specified substring of a text object to the referenced style</ShortDesc>
    <Result>Returns False if object is not a text object, or if part of the substring is past the end of existing text. Otherwise returns true.</Result>
    <SeeAlso>SetTextStyleRef, GetTextStyleRef, GetTextStyleRefN, SetTextStyleByClass, SetTextStyleByClassN, IsTextStyleByClass, IsTextStyleByClassN</SeeAlso>
    <ID>13374</ID>
    <IDName>funcSetTextStyleRefN</IDName>
    <InternalFunctionName>MP_SetTextStyleRefN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectId</Name>
        <Type>handleMode</Type>
        <Desc>handle to text object</Desc>
      </Param>
      <Param>
        <Name>start</Name>
        <Type>intMode</Type>
        <Desc>Start position in text string, zero-based. </Desc>
      </Param>
      <Param>
        <Name>count</Name>
        <Type>intMode</Type>
        <Desc>Length of substring.</Desc>
      </Param>
      <Param>
        <Name>textStyleRef</Name>
        <Type>longMode</Type>
        <Desc>text style reference id</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTextStyleRefN</Name>
    <ChangedDate>2014:04:30T11:33:00</ChangedDate>
    <Version>2000</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>[[name]] returns the text style reference at a specified position within the text object. Reference 0 means Un-Styled.[[BR]][[BR]]If the text object is using class text style, this returns the effective style.  You should use the *TextStyleByClass* functions to check and preserve by-class behavior.</Description>
    <ShortDesc>Returns the text style reference of one character of a text object</ShortDesc>
    <Result>Returns the text style reference id for the requested character postion</Result>
    <SeeAlso>SetTextStyleRef, GetTextStyleRef, SetTextStyleRefN, GetTextStyleRefN, SetTextStyleByClass, SetTextStyleByClassN, IsTextStyleByClass, IsTextStyleByClassN</SeeAlso>
    <ID>13375</ID>
    <IDName>funcGetTextStyleRefN</IDName>
    <InternalFunctionName>MP_GetTextStyleRefN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectId</Name>
        <Type>handleMode</Type>
        <Desc>handle to text object</Desc>
      </Param>
      <Param>
        <Name>position</Name>
        <Type>intMode</Type>
        <Desc>Position in text string, zero-based. </Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTextStyleByClassN</Name>
    <ChangedDate>2014:04:30T11:28:00</ChangedDate>
    <Version>2000</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>[[name]] sets a specified substring of a text object to use the class text style. To undo this, use SetTextStyleRef or SetTextStyleRefN on the text.</Description>
    <ShortDesc>Sets a specified substring of a text object to use the class text style.</ShortDesc>
    <Result>Returns False if object is not a text object, or if part of the substring is past the end of existing text. Otherwise returns true.</Result>
    <SeeAlso>SetTextStyleRef, GetTextStyleRef, SetTextStyleRefN, GetTextStyleRefN, SetTextStyleByClass, SetTextStyleByClassN, IsTextStyleByClass, IsTextStyleByClassN</SeeAlso>
    <ID>13376</ID>
    <IDName>funcSetTextStyleByClassN</IDName>
    <InternalFunctionName>MP_SetTextStyleByClassN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectId</Name>
        <Type>handleMode</Type>
        <Desc>handle to text object</Desc>
      </Param>
      <Param>
        <Name>start</Name>
        <Type>intMode</Type>
        <Desc>Start position in text string, zero-based.</Desc>
      </Param>
      <Param>
        <Name>count</Name>
        <Type>intMode</Type>
        <Desc>Length of substring.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsTextStyleByClassN</Name>
    <ChangedDate>2014:04:30T11:26:00</ChangedDate>
    <Version>2000</Version>
    <Category>Objects - Text</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>[[name]] returns whether the class text style is used at a specified position within the text object.</Description>
    <ShortDesc>Returns whether the class text style is used for one character of a text object.</ShortDesc>
    <Result>Returns True if the requested character postion uses the class text style</Result>
    <SeeAlso>SetTextStyleRef, GetTextStyleRef, SetTextStyleRefN, GetTextStyleRefN, SetTextStyleByClass, SetTextStyleByClassN, IsTextStyleByClass, IsTextStyleByClassN</SeeAlso>
    <ID>13377</ID>
    <IDName>funcIsTextStyleByClassN</IDName>
    <InternalFunctionName>MP_IsTextStyleByClassN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectId</Name>
        <Type>handleMode</Type>
        <Desc>handle to text object</Desc>
      </Param>
      <Param>
        <Name>position</Name>
        <Type>intMode</Type>
        <Desc>Position in text string, zero-based. </Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumLevelTemplates</Name>
    <ChangedDate>2014:04:29T16:30:00</ChangedDate>
    <Version>2000</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the number of story level templates in the file. Story Levels contain a level type, elevation, and optional layer to be used to bound objects on stories; Story Level Templates define a generic level that can be added to multiple stories.</Description>
    <ShortDesc>Returns the number of Story Level templates in the file.</ShortDesc>
    <Result>The number of Story Level Templates in the document.</Result>
    <SeeAlso>GetLevelTemplateName,SetLevelTemplateName,CreateLevelTemplate,DeleteLevelTemplate,GetLevelTemplateInfo</SeeAlso>
    <ID>13378</ID>
    <IDName>funcGetNumLevelTemplates</IDName>
    <InternalFunctionName>MP_GetNumLevelTemplates</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetLevelTemplateName</Name>
    <ChangedDate>2014:04:29T16:32:00</ChangedDate>
    <Version>2000</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Returns the name of the nth Story Level Template in the file. For example, if 3 is passed in, it will return the name of the 3rd Story Level Template in the file.</Description>
    <ShortDesc>Returns the name of the Story Level Template with the indicated index.</ShortDesc>
    <Result>The name of the Story Level Template at 'index',</Result>
    <SeeAlso>GetNumLevelTemplates, SetLevelTemplateName,CreateLevelTemplate,DeleteLevelTemplate,GetLevelTemplateInfo</SeeAlso>
    <Example>VAR[[BR]][[BR]]templateName:STRING;[[BR]][[BR]]BEGIN[[BR]][[BR]]templateName:=GetLevelTemplateName(2);</Example>
    <ID>13379</ID>
    <IDName>funcGetLevelTemplateName</IDName>
    <InternalFunctionName>MP_GetLevelTemplateName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the Story Level Template whose name is to be returned.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLevelTemplateName</Name>
    <ChangedDate>2014:04:29T16:32:00</ChangedDate>
    <Version>2000</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the name of the Story Level Template at 'index' to be 'name'.</Description>
    <ShortDesc>Sets the name of a Story Level Template.</ShortDesc>
    <Result>Whether the function succeeded in setting the name.</Result>
    <SeeAlso>GetNumLevelTemplates, GetLevelTemplateName, SetLevelTemplateName, CreateLevelTemplate, DeleteLevelTemplate, GetLevelTemplateInfo</SeeAlso>
    <Example>VAR[[BR]][[BR]]result : BOOLEAN;[[BR]][[BR]]BEGIN[[BR]][[BR]]result := SetLevelTemplateName(2, "Subfloor");</Example>
    <ID>13380</ID>
    <IDName>funcSetLevelTemplateName</IDName>
    <InternalFunctionName>MP_SetLevelTemplateName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the Story Level Template.</Desc>
      </Param>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
        <Desc>The new name for the Story Level Template at 'index'.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateLevelTemplate</Name>
    <ChangedDate>2014:04:29T16:29:00</ChangedDate>
    <Version>2000</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Creates a Story Level Template in the current file. Sets the index parameter to the index of the new template in the list of templates. Story Levels contain a level type, elevation, and optional layer to be used to bound objects on stories; Story Level Templates define a generic level that can be added to multiple stories.</Description>
    <ShortDesc>Creates a new Story Level Template.</ShortDesc>
    <Result>Whether the Story Level Template was successfully created.</Result>
    <SeeAlso>GetNumLevelTemplates, GetLevelTemplateName, SetLevelTemplateName, DeleteLevelTemplate, GetLevelTemplateInfo</SeeAlso>
    <Example>VAR[[BR]][[BR]]success:BOOLEAN;[[BR]][[BR]]BEGIN[[BR]][[BR]]success := CreateLevelTemplate('Mod-Slab', 1, 'LT_Slab', 0, 6);</Example>
    <ID>13381</ID>
    <IDName>funcCreateLevelTemplate</IDName>
    <InternalFunctionName>MP_CreateLevelTemplate</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>layerName</Name>
        <Type>stringMode</Type>
        <Desc>The layer name for the new Story Level Template.  This can be blank, meaning that layers will not be created for instances of the new Story Level Template.</Desc>
      </Param>
      <Param>
        <Name>scaleFactor</Name>
        <Type>realMode</Type>
        <Desc>The scale factor for the (optional) layer associated with this Story Level Template.</Desc>
      </Param>
      <Param>
        <Name>levelType</Name>
        <Type>stringMode</Type>
        <Desc>The level type for the new Story Level Template.  There may be multiple Story Level Templates with the same level type, as long as they have different elevations.</Desc>
      </Param>
      <Param>
        <Name>elevation</Name>
        <Type>realMode</Type>
        <Desc>The elevation of the Story Level Template, relative to the height of the story in which the level is used.</Desc>
      </Param>
      <Param>
        <Name>wallHeight</Name>
        <Type>realMode</Type>
        <Desc>The wall height for (optional) layers created when using this Story Level Template in a Story.  If the layer name is empty, this parameter is unused.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intVarMode</Type>
        <Desc>After the function is called, this parameter contains the index of the new Story Level Template.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DeleteLevelTemplate</Name>
    <ChangedDate>2014:04:29T16:29:00</ChangedDate>
    <Version>2000</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Deletes the nth Story Level Template from the current file. For example, if 3 is passed in, it will delete the 3rd Story Level Template in the file. </Description>
    <ShortDesc>Deletes a Story Level Template at the indicated index.</ShortDesc>
    <Result>Whether the Story Level Template at 'index' was found and deleted successfully.</Result>
    <SeeAlso>GetNumStoryLayerTemplates, GetLevelTemplateName, SetLevelTemplateName, CreateLevelTemplate, GetLevelTemplateInfo</SeeAlso>
    <Example>VAR[[BR]][[BR]]success:BOOLEAN;[[BR]][[BR]]BEGIN[[BR]][[BR]]success := DeleteStoryTemplate(3);</Example>
    <ID>13382</ID>
    <IDName>funcDeleteLevelTemplate</IDName>
    <InternalFunctionName>MP_DeleteLevelTemplate</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the Story Level Template to be deleted.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLevelTemplateInfo</Name>
    <ChangedDate>2014:04:29T16:31:00</ChangedDate>
    <Version>2000</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Used to access the properties of the Story Level Template at 'index'.  The name, scaleFactor, levelType, elevation, and wallHeight parameters of the requested Story Level Template will be returned in the appropriate parameters.</Description>
    <ShortDesc>Gets the details of the Story Level Template at 'index'.</ShortDesc>
    <Result>Whether the Story Level Template at 'index' was found and valid.</Result>
    <SeeAlso>GetNumLevelTemplates, GetLevelTemplateName, SetLevelTemplateName, CreateLevelTemplate, DeleteLevelTemplate, GetLevelTemplateInfo</SeeAlso>
    <ID>13383</ID>
    <IDName>funcGetLevelTemplateInfo</IDName>
    <InternalFunctionName>MP_GetLevelTemplateInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the desired Story Level Template.</Desc>
      </Param>
      <Param>
        <Name>layerName</Name>
        <Type>strVarMode</Type>
        <Desc>The layer name associated with the Story Level Template at 'index'.  If this is empty, the corresponding Story Level Template does not use or create a layer.</Desc>
      </Param>
      <Param>
        <Name>scaleFactor</Name>
        <Type>rVarMode</Type>
        <Desc>The scale of the layer associated with the Story Level Template at 'index'.  If this layer name is blank, this parameter has no use. </Desc>
      </Param>
      <Param>
        <Name>levelType</Name>
        <Type>strVarMode</Type>
        <Desc>The level type of the Story Level Template at 'index'.</Desc>
      </Param>
      <Param>
        <Name>elevation</Name>
        <Type>rVarMode</Type>
        <Desc>The elevation of the Story Level Template at 'index'.</Desc>
      </Param>
      <Param>
        <Name>wallHeight</Name>
        <Type>rVarMode</Type>
        <Desc>The wall height of the Story Level Template at 'index'.  If the layer name is blank, this parameter has no meaning.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddStoryLevel</Name>
    <ChangedDate>2014:04:29T16:16:00</ChangedDate>
    <Version>2000</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Adds a new Story Layer to the Story pointed to by 'storyHandle'.  There must not be another story level in this story that matches 'levelType' or 'elevation', or the function will fail.  If the layer 'layerName' already exists, it will be associated with the new Story Level.</Description>
    <ShortDesc>Adds a Story Level to the specified Story.</ShortDesc>
    <Result>Whether the new Story Level was created and added.</Result>
    <SeeAlso>CreateStory, AddLevelFromTemplate, RemoveStoryLevel,SetLevelElevation, GetLevelElevation</SeeAlso>
    <Example>VAR[[BR]][[BR]]storyHandle : HANDLE[[BR]]success:BOOLEAN[[BR]][[BR]]BEGIN[[BR]][[BR]]storyHandle := CreateStory('Floor 1', '-1');[[BR]]success := AddStoryLevel(storyHandle, 'Finish Floor', 0, 'Floor');</Example>
    <ID>13384</ID>
    <IDName>funcAddStoryLevel</IDName>
    <InternalFunctionName>MP_AddStoryLevel</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>storyHandle</Name>
        <Type>handleMode</Type>
        <Desc>The handle of the story that the new level should be added to.</Desc>
      </Param>
      <Param>
        <Name>levelType</Name>
        <Type>stringMode</Type>
        <Desc>The level type of the new Story Level.  This cannot be blank.</Desc>
      </Param>
      <Param>
        <Name>elevation</Name>
        <Type>realMode</Type>
        <Desc>The elevation of the new Story Level in the story.</Desc>
      </Param>
      <Param>
        <Name>layerName</Name>
        <Type>stringMode</Type>
        <Desc>The name of the layer to associate with the new Story Level.  This is optional.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveStoryLevel</Name>
    <ChangedDate>2014:04:29T16:16:00</ChangedDate>
    <Version>2000</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Removes the Story Level matching 'levelType'  from a Story.  If 'bDeleteLayer' is true and the Story Level has an associated layer, the layer will be deleted as well.</Description>
    <ShortDesc>Removes a Story Level from a Story, optionally deleting associated layers.</ShortDesc>
    <Result>Whether a Story Level with 'layerType' was found in the Story and successfully removed.</Result>
    <SeeAlso>CreateStory, AddStoryLevel, AddLevelFromTemplate, SetLevelElevation, GetLevelElevation</SeeAlso>
    <Example>VAR[[BR]][[BR]]storyHandle : HANDLE[[BR]]success:BOOLEAN[[BR]][[BR]]BEGIN[[BR]][[BR]]storyHandle := CreateStory('Floor 1', '-1');[[BR]]success := RemoveStoryLevel(storyHandle, 'Finish Floor', TRUE);</Example>
    <ID>13385</ID>
    <IDName>funcRemoveStoryLevel</IDName>
    <InternalFunctionName>MP_RemoveStoryLevel</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>storyHandle</Name>
        <Type>handleMode</Type>
        <Desc>The handle of the story we want to deleted a Story Level from.</Desc>
      </Param>
      <Param>
        <Name>levelType</Name>
        <Type>stringMode</Type>
        <Desc>The level type of the Story Level we want to remove from 'storyHandle'.</Desc>
      </Param>
      <Param>
        <Name>bDeleteLayer</Name>
        <Type>boolMode</Type>
        <Desc>If this is true, and the requested Story Level has a layer associated with it, the layer will be deleted as well.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddLevelFromTemplate</Name>
    <ChangedDate>2014:04:29T16:28:00</ChangedDate>
    <Version>2000</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Adds a new Story Layer to the Story pointed to by 'storyHandle', using the Story Level Template at 'index' as a template.  The story must not already contain a Story Level with the same level type or elevation as the template.  If the template has a layer name set, a new layer will be created and associated with the new Story Level.  </Description>
    <ShortDesc>Adds a Story Level to the specified Story, using a Story Level Template.</ShortDesc>
    <Result>Whether the Story Level was successfully created.</Result>
    <SeeAlso>CreateStory, AddStoryLevel, RemoveStoryLevel, SetLevelElevation, GetLevelElevation</SeeAlso>
    <Example>VAR[[BR]][[BR]]storyHandle : HANDLE[[BR]]success:BOOLEAN[[BR]][[BR]]BEGIN[[BR]][[BR]]storyHandle := CreateStory('Floor 1', '-1');[[BR]]success := AddLevelFromTemplate(storyHandle,1);</Example>
    <ID>13386</ID>
    <IDName>funcAddLevelFromTemplate</IDName>
    <InternalFunctionName>MP_AddLevelFromTemplate</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>storyHandle</Name>
        <Type>handleMode</Type>
        <Desc>The handle of the Story to add the new Story Level to.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the Story Level Template to use when creating the Story Level.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLevelElevation</Name>
    <ChangedDate>2014:04:29T16:31:00</ChangedDate>
    <Version>2000</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the elevation of a Story Level relative to its Story.</Description>
    <ShortDesc>Sets the elevation of a Story Level relative to its Story.</ShortDesc>
    <Result>Whether the Story Level was found and successfully updated.</Result>
    <SeeAlso>CreateStory, AddStoryLevel, RemoveStoryLevel, AddLevelFromTemplate, GetLevelElevation</SeeAlso>
    <ID>13387</ID>
    <IDName>funcSetLevelElevation</IDName>
    <InternalFunctionName>MP_SetLevelElevation</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>storyHandle</Name>
        <Type>handleMode</Type>
        <Desc>The handle of the Story with the desired Story Level.</Desc>
      </Param>
      <Param>
        <Name>levelType</Name>
        <Type>stringMode</Type>
        <Desc>The level type of the Story Level to change the elevation of.</Desc>
      </Param>
      <Param>
        <Name>newElevation</Name>
        <Type>realMode</Type>
        <Desc>The new elevation for the Story Level.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLevelElevation</Name>
    <ChangedDate>2014:04:29T16:31:00</ChangedDate>
    <Version>2000</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Gets the elevation of a Story Level, relative to its containing Story.</Description>
    <ShortDesc>Gets the elevation of a Story Level, relative to its containing Story.</ShortDesc>
    <Result>The elevation of the requested Story Level.</Result>
    <SeeAlso>CreateStory, AddStoryLevel, RemoveStoryLevel, AddLevelFromTemplate, SetLevelElevation</SeeAlso>
    <ID>13388</ID>
    <IDName>funcGetLevelElevation</IDName>
    <InternalFunctionName>MP_GetLevelElevation</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>storyHandle</Name>
        <Type>handleMode</Type>
        <Desc>The handle of the Story containing the Story Level we would like to know the elevation of.</Desc>
      </Param>
      <Param>
        <Name>levelType</Name>
        <Type>stringMode</Type>
        <Desc>The level type of the Story Level that we would like to know the elevation of.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ResetDefStoryLevels</Name>
    <ChangedDate>2014:06:02T10:51:00</ChangedDate>
    <Version>2000</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Clears default story levels and repopulates the list from XML data files on disk.</Description>
    <ShortDesc>Clears default story levels and repopulates the list from XML data files on disk.</ShortDesc>
    <Result>Whether clearing the previous default story levels and loading the default list from disk succeeded.</Result>
    <SeeAlso>GetLevelTemplateName, SetLevelTemplateName, GetLevelTemplateInfo, GetNumLevelTemplates</SeeAlso>
    <ID>13389</ID>
    <IDName>funcResetDefStoryLevels</IDName>
    <InternalFunctionName>MP_ResetDefStoryLevels</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>bDeleteExisting</Name>
        <Type>boolMode</Type>
        <Desc>Whether to delete existing default story levels before reloading the original defaults.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompTopIsRelStory</Name>
    <ChangedDate>2014:06:19T16:27:00</ChangedDate>
    <Version>2000</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets whether or not the component top is relative to a story.</Description>
    <ShortDesc>Gets whether or not the component top is relative to a story.</ShortDesc>
    <SeeAlso>SetCompTopIsRelStory</SeeAlso>
    <ID>13390</ID>
    <IDName>funcGetCompTopIsRelStory</IDName>
    <InternalFunctionName>MP_GetCompTopIsRelStory</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>topIsRelativeToStory</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component top is relative to a story.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompTopIsRelStory</Name>
    <ChangedDate>2014:06:19T16:27:00</ChangedDate>
    <Version>2000</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets whether or not the component top is relative to a story.</Description>
    <ShortDesc>Sets whether or not the component top is relative to a story.</ShortDesc>
    <SeeAlso>GetCompTopIsRelStory</SeeAlso>
    <ID>13391</ID>
    <IDName>funcSetCompTopIsRelStory</IDName>
    <InternalFunctionName>MP_SetCompTopIsRelStory</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>topIsRelativeToStory</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component top is relative to a story.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompBotIsRelStory</Name>
    <ChangedDate>2014:06:19T16:27:00</ChangedDate>
    <Version>2000</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets whether or not the component bottom is relative to a story.</Description>
    <ShortDesc>Gets whether or not the component bottom is relative to a story.</ShortDesc>
    <SeeAlso>SetCompBotIsRelStory</SeeAlso>
    <ID>13392</ID>
    <IDName>funcGetCompBotIsRelStory</IDName>
    <InternalFunctionName>MP_GetCompBotIsRelStory</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>bottomIsRelativeToStory</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component bottom is relative to a story.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompBotIsRelStory</Name>
    <ChangedDate>2014:06:19T16:27:00</ChangedDate>
    <Version>2000</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets whether or not the component bottom is relative to a story.</Description>
    <ShortDesc>Sets whether or not the component bottom is relative to a story.</ShortDesc>
    <SeeAlso>GetCompBotIsRelStory</SeeAlso>
    <ID>13393</ID>
    <IDName>funcSetCompBotIsRelStory</IDName>
    <InternalFunctionName>MP_SetCompBotIsRelStory</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>bottomIsRelativeToStory</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component bottom is relative to a story.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponents</Name>
    <ChangedDate>2014:06:19T16:32:00</ChangedDate>
    <Version>2000</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Gets the components of the object.</Description>
    <ShortDesc>Gets the components of the object.</ShortDesc>
    <ID>13394</ID>
    <IDName>funcGetComponents</IDName>
    <InternalFunctionName>MP_GetComponents</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, Wall Style, Slab Style, the Wall Preferences, or the Slab Preferences.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ShowLBHeader</Name>
    <ChangedDate>2014:06:23T14:23:00</ChangedDate>
    <Version>2000</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>Shows or hides header row for a list browser control in a dialog</Description>
    <ShortDesc>Shows or hides header row for a list browser control in a dialog</ShortDesc>
    <ID>13395</ID>
    <IDName>procShowLBHeader</IDName>
    <InternalFunctionName>MP_ShowLBHeader</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>show</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWallCompStartPts</Name>
    <ChangedDate>2014:07:30T15:39:00</ChangedDate>
    <Version>2000</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Gets the start points of a wall component.</Description>
    <ShortDesc>Gets the start points of a wall component.</ShortDesc>
    <Result>None</Result>
    <SeeAlso>GetWallCompEndPts</SeeAlso>
    <ID>13396</ID>
    <IDName>procGetWallCompStartPts</IDName>
    <InternalFunctionName>MP_GetWallCompStartPts</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>wall</Name>
        <Type>handleMode</Type>
        <Desc>The wall or round wall</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The component index</Desc>
      </Param>
      <Param>
        <Name>leftPoint</Name>
        <Type>ePointVarMode</Type>
        <Desc>Returns the left start point of the component</Desc>
      </Param>
      <Param>
        <Name>centerPoint</Name>
        <Type>ePointVarMode</Type>
        <Desc>Returns the center start point of the component</Desc>
      </Param>
      <Param>
        <Name>rightPoint</Name>
        <Type>ePointVarMode</Type>
        <Desc>Returns the right start point of the component</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWallCompEndPts</Name>
    <ChangedDate>2014:07:30T15:40:00</ChangedDate>
    <Version>2000</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Gets the end points of a wall component.</Description>
    <ShortDesc>Gets the end points of a wall component.</ShortDesc>
    <Result>None</Result>
    <SeeAlso>GetWallCompStartPts</SeeAlso>
    <ID>13397</ID>
    <IDName>procGetWallCompEndPts</IDName>
    <InternalFunctionName>MP_GetWallCompEndPts</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>wall</Name>
        <Type>handleMode</Type>
        <Desc>The wall or round wall</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The component index</Desc>
      </Param>
      <Param>
        <Name>leftPoint</Name>
        <Type>ePointVarMode</Type>
        <Desc>Returns the left end point of the component</Desc>
      </Param>
      <Param>
        <Name>centerPoint</Name>
        <Type>ePointVarMode</Type>
        <Desc>Returns the center end point of the component</Desc>
      </Param>
      <Param>
        <Name>rightPoint</Name>
        <Type>ePointVarMode</Type>
        <Desc>Returns the right end point of the component</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ImportImageFileN</Name>
    <ChangedDate>2014:08:01T14:03:00</ChangedDate>
    <Version>2000</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Import the specified image file as an Image object in Vectorworks. This function allow controlling the options when importing the image.</Description>
    <ShortDesc>Import the specified image file as an Image object in Vectorworks. This function allow controlling the options when importing the image.</ShortDesc>
    <Result>Return the imported image handle, or NIL if the import failed.</Result>
    <SeeAlso>ImportImageFile</SeeAlso>
    <ID>13398</ID>
    <IDName>funcImportImageFileN</IDName>
    <InternalFunctionName>MP_ImportImageFileN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>filePath</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Import file path.</Desc>
      </Param>
      <Param>
        <Name>importPt</Name>
        <Type>globPtMode</Type>
        <Desc>The import location.</Desc>
      </Param>
      <Param>
        <Name>mode</Name>
        <Type>intMode</Type>
        <Desc>Import mode: 0 - import using import option dialog; 1 - import using the last options. If the call was never made with option dialog, then the first time it will show the options dialog.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCWFramesFromPt</Name>
    <ChangedDate>2019:08:19T15:42:00</ChangedDate>
    <Version>2000</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns information about the frames in a curtain wall from a given point.[[BR]][[BR]]Used for placing objects inside a panel in a curtain wall. When passing the center point of the object in the wall, it will find the panel in the curtain wall and return information about the surrounding frames.</Description>
    <ShortDesc>Gets Curtain Wall Frame Information from Point in wall</ShortDesc>
    <Result>Returns TRUE if hWall is a curtain wall and frames are found.[[BR]]Returns FALSE is hWall is not a curtain wall or the test point is not found on the wall.</Result>
    <ID>13399</ID>
    <IDName>funcGetCWFramesFromPt</IDName>
    <InternalFunctionName>MP_GetCWFramesFromPt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hWall</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the curtain wall</Desc>
      </Param>
      <Param>
        <Name>testPt</Name>
        <Type>ePointMode</Type>
        <Desc>Point to test on the curtain wall. Typically the center point of the object to be placed in the curtain wall panel.</Desc>
      </Param>
      <Param>
        <Name>includeBottomFrame</Name>
        <Type>boolMode</Type>
        <Desc>Include the bottom frame.</Desc>
      </Param>
      <Param>
        <Name>panelThickness</Name>
        <Type>rVarMode</Type>
        <Desc>This is the thickness of the panel as it subtracts from the frames. It is a property of the panel</Desc>
      </Param>
      <Param>
        <Name>panelOffset</Name>
        <Type>rVarMode</Type>
        <Desc>This is the dimension from the center of the panel to the center of the wall</Desc>
      </Param>
      <Param>
        <Name>frameInsetTop</Name>
        <Type>rVarMode</Type>
        <Desc>The frame inset is the distance the panel extends into and subtracts from the frame. </Desc>
      </Param>
      <Param>
        <Name>frameInsetBottom</Name>
        <Type>rVarMode</Type>
      </Param>
      <Param>
        <Name>frameInsetRight</Name>
        <Type>rVarMode</Type>
      </Param>
      <Param>
        <Name>frameInsetLeft</Name>
        <Type>rVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjectAsSpanBreak</Name>
    <ChangedDate>2014:12:04T10:16:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets an object's span wall flag in it's break record.[[BR]][[BR]]Setting the flag to TRUE will force the object the center of the wall and set the offset position of the break record to reflect this.[[BR]][[BR]]Setting the flag to FALSE will unset the span wall flag, but no further updating to the object will occur.[[BR]][[BR]]The oject (objH) must be contained in wall (wallH) for the setting to succeed.</Description>
    <ShortDesc>Set an object's break record Span Wall  flag.</ShortDesc>
    <Result>True or False upon successfull setting of the flag[[BR]][[BR]]False can occur for the following conditions:[[BR]]objH is null.[[BR]]wallH is null.[[BR]]objH is not contained in wallH.</Result>
    <ID>13400</ID>
    <IDName>funcSetObjectAsSpanBreak</IDName>
    <InternalFunctionName>MP_SetObjectAsSpanBreak</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objH</Name>
        <Type>handleMode</Type>
        <Desc>The handle of the object to update.</Desc>
      </Param>
      <Param>
        <Name>wallH</Name>
        <Type>handleMode</Type>
        <Desc>The handle of the wall cotainting the object referenced in objH.</Desc>
      </Param>
      <Param>
        <Name>spanWallBreak</Name>
        <Type>boolMode</Type>
        <Desc>Boolean value to set or unset the span wall  flag for the object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WSScript_GetObject</Name>
    <ChangedDate>2015:04:15T13:53:00</ChangedDate>
    <Version>2100</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>This function must be used inside a worksheet script called by 'RunScript' worksheet formula.</Description>
    <ShortDesc>This function must be used inside a worksheet script called by 'RunScript' worksheet formula. Returns the object currently being processed by the worksheet criteria at the time of the script execution.</ShortDesc>
    <Result>Returns the object currently being processed by the worksheet criteria at the time of the script execution.</Result>
    <SeeAlso>WSScript_GetObject,WSScript_GetPrmInt,WSScript_GetPrmReal,WSScript_GetPrmStr,WSScript_SetResStr,WSScript_SetResReal,WSScript_SetResImage</SeeAlso>
    <ID>13401</ID>
    <IDName>funcWSScript_GetObject</IDName>
    <InternalFunctionName>MP_WSScript_GetObject</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>WSScript_GetPrmInt</Name>
    <ChangedDate>2015:04:15T13:53:00</ChangedDate>
    <Version>2100</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>This function must be used inside a worksheet script called by 'RunScript' worksheet formula.</Description>
    <ShortDesc>This function must be used inside a worksheet script called by 'RunScript' worksheet formula. Returns the integer value of the specified parameter.</ShortDesc>
    <Result>Returns the integer value of the specified parameter.</Result>
    <SeeAlso>WSScript_GetObject,WSScript_GetPrmInt,WSScript_GetPrmReal,WSScript_GetPrmStr,WSScript_SetResStr,WSScript_SetResReal,WSScript_SetResImage</SeeAlso>
    <ID>13402</ID>
    <IDName>funcWSScript_GetPrmInt</IDName>
    <InternalFunctionName>MP_WSScript_GetPrmInt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>paramIndex</Name>
        <Type>intMode</Type>
        <Desc>Zero based index of the parameter passed to the RunScript worksheet function.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WSScript_GetPrmReal</Name>
    <ChangedDate>2015:04:15T13:53:00</ChangedDate>
    <Version>2100</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>This function must be used inside a worksheet script called by 'RunScript' worksheet formula.</Description>
    <ShortDesc>This function must be used inside a worksheet script called by 'RunScript' worksheet formula. Returns the real value of the specified parameter.</ShortDesc>
    <Result>Returns the real value of the specified parameter.</Result>
    <SeeAlso>WSScript_GetObject,WSScript_GetPrmInt,WSScript_GetPrmReal,WSScript_GetPrmStr,WSScript_SetResStr,WSScript_SetResReal,WSScript_SetResImage</SeeAlso>
    <ID>13403</ID>
    <IDName>funcWSScript_GetPrmReal</IDName>
    <InternalFunctionName>MP_WSScript_GetPrmReal</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>paramIndex</Name>
        <Type>intMode</Type>
        <Desc>Zero based index of the parameter passed to the RunScript worksheet function.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WSScript_GetPrmStr</Name>
    <ChangedDate>2015:04:15T13:53:00</ChangedDate>
    <Version>2100</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>This function must be used inside a worksheet script called by 'RunScript' worksheet formula.</Description>
    <ShortDesc>This function must be used inside a worksheet script called by 'RunScript' worksheet formula. Returns the string value of the specified parameter.</ShortDesc>
    <Result>Returns the string value of the specified parameter.</Result>
    <SeeAlso>WSScript_GetObject,WSScript_GetPrmInt,WSScript_GetPrmReal,WSScript_GetPrmStr,WSScript_SetResStr,WSScript_SetResReal,WSScript_SetResImage</SeeAlso>
    <ID>13404</ID>
    <IDName>funcWSScript_GetPrmStr</IDName>
    <InternalFunctionName>MP_WSScript_GetPrmStr</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>paramIndex</Name>
        <Type>intMode</Type>
        <Desc>Zero based index of the parameter passed to the RunScript worksheet function.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WSScript_SetResStr</Name>
    <ChangedDate>2015:04:15T13:53:00</ChangedDate>
    <Version>2100</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>This function must be used inside a worksheet script called by 'RunScript' worksheet formula.[[BR]][[BR]]Set the result of the worksheet script to the string value specified.</Description>
    <ShortDesc>This function must be used inside a worksheet script called by 'RunScript' worksheet formula. Set the result of the worksheet script to the string value specified.</ShortDesc>
    <SeeAlso>WSScript_GetObject,WSScript_GetPrmInt,WSScript_GetPrmReal,WSScript_GetPrmStr,WSScript_SetResStr,WSScript_SetResReal,WSScript_SetResImage</SeeAlso>
    <ID>13405</ID>
    <IDName>procWSScript_SetResStr</IDName>
    <InternalFunctionName>MP_WSScript_SetResStr</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>resultCellValue</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The value for the result of the worksheet script called by the RunScript worksheet function.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WSScript_SetResReal</Name>
    <ChangedDate>2015:04:15T13:53:00</ChangedDate>
    <Version>2100</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>This function must be used inside a worksheet script called by 'RunScript' worksheet formula.[[BR]][[BR]]Set the result of the worksheet script to the real value specified.</Description>
    <ShortDesc>This function must be used inside a worksheet script called by 'RunScript' worksheet formula. Set the result of the worksheet script to the real value specified.</ShortDesc>
    <SeeAlso>WSScript_GetObject,WSScript_GetPrmInt,WSScript_GetPrmReal,WSScript_GetPrmStr,WSScript_SetResStr,WSScript_SetResReal,WSScript_SetResImage</SeeAlso>
    <ID>13406</ID>
    <IDName>procWSScript_SetResReal</IDName>
    <InternalFunctionName>MP_WSScript_SetResReal</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>resultCellValue</Name>
        <Type>realMode</Type>
        <Desc>The value for the result of the worksheet script called by the RunScript worksheet function.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WSScript_SetResInt</Name>
    <ChangedDate>2015:04:15T13:53:00</ChangedDate>
    <Version>2100</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>This function must be used inside a worksheet script called by 'RunScript' worksheet formula.[[BR]][[BR]]Set the result of the worksheet script to the integer value specified.</Description>
    <ShortDesc>This function must be used inside a worksheet script called by 'RunScript' worksheet formula. Set the result of the worksheet script to the integer value specified.</ShortDesc>
    <SeeAlso>WSScript_GetObject,WSScript_GetPrmInt,WSScript_GetPrmReal,WSScript_GetPrmStr,WSScript_SetResStr,WSScript_SetResReal,WSScript_SetResImage</SeeAlso>
    <ID>13407</ID>
    <IDName>procWSScript_SetResInt</IDName>
    <InternalFunctionName>MP_WSScript_SetResInt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>resultCellValue</Name>
        <Type>intMode</Type>
        <Desc>The value for the result of the worksheet script called by the RunScript worksheet function.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ImportSketchUp</Name>
    <ChangedDate>2017:04:14T10:41:00</ChangedDate>
    <Version>2100</Version>
    <Category>ImportExport</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Imports SketchUp ( *.skp)  files.</Description>
    <ShortDesc>Imports SketchUp ( *.skp)  files.</ShortDesc>
    <Result>TRUE if import is successful.</Result>
    <ID>13408</ID>
    <IDName>funcImportSketchUp</IDName>
    <InternalFunctionName>MP_ImportSketchUp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>filePath</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Full file path.</Desc>
      </Param>
      <Param>
        <Name>bImportAsMesh</Name>
        <Type>boolMode</Type>
        <Desc>Import as a Mesh or as 3D polys. Mesh = TRUE.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ImportOBJ</Name>
    <ChangedDate>2017:04:14T10:42:00</ChangedDate>
    <Version>2100</Version>
    <Category>ImportExport</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Imports Wavefront (*.obj) files.</Description>
    <ShortDesc>Imports Wavefront (*.obj) files.</ShortDesc>
    <Result>TRUE if import is successful.</Result>
    <ID>13409</ID>
    <IDName>funcImportOBJ</IDName>
    <InternalFunctionName>MP_ImportOBJ</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>fileName</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Full file path.</Desc>
      </Param>
      <Param>
        <Name>bAllMatAsRW</Name>
        <Type>boolMode</Type>
        <Desc>Imports all materials as Renderworks textures.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ClipSurfaceN</Name>
    <ChangedDate>2015:02:27T10:42:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - 2D</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a new surface object by subtracting the intersection of surfaces [[p:1]] and [[p:2]] from [[p:1]].</Description>
    <ShortDesc>Same as original ClipSurface procedure except returns the resulting object handle</ShortDesc>
    <ID>13410</ID>
    <IDName>funcClipSurfaceN</IDName>
    <InternalFunctionName>MP_ClipSurfaceN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>s1</Name>
        <Type>handleMode</Type>
        <Desc>Surface to be subtracted from</Desc>
      </Param>
      <Param>
        <Name>s2</Name>
        <Type>handleMode</Type>
        <Desc>Surface to subtract from s1</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateShell</Name>
    <ChangedDate>2015:03:09T12:41:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Solids</Category>
    <Type>Function</Type>
    <ReturnType>Handle</ReturnType>
    <Description>Creates a shelled solid from a NURBS surface. </Description>
    <ShortDesc>Creates a shelled solid from a NURBS surface</ShortDesc>
    <ID>13411</ID>
    <IDName>funcCreateShell</IDName>
    <InternalFunctionName>MP_CreateShell</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>surface</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>thickness</Name>
        <Type>realMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CnvrtToGenericSolid</Name>
    <ChangedDate>2015:03:17T11:11:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Solids</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Converts Solid objects to generic solids. Removes solid history saving memory.</Description>
    <ShortDesc>Converts Solid objects to generic solids. Removes solid history saving memory.</ShortDesc>
    <ID>13412</ID>
    <IDName>funcCnvrtToGenericSolid</IDName>
    <InternalFunctionName>MP_CnvrtToGenericSolid</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>solid</Name>
        <Type>handleMode</Type>
        <Desc>object to convert</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsPlanarObj</Name>
    <ChangedDate>2015:04:02T14:53:00</ChangedDate>
    <Version>2100</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Tests if an object is a planar object.</ShortDesc>
    <ID>13413</ID>
    <IDName>funcIsPlanarObj</IDName>
    <InternalFunctionName>MP_IsPlanarObj</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>Object to test</Desc>
      </Param>
      <Param>
        <Name>NewParam</Name>
        <Type>lngVarMode</Type>
        <Desc>If object is planar, returns the planar refID of its plane</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCharColor</Name>
    <ChangedDate>2015:03:24T17:23:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Text</Category>
    <Type>Procedure</Type>
    <Description>Function GetCharColor returns the color of a character at a specified position in the given text object.[[BR]]The position is in a range between 0 and 32767, representing a character position in the text string. An index of 0 refers to the first character in the string.</Description>
    <ShortDesc>Returns the color of a character at a specified position in the given text object.</ShortDesc>
    <ID>13414</ID>
    <IDName>procGetCharColor</IDName>
    <InternalFunctionName>MP_GetCharColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>theText</Name>
        <Type>handleMode</Type>
        <Desc>Handle of the text object</Desc>
      </Param>
      <Param>
        <Name>position</Name>
        <Type>intMode</Type>
        <Desc>Position of the character in the text string (0-based)</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WSScript_SetResImage</Name>
    <ChangedDate>2015:04:15T13:53:00</ChangedDate>
    <Version>2100</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>This function must be used inside a worksheet script called by 'RunScript' worksheet formula.[[BR]][[BR]]Set the result of the worksheet script to the object to be used as image in the cell.</Description>
    <ShortDesc>This function must be used inside a worksheet script called by 'RunScript' worksheet formula. Set the result of the worksheet script to the object to be used as image in the cell.</ShortDesc>
    <SeeAlso>WSScript_GetObject,WSScript_GetPrmInt,WSScript_GetPrmReal,WSScript_GetPrmStr,WSScript_SetResStr,WSScript_SetResReal,WSScript_SetResImage</SeeAlso>
    <ID>13415</ID>
    <IDName>procWSScript_SetResImage</IDName>
    <InternalFunctionName>MP_WSScript_SetResImage</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>The handle of the object that will be used for image in the cell.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateTaperedExtrd2</Name>
    <ChangedDate>2015:05:06T15:37:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - 3D</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a new tapered extrude object in the document. This function returns a "general solid" object while the other function, CreateTaperedExtrude, produces a bunch of NURBS surfaces.</Description>
    <ShortDesc>Creates a new tapered extrude object in the document.</ShortDesc>
    <Result>Returns a HANDLE to the new tapered extrude if successful, otherwise returns NIL.</Result>
    <ID>13416</ID>
    <IDName>funcCreateTaperedExtrd2</IDName>
    <InternalFunctionName>MP_CreateTaperedExtrd2</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>profileH</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object defining profile geometry.</Desc>
      </Param>
      <Param>
        <Name>angle</Name>
        <Type>realMode</Type>
        <Desc>Taper angle of extrude (in degrees).</Desc>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>realMode</Type>
        <Desc>Height of extrude.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetEntityMatrixN</Name>
    <ChangedDate>2015:06:03T14:12:00</ChangedDate>
    <Version>2100</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the matrix of the plane for a planar object. If there is already a plane in the document with that matrix, the object will be set to be in that plane. Otherwise a new plane will be added to the document.</Description>
    <ShortDesc>Sets the matrix of the plane for a planar object.</ShortDesc>
    <Result>Returns True if data was set successfully, False otherwise.</Result>
    <SeeAlso>SetEntityMatrix</SeeAlso>
    <ID>13417</ID>
    <IDName>funcSetEntityMatrixN</IDName>
    <InternalFunctionName>MP_SetEntityMatrixN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>The object whose plane is being set.</Desc>
      </Param>
      <Param>
        <Name>u</Name>
        <Type>d3PtMode</Type>
        <Desc>The X, Y and Z values of the plane's u-vector in current document units.</Desc>
      </Param>
      <Param>
        <Name>v</Name>
        <Type>d3PtMode</Type>
        <Desc>The X, Y and Z values of the plane's v-vector in current document units.</Desc>
      </Param>
      <Param>
        <Name>w</Name>
        <Type>d3PtMode</Type>
        <Desc>The X, Y and Z values of the plane's w-vector in current document units.</Desc>
      </Param>
      <Param>
        <Name>offset</Name>
        <Type>d3PtMode</Type>
        <Desc>The X, Y and Z offsets of the plane in current document units.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOriginInDocUnits</Name>
    <ChangedDate>2015:06:09T14:18:00</ChangedDate>
    <Version>2100</Version>
    <Category>Document Settings</Category>
    <Type>Procedure</Type>
    <Description>Procedure GetOriginInDocUnits returns the current origin location relative to the center of the page in current units. It fixes the problem existing for GetOrigin (see remarks). The behavior is the same while used during objects reset and in commands.</Description>
    <ShortDesc>Procedure GetOriginInDocUnits returns the current origin location relative to the center of the page in current units. </ShortDesc>
    <SeeAlso>GetOrigin</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]originPt : VECTOR;[[BR]]BEGIN[[BR]]GetOriginInDocUnits(originPt.x, originPt.y);[[BR]]Message(originPt);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>13418</ID>
    <IDName>procGetOriginInDocUnits</IDName>
    <InternalFunctionName>MP_GetOriginInDocUnits</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>x</Name>
        <Type>rVarMode</Type>
        <Desc>Returns X coordinate of origin.</Desc>
      </Param>
      <Param>
        <Name>y</Name>
        <Type>rVarMode</Type>
        <Desc>Returns Y coordinate of origin.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetProjectFullPath</Name>
    <ChangedDate>2015:06:10T17:56:00</ChangedDate>
    <Version>2100</Version>
    <Category>Project Sharing</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the path and filename of the Project File for Project Sharing.</Description>
    <ShortDesc>Gets the path and filename of the Project File for Project Sharing.</ShortDesc>
    <Result>Returns True on success, False on failure or if not Project Sharing</Result>
    <ID>13419</ID>
    <IDName>funcGetProjectFullPath</IDName>
    <InternalFunctionName>MP_GetProjectFullPath</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>fullPath</Name>
        <Type>strVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsProjectOffline</Name>
    <ChangedDate>2015:06:10T17:57:00</ChangedDate>
    <Version>2100</Version>
    <Category>Project Sharing</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Checks if current document is a Working File operating in Offline Mode.[[BR]][[BR]]Offline Mode is when the Working File is opened and the Project File cannot be found.</Description>
    <ShortDesc>Checks if current document is working in Offline Mode.</ShortDesc>
    <Result>Returns True if current document is a Working File operating in Offline Mode.[[BR]]Returns False on failure or not Project Sharing file, or not in Offline Mode.</Result>
    <ID>13420</ID>
    <IDName>funcIsProjectOffline</IDName>
    <InternalFunctionName>MP_IsProjectOffline</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetProjectUserNames</Name>
    <ChangedDate>2015:06:10T10:31:00</ChangedDate>
    <Version>2100</Version>
    <Category>Project Sharing</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Get a list of userids that are part of the current project.</Description>
    <ShortDesc>Get a list of userids that are part of the current project.</ShortDesc>
    <Result>True on success, false on failure or not Project Sharing file.</Result>
    <SeeAlso>GetProjectUser</SeeAlso>
    <ID>13421</ID>
    <IDName>funcGetProjectUserNames</IDName>
    <InternalFunctionName>MP_GetProjectUserNames</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>userArray</Name>
        <Type>arrayVarMode</Type>
        <Desc>Array of userids as strings</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetProjectUser</Name>
    <ChangedDate>2015:06:10T12:35:00</ChangedDate>
    <Version>2100</Version>
    <Category>Project Sharing</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>For a given userid in the current Project, get their full name and permission level.[[BR]][[BR]][[note:ProjectSharingPermissions]]</Description>
    <ShortDesc>Get details of a user in the current project.</ShortDesc>
    <Result>True on success, false on failure or not Project Sharing file.</Result>
    <SeeAlso>GetProjectUserNames</SeeAlso>
    <ID>13422</ID>
    <IDName>funcGetProjectUser</IDName>
    <InternalFunctionName>MP_GetProjectUser</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>userId</Name>
        <Type>stringMode</Type>
        <Desc>The userid to look up</Desc>
      </Param>
      <Param>
        <Name>fullName</Name>
        <Type>strVarMode</Type>
        <Desc>The users full name</Desc>
      </Param>
      <Param>
        <Name>permission</Name>
        <Type>intVarMode</Type>
        <Desc>Permission level of the user</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCheckoutsComment</Name>
    <ChangedDate>2015:06:10T18:10:00</ChangedDate>
    <Version>2100</Version>
    <Category>Project Sharing</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Get the comment that will be used for checkouts and commits.</Description>
    <ShortDesc>Get the comment that will be used for checkouts and commits.</ShortDesc>
    <Result>True on success, false on failure or not Project Sharing file.</Result>
    <SeeAlso>SetCheckoutsComment</SeeAlso>
    <ID>13423</ID>
    <IDName>funcGetCheckoutsComment</IDName>
    <InternalFunctionName>MP_GetCheckoutsComment</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>comment</Name>
        <Type>strVarMode</Type>
        <Desc>The comment currently being used.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCheckoutsComment</Name>
    <ChangedDate>2015:06:10T18:10:00</ChangedDate>
    <Version>2100</Version>
    <Category>Project Sharing</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Set the comment that will be used for checkouts and commits.[[BR]][[BR]]The Enter Comment dialogs will still be shown when a checkout or commit is done; the dialog will be prepopulated with the comment set with this command.</Description>
    <ShortDesc>Set the comment that will be used for checkouts and commits.</ShortDesc>
    <Result>True on success, false on failure or not Project Sharing file.</Result>
    <SeeAlso>GetCheckoutsComment</SeeAlso>
    <ID>13424</ID>
    <IDName>funcSetCheckoutsComment</IDName>
    <InternalFunctionName>MP_SetCheckoutsComment</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>comment</Name>
        <Type>stringMode</Type>
        <Desc>The comment to replace any currently in use.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWorkingFileId</Name>
    <ChangedDate>2015:06:10T18:11:00</ChangedDate>
    <Version>2100</Version>
    <Category>Project Sharing</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Get the unique id for this Working File.  This is not a filename.[[BR]][[BR]]Every Working File has a unique identifier. When layers are checked-out, they are reserved for not just a particular user, but also for a particular Working File Id.[[BR]][[BR]]The reserved layer can then only be edited in that specific Working File.  If the user creates a second Working File and looks at the layer status, it will show in the second Working File as unavailable for checkout or edit, until it has been committed or released in the first file. [[BR]][[BR]]The specific value of the Working File Id is not meaningful, so it is not directly visible in any of the dialogs.  It is used for the color highlighting of layer names in dialogs that show layer ownership.</Description>
    <ShortDesc>Get the unique id for this Working File. This is not a filename.</ShortDesc>
    <Result>True on success, false on failure or not Project Sharing file.</Result>
    <SeeAlso>GetLayerProjectInfo</SeeAlso>
    <ID>13425</ID>
    <IDName>funcGetWorkingFileId</IDName>
    <InternalFunctionName>MP_GetWorkingFileId</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>uuid</Name>
        <Type>strVarMode</Type>
        <Desc>Unique id for this working file</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCurrentUserId</Name>
    <ChangedDate>2015:06:10T17:55:00</ChangedDate>
    <Version>2100</Version>
    <Category>Project Sharing</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Get the user id for the current user.</Description>
    <ShortDesc>Get the user id for the current user.</ShortDesc>
    <Result>True on success, false on failure</Result>
    <ID>13426</ID>
    <IDName>funcGetCurrentUserId</IDName>
    <InternalFunctionName>MP_GetCurrentUserId</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>userid</Name>
        <Type>strVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLayerProjectInfo</Name>
    <ChangedDate>2015:06:11T11:45:00</ChangedDate>
    <Version>2100</Version>
    <Category>Project Sharing</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Retrieves values similar to the Layers tab of the Project Sharing dialog.[[BR]][[BR]]Timestamps are measured in seconds since January 1, 1904.  The value 0 has special meaning depending on the timestamp.</Description>
    <ShortDesc>Retrieves values similar to the Layers tab of the Project Sharing dialog.</ShortDesc>
    <Result>True on success, false on failure or not Project Sharing file.</Result>
    <SeeAlso>GetWorkingFileId, GetCurrentUserId</SeeAlso>
    <ID>13427</ID>
    <IDName>funcGetLayerProjectInfo</IDName>
    <InternalFunctionName>MP_GetLayerProjectInfo</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>layer</Name>
        <Type>handleMode</Type>
        <Desc>Get status for this Layer</Desc>
      </Param>
      <Param>
        <Name>masterLayer</Name>
        <Type>boolVarMode</Type>
        <Desc>Is this layer a Master Layer, which requires higher permission to edit?</Desc>
      </Param>
      <Param>
        <Name>modificationDate</Name>
        <Type>lngVarMode</Type>
        <Desc>Timestamp of last commit.  0 means layer is unchanged since initial creation of the Project File.</Desc>
      </Param>
      <Param>
        <Name>checkoutDate</Name>
        <Type>lngVarMode</Type>
        <Desc>Timestamp of current checkout.  0 means layer is not currently checked out.</Desc>
      </Param>
      <Param>
        <Name>checkoutOwner</Name>
        <Type>strVarMode</Type>
        <Desc>Userid that currently has the layer checked out.  Empty string if not checked out.</Desc>
      </Param>
      <Param>
        <Name>workingFileId</Name>
        <Type>strVarMode</Type>
        <Desc>Working File Id that currently has the layer checked out.  Empty string if not checked out. This is not a filename.</Desc>
      </Param>
      <Param>
        <Name>comment</Name>
        <Type>strVarMode</Type>
        <Desc>Comment for the checkout  Empty string if not checked out.</Desc>
      </Param>
      <Param>
        <Name>outOfDate</Name>
        <Type>boolVarMode</Type>
        <Desc>If True, there is a newer version of the layer in the Project File that can be brought in with a Refresh.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsAWorkingFile</Name>
    <ChangedDate>2015:06:10T17:58:00</ChangedDate>
    <Version>2100</Version>
    <Category>Project Sharing</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns True if the current document is a Project Sharing Working File. Otherwise returns False.</Description>
    <ShortDesc>Tests whether the current document is a Project Sharing Working File.</ShortDesc>
    <Result>Returns True if the current document is a Project Sharing Working File. Otherwise returns False.</Result>
    <ID>13428</ID>
    <IDName>funcIsAWorkingFile</IDName>
    <InternalFunctionName>MP_IsAWorkingFile</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>ExportSTL</Name>
    <ChangedDate>2017:04:14T10:41:00</ChangedDate>
    <Version>2100</Version>
    <Category>File I/O</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Export the objects into a STL file.</Description>
    <ShortDesc>Export the objects into a STL  file.</ShortDesc>
    <Result>Return TRUE if successful.</Result>
    <ID>13429</ID>
    <IDName>funcExportSTL</IDName>
    <InternalFunctionName>MP_ExportSTL</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>filePath</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Output file path.</Desc>
      </Param>
      <Param>
        <Name>exportBinary</Name>
        <Type>boolMode</Type>
        <Desc>binary or ASCII output</Desc>
      </Param>
      <Param>
        <Name>percentTess</Name>
        <Type>realMode</Type>
        <Desc>tessellation resolution -- from 0 to 100  0 -- low, 100 --high</Desc>
      </Param>
      <Param>
        <Name>exportObjectsOptions</Name>
        <Type>intMode</Type>
        <Desc>0 -- export visilble objects selected 1 -- export visible objects in activeLayer 2 -- export visible objects in all Layer</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCustomFeedback</Name>
    <ChangedDate>2015:06:18T14:09:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>Boolean</ReturnType>
    <Description>Attaches a group of objects to a parametric used only for display on screen, this group will not export or print.</Description>
    <ShortDesc>Attaches a group of objects to a parametric used only for display on screen, this group will not export or print.</ShortDesc>
    <Result>True if the feedback group was successfully added to the parametric, false if the object was not a parametric or the feedback objects were not a group.</Result>
    <ID>13430</ID>
    <IDName>funcSetCustomFeedback</IDName>
    <InternalFunctionName>MP_SetCustomFeedback</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>ParametricHandle</Name>
        <Type>handleMode</Type>
        <Desc>The parametric object to which the feedback group will be added.</Desc>
      </Param>
      <Param>
        <Name>FeedbackGroup</Name>
        <Type>handleMode</Type>
        <Desc>The feedback group which will only display on screen.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCustomFeedback</Name>
    <ChangedDate>2015:06:18T14:10:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>Boolean</ReturnType>
    <Description>Gets the group of objects attached to a parametric used only for display on screen, this group will not export or print.</Description>
    <ShortDesc>Gets the group of objects attached to a parametric used only for display on screen, this group will not export or print.</ShortDesc>
    <Result>True if a feedback group was attached to the parametric, false if the object was not a parametric or a feedback group was not attached.</Result>
    <ID>13431</ID>
    <IDName>funcGetCustomFeedback</IDName>
    <InternalFunctionName>MP_GetCustomFeedback</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>ParametricHandle</Name>
        <Type>handleMode</Type>
        <Desc>The parametric object to which the feedback group was added.</Desc>
      </Param>
      <Param>
        <Name>FeedbackGroup</Name>
        <Type>handleVarMode</Type>
        <Desc>The feedback group that was attached to the Parametric Object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CallToolWithMode</Name>
    <ChangedDate>2015:07:03T19:14:00</ChangedDate>
    <Version>2100</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Activates the specified Vectorworks tool for a single use with the specified tool mode. After the tool has been used Vectorworks will revert back to the previously active tool.</Description>
    <ShortDesc>Sets the active tool with mode. When finished, returns to the previously active tool.</ShortDesc>
    <Comments>Changes the active tool to that specified by toolID. Waits until the user has executed the functionality of that tool, then switches back to the previously active tool &amp; returns.</Comments>
    <ID>13432</ID>
    <IDName>procCallToolWithMode</IDName>
    <InternalFunctionName>MP_CallToolWithMode</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>toolIndex</Name>
        <Type>intMode</Type>
        <Desc>Vectorworks tool constant.</Desc>
      </Param>
      <Param>
        <Name>modeGroup</Name>
        <Type>longMode</Type>
        <Desc>Index of the mode group</Desc>
      </Param>
      <Param>
        <Name>modeButton</Name>
        <Type>longMode</Type>
        <Desc>Index of the button in the group.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetToolWithMode</Name>
    <ChangedDate>2015:07:03T19:36:00</ChangedDate>
    <Version>2100</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Activates the specified Vectorworks tool for use with specified tool mode. The tool remains selected as the active tool after use.</Description>
    <ShortDesc>Sets the active Vectorworks tool with specified tool mode.</ShortDesc>
    <ID>13433</ID>
    <IDName>procSetToolWithMode</IDName>
    <InternalFunctionName>MP_SetToolWithMode</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>toolIndex</Name>
        <Type>intMode</Type>
        <Desc>Vectorworks tool constant.</Desc>
      </Param>
      <Param>
        <Name>modeGroup</Name>
        <Type>longMode</Type>
        <Desc>Index of the mode group.</Desc>
      </Param>
      <Param>
        <Name>modeButton</Name>
        <Type>longMode</Type>
        <Desc>Index of the button in the group.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetRoofStyle</Name>
    <ChangedDate>2015:08:10T11:14:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Roofs</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Gets the Roof Style of a roof.</Description>
    <ShortDesc>Gets the Roof Style of a roof.</ShortDesc>
    <Result>The ref number of the Roof Style of the roof. 0 for unstyled.</Result>
    <SeeAlso>SetRoofStyle</SeeAlso>
    <ID>13434</ID>
    <IDName>funcGetRoofStyle</IDName>
    <InternalFunctionName>MP_GetRoofStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roof</Name>
        <Type>handleMode</Type>
        <Desc>The roof.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetFldFlag</Name>
    <Version>2100</Version>
    <Category>Database / Record</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns a number indicating the accuracy flag of a specified field in the referenced record.</Description>
    <ShortDesc>Returns the accuracy flag of a specified record</ShortDesc>
    <Example>fieldType:=[[name]](recordHandle,3);</Example>
    <ID>13435</ID>
    <IDName>funcGetFldFlag</IDName>
    <InternalFunctionName>MP_GetFldFlag</InternalFunctionName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to record.</Desc>
      </Param>
      <Param>
        <Name>t</Name>
        <Type>intMode</Type>
        <Desc>Field index (range of 1 - n).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompDatTopOfComp</Name>
    <ChangedDate>2015:08:10T09:34:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the datum is top of component flag of a component in an object.</Description>
    <ShortDesc>Gets the datum is top of component flag of a component in an object.</ShortDesc>
    <SeeAlso>SetCompDatTopOfComp</SeeAlso>
    <ID>13436</ID>
    <IDName>funcGetCompDatTopOfComp</IDName>
    <InternalFunctionName>MP_GetCompDatTopOfComp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a slab, roof face, roof, Slab Style, Roof Style, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>datumIsTopOfComponent</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the datum is the top of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompDatTopOfComp</Name>
    <ChangedDate>2015:08:10T09:34:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the datum is top of component flag of a component in an object.</Description>
    <ShortDesc>Sets the datum is top of component flag of a component in an object.</ShortDesc>
    <SeeAlso>GetCompDatTopOfComp</SeeAlso>
    <ID>13437</ID>
    <IDName>funcSetCompDatTopOfComp</IDName>
    <InternalFunctionName>MP_SetCompDatTopOfComp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a slab, roof face, roof, Slab Style, Roof Style, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>datumIsTopOfComponent</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the datum is the top of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompWallAssBound</Name>
    <ChangedDate>2015:08:10T10:22:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the wall associated bound of a component in an object.</Description>
    <ShortDesc>Gets the wall associated bound of a component in an object.</ShortDesc>
    <SeeAlso>SetCompWallAssBound</SeeAlso>
    <ID>13438</ID>
    <IDName>funcGetCompWallAssBound</IDName>
    <InternalFunctionName>MP_GetCompWallAssBound</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>wallAssociatedBound</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the wall associated bound of the component.  0 - Inner face 1 - Outer face of inner component 2 - Inner face of core 3 - Center of core 4 - Outer face of core 5 - Inner face of outer component 6 - Roof edge 7 - Roof axis line</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompWallAssBound</Name>
    <ChangedDate>2015:08:10T10:22:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the wall associated bound of a component in an object.</Description>
    <ShortDesc>Sets the wall associated bound of a component in an object.</ShortDesc>
    <SeeAlso>GetCompWallAssBound</SeeAlso>
    <ID>13439</ID>
    <IDName>funcSetCompWallAssBound</IDName>
    <InternalFunctionName>MP_SetCompWallAssBound</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>wallAssociatedBound</Name>
        <Type>intMode</Type>
        <Desc>The wall associated bound of the component.  0 - Inner face 1 - Outer face of inner component 2 - Inner face of core 3 - Center of core 4 - Outer face of core 5 - Inner face of outer component 6 - Roof edge 7 - Roof axis line</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompSecFillChgPt</Name>
    <ChangedDate>2015:08:10T10:23:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the wall associated section fill change point of a component in an object.</Description>
    <ShortDesc>Gets the wall associated section fill change point of a component in an object.</ShortDesc>
    <SeeAlso>SetCompSecFillChgPt</SeeAlso>
    <ID>13440</ID>
    <IDName>funcGetCompSecFillChgPt</IDName>
    <InternalFunctionName>MP_GetCompSecFillChgPt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>wallAssociatedSectionFillChangePoint</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the wall associated section fill change point of the component.  0 - Inner face 1 - Outer face of inner component 2 - Inner face of core 3 - Center of core 4 - Outer face of core 5 - Inner face of outer component 6 - None</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompSecFillChgPt</Name>
    <ChangedDate>2015:08:10T10:23:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the wall associated section fill change point of a component in an object.</Description>
    <ShortDesc>Sets the wall associated section fill change point of a component in an object.</ShortDesc>
    <SeeAlso>GetCompSecFillChgPt</SeeAlso>
    <ID>13441</ID>
    <IDName>funcSetCompSecFillChgPt</IDName>
    <InternalFunctionName>MP_SetCompSecFillChgPt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>wallAssociatedSectionFillChangePoint</Name>
        <Type>intMode</Type>
        <Desc>The wall associated section fill change point of the component.  0 - Inner face 1 - Outer face of inner component 2 - Inner face of core 3 - Center of core 4 - Outer face of core 5 - Inner face of outer component 6 - None</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompWallAssMod</Name>
    <ChangedDate>2015:08:10T10:23:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the wall associated modification of a component in an object.</Description>
    <ShortDesc>Gets the wall associated modification of a component in an object.</ShortDesc>
    <SeeAlso>SetCompWallAssMod</SeeAlso>
    <ID>13442</ID>
    <IDName>funcGetCompWallAssMod</IDName>
    <InternalFunctionName>MP_GetCompWallAssMod</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>wallAssociatedModification</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the wall associated modification of the component.  0 - None 1 - Clip walls 2 - Clipped by walls</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompWallAssMod</Name>
    <ChangedDate>2015:08:10T10:24:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the wall associated modification of a component in an object.</Description>
    <ShortDesc>Sets the wall associated modification of a component in an object.</ShortDesc>
    <SeeAlso>GetCompWallAssMod</SeeAlso>
    <ID>13443</ID>
    <IDName>funcSetCompWallAssMod</IDName>
    <InternalFunctionName>MP_SetCompWallAssMod</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>wallAssociatedModification</Name>
        <Type>intMode</Type>
        <Desc>The wall associated modification of the component.  0 - None 1 - Clip walls 2 - Clipped by walls</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompManualBound</Name>
    <ChangedDate>2015:08:10T10:24:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the manual bound of a component in an object.</Description>
    <ShortDesc>Gets the manual bound of a component in an object.</ShortDesc>
    <SeeAlso>SetCompManualBound</SeeAlso>
    <ID>13444</ID>
    <IDName>funcGetCompManualBound</IDName>
    <InternalFunctionName>MP_GetCompManualBound</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>manualBound</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the manual bound of the component.  0 - Roof edge 1 - Roof axis line</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompManualBound</Name>
    <ChangedDate>2015:08:10T10:25:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the manual bound of a component in an object.</Description>
    <ShortDesc>Sets the manual bound of a component in an object.</ShortDesc>
    <SeeAlso>GetCompManualBound</SeeAlso>
    <ID>13445</ID>
    <IDName>funcSetCompManualBound</IDName>
    <InternalFunctionName>MP_SetCompManualBound</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>manualBound</Name>
        <Type>intMode</Type>
        <Desc>The manual bound of the component.  0 - Roof edge 1 - Roof axis line</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompBoundOffset</Name>
    <ChangedDate>2015:08:10T09:38:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the bound offset of a component in an object.</Description>
    <ShortDesc>Gets the bound offset of a component in an object.</ShortDesc>
    <SeeAlso>SetCompBoundOffset</SeeAlso>
    <ID>13446</ID>
    <IDName>funcGetCompBoundOffset</IDName>
    <InternalFunctionName>MP_GetCompBoundOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>boundOffset</Name>
        <Type>rVarMode</Type>
        <Desc>Returns the bound offset of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompBoundOffset</Name>
    <ChangedDate>2015:08:10T09:38:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the bound offset of a component in an object.</Description>
    <ShortDesc>Sets the bound offset of a component in an object.</ShortDesc>
    <SeeAlso>GetCompBoundOffset</SeeAlso>
    <ID>13447</ID>
    <IDName>funcSetCompBoundOffset</IDName>
    <InternalFunctionName>MP_SetCompBoundOffset</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>boundOffset</Name>
        <Type>realMode</Type>
        <Desc>The bound offset of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompAutoJoinCap</Name>
    <ChangedDate>2015:08:10T09:39:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the always auto join in Capped Join mode flag of a component in an object.</Description>
    <ShortDesc>Gets the always auto join in Capped Join mode flag of a component in an object.</ShortDesc>
    <SeeAlso>SetCompAutoJoinCap</SeeAlso>
    <ID>13448</ID>
    <IDName>funcGetCompAutoJoinCap</IDName>
    <InternalFunctionName>MP_GetCompAutoJoinCap</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>alwaysAutoJoinInCappedJoinMode</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component always auto joins in Capped Join mode.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompAutoJoinCap</Name>
    <ChangedDate>2015:08:10T09:39:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the always auto join in Capped Join mode flag of a component in an object.</Description>
    <ShortDesc>Sets the always auto join in Capped Join mode flag of a component in an object.</ShortDesc>
    <SeeAlso>GetCompAutoJoinCap</SeeAlso>
    <ID>13449</ID>
    <IDName>funcSetCompAutoJoinCap</IDName>
    <InternalFunctionName>MP_SetCompAutoJoinCap</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>alwaysAutoJoinInCappedJoinMode</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component always auto joins in Capped Join mode.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompAltSecFill</Name>
    <ChangedDate>2015:08:10T09:40:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the alternate section fill of a component in an object.</Description>
    <ShortDesc>Gets the alternate section fill of a component in an object.</ShortDesc>
    <SeeAlso>SetCompAltSecFill</SeeAlso>
    <ID>13450</ID>
    <IDName>funcGetCompAltSecFill</IDName>
    <InternalFunctionName>MP_GetCompAltSecFill</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>alternateSectionFill</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns the alternate section fill of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompAltSecFill</Name>
    <ChangedDate>2015:08:10T09:40:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the alternate section fill of a component in an object.</Description>
    <ShortDesc>Sets the alternate section fill of a component in an object.</ShortDesc>
    <SeeAlso>GetCompAltSecFill</SeeAlso>
    <ID>13451</ID>
    <IDName>funcSetCompAltSecFill</IDName>
    <InternalFunctionName>MP_SetCompAltSecFill</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>alternateSectionFill</Name>
        <Type>longMode</Type>
        <Desc>The alternate section fill of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompPenStylesN</Name>
    <ChangedDate>2015:08:10T09:41:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the pen styles of a component in an object.</Description>
    <ShortDesc>Gets the pen styles of a component in an object.</ShortDesc>
    <SeeAlso>SetCompPenStylesN</SeeAlso>
    <ID>13452</ID>
    <IDName>funcGetCompPenStylesN</IDName>
    <InternalFunctionName>MP_GetCompPenStylesN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>leftPenStyle</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns the left pen style of the component.</Desc>
      </Param>
      <Param>
        <Name>rightPenStyle</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns the right pen style of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompPenStylesN</Name>
    <ChangedDate>2015:08:10T09:41:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the pen styles of a component in an object.</Description>
    <ShortDesc>Sets the pen styles of a component in an object.</ShortDesc>
    <SeeAlso>GetCompPenStylesN</SeeAlso>
    <ID>13453</ID>
    <IDName>funcSetCompPenStylesN</IDName>
    <InternalFunctionName>MP_SetCompPenStylesN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>leftPenStyle</Name>
        <Type>longMode</Type>
        <Desc>The left pen style of the component.</Desc>
      </Param>
      <Param>
        <Name>rightPenStyle</Name>
        <Type>longMode</Type>
        <Desc>The right pen style of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompAltSecFillCl</Name>
    <ChangedDate>2015:08:10T09:42:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the alternate section fill colors of a component in an object.</Description>
    <ShortDesc>Gets the alternate section fill colors of a component in an object.</ShortDesc>
    <SeeAlso>SetCompAltSecFillCl</SeeAlso>
    <ID>13454</ID>
    <IDName>funcGetCompAltSecFillCl</IDName>
    <InternalFunctionName>MP_GetCompAltSecFillCl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>alternateSectionFillForeColor</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the alternate section fill fore color of the component.</Desc>
      </Param>
      <Param>
        <Name>alternateSectionFillBackColor</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the alternate section fill back color of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompAltSecFillCl</Name>
    <ChangedDate>2015:08:10T09:42:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the alternate section fill colors of a component in an object.</Description>
    <ShortDesc>Sets the alternate section fill colors of a component in an object.</ShortDesc>
    <SeeAlso>GetCompAltSecFillCl</SeeAlso>
    <ID>13455</ID>
    <IDName>funcSetCompAltSecFillCl</IDName>
    <InternalFunctionName>MP_SetCompAltSecFillCl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>alternateSectionFillForeColor</Name>
        <Type>intMode</Type>
        <Desc>The alternate section fill fore color of the component.</Desc>
      </Param>
      <Param>
        <Name>alternateSectionFillBackColor</Name>
        <Type>intMode</Type>
        <Desc>The alternate section fill back color of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompUseClassFill</Name>
    <ChangedDate>2015:08:10T09:56:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the use class fill style for fill flag of a component in an object.</Description>
    <ShortDesc>Gets the use class fill style for fill flag of a component in an object.</ShortDesc>
    <SeeAlso>SetCompUseClassFill</SeeAlso>
    <ID>13456</ID>
    <IDName>funcGetCompUseClassFill</IDName>
    <InternalFunctionName>MP_GetCompUseClassFill</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassFillStyleForFill</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component is using class attributes for its fill.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompUseClassFill</Name>
    <ChangedDate>2015:08:10T10:07:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the use class fill style for fill flag of a component in an object.</Description>
    <ShortDesc>Sets the use class fill style for fill flag of a component in an object.</ShortDesc>
    <SeeAlso>GetCompUseClassFill</SeeAlso>
    <ID>13457</ID>
    <IDName>funcSetCompUseClassFill</IDName>
    <InternalFunctionName>MP_SetCompUseClassFill</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassFillStyleForFill</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component will use class attributes for its fill.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompUseClassFCl</Name>
    <ChangedDate>2015:08:10T10:12:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the use class fill colors for fill flag of a component in an object.</Description>
    <ShortDesc>Gets the use class fill colors for fill flag of a component in an object.</ShortDesc>
    <SeeAlso>SetCompUseClassFCl</SeeAlso>
    <ID>13458</ID>
    <IDName>funcGetCompUseClassFCl</IDName>
    <InternalFunctionName>MP_GetCompUseClassFCl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassFillColorsForFill</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component is using class attributes for its fill colors.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompUseClassFCl</Name>
    <ChangedDate>2015:08:10T10:13:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the use class fill colors for fill flag of a component in an object.</Description>
    <ShortDesc>Sets the use class fill colors for fill flag of a component in an object.</ShortDesc>
    <SeeAlso>GetCompUseClassFCl</SeeAlso>
    <ID>13459</ID>
    <IDName>funcSetCompUseClassFCl</IDName>
    <InternalFunctionName>MP_SetCompUseClassFCl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassFillColorsForFill</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component will use class attributes for its fill colors.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompUseClassASF</Name>
    <ChangedDate>2015:08:10T10:12:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the use class fill style for alternate section fill flag of a component in an object.</Description>
    <ShortDesc>Gets the use class fill style for alternate section fill flag of a component in an object.</ShortDesc>
    <SeeAlso>SetCompUseClassASF</SeeAlso>
    <ID>13460</ID>
    <IDName>funcGetCompUseClassASF</IDName>
    <InternalFunctionName>MP_GetCompUseClassASF</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassFillStyleForAlternateSectionFill</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component is using class attributes for its alternate section fill.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompUseClassASF</Name>
    <ChangedDate>2015:08:10T10:14:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the use class fill style for alternate section fill flag of a component in an object.</Description>
    <ShortDesc>Sets the use class fill style for alternate section fill flag of a component in an object.</ShortDesc>
    <SeeAlso>GetCompUseClassASF</SeeAlso>
    <ID>13461</ID>
    <IDName>funcSetCompUseClassASF</IDName>
    <InternalFunctionName>MP_SetCompUseClassASF</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassFillStyleForAlternateSectionFill</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component will use class attributes for its alternate section fill.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompUseClassASFCl</Name>
    <ChangedDate>2015:08:10T10:12:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the use class fill colors for alternate section fill flag of a component in an object.</Description>
    <ShortDesc>Gets the use class fill colors for alternate section fill flag of a component in an object.</ShortDesc>
    <SeeAlso>SetCompUseClassASFCl</SeeAlso>
    <ID>13462</ID>
    <IDName>funcGetCompUseClassASFCl</IDName>
    <InternalFunctionName>MP_GetCompUseClassASFCl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassFillColorsForAlternateSectionFill</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component is using class attributes for its alternate section fill colors.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompUseClassASFCl</Name>
    <ChangedDate>2015:08:10T10:14:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the use class fill colors for alternate section fill flag of a component in an object.</Description>
    <ShortDesc>Sets the use class fill colors for alternate section fill flag of a component in an object.</ShortDesc>
    <SeeAlso>GetCompUseClassASFCl</SeeAlso>
    <ID>13463</ID>
    <IDName>funcSetCompUseClassASFCl</IDName>
    <InternalFunctionName>MP_SetCompUseClassASFCl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassFillColorsForAlternateSectionFill</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component will use class attributes for its alternate section fill colors.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompUseClassLPS</Name>
    <ChangedDate>2015:08:10T10:12:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the use class pen style for left pen flag of a component in an object.</Description>
    <ShortDesc>Gets the use class pen style for left pen flag of a component in an object.</ShortDesc>
    <SeeAlso>SetCompUseClassLPS</SeeAlso>
    <ID>13464</ID>
    <IDName>funcGetCompUseClassLPS</IDName>
    <InternalFunctionName>MP_GetCompUseClassLPS</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassPenStyleForLeftPen</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component is using class attributes for its left pen style.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompUseClassLPS</Name>
    <ChangedDate>2015:08:10T10:14:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the use class pen style for left pen flag of a component in an object.</Description>
    <ShortDesc>Sets the use class pen style for left pen flag of a component in an object.</ShortDesc>
    <SeeAlso>GetCompUseClassLPS</SeeAlso>
    <ID>13465</ID>
    <IDName>funcSetCompUseClassLPS</IDName>
    <InternalFunctionName>MP_SetCompUseClassLPS</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassPenStyleForLeftPen</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component will use class attributes for its left pen style.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompUseClassLPW</Name>
    <ChangedDate>2015:08:10T10:13:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the use class pen weight for left pen flag of a component in an object.</Description>
    <ShortDesc>Gets the use class pen weight for left pen flag of a component in an object.</ShortDesc>
    <SeeAlso>SetCompUseClassLPW</SeeAlso>
    <ID>13466</ID>
    <IDName>funcGetCompUseClassLPW</IDName>
    <InternalFunctionName>MP_GetCompUseClassLPW</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassPenWeightForLeftPen</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component is using class attributes for its left pen weight.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompUseClassLPW</Name>
    <ChangedDate>2015:08:10T10:14:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the use class pen weight for left pen flag of a component in an object.</Description>
    <ShortDesc>Sets the use class pen weight for left pen flag of a component in an object.</ShortDesc>
    <SeeAlso>GetCompUseClassLPW</SeeAlso>
    <ID>13467</ID>
    <IDName>funcSetCompUseClassLPW</IDName>
    <InternalFunctionName>MP_SetCompUseClassLPW</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassPenWeightForLeftPen</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component will use class attributes for its left pen weight.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompUseClassLPCl</Name>
    <ChangedDate>2015:08:10T10:13:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the use class pen colors for left pen flag of a component in an object.</Description>
    <ShortDesc>Gets the use class pen colors for left pen flag of a component in an object.</ShortDesc>
    <SeeAlso>SetCompUseClassLPCl</SeeAlso>
    <ID>13468</ID>
    <IDName>funcGetCompUseClassLPCl</IDName>
    <InternalFunctionName>MP_GetCompUseClassLPCl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassPenColorsForLeftPen</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component is using class attributes for its left pen colors.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompUseClassLPCl</Name>
    <ChangedDate>2015:08:10T10:14:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the use class pen colors for left pen flag of a component in an object.</Description>
    <ShortDesc>Sets the use class pen colors for left pen flag of a component in an object.</ShortDesc>
    <SeeAlso>GetCompUseClassLPCl</SeeAlso>
    <ID>13469</ID>
    <IDName>funcSetCompUseClassLPCl</IDName>
    <InternalFunctionName>MP_SetCompUseClassLPCl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassPenColorsForLeftPen</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component will use class attributes for its left pen colors.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompUseClassRPS</Name>
    <ChangedDate>2015:08:10T10:13:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the use class pen style for right pen flag of a component in an object.</Description>
    <ShortDesc>Gets the use class pen style for right pen flag of a component in an object.</ShortDesc>
    <SeeAlso>SetCompUseClassRPS</SeeAlso>
    <ID>13470</ID>
    <IDName>funcGetCompUseClassRPS</IDName>
    <InternalFunctionName>MP_GetCompUseClassRPS</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassPenStyleForRightPen</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component is using class attributes for its right pen style.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompUseClassRPS</Name>
    <ChangedDate>2015:08:10T10:15:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the use class pen style for right pen flag of a component in an object.</Description>
    <ShortDesc>Sets the use class pen style for right pen flag of a component in an object.</ShortDesc>
    <SeeAlso>GetCompUseClassRPS</SeeAlso>
    <ID>13471</ID>
    <IDName>funcSetCompUseClassRPS</IDName>
    <InternalFunctionName>MP_SetCompUseClassRPS</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassPenStyleForRightPen</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component will use class attributes for its right pen style.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompUseClassRPW</Name>
    <ChangedDate>2015:08:10T10:13:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the use class pen weight for right pen flag of a component in an object.</Description>
    <ShortDesc>Gets the use class pen weight for right pen flag of a component in an object.</ShortDesc>
    <SeeAlso>SetCompUseClassRPW</SeeAlso>
    <ID>13472</ID>
    <IDName>funcGetCompUseClassRPW</IDName>
    <InternalFunctionName>MP_GetCompUseClassRPW</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassPenWeightForRightPen</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component is using class attributes for its right pen weight.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompUseClassRPW</Name>
    <ChangedDate>2015:08:10T10:15:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the use class pen weight for right pen flag of a component in an object.</Description>
    <ShortDesc>Sets the use class pen weight for right pen flag of a component in an object.</ShortDesc>
    <SeeAlso>GetCompUseClassRPW</SeeAlso>
    <ID>13473</ID>
    <IDName>funcSetCompUseClassRPW</IDName>
    <InternalFunctionName>MP_SetCompUseClassRPW</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassPenWeightForRightPen</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component will use class attributes for its right pen weight.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompUseClassRPCl</Name>
    <ChangedDate>2015:08:10T10:13:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the use class pen colors for right pen flag of a component in an object.</Description>
    <ShortDesc>Gets the use class pen colors for right pen flag of a component in an object.</ShortDesc>
    <SeeAlso>SetCompUseClassRPCl</SeeAlso>
    <ID>13474</ID>
    <IDName>funcGetCompUseClassRPCl</IDName>
    <InternalFunctionName>MP_GetCompUseClassRPCl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassPenColorsForRightPen</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component is using class attributes for its right pen colors.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompUseClassRPCl</Name>
    <ChangedDate>2015:08:10T12:40:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the use class pen colors for right pen flag of a component in an object.</Description>
    <ShortDesc>Sets the use class pen colors for right pen flag of a component in an object.</ShortDesc>
    <SeeAlso>GetCompUseClassRPCl</SeeAlso>
    <ID>13475</ID>
    <IDName>funcSetCompUseClassRPCl</IDName>
    <InternalFunctionName>MP_SetCompUseClassRPCl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>useClassPenColorsForRightPen</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component will use class attributes for its right pen colors.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetIsCurtainWall</Name>
    <ChangedDate>2015:08:10T11:05:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Sets whether or not a wall is a curtain wall.</Description>
    <ShortDesc>Sets whether or not a wall is a curtain wall.</ShortDesc>
    <SeeAlso>IsCurtainWall</SeeAlso>
    <ID>13476</ID>
    <IDName>procSetIsCurtainWall</IDName>
    <InternalFunctionName>MP_SetIsCurtainWall</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>wall</Name>
        <Type>handleMode</Type>
        <Desc>The wall.</Desc>
      </Param>
      <Param>
        <Name>isCurtainWall</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the wall is a curtain wall.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCurtainWallCutPl</Name>
    <ChangedDate>2015:08:10T11:08:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Gets the curtain wall cut plane of the wall.</Description>
    <ShortDesc>Gets the curtain wall cut plane of the wall.</ShortDesc>
    <SeeAlso>SetCurtainWallCutPl</SeeAlso>
    <ID>13477</ID>
    <IDName>funcGetCurtainWallCutPl</IDName>
    <InternalFunctionName>MP_GetCurtainWallCutPl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>wall</Name>
        <Type>handleMode</Type>
        <Desc>The wall.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCurtainWallCutPl</Name>
    <ChangedDate>2015:08:10T11:10:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Sets the curtain wall cut plane of the wall.</Description>
    <ShortDesc>Sets the curtain wall cut plane of the wall.</ShortDesc>
    <SeeAlso>GetCurtainWallCutPl</SeeAlso>
    <ID>13478</ID>
    <IDName>procSetCurtainWallCutPl</IDName>
    <InternalFunctionName>MP_SetCurtainWallCutPl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>wall</Name>
        <Type>handleMode</Type>
        <Desc>The wall.</Desc>
      </Param>
      <Param>
        <Name>curtainWallCutPlane</Name>
        <Type>realMode</Type>
        <Desc>The curtain wall cut plane of the wall.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetRoofStyle</Name>
    <ChangedDate>2015:08:10T11:31:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Sets the Roof Style of a roof.</Description>
    <ShortDesc>Sets the Roof Style of a roof.</ShortDesc>
    <SeeAlso>GetRoofStyle</SeeAlso>
    <ID>13479</ID>
    <IDName>procSetRoofStyle</IDName>
    <InternalFunctionName>MP_SetRoofStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roof</Name>
        <Type>handleMode</Type>
        <Desc>The roof.</Desc>
      </Param>
      <Param>
        <Name>roofStyle</Name>
        <Type>longMode</Type>
        <Desc>The Roof Style.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ConvToUnstyledRoof</Name>
    <ChangedDate>2015:08:10T11:54:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Roofs</Category>
    <Type>Procedure</Type>
    <Description>Sets a roof to be unstyled.</Description>
    <ShortDesc>Sets a roof to be unstyled.</ShortDesc>
    <ID>13480</ID>
    <IDName>procConvToUnstyledRoof</IDName>
    <InternalFunctionName>MP_ConvToUnstyledRoof</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roof</Name>
        <Type>handleMode</Type>
        <Desc>The roof.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetRoofPrefStyle</Name>
    <ChangedDate>2015:08:10T11:57:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Gets the Roof Style of the Roof Preferences.</Description>
    <ShortDesc>Gets the Roof Style of the Roof Preferences.</ShortDesc>
    <Result>The ref number of the Roof Style of the Roof Preferences. 0 for unstyled.</Result>
    <SeeAlso>SetRoofPrefStyle</SeeAlso>
    <ID>13481</ID>
    <IDName>funcGetRoofPrefStyle</IDName>
    <InternalFunctionName>MP_GetRoofPrefStyle</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>SetRoofPrefStyle</Name>
    <ChangedDate>2015:08:10T11:58:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Procedure</Type>
    <Description>Sets the Roof Style of the Roof Preferences.</Description>
    <ShortDesc>Sets the Roof Style of the Roof Preferences.</ShortDesc>
    <SeeAlso>GetRoofPrefStyle</SeeAlso>
    <ID>13482</ID>
    <IDName>procSetRoofPrefStyle</IDName>
    <InternalFunctionName>MP_SetRoofPrefStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofStyle</Name>
        <Type>longMode</Type>
        <Desc>The ref number of the Roof Style to apply to the Roof Preferences. 0 for unstyled.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateRoofStyle</Name>
    <ChangedDate>2015:08:10T11:59:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a new Roof Style of the given name. If the name is already in use, the next available name will be used.</Description>
    <ShortDesc>Creates a new Roof Style of the given name. If the name is already in use, the next available name will be used.</ShortDesc>
    <Result>The new Roof Style.</Result>
    <ID>13483</ID>
    <IDName>funcCreateRoofStyle</IDName>
    <InternalFunctionName>MP_CreateRoofStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>roofStyleName</Name>
        <Type>stringMode</Type>
        <Desc>The name of the new Roof Style.  If the name is already in use, the next available name will be used.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetRoofPreferences</Name>
    <ChangedDate>2015:08:10T12:01:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Gets the Roof Preferences. This can be used with the component calls and the Style selectors.</Description>
    <ShortDesc>Gets the Roof Preferences. This can be used with the component calls and the Style selectors.</ShortDesc>
    <Result>The Roof Preferences.</Result>
    <ID>13484</ID>
    <IDName>funcGetRoofPreferences</IDName>
    <InternalFunctionName>MP_GetRoofPreferences</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>GetDatumRoofComp</Name>
    <ChangedDate>2015:08:10T12:04:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the datum roof component of the object.</Description>
    <ShortDesc>Gets the datum roof component of the object.</ShortDesc>
    <Result>The index of the datum roof component.</Result>
    <SeeAlso>SetDatumRoofComp</SeeAlso>
    <ID>13485</ID>
    <IDName>funcGetDatumRoofComp</IDName>
    <InternalFunctionName>MP_GetDatumRoofComp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDatumRoofComp</Name>
    <ChangedDate>2015:08:10T12:07:00</ChangedDate>
    <Version>2100</Version>
    <Category>Objects - Architectural</Category>
    <Type>Procedure</Type>
    <Description>Sets the datum roof component of the object.</Description>
    <ShortDesc>Sets the datum roof component of the object.</ShortDesc>
    <SeeAlso>GetDatumRoofComp</SeeAlso>
    <ID>13486</ID>
    <IDName>procSetDatumRoofComp</IDName>
    <InternalFunctionName>MP_SetDatumRoofComp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a roof face, roof, Roof Style, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>datumRoofComponent</Name>
        <Type>intMode</Type>
        <Desc>The index of the datum roof component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetFileSize</Name>
    <ChangedDate>2015:08:19T14:08:00</ChangedDate>
    <Version>2200</Version>
    <Category>File I/O</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <ShortDesc>Returns the size of a file in bytes.</ShortDesc>
    <Result>Returns the size of a file in bytes.</Result>
    <ID>13487</ID>
    <IDName>funcGetFileSize</IDName>
    <InternalFunctionName>MP_GetFileSize</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>FilePath</Name>
        <Type>stringInOutMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Mirror</Name>
    <ChangedDate>2015:09:04T09:21:00</ChangedDate>
    <Version>2200</Version>
    <Category>Object Editing</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Reflect an object across an axis.[[BR]][[BR]]For a 2D reflection, the axis is a line containing arbitrary point p and extending along vector v.</Description>
    <ShortDesc>Mirrors a 2D object</ShortDesc>
    <Result>The reflected object (this will be the same as the input object if dup is false).</Result>
    <ID>13488</ID>
    <IDName>funcMirror</IDName>
    <InternalFunctionName>MP_Mirror</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>The object to reflect</Desc>
      </Param>
      <Param>
        <Name>dup</Name>
        <Type>boolMode</Type>
        <Desc>If false, transform the original object to the new position. If true, create a new object</Desc>
      </Param>
      <Param>
        <Name>p1</Name>
        <Type>ePointMode</Type>
        <Desc>An arbitrary point on the mirror axis</Desc>
      </Param>
      <Param>
        <Name>p2</Name>
        <Type>ePointMode</Type>
        <Desc>A second arbitrary point on the mirror axis</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOpacityN</Name>
    <ChangedDate>2015:11:23T15:30:00</ChangedDate>
    <Version>2200</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>Boolean</ReturnType>
    <ShortDesc>Gets the pen and fill opacity values of an object.</ShortDesc>
    <ID>13489</ID>
    <IDName>funcGetOpacityN</IDName>
    <InternalFunctionName>MP_GetOpacityN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Object handle to get the opacity values.</Desc>
      </Param>
      <Param>
        <Name>outPenOpacity</Name>
        <Type>intVarMode</Type>
        <Desc>Output parameter. Return the object's pen opacity as percentage value in range [0-100].</Desc>
      </Param>
      <Param>
        <Name>outFillOpacity</Name>
        <Type>intVarMode</Type>
        <Desc>Output parameter. Return the object's fill opacity as percentage value in range [0-100].</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOpacityN</Name>
    <ChangedDate>2015:11:23T15:40:00</ChangedDate>
    <Version>2200</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Sets the pen and fill opacity values of the object to the opacity values passed in.</ShortDesc>
    <ID>13490</ID>
    <IDName>funcSetOpacityN</IDName>
    <InternalFunctionName>MP_SetOpacityN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>HANDLE of the object</Desc>
      </Param>
      <Param>
        <Name>inPenOpacity</Name>
        <Type>intMode</Type>
        <Desc>Pen opacity value to set.</Desc>
      </Param>
      <Param>
        <Name>inFillOpacity</Name>
        <Type>intMode</Type>
        <Desc>Fill opacity value to set.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDefaultOpacityN</Name>
    <ChangedDate>2015:11:23T16:56:00</ChangedDate>
    <Version>2200</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets the default pen and fill opacity to document.</ShortDesc>
    <ID>13491</ID>
    <IDName>procSetDefaultOpacityN</IDName>
    <InternalFunctionName>MP_SetDefaultOpacityN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>inPenOpacity</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>inFillOpacity</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDefaultOpacityN</Name>
    <ChangedDate>2015:11:23T16:54:00</ChangedDate>
    <Version>2200</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Gets default values for Pen and Fill opacity.</ShortDesc>
    <ID>13492</ID>
    <IDName>procGetDefaultOpacityN</IDName>
    <InternalFunctionName>MP_GetDefaultOpacityN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>outPenOpacity</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>outFillOpacity</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetOpacityByClassN</Name>
    <ChangedDate>2015:11:23T16:53:00</ChangedDate>
    <Version>2200</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Gets ByClass values for Pen and Fill opacity.</ShortDesc>
    <ID>13493</ID>
    <IDName>procGetOpacityByClassN</IDName>
    <InternalFunctionName>MP_GetOpacityByClassN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>isPenOpacityByClass</Name>
        <Type>boolVarMode</Type>
      </Param>
      <Param>
        <Name>isFillOpacityByClass</Name>
        <Type>boolVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetOpacityByClassN</Name>
    <ChangedDate>2015:11:23T16:55:00</ChangedDate>
    <Version>2200</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets the specified byClass to use the class opacity on the object.</ShortDesc>
    <ID>13494</ID>
    <IDName>procSetOpacityByClassN</IDName>
    <InternalFunctionName>MP_SetOpacityByClassN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>inIsPenOpacityByClass</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>inIsFillOpacityByClass</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDefOpacityByClsN</Name>
    <ChangedDate>2015:11:23T17:08:00</ChangedDate>
    <Version>2200</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets the default pen and fill opacity to use the current class pen and fill opacity.</ShortDesc>
    <ID>13495</ID>
    <IDName>procSetDefOpacityByClsN</IDName>
    <InternalFunctionName>MP_SetDefOpacityByClsN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>inIsPenOpacityByClass</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>inIsFillOpacityByClass</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDefOpacityByClsN</Name>
    <ChangedDate>2015:11:24T18:57:00</ChangedDate>
    <Version>2200</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Returns By class values of default fill and pen opacity values of document.</ShortDesc>
    <ID>13496</ID>
    <IDName>procGetDefOpacityByClsN</IDName>
    <InternalFunctionName>MP_GetDefOpacityByClsN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>outDefFillOpacityByClass</Name>
        <Type>boolVarMode</Type>
      </Param>
      <Param>
        <Name>outDefPenOpacityByClass</Name>
        <Type>boolVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClOpacityN</Name>
    <ChangedDate>2015:11:30T11:59:00</ChangedDate>
    <Version>2200</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Gets the Fill and Pen Opacity values of the specified class.</ShortDesc>
    <ID>13497</ID>
    <IDName>procGetClOpacityN</IDName>
    <InternalFunctionName>MP_GetClOpacityN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>strClassName</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>outFillOpacity</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>outPenOpacity</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCLOpacityN</Name>
    <ChangedDate>2015:11:30T11:35:00</ChangedDate>
    <Version>2200</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets the fill and pen opacity of the specified class.</ShortDesc>
    <ID>13498</ID>
    <IDName>procSetCLOpacityN</IDName>
    <InternalFunctionName>MP_SetCLOpacityN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>fillOpacity</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>penOpacity</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>OpacityN</Name>
    <ChangedDate>2015:11:30T15:57:00</ChangedDate>
    <Version>2200</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets the active fill and pen opacity.</ShortDesc>
    <ID>13499</ID>
    <IDName>procOpacityN</IDName>
    <InternalFunctionName>MP_OpacityN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>fillOpacity</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>penOpacity</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>OpacityByClassN</Name>
    <ChangedDate>2015:12:01T10:24:00</ChangedDate>
    <Version>2200</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets the document default settings to the opacity of the active class.</ShortDesc>
    <ID>13500</ID>
    <IDName>procOpacityByClassN</IDName>
    <InternalFunctionName>MP_OpacityByClassN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>fillOpacityByClass</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>penOpacityByClass</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveCustomTexParts</Name>
    <ChangedDate>2016:03:22T15:25:00</ChangedDate>
    <Version>2200</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>This routine removes all custom texture parts from the object.</Description>
    <ShortDesc>This procedure removes all custom texture parts from the object.</ShortDesc>
    <Example>RemoveCustomTexParts(h);[[BR]]AddCustomTexPart(100, ‘Stringers’);[[BR]]AddCustomTexPart(200, ‘Treads’);</Example>
    <ID>13501</ID>
    <IDName>procRemoveCustomTexParts</IDName>
    <InternalFunctionName>MP_RemoveCustomTexParts</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>The object from which to remove custom texture parts.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddCustomTexPart</Name>
    <ChangedDate>2016:03:22T15:25:00</ChangedDate>
    <Version>2200</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>This procedure adds a custom texture part with the specified ID and name to the object.  Use partID starting at 100 to avoid conflicts with existing texture parts.</Description>
    <ShortDesc>This procedure adds a custom texture part with the specified ID and name to the object.</ShortDesc>
    <Example>RemoveCustomTexParts(h);[[BR]]AddCustomTexPart(h, 100, ‘Stringers’);[[BR]]AddCustomTexPart(h, 200, ‘Treads’);[[BR]]</Example>
    <ID>13502</ID>
    <IDName>procAddCustomTexPart</IDName>
    <InternalFunctionName>MP_AddCustomTexPart</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>The object to add a custom texture part to.</Desc>
      </Param>
      <Param>
        <Name>partID</Name>
        <Type>longMode</Type>
        <Desc>The texture part ID.  Start at 100 to avoid conflicts with existing texture parts.</Desc>
      </Param>
      <Param>
        <Name>partName</Name>
        <Type>stringMode</Type>
        <Desc>The texture part name, which will be shown in the texturing UI.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjWallInsertMode</Name>
    <ChangedDate>2016:03:09T10:54:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>Boolean</ReturnType>
    <Description>Returns the insertion mode for an object in a wall.[[BR]][[BR]]1 - Center[[BR]]2 - Leaf Edge[[BR]]3 - Right Edge[[BR]][[BR]][[BR]]The object (objH) must be contained in wall (wallH)  to succeed.</Description>
    <ShortDesc>Returns the insertion mode for an object in a wall.</ShortDesc>
    <Result>True or False upon successful retrieving of the insertion mode.[[BR]][[BR]]False can occur for the following conditions:[[BR]]objH is null.[[BR]]wallH is null.[[BR]]objH is not contained in wallH.</Result>
    <ID>13503</ID>
    <IDName>funcGetObjWallInsertMode</IDName>
    <InternalFunctionName>MP_GetObjWallInsertMode</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objH</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>wallH</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>insertMode</Name>
        <Type>intInOutMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjWallInsertMode</Name>
    <ChangedDate>2016:03:09T10:54:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>Boolean</ReturnType>
    <Description>Set the insertion mode for an object in a wall.[[BR]][[BR]]1 - Center[[BR]]2 - Leaf Edge[[BR]]3 - Right Edge[[BR]][[BR]][[BR]]The object (objH) must be contained in wall (wallH)  to succeed.</Description>
    <ShortDesc>Set the insertion mode for an object in a wall.</ShortDesc>
    <Result>True or False upon successful setting of the insertion mode.[[BR]][[BR]]False can occur for the following conditions:[[BR]]objH is null.[[BR]]wallH is null.[[BR]]objH is not contained in wallH.</Result>
    <ID>13504</ID>
    <IDName>funcSetObjWallInsertMode</IDName>
    <InternalFunctionName>MP_SetObjWallInsertMode</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objH</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>wallH</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>insertMode</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjWallBreakMode</Name>
    <ChangedDate>2016:03:09T10:54:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>Boolean</ReturnType>
    <Description>Returns the break mode for an object in a wall.[[BR]][[BR]]1 - Full Break with Caps[[BR]]2 - Full Break no Caps[[BR]]3 - Half Break[[BR]]4 - No Break[[BR]][[BR]]The object (objH) must be contained in wall (wallH)  to succeed.</Description>
    <ShortDesc>Returns the break mode for an object in a wall.</ShortDesc>
    <Result>True or False upon successful retrieving of the break mode.[[BR]][[BR]]False can occur for the following conditions:[[BR]]objH is null.[[BR]]wallH is null.[[BR]]objH is not contained in wallH.</Result>
    <ID>13505</ID>
    <IDName>funcGetObjWallBreakMode</IDName>
    <InternalFunctionName>MP_GetObjWallBreakMode</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objH</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>wallH</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>breakMode</Name>
        <Type>intInOutMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjWallBreakMode</Name>
    <ChangedDate>2016:03:09T10:54:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>Boolean</ReturnType>
    <Description>Set the break mode for an object in a wall.[[BR]][[BR]]1 - Full Break with Caps[[BR]]2 - Full Break no Caps[[BR]]3 - Half Break[[BR]]4 - No Break[[BR]][[BR]]The object (objH) must be contained in wall (wallH)  to succeed.</Description>
    <ShortDesc>Set the break mode for an object in a wall.</ShortDesc>
    <Result>True or False upon successful setting of the break mode.[[BR]][[BR]]False can occur for the following conditions:[[BR]]objH is null.[[BR]]wallH is null.[[BR]]objH is not contained in wallH.</Result>
    <ID>13506</ID>
    <IDName>funcSetObjWallBreakMode</IDName>
    <InternalFunctionName>MP_SetObjWallBreakMode</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objH</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>wallH</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>breakMode</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CustomTexPartExists</Name>
    <ChangedDate>2016:03:22T15:44:00</ChangedDate>
    <Version>2200</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Returns true if object has the specified partID custom texture part.</Description>
    <ShortDesc>Returns true if obj has the specified custom texture part.</ShortDesc>
    <Example>hasPart := CustomTexturePartExists(h, 100);[[BR]]</Example>
    <ID>13507</ID>
    <IDName>funcCustomTexPartExists</IDName>
    <InternalFunctionName>MP_CustomTexPartExists</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
        <Desc>Object handle</Desc>
      </Param>
      <Param>
        <Name>partID</Name>
        <Type>longMode</Type>
        <Desc>Custom texture part ID, ex: 100.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ApplyCustomTexPart</Name>
    <ChangedDate>2016:03:22T15:45:00</ChangedDate>
    <Version>2200</Version>
    <Category>Textures</Category>
    <Type>Procedure</Type>
    <Description>Applies the src object’s custom texture part partID to dest Overall part.  For example apply PIO texture partID 100 to extrude’s Overall part.  If the dest object does not support the src map type then a default mapping is used.</Description>
    <ShortDesc>Applies the src custom texture part with partID to the dest object.</ShortDesc>
    <Example>ApplyCustomTexPart(parentPIO, pioSubObj, 100);</Example>
    <ID>13508</ID>
    <IDName>procApplyCustomTexPart</IDName>
    <InternalFunctionName>MP_ApplyCustomTexPart</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>srcObj</Name>
        <Type>handleMode</Type>
        <Desc>The source object from which to get the texture assignment and mapping.</Desc>
      </Param>
      <Param>
        <Name>destObj</Name>
        <Type>handleMode</Type>
        <Desc>The dest object to apply the texture and mapping to.  The texture and mapping are applied to destObj’s Overall texture part.</Desc>
      </Param>
      <Param>
        <Name>partID</Name>
        <Type>longMode</Type>
        <Desc>The custom texture part ID to apply from the src to the dest object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnableDropShadow</Name>
    <ChangedDate>2016:03:31T11:37:00</ChangedDate>
    <Version>2200</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Toggles DropShadow to enable or not.</ShortDesc>
    <ID>13509</ID>
    <IDName>procEnableDropShadow</IDName>
    <InternalFunctionName>MP_EnableDropShadow</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>enable</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsDropShadowEnabled</Name>
    <ChangedDate>2016:03:31T11:38:00</ChangedDate>
    <Version>2200</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Returns if DropShadow is enabled or not.</ShortDesc>
    <ID>13510</ID>
    <IDName>funcIsDropShadowEnabled</IDName>
    <InternalFunctionName>MP_IsDropShadowEnabled</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCLDrpShadowData</Name>
    <ChangedDate>2016:03:31T18:37:00</ChangedDate>
    <Version>2200</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Gets the DropShadow of the class. Make sure to confirm if DropShadow is enabled by using CLDropShadowEnabled() function also.</ShortDesc>
    <ID>13511</ID>
    <IDName>procGetCLDrpShadowData</IDName>
    <InternalFunctionName>MP_GetCLDrpShadowData</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>nUnits</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>dOffset</Name>
        <Type>rVarMode</Type>
      </Param>
      <Param>
        <Name>dBlurRadius</Name>
        <Type>rVarMode</Type>
      </Param>
      <Param>
        <Name>dAngle</Name>
        <Type>rVarMode</Type>
      </Param>
      <Param>
        <Name>nOpacity</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCLDrpShadowData</Name>
    <ChangedDate>2016:03:31T17:21:00</ChangedDate>
    <Version>2200</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets the Drop Shadow data on the class. Make sure to confirm if DropShadow is enabled by using CLDropShadowEnabled() function also. Use EnableCLDropShadow(..) function to enable it as needed.</ShortDesc>
    <ID>13512</ID>
    <IDName>procSetCLDrpShadowData</IDName>
    <InternalFunctionName>MP_SetCLDrpShadowData</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>nUnits</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>dOffset</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>dBlurRadius</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>dAngle</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>nOpacity</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnableCLDropShadow</Name>
    <ChangedDate>2016:03:31T11:29:00</ChangedDate>
    <Version>2200</Version>
    <Category>Classes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Enables the DropShadow as specified.</ShortDesc>
    <ID>13513</ID>
    <IDName>procEnableCLDropShadow</IDName>
    <InternalFunctionName>MP_EnableCLDropShadow</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>enable</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CLDropShadowEnabled</Name>
    <ChangedDate>2016:03:31T11:28:00</ChangedDate>
    <Version>2200</Version>
    <Category>Classes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Returns if the DropShadow is enabled on this class or not.</ShortDesc>
    <ID>13514</ID>
    <IDName>funcCLDropShadowEnabled</IDName>
    <InternalFunctionName>MP_CLDropShadowEnabled</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDropShadowByCls</Name>
    <ChangedDate>2016:03:31T11:39:00</ChangedDate>
    <Version>2200</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Returns DropShadow By Class value.</ShortDesc>
    <ID>13515</ID>
    <IDName>funcGetDropShadowByCls</IDName>
    <InternalFunctionName>MP_GetDropShadowByCls</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>H</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDropShadowByCls</Name>
    <ChangedDate>2016:03:31T11:41:00</ChangedDate>
    <Version>2200</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets DropShadow by Class value.</ShortDesc>
    <ID>13516</ID>
    <IDName>procSetDropShadowByCls</IDName>
    <InternalFunctionName>MP_SetDropShadowByCls</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>byClassValue</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDropShadowData</Name>
    <ChangedDate>2016:03:31T18:39:00</ChangedDate>
    <Version>2200</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Gets the DropShadow data. Make sure to use IsDropShadowEnabled(HANDLE) function also to confirm if it is enabled.</ShortDesc>
    <ID>13517</ID>
    <IDName>funcGetDropShadowData</IDName>
    <InternalFunctionName>MP_GetDropShadowData</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>nUnits</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>dOffset</Name>
        <Type>rVarMode</Type>
      </Param>
      <Param>
        <Name>dBlurRadius</Name>
        <Type>rVarMode</Type>
      </Param>
      <Param>
        <Name>dAngle</Name>
        <Type>rVarMode</Type>
      </Param>
      <Param>
        <Name>nOpacity</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDropShadowData</Name>
    <ChangedDate>2016:03:31T16:39:00</ChangedDate>
    <Version>2200</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets the DropShadow data on the object. Make sure to use EnableDropShadow(HANDLE, BOOLEAN) function also to enable DropShadow as required.</ShortDesc>
    <ID>13518</ID>
    <IDName>procSetDropShadowData</IDName>
    <InternalFunctionName>MP_SetDropShadowData</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>nUnits</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>dOffset</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>dBlurRadius</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>dAngle</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>nOpacity</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnableDefDropShadow</Name>
    <ChangedDate>2016:03:31T12:22:00</ChangedDate>
    <Version>2200</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets default DropShadow as enabled/disabled.</ShortDesc>
    <ID>13519</ID>
    <IDName>procEnableDefDropShadow</IDName>
    <InternalFunctionName>MP_EnableDefDropShadow</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>bEnable</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>DefDrpShadowEnabled</Name>
    <ChangedDate>2016:03:31T12:31:00</ChangedDate>
    <Version>2200</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Returns the value of DropShadow is enabled or not.</ShortDesc>
    <ID>13520</ID>
    <IDName>funcDefDrpShadowEnabled</IDName>
    <InternalFunctionName>MP_DefDrpShadowEnabled</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>DocDropShadowByCls</Name>
    <ChangedDate>2016:03:31T12:35:00</ChangedDate>
    <Version>2200</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Returns the value of Document - DropShadow By Class.</ShortDesc>
    <ID>13521</ID>
    <IDName>funcDocDropShadowByCls</IDName>
    <InternalFunctionName>MP_DocDropShadowByCls</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>SetDocDrpShadwByCls</Name>
    <ChangedDate>2016:03:31T12:37:00</ChangedDate>
    <Version>2200</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets the Doc DropShadow by class flag.</ShortDesc>
    <ID>13522</ID>
    <IDName>procSetDocDrpShadwByCls</IDName>
    <InternalFunctionName>MP_SetDocDrpShadwByCls</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>bEnable</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDocDrpShadowData</Name>
    <ChangedDate>2016:03:31T18:38:00</ChangedDate>
    <Version>2200</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Gets the DropShadow data of the active document.</ShortDesc>
    <ID>13523</ID>
    <IDName>procGetDocDrpShadowData</IDName>
    <InternalFunctionName>MP_GetDocDrpShadowData</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>bUseDropShadow</Name>
        <Type>boolVarMode</Type>
      </Param>
      <Param>
        <Name>nUnits</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>dOffset</Name>
        <Type>rVarMode</Type>
      </Param>
      <Param>
        <Name>dBlurRadius</Name>
        <Type>rVarMode</Type>
      </Param>
      <Param>
        <Name>dAngle</Name>
        <Type>rVarMode</Type>
      </Param>
      <Param>
        <Name>nOpacity</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>colorRV</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>colorGV</Name>
        <Type>intVarMode</Type>
      </Param>
      <Param>
        <Name>colorBV</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDocDrpShadowData</Name>
    <ChangedDate>2016:03:31T14:39:00</ChangedDate>
    <Version>2200</Version>
    <Category>Document Attributes</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets the DropShadow data of the active document.</ShortDesc>
    <ID>13524</ID>
    <IDName>procSetDocDrpShadowData</IDName>
    <InternalFunctionName>MP_SetDocDrpShadowData</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>bUseDropShadow</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>nUnits</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>dOffset</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>dBlurRadius</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>dAngle</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>nOpacity</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CheckoutObj</Name>
    <ChangedDate>2016:04:05T18:03:00</ChangedDate>
    <Version>2200</Version>
    <Category>Criteria</Category>
    <Type>Procedure</Type>
    <Description>Checkouts all objects which match the search criteria.</Description>
    <ShortDesc>Checkouts objects matching the search criteria.</ShortDesc>
    <IDName>procCheckoutObj</IDName>
    <InternalFunctionName>MP_CheckoutObj</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ReleaseObj</Name>
    <ChangedDate>2016:04:05T18:04:00</ChangedDate>
    <Version>2200</Version>
    <Category>Criteria</Category>
    <Type>Procedure</Type>
    <Description>Releases all objects which match the search criteria.</Description>
    <ShortDesc>Releases objects matching the search criteria.</ShortDesc>
    <IDName>procReleaseObj</IDName>
    <InternalFunctionName>MP_ReleaseObj</InternalFunctionName>
    <Implemented>True</Implemented>
    <ImplementationDetails>Criteria</ImplementationDetails>
    <Params>
      <Param>
        <Name>c</Name>
        <Type>criteriaMode</Type>
        <Desc>Search criteria</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPluginStyleSymbol</Name>
    <ChangedDate>2016:04:12T11:13:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Retrieves the handled to a symbol that defines the plug-in style for a given plug-in object.[[BR]][[BR]]</Description>
    <ShortDesc>Get the handle for the symbol defining a plug-in style.</ShortDesc>
    <Result>TRUE if the object is styled.[[BR]]FALSE if the object is uynstyled.</Result>
    <ID>13525</ID>
    <IDName>funcGetPluginStyleSymbol</IDName>
    <InternalFunctionName>MP_GetPluginStyleSymbol</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a plug-in object.</Desc>
      </Param>
      <Param>
        <Name>hSymDef</Name>
        <Type>handleInOutMode</Type>
        <Desc>Hanlde to a symbol definition that contrains the plug-in style associated with hObject.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetParamStyleType</Name>
    <ChangedDate>2016:04:12T10:59:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the style type (by instance or by style) for a parameter.</Description>
    <ShortDesc>Retruns the style type of a parameter in a plug-in style definition</ShortDesc>
    <Result>0 = Parametrer is an instance parameter[[BR]]1 = Parameter is a style parameter.[[BR]][[BR]]If the object in unstyled or the parameter name if not found 0 will be returned and should be treated as an instance parameter.</Result>
    <ID>13526</ID>
    <IDName>funcGetParamStyleType</IDName>
    <InternalFunctionName>MP_GetParamStyleType</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hStyle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a symbol containing a plug-in style.</Desc>
      </Param>
      <Param>
        <Name>paramName</Name>
        <Type>stringMode</Type>
        <Desc>Universal name of a parameter to check for style type.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetParamStyleType</Name>
    <ChangedDate>2016:04:15T15:55:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Custom</Category>
    <Type>Procedure</Type>
    <ReturnType>INTEGER</ReturnType>
    <ShortDesc>Sets the style type for a parameter in a plug-in style definition.</ShortDesc>
    <ID>13527</ID>
    <IDName>procSetParamStyleType</IDName>
    <InternalFunctionName>MP_SetParamStyleType</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hStyle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a symbol containing a plug-in style.</Desc>
      </Param>
      <Param>
        <Name>paramName</Name>
        <Type>stringMode</Type>
        <Desc>Name of parameter to set</Desc>
      </Param>
      <Param>
        <Name>styleType</Name>
        <Type>intMode</Type>
        <Desc>0 = By Instance 1 = By Style</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWallBelCutPlClass</Name>
    <ChangedDate>2016:04:19T10:55:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Walls</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Gets the below cut plane class of the wall.</Description>
    <ShortDesc>Gets the below cut plane class of the wall.</ShortDesc>
    <Result>The below cut plane class of the wall.</Result>
    <SeeAlso>SetWallBelCutPlClass</SeeAlso>
    <ID>13528</ID>
    <IDName>funcGetWallBelCutPlClass</IDName>
    <InternalFunctionName>MP_GetWallBelCutPlClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>wall</Name>
        <Type>handleMode</Type>
        <Desc>The wall.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWallBelCutPlClass</Name>
    <ChangedDate>2016:04:19T10:55:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Walls</Category>
    <Type>Procedure</Type>
    <Description>Sets the below cut plane class of the wall.</Description>
    <ShortDesc>Sets the below cut plane class of the wall.</ShortDesc>
    <SeeAlso>GetWallBelCutPlClass</SeeAlso>
    <ID>13529</ID>
    <IDName>procSetWallBelCutPlClass</IDName>
    <InternalFunctionName>MP_SetWallBelCutPlClass</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>wall</Name>
        <Type>handleMode</Type>
        <Desc>The wall.</Desc>
      </Param>
      <Param>
        <Name>belowCutPlaneClass</Name>
        <Type>longMode</Type>
        <Desc>The below cut plane class.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTaperedComponent</Name>
    <ChangedDate>2016:04:19T10:57:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the tapered component of the object.</Description>
    <ShortDesc>Gets the tapered component of the object.</ShortDesc>
    <Result>The index of the tapered component.</Result>
    <SeeAlso>SetTaperedComponent</SeeAlso>
    <ID>13530</ID>
    <IDName>funcGetTaperedComponent</IDName>
    <InternalFunctionName>MP_GetTaperedComponent</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a slab, Slab Style, or the Slab Preferences.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTaperedComponent</Name>
    <ChangedDate>2016:04:19T10:57:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Architectural</Category>
    <Type>Procedure</Type>
    <Description>Sets the tapered component of the object.</Description>
    <ShortDesc>Sets the tapered component of the object.</ShortDesc>
    <SeeAlso>GetTaperedComponent</SeeAlso>
    <ID>13531</ID>
    <IDName>procSetTaperedComponent</IDName>
    <InternalFunctionName>MP_SetTaperedComponent</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a slab, Slab Style, or the Slab Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompABoundEOffOff</Name>
    <ChangedDate>2016:04:19T10:59:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the auto-bound edge offset offset of a component in an object.</Description>
    <ShortDesc>Gets the auto-bound edge offset offset of a component in an object.</ShortDesc>
    <SeeAlso>SetCompABoundEOffOff</SeeAlso>
    <ID>13532</ID>
    <IDName>funcGetCompABoundEOffOff</IDName>
    <InternalFunctionName>MP_GetCompABoundEOffOff</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a  slab, Slab Style, or the Slab Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>autoBoundEdgeOffsetOffset</Name>
        <Type>rVarMode</Type>
        <Desc>Returns the auto-bound edge offset offset.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompABoundEOffOff</Name>
    <ChangedDate>2016:04:19T10:59:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the auto-bound edge offset offset of a component in an object.</Description>
    <ShortDesc>Sets the auto-bound edge offset offset of a component in an object.</ShortDesc>
    <SeeAlso>GetCompABoundEOffOff</SeeAlso>
    <ID>13533</ID>
    <IDName>funcSetCompABoundEOffOff</IDName>
    <InternalFunctionName>MP_SetCompABoundEOffOff</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a  slab, Slab Style, or the Slab Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>autoBoundEdgeOffsetOffset</Name>
        <Type>distanceMode</Type>
        <Desc>The auto-bound edge offset offset.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCompMasterSnaps</Name>
    <ChangedDate>2016:04:19T10:59:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the master snaps of a component in an object.</Description>
    <ShortDesc>Gets the master snaps of a component in an object.</ShortDesc>
    <SeeAlso>SetCompMasterSnaps</SeeAlso>
    <ID>13534</ID>
    <IDName>funcGetCompMasterSnaps</IDName>
    <InternalFunctionName>MP_GetCompMasterSnaps</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>masterSnapOnLeft</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component has a master snap on its left.</Desc>
      </Param>
      <Param>
        <Name>masterSnapOnRight</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns whether or not the component has a master snap on its right.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetCompMasterSnaps</Name>
    <ChangedDate>2016:04:19T10:59:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the master snaps of a component in an object.</Description>
    <ShortDesc>Sets the master snaps of a component in an object.</ShortDesc>
    <SeeAlso>GetCompMasterSnaps</SeeAlso>
    <ID>13535</ID>
    <IDName>funcSetCompMasterSnaps</IDName>
    <InternalFunctionName>MP_SetCompMasterSnaps</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, Wall Style, or the Wall Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>masterSnapOnLeft</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component has a master snap on its left.</Desc>
      </Param>
      <Param>
        <Name>masterSnapOnRight</Name>
        <Type>boolMode</Type>
        <Desc>Whether or not the component has a master snap on its right.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLayerEnableCutPl</Name>
    <ChangedDate>2016:04:19T11:00:00</ChangedDate>
    <Version>2200</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets whether the cut plane of the layer is enabled.</Description>
    <ShortDesc>Gets whether the cut plane of the layer is enabled.</ShortDesc>
    <Result>Whether the cut plane of the layer is enabled.</Result>
    <SeeAlso>SetLayerEnableCutPl</SeeAlso>
    <ID>13536</ID>
    <IDName>funcGetLayerEnableCutPl</IDName>
    <InternalFunctionName>MP_GetLayerEnableCutPl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>layer</Name>
        <Type>handleMode</Type>
        <Desc>The layer.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLayerEnableCutPl</Name>
    <ChangedDate>2016:04:19T11:00:00</ChangedDate>
    <Version>2200</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Sets whether the cut plane of the layer is enabled.</Description>
    <ShortDesc>Sets whether the cut plane of the layer is enabled.</ShortDesc>
    <SeeAlso>GetLayerEnableCutPl</SeeAlso>
    <ID>13537</ID>
    <IDName>procSetLayerEnableCutPl</IDName>
    <InternalFunctionName>MP_SetLayerEnableCutPl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>layer</Name>
        <Type>handleMode</Type>
        <Desc>The layer.</Desc>
      </Param>
      <Param>
        <Name>enableCutPlane</Name>
        <Type>boolMode</Type>
        <Desc>Whether the cut plane is enabled.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetLayerCutPlane</Name>
    <ChangedDate>2016:04:19T11:01:00</ChangedDate>
    <Version>2200</Version>
    <Category>Layers</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Gets the cut plane of the layer.</Description>
    <ShortDesc>Gets the cut plane of the layer.</ShortDesc>
    <Result>The cut plane of the layer.</Result>
    <SeeAlso>SetLayerCutPlane</SeeAlso>
    <ID>13538</ID>
    <IDName>funcGetLayerCutPlane</IDName>
    <InternalFunctionName>MP_GetLayerCutPlane</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>layer</Name>
        <Type>handleMode</Type>
        <Desc>The layer.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetLayerCutPlane</Name>
    <ChangedDate>2016:04:19T11:01:00</ChangedDate>
    <Version>2200</Version>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <Description>Sets the cut plane of the layer.</Description>
    <ShortDesc>Sets the cut plane of the layer.</ShortDesc>
    <SeeAlso>GetLayerCutPlane</SeeAlso>
    <ID>13539</ID>
    <IDName>procSetLayerCutPlane</IDName>
    <InternalFunctionName>MP_SetLayerCutPlane</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>layer</Name>
        <Type>handleMode</Type>
        <Desc>The layer.</Desc>
      </Param>
      <Param>
        <Name>cutPlane</Name>
        <Type>distanceMode</Type>
        <Desc>The cut plane.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPluginStyle</Name>
    <ChangedDate>2016:04:12T16:26:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Get the name of the plug-in style for an object.</Description>
    <ShortDesc>Get the name of the plug-in style for an object.</ShortDesc>
    <Result>Returns the name of the plug-in style associated with an object.[[BR]][[BR]]</Result>
    <ID>13543</ID>
    <IDName>funcGetPluginStyle</IDName>
    <InternalFunctionName>MP_GetPluginStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a plug-in object</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetPluginStyle</Name>
    <ChangedDate>2016:04:12T16:44:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Set the style to associate with a plug-in object</Description>
    <ShortDesc>Set the plug-in style for an object.</ShortDesc>
    <ID>13542</ID>
    <IDName>funcSetPluginStyle</IDName>
    <InternalFunctionName>MP_SetPluginStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a plug-in object.</Desc>
      </Param>
      <Param>
        <Name>styleName</Name>
        <Type>stringMode</Type>
        <Desc>Name of style to use</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetAllStyleParams</Name>
    <ChangedDate>2016:04:15T15:58:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Custom</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets style type for all parameters in a plug-in style.</ShortDesc>
    <ID>13544</ID>
    <IDName>procSetAllStyleParams</IDName>
    <InternalFunctionName>MP_SetAllStyleParams</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hStyle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a symbol definition contain a plug-in style</Desc>
      </Param>
      <Param>
        <Name>styleType</Name>
        <Type>intMode</Type>
        <Desc>0 = Set all parameters to be ny istance parameters 1 = Set all parameters to be by stuyle parameters</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetSymDefSubType</Name>
    <ChangedDate>2016:05:31T17:06:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Symbols</Category>
    <Type>Procedure</Type>
    <Description>Sets the sub type for a symbol definition that is used to define a plug-in style.</Description>
    <ShortDesc>Set the sub type for a symbol definition for use with plug-in styles.</ShortDesc>
    <ID>13540</ID>
    <IDName>procSetSymDefSubType</IDName>
    <InternalFunctionName>MP_SetSymDefSubType</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hSymDef</Name>
        <Type>handleMode</Type>
        <Desc>Handle to symbol definition that is being used to define a plug-in style.</Desc>
      </Param>
      <Param>
        <Name>subType</Name>
        <Type>intMode</Type>
        <Desc>Sub type identifier to set for the symbol definition.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetSymDefSubType</Name>
    <ChangedDate>2016:05:31T17:07:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Symbols</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the sub type defined for a symbol definiiton. This is used when creating and using plug-in styles.</Description>
    <ShortDesc>Returns the sub type of a symbol definition for use with plug-in styles.</ShortDesc>
    <ID>13541</ID>
    <IDName>funcGetSymDefSubType</IDName>
    <InternalFunctionName>MP_GetSymDefSubType</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hSymDef</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a symbol definition contaiing a plug-in style.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSCellsImgDPIRes</Name>
    <ChangedDate>2016:06:08T16:25:00</ChangedDate>
    <Version>2200</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Gets the DPI resolution for images in the specified worksheet.</Description>
    <ShortDesc>Gets the DPI resolution for images in the specified worksheet.</ShortDesc>
    <ID>13545</ID>
    <IDName>procGetWSCellsImgDPIRes</IDName>
    <InternalFunctionName>MP_GetWSCellsImgDPIRes</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>dpiResolution</Name>
        <Type>intVarMode</Type>
        <Desc>The images' DPI resolution</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellsImgDPIRes</Name>
    <ChangedDate>2016:06:08T16:28:00</ChangedDate>
    <Version>2200</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the DPI resolution for images in the specified worksheet.</Description>
    <ShortDesc>Sets the DPI resolution for images in the specified worksheet.</ShortDesc>
    <ID>13546</ID>
    <IDName>procSetWSCellsImgDPIRes</IDName>
    <InternalFunctionName>MP_SetWSCellsImgDPIRes</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>dpiResolution</Name>
        <Type>intMode</Type>
        <Desc>The images' DPI resolution.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSImageScaleF</Name>
    <ChangedDate>2016:06:08T16:44:00</ChangedDate>
    <Version>2200</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the scale factor of the specified worksheet on drawing object.</Description>
    <ShortDesc>Returns the scale factor of the specified worksheet on drawing object.</ShortDesc>
    <Result>The scale factor of the specified worksheet on drawing object.</Result>
    <ID>13547</ID>
    <IDName>funcGetWSImageScaleF</IDName>
    <InternalFunctionName>MP_GetWSImageScaleF</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>handle</Name>
        <Type>handleMode</Type>
        <Desc>The handle to the worksheet on drawing object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSImageScaleF</Name>
    <ChangedDate>2016:06:13T12:24:00</ChangedDate>
    <Version>2200</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the scale factor for the specified worksheet on drawing object.</Description>
    <ShortDesc>Sets the scale factor for the specified worksheet on drawing object.</ShortDesc>
    <ID>13548</ID>
    <IDName>procSetWSImageScaleF</IDName>
    <InternalFunctionName>MP_SetWSImageScaleF</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>handle</Name>
        <Type>handleMode</Type>
        <Desc>The handle to the worksheet on drawing object.</Desc>
      </Param>
      <Param>
        <Name>scaleFactor</Name>
        <Type>realMode</Type>
        <Desc>The scale factor.</Desc>
      </Param>
      <Param>
        <Name>redraw</Name>
        <Type>boolMode</Type>
        <Desc>Indicates whether to immediately redraw the worksheet on drawing.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetResourceTags</Name>
    <ChangedDate>2016:06:13T12:24:00</ChangedDate>
    <Version>2200</Version>
    <Category>General Edit</Category>
    <Type>Procedure</Type>
    <Description>Adds the specified tags to the specified resource.</Description>
    <ShortDesc>Adds the specified tags to the specified resource.</ShortDesc>
    <SeeAlso>GetResourceTags,GetNumResourceTags</SeeAlso>
    <ID>13549</ID>
    <IDName>procSetResourceTags</IDName>
    <InternalFunctionName>MP_SetResourceTags</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>handle</Name>
        <Type>handleMode</Type>
        <Desc>The handle to the resource.</Desc>
      </Param>
      <Param>
        <Name>tags</Name>
        <Type>arrayMode</Type>
        <Desc>The list of tags.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetResourceTags</Name>
    <ChangedDate>2016:06:13T12:25:00</ChangedDate>
    <Version>2200</Version>
    <Category>General Edit</Category>
    <Type>Procedure</Type>
    <Description>Gets the tags attached to the specified resource.</Description>
    <ShortDesc>Gets the tags attached to the specified resource.</ShortDesc>
    <SeeAlso>SetResourceTags,GetNumResourceTags</SeeAlso>
    <ID>13550</ID>
    <IDName>procGetResourceTags</IDName>
    <InternalFunctionName>MP_GetResourceTags</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>handle</Name>
        <Type>handleMode</Type>
        <Desc>The handle to the resource.</Desc>
      </Param>
      <Param>
        <Name>tags</Name>
        <Type>arrayVarMode</Type>
        <Desc>The list of tags.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumResourceTags</Name>
    <ChangedDate>2016:06:08T17:20:00</ChangedDate>
    <Version>2200</Version>
    <Category>General Edit</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the number of tags attached to the specified resource.</Description>
    <ShortDesc>Returns the number of tags attached to the specified resource.</ShortDesc>
    <Result>The number of tags attached to the specified resource.</Result>
    <SeeAlso>SetResourceTags,GetResourceTags</SeeAlso>
    <ID>13551</ID>
    <IDName>funcGetNumResourceTags</IDName>
    <InternalFunctionName>MP_GetNumResourceTags</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>handle</Name>
        <Type>handleMode</Type>
        <Desc>The handle to the resource</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddToPluginStyle</Name>
    <ChangedDate>2016:06:27T09:51:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Symbols</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Adds a new item to a plug-in style map.</Description>
    <ShortDesc>Adds a new item to a plug-in style.</ShortDesc>
    <Result>TRUE if the item was added to the plug-in style.[[BR]]FALSE if the symbol definition does not contain a plug-in style or the style alread contrains an item by the given name.</Result>
    <ID>13552</ID>
    <IDName>funcAddToPluginStyle</IDName>
    <InternalFunctionName>MP_AddToPluginStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hSymDef</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a symbol definition containing a plug-in style.</Desc>
      </Param>
      <Param>
        <Name>itemName</Name>
        <Type>stringMode</Type>
        <Desc>Name of new item to add.</Desc>
      </Param>
      <Param>
        <Name>styleType</Name>
        <Type>intMode</Type>
        <Desc>Style type for new item. 0 sets the item to By Instance 1 sets the item to By style.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveFrmPluginStyle</Name>
    <ChangedDate>2016:06:27T09:54:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Symbols</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Removes an entry from the plug-in style map.</Description>
    <ShortDesc>Removes an item from a plug-in style.</ShortDesc>
    <Result>TRUE if the item was removed from the plug-in style.[[BR]]FALSE if the item does not exist in the plug-in style or the symbol definition does not contain a plugin style.</Result>
    <ID>13553</ID>
    <IDName>funcRemoveFrmPluginStyle</IDName>
    <InternalFunctionName>MP_RemoveFrmPluginStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hSymDef</Name>
        <Type>handleMode</Type>
        <Desc>Handle to symbol definition containing a plug-in style.</Desc>
      </Param>
      <Param>
        <Name>itemName</Name>
        <Type>stringMode</Type>
        <Desc>Name of the item to remove from the plug-in style.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDefGenStoryBound</Name>
    <ChangedDate>2016:08:01T10:23:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>This will set the default generic story bound for a plugin that has the kObjXPropSupportGenericStoryLevel property. </Description>
    <ShortDesc>Sets default generic PIO story bound.</ShortDesc>
    <Result>TRUE if successful. FALSE will be returned if input object isn't a format or isn't associated with a plugin that has the kObjXPropSupportGenericStoryLevel property set.</Result>
    <SeeAlso>GetDefGenStoryBound</SeeAlso>
    <ID>13554</ID>
    <IDName>funcSetDefGenStoryBound</IDName>
    <InternalFunctionName>MP_SetDefGenStoryBound</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>format</Name>
        <Type>handleMode</Type>
        <Desc>Handle of the parametric's format</Desc>
      </Param>
      <Param>
        <Name>boundType</Name>
        <Type>intMode</Type>
        <Desc>Bounding type:  0 - LayerZ; 1 - DefaultWallHeight; 2 - Story</Desc>
      </Param>
      <Param>
        <Name>boundStory</Name>
        <Type>intMode</Type>
        <Desc>The story for the bound. If 'boundStory' = 0 then it is the object's story. If 'boundStory' = 1 then it is the story above. If 'boundStory' = -1 then it is the story below.</Desc>
      </Param>
      <Param>
        <Name>layerLevelType</Name>
        <Type>stringMode</Type>
        <Desc>The layer type which defines this bound (e.g. "Ceiling").</Desc>
      </Param>
      <Param>
        <Name>offSet</Name>
        <Type>realMode</Type>
        <Desc>The offset distance from the specified bound story.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDefGenStoryBound</Name>
    <ChangedDate>2016:08:01T10:37:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>This will get the default story bound for a plugin that has the kObjXPropSupportGenericStoryLevel property.[[BR]]The bound information returned is only valid when the return value of the function is TRUE.</Description>
    <ShortDesc>Gets default generic PIO story bound information.</ShortDesc>
    <Result>Returns TRUE if the default bounds were obtained; FALSE if the input format was not a format associated with a plugin that supports the generic PIO bound (i.e. has the kObjXPropSupportGenericStoryLevel property set).</Result>
    <ID>13555</ID>
    <IDName>funcGetDefGenStoryBound</IDName>
    <InternalFunctionName>MP_GetDefGenStoryBound</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>format</Name>
        <Type>handleMode</Type>
        <Desc>Handle of the parametric's format</Desc>
      </Param>
      <Param>
        <Name>boundType</Name>
        <Type>intVarMode</Type>
        <Desc>Bounding type:  0 - LayerZ; 1 - DefaultWallHeight; 2 - Story</Desc>
      </Param>
      <Param>
        <Name>boundStory</Name>
        <Type>intVarMode</Type>
        <Desc>The story for the bound. If 'boundStory' = 0 then it is the object's story. If 'boundStory' = 1 then it is the story above. If 'boundStory' = -1 then it is the story below.</Desc>
      </Param>
      <Param>
        <Name>layerLevelType</Name>
        <Type>strVarMode</Type>
        <Desc>The layer type which defines this bound (e.g. "Ceiling").</Desc>
      </Param>
      <Param>
        <Name>offset</Name>
        <Type>rVarMode</Type>
        <Desc>The offset distance from the specified bound story.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetStoryChoiceStrsN</Name>
    <ChangedDate>2016:08:01T10:36:00</ChangedDate>
    <Version>2200</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Gets story bound strings to supply to the bound popup. Can request strings for top bound, bottom bound, or dual (both) bounds.</Description>
    <ShortDesc>Gets the choice strings for a story bound control. Allows dual (bottom and top) bound.</ShortDesc>
    <ID>13556</ID>
    <IDName>procGetStoryChoiceStrsN</IDName>
    <InternalFunctionName>MP_GetStoryChoiceStrsN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>story</Name>
        <Type>handleMode</Type>
        <Desc>The story relative to which to get the strings. Nil gets a generic list of strings.</Desc>
      </Param>
      <Param>
        <Name>strings</Name>
        <Type>arrayVarMode</Type>
        <Desc>Returns the strings.</Desc>
      </Param>
      <Param>
        <Name>boundSelection</Name>
        <Type>intMode</Type>
        <Desc>Type of bounds strings being requested: 0 for Top Bound; 1 for Dual Bound (combines both top and bottom); 2 for Bottom Bound.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ObjPropsEditDlg</Name>
    <ChangedDate>2016:08:16T14:15:00</ChangedDate>
    <Version>2200</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Show object properties edit dialog.</Description>
    <ShortDesc>Show object properties edit dialog.</ShortDesc>
    <Result>Return TRUE if the edit was successful.</Result>
    <ID>13557</ID>
    <IDName>funcObjPropsEditDlg</IDName>
    <InternalFunctionName>MP_ObjPropsEditDlg</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObj</Name>
        <Type>handleMode</Type>
        <Desc>The object which properties will be edited.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>UpdateStyledObjects</Name>
    <ChangedDate>2016:08:16T10:11:00</ChangedDate>
    <Version>2200</Version>
    <Category>Objects - Custom</Category>
    <Type>Procedure</Type>
    <Description>Update all objects of the specified style.</Description>
    <ShortDesc>Update all objects of the specified style.</ShortDesc>
    <ID>13558</ID>
    <IDName>procUpdateStyledObjects</IDName>
    <InternalFunctionName>MP_UpdateStyledObjects</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>styleName</Name>
        <Type>stringMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ExportSTEP</Name>
    <ChangedDate>2017:05:23T16:20:00</ChangedDate>
    <Version>2300</Version>
    <Category>File I/O</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Exports 3D objects into STEP file.</ShortDesc>
    <Result>Return TRUE if successful</Result>
    <ID>13559</ID>
    <IDName>funcExportSTEP</IDName>
    <InternalFunctionName>MP_ExportSTEP</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>filePath</Name>
        <Type>eCharDynarrayMode</Type>
      </Param>
      <Param>
        <Name>exportSolidsAsSurfaces</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BeginFolderN</Name>
    <ChangedDate>2016:11:11T10:38:00</ChangedDate>
    <Version>2300</Version>
    <Category>Document List Handling</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] creates a new resource folder of the indicated type in a Vectorworks document. Any resource or folder of that type created after the current call to [[name]] will be nested inside the new folder. A call to EndFolder will complete the creation of the folder, which is then generated in the Vectorworks document.[[BR]][[BR]]To name the new folder, precede [[name]] with a call to NameObject.[[BR]]</Description>
    <ShortDesc>Creates a new resource folder in a Vectorworks document.</ShortDesc>
    <Example>const[[BR]]kSymbolDefinitions = 16;[[BR]]NameObject('Object Symbols');[[BR]]BeginFolder(kSymbolDefinitions);[[BR]]  BeginSym('Oval Symbols');[[BR]]    PenSize(14);[[BR]]    PenPat(2);[[BR]]    FillPat(1);[[BR]]    FillFore(0,0,0);[[BR]]    FillBack(65535,65535,65535);[[BR]]    PenFore(0,0,0);[[BR]]    PenBack(65535,65535,65535);[[BR]]    Oval(-1/4",1/4",3/4",-3/4");[[BR]]  EndSym;[[BR]]EndFolder;[[BR]]{creates the symbol folder 'Object Symbols', which contains a symbol}</Example>
    <ID>13560</ID>
    <IDName>procBeginFolderN</IDName>
    <InternalFunctionName>MP_BeginFolderN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>type</Name>
        <Type>intMode</Type>
        <Desc>the type of resource the folder will contain</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddToPIOStyleEdit</Name>
    <ChangedDate>2016:12:06T10:59:00</ChangedDate>
    <Version>2300</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Adds an item to a plug-in style's default edit list. This is only used by objects that use the default edit style dialog.[[BR]][[BR]]By default, only those parameters shown in the object info palette will be listed in the edit style mapping dialg. Pass the following values to add or remove an item this list.[[BR]][[BR]]Values:[[BR]]1 - Add to the edit style map dialog.[[BR]]2 - Remove from the edit stkyle map dialog.[[BR]][[BR]][[BR]]To remove an entry from this list use RemovePIOStyleEdit.[[BR]][[BR]]</Description>
    <ShortDesc>Add an item to the edit plug-in style map dialog.</ShortDesc>
    <Result>TRUE if key is added to the list.[[BR]][[BR]]FALSE if hObj is NULL; if hObj is not a styled plug-in object or plug-in style[[BR]]FALSE if item already appear in list. Use RemoveFromPluginStyleEditList first.</Result>
    <SeeAlso>RemovePIOStyleEdit</SeeAlso>
    <ID>13561</ID>
    <IDName>funcAddToPIOStyleEdit</IDName>
    <InternalFunctionName>MP_AddToPIOStyleEdit</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a plug-in object or plug-in object style</Desc>
      </Param>
      <Param>
        <Name>keyName</Name>
        <Type>stringMode</Type>
        <Desc>Universal name of parameter or iother item to add to the edit style map list</Desc>
      </Param>
      <Param>
        <Name>editType</Name>
        <Type>intMode</Type>
        <Desc>1 - Add to edit list 2 - Remove from edit list</Desc>
      </Param>
      <Param>
        <Name>displayName</Name>
        <Type>stringMode</Type>
        <Desc>The display name to use in the style map dialog. If an empy string is passed the keyName will be used.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemovePIOStyleEdit</Name>
    <ChangedDate>2016:12:06T10:59:00</ChangedDate>
    <Version>2300</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Removes an item from the edit style mapping list.</Description>
    <ShortDesc>Remove an item from the edit plug-in style map dialog.</ShortDesc>
    <Result>TRUE if item is removed from list.[[BR]][[BR]]FALSE if hObj is NULL; if hObj is not a styled plug-in object or plug-in style[[BR]]FALSE if item does not appear in list.</Result>
    <SeeAlso>AddToPIOStyleEdit</SeeAlso>
    <ID>13562</ID>
    <IDName>funcRemovePIOStyleEdit</IDName>
    <InternalFunctionName>MP_RemovePIOStyleEdit</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a plug-in object or plug-in style</Desc>
      </Param>
      <Param>
        <Name>keyName</Name>
        <Type>stringMode</Type>
        <Desc>Name of item to remove from list.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateImgFromSymbol</Name>
    <ChangedDate>2016:12:28T16:20:00</ChangedDate>
    <Version>2300</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <ShortDesc>Creates an image resource from a symbol.</ShortDesc>
    <Result>Returns the handle to the newly create image resource if successful; nil otherwise.</Result>
    <ID>13563</ID>
    <IDName>funcCreateImgFromSymbol</IDName>
    <InternalFunctionName>MP_CreateImgFromSymbol</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>symbolName</Name>
        <Type>stringMode</Type>
        <Desc>The name of the symbol to display.</Desc>
      </Param>
      <Param>
        <Name>symbolHeight</Name>
        <Type>intMode</Type>
        <Desc>The height of the symbol to display.</Desc>
      </Param>
      <Param>
        <Name>symbolWidth</Name>
        <Type>intMode</Type>
        <Desc>The width of the symbol to display.</Desc>
      </Param>
      <Param>
        <Name>symbolMargin</Name>
        <Type>intMode</Type>
        <Desc>The margin of the symbol to display.</Desc>
      </Param>
      <Param>
        <Name>renderMode</Name>
        <Type>intMode</Type>
        <Desc>The render mode in which to display the symbol.</Desc>
      </Param>
      <Param>
        <Name>view</Name>
        <Type>intMode</Type>
        <Desc>The standard view in which to display the symbol.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateFillSpace</Name>
    <ChangedDate>2017:02:14T19:35:00</ChangedDate>
    <Version>2300</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates a new fillspace object and attaches it to the end of the aux list of the specified object.</Description>
    <ShortDesc>Creates a new fill space object and attaches it to the end of the aux list of the specified object.</ShortDesc>
    <Result>Handle to the newly created fill space object.</Result>
    <ID>13564</ID>
    <IDName>funcCreateFillSpace</IDName>
    <InternalFunctionName>MP_CreateFillSpace</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>owner</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object in whose aux list the fill space will be created.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CountFillSpaces</Name>
    <ChangedDate>2017:02:14T19:36:00</ChangedDate>
    <Version>2300</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the number of fill spaces currently attached to a specified object.</Description>
    <ShortDesc>Returns the number of fill spaces currently attached to a specified object.</ShortDesc>
    <Result>The number of fill spaces attached to the object h.</Result>
    <ID>13565</ID>
    <IDName>funcCountFillSpaces</IDName>
    <InternalFunctionName>MP_CountFillSpaces</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object containing the fill spaces to be counted.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetFillSpace</Name>
    <ChangedDate>2017:02:14T19:36:00</ChangedDate>
    <Version>2300</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Returns the handle of the index-th fill space in the specified object's aux list.</Description>
    <ShortDesc>Returns the handle of the index-th fill space in the specified object's aux list.</ShortDesc>
    <Result>Handle to the index-th fill space in h's aux list.</Result>
    <ID>13566</ID>
    <IDName>funcGetFillSpace</IDName>
    <InternalFunctionName>MP_GetFillSpace</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object containing the fill space.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Index of the fill space to be returned.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>OffsetPolyClosed</Name>
    <ChangedDate>2017:02:23T16:11:00</ChangedDate>
    <Version>2300</Version>
    <Category>Objects - 2D</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Offsets a polyline or polygon, then uses the original geometry to construct a closed profile.  </Description>
    <ShortDesc>Offsets a polyline or polygon and creates a closed profile from it</ShortDesc>
    <ID>13567</ID>
    <IDName>funcOffsetPolyClosed</IDName>
    <InternalFunctionName>MP_OffsetPolyClosed</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>obj</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>offset</Name>
        <Type>realMode</Type>
      </Param>
      <Param>
        <Name>smoothCorners</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RunLayoutDialogN</Name>
    <ChangedDate>2017:03:07T11:05:00</ChangedDate>
    <Version>2300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Displays the specified dialog and initiates the dialog event loop. The dialog event loop is specified in a procedure subroutine that is passed as a parameter to the function.</Description>
    <ShortDesc>Displays the specified dialog and initiates the dialog event loop.</ShortDesc>
    <Result>Returns a LONGINT value indicating the button pressed to exit the dialog.</Result>
    <ID>13568</ID>
    <IDName>funcRunLayoutDialogN</IDName>
    <SpecialOverride>CHECKRUNLAYOUTDIALOGN( funcRunLayoutDialogN, MP_RunLayoutDialogN, longMode, longMode, userProcMode, boolMode);</SpecialOverride>
    <Implemented>True</Implemented>
    <ImplementationDetails>Special</ImplementationDetails>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog to be displayed.</Desc>
      </Param>
      <Param>
        <Name>callback</Name>
        <Type>userProcMode</Type>
        <Desc>The event loop subroutine for the dialog.</Desc>
      </Param>
      <Param>
        <Name>enableContextualHelp</Name>
        <Type>boolMode</Type>
        <Desc>Determines whether or not contextual help is accessible</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RunNamedDialogN</Name>
    <ChangedDate>2017:03:07T11:15:00</ChangedDate>
    <Version>2300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Displays the specified dialog with universal name and initiates the dialog event loop. The dialog event loop is specified in a procedure subroutine that is passed as a parameter to the function.</Description>
    <ShortDesc>Displays the specified dialog with universal name and initiates the dialog event loop.</ShortDesc>
    <Result>Returns a LONGINT value indicating the button pressed to exit the dialog.</Result>
    <SeeAlso>RunLayoutDialogN</SeeAlso>
    <ID>13569</ID>
    <IDName>funcRunNamedDialogN</IDName>
    <SpecialOverride>CHECKRUNNAMEDDIALOGN(funcRunNamedDialogN, MP_RunNamedDialogN, longMode, longMode, userProcMode, stringMode, boolMode);</SpecialOverride>
    <Implemented>True</Implemented>
    <ImplementationDetails>Special</ImplementationDetails>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog to be displayed</Desc>
      </Param>
      <Param>
        <Name>callback</Name>
        <Type>userProcMode</Type>
        <Desc>The event loop subroutine for the dialog</Desc>
      </Param>
      <Param>
        <Name>univName</Name>
        <Type>stringMode</Type>
        <Desc>The universal name of the dialog</Desc>
      </Param>
      <Param>
        <Name>enableContextualHelp</Name>
        <Type>boolMode</Type>
        <Desc>Determines whether or not contextual help is accessible</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>QTCreateMovieRefID</Name>
    <ChangedDate>2017:03:08T17:23:00</ChangedDate>
    <Version>2300</Version>
    <Category>Special - QuickTime</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <ShortDesc>Creates the MovieReID deferring the movie file creation for later. Make sure to call QTOpenMovieFileN with the same MovieRefID.</ShortDesc>
    <ID>13570</ID>
    <IDName>funcQTCreateMovieRefID</IDName>
    <InternalFunctionName>MP_QTCreateMovieRefID</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>QTCloseMovieFileN</Name>
    <ChangedDate>2017:03:08T17:34:00</ChangedDate>
    <Version>2300</Version>
    <Category>Special - QuickTime</Category>
    <Type>Procedure</Type>
    <ShortDesc>Closes the specified QuickTime movie file.</ShortDesc>
    <ID>13571</ID>
    <IDName>procQTCloseMovieFileN</IDName>
    <InternalFunctionName>MP_QTCloseMovieFileN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>movieRef</Name>
        <Type>intMode</Type>
        <Desc>Index of QuickTime movie stream.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>QTGetMovieOptionsN</Name>
    <ChangedDate>2017:03:08T18:32:00</ChangedDate>
    <Version>2300</Version>
    <Category>Special - QuickTime</Category>
    <Type>Procedure</Type>
    <ShortDesc>Retrieves the QuickTime movie frame rate and key frame rate for the referenced movie stream.</ShortDesc>
    <ID>13572</ID>
    <IDName>procQTGetMovieOptionsN</IDName>
    <InternalFunctionName>MP_QTGetMovieOptionsN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>movieRef</Name>
        <Type>intMode</Type>
        <Desc>Index of QuickTime movie stream.</Desc>
      </Param>
      <Param>
        <Name>frameRate</Name>
        <Type>rVarMode</Type>
        <Desc>Frame rate of movie</Desc>
      </Param>
      <Param>
        <Name>keyFrameRate</Name>
        <Type>lngVarMode</Type>
        <Desc>keyFrameRate</Desc>
      </Param>
      <Param>
        <Name>frameWidth</Name>
        <Type>lngVarMode</Type>
        <Desc>Frame width of the movie stream.</Desc>
      </Param>
      <Param>
        <Name>frameHeight</Name>
        <Type>lngVarMode</Type>
        <Desc>Frame height of the movie stream.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>QTOpenMovieFileN</Name>
    <ChangedDate>2017:03:08T17:57:00</ChangedDate>
    <Version>2300</Version>
    <Category>Special - QuickTime</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <ShortDesc>Creates or opens a QuickTime movie file of frame width and height for writing.</ShortDesc>
    <ID>13573</ID>
    <IDName>funcQTOpenMovieFileN</IDName>
    <InternalFunctionName>MP_QTOpenMovieFileN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>movieRef</Name>
        <Type>intMode</Type>
        <Desc>MovieRefID that was already created with QTCreateMovieRefID.</Desc>
      </Param>
      <Param>
        <Name>fileName</Name>
        <Type>stringMode</Type>
        <Desc>Name of movie file.</Desc>
      </Param>
      <Param>
        <Name>frameWidth</Name>
        <Type>longMode</Type>
        <Desc>Frame width of the movie file.</Desc>
      </Param>
      <Param>
        <Name>frameHeight</Name>
        <Type>longMode</Type>
        <Desc>Frame height of the movie file.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>QTSetMovieOptionsN</Name>
    <ChangedDate>2017:03:08T18:05:00</ChangedDate>
    <Version>2300</Version>
    <Category>Special - QuickTime</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets the QuickTime movie frame rate and key frame rate. </ShortDesc>
    <ID>13574</ID>
    <IDName>procQTSetMovieOptionsN</IDName>
    <InternalFunctionName>MP_QTSetMovieOptionsN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>movieRef</Name>
        <Type>intMode</Type>
        <Desc>Index of QuickTime movie stream.</Desc>
      </Param>
      <Param>
        <Name>frameRate</Name>
        <Type>realMode</Type>
        <Desc>Frame rate of movie.</Desc>
      </Param>
      <Param>
        <Name>keyFrameRate</Name>
        <Type>longMode</Type>
        <Desc>Key frame rate of the movie.</Desc>
      </Param>
      <Param>
        <Name>useDLG</Name>
        <Type>boolMode</Type>
        <Desc>Display QuickTime Video Settings dialog.</Desc>
      </Param>
      <Param>
        <Name>useDlgPreview</Name>
        <Type>boolMode</Type>
        <Desc>Show dialog preview.</Desc>
      </Param>
      <Param>
        <Name>frameWidth</Name>
        <Type>longMode</Type>
        <Desc>Frame width for the movie file.</Desc>
      </Param>
      <Param>
        <Name>frameHeight</Name>
        <Type>longMode</Type>
        <Desc>Frame height for the movie file.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>UniChr</Name>
    <ChangedDate>2017:03:20T18:54:00</ChangedDate>
    <Version>2300</Version>
    <Category>Strings</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Returns the UTF-8 character corresponding to the specified Unicode code point.</Description>
    <ShortDesc>Returns the UTF-8 character corresponding to the specified Unicode code point.</ShortDesc>
    <Result>The UTF-8 character corresponding to the specified Unicode code point.</Result>
    <SeeAlso>Chr</SeeAlso>
    <ID>13575</ID>
    <IDName>funcUniChr</IDName>
    <InternalFunctionName>MP_UniChr</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>v</Name>
        <Type>longMode</Type>
        <Desc>A Unicode code point. The code point value must be in decimal (base ten).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentFunction</Name>
    <ChangedDate>2017:05:09T16:17:00</ChangedDate>
    <Version>2300</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the function of a component in an object.</Description>
    <ShortDesc>Gets the function of a component in an object.</ShortDesc>
    <SeeAlso>SetComponentFunction</SeeAlso>
    <ID>13576</ID>
    <IDName>funcGetComponentFunction</IDName>
    <InternalFunctionName>MP_GetComponentFunction</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>func</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the function of the component.  0 - Other 1 - Load-Bearing 2 - Insulation 3 - Inner Finish 4 - Outer Finish 5 - Air Gap</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentFunction</Name>
    <ChangedDate>2017:05:09T16:17:00</ChangedDate>
    <Version>2300</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the function of a component in an object.</Description>
    <ShortDesc>Sets the function of a component in an object.</ShortDesc>
    <SeeAlso>GetComponentFunction</SeeAlso>
    <ID>13577</ID>
    <IDName>funcSetComponentFunction</IDName>
    <InternalFunctionName>MP_SetComponentFunction</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>func</Name>
        <Type>intMode</Type>
        <Desc>The function of the component.  0 - Other 1 - Load-Bearing 2 - Insulation 3 - Inner Finish 4 - Outer Finish 5 - Air Gap</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClassN</Name>
    <ChangedDate>2017:06:09T12:00:00</ChangedDate>
    <Version>2300</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Procedure SetClassN assigns a class to the referenced object.  [[BR]]If the third parameter 'descIntoGroup' is set to true all objects within the group will receive the same class assignment as the group, [[BR]]otherwise only the group itself will be affected.</Description>
    <ShortDesc>Procedure SetClassN assigns a class to the referenced object.</ShortDesc>
    <SeeAlso>SetClass</SeeAlso>
    <Example>{ select an object on drawing }[[BR]]SetClassN(FSActLayer, 'Class Name-1', FALSE);</Example>
    <ID>13578</ID>
    <IDName>procSetClassN</IDName>
    <InternalFunctionName>MP_SetClassN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>class</Name>
        <Type>stringMode</Type>
        <Desc>Name of class to assign to object.</Desc>
      </Param>
      <Param>
        <Name>descIntoGroup</Name>
        <Type>boolMode</Type>
        <Desc>Assign the same class to all objects inside the group.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPClOvrdLineStyle</Name>
    <ChangedDate>2017:06:16T09:18:00</ChangedDate>
    <Version>2300</Version>
    <Category>Viewports</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <ShortDesc>Gets the Line Style of a view port class override</ShortDesc>
    <ID>13579</ID>
    <IDName>funcGetVPClOvrdLineStyle</IDName>
    <InternalFunctionName>MP_GetVPClOvrdLineStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle.</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class override.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPClOvrdLineStyle</Name>
    <ChangedDate>2017:06:16T10:16:00</ChangedDate>
    <Version>2300</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <ShortDesc>Set a line style to a viewport class override</ShortDesc>
    <ID>13580</ID>
    <IDName>procSetVPClOvrdLineStyle</IDName>
    <InternalFunctionName>MP_SetVPClOvrdLineStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The handle of the viewport.</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class</Desc>
      </Param>
      <Param>
        <Name>lineStyle</Name>
        <Type>longMode</Type>
        <Desc>The line style to be set to the class override</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPClOvrdLnWeight</Name>
    <ChangedDate>2017:06:12T14:27:00</ChangedDate>
    <Version>2300</Version>
    <Category>Viewports</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <ShortDesc>Gets the line weight of a viewport class override</ShortDesc>
    <ID>13581</ID>
    <IDName>funcGetVPClOvrdLnWeight</IDName>
    <InternalFunctionName>MP_GetVPClOvrdLnWeight</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The handle of the viewport</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class override</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPClOvrdLnWeight</Name>
    <ChangedDate>2017:06:12T14:31:00</ChangedDate>
    <Version>2300</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets the line weight of a viewport class override</ShortDesc>
    <ID>13582</ID>
    <IDName>procSetVPClOvrdLnWeight</IDName>
    <InternalFunctionName>MP_SetVPClOvrdLnWeight</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class override</Desc>
      </Param>
      <Param>
        <Name>LineWeight</Name>
        <Type>intMode</Type>
        <Desc>The lineWeight to be set</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPClOvrdFillStyle</Name>
    <ChangedDate>2017:06:16T10:16:00</ChangedDate>
    <Version>2300</Version>
    <Category>Viewports</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <ShortDesc>Gets the fill style of a viewport class override</ShortDesc>
    <ID>13583</ID>
    <IDName>funcGetVPClOvrdFillStyle</IDName>
    <InternalFunctionName>MP_GetVPClOvrdFillStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport Handle</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class override</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPClOvrdFillStyle</Name>
    <ChangedDate>2017:06:16T10:17:00</ChangedDate>
    <Version>2300</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets the fill style of a viewport class override</ShortDesc>
    <ID>13584</ID>
    <IDName>procSetVPClOvrdFillStyle</IDName>
    <InternalFunctionName>MP_SetVPClOvrdFillStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class</Desc>
      </Param>
      <Param>
        <Name>fillStyle</Name>
        <Type>longMode</Type>
        <Desc>The fill style to be set</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPClOvrdObjTxt</Name>
    <ChangedDate>2017:06:13T11:11:00</ChangedDate>
    <Version>2300</Version>
    <Category>Viewports</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <ShortDesc>Gets the object texture of the class override</ShortDesc>
    <ID>13585</ID>
    <IDName>funcGetVPClOvrdObjTxt</IDName>
    <InternalFunctionName>MP_GetVPClOvrdObjTxt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class override</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPClOvrdObjTxt</Name>
    <ChangedDate>2017:06:13T11:27:00</ChangedDate>
    <Version>2300</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets the object texture of a viewport class override</ShortDesc>
    <ID>13586</ID>
    <IDName>procSetVPClOvrdObjTxt</IDName>
    <InternalFunctionName>MP_SetVPClOvrdObjTxt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewpoert handle</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class override</Desc>
      </Param>
      <Param>
        <Name>objectTexture</Name>
        <Type>intMode</Type>
        <Desc>The object texture to be set</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPClOvrdWallTxt</Name>
    <ChangedDate>2017:06:13T15:09:00</ChangedDate>
    <Version>2300</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <ShortDesc>Gets the wall texture of a viewport class override</ShortDesc>
    <ID>13587</ID>
    <IDName>procGetVPClOvrdWallTxt</IDName>
    <InternalFunctionName>MP_GetVPClOvrdWallTxt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class override</Desc>
      </Param>
      <Param>
        <Name>leftTexture</Name>
        <Type>lngVarMode</Type>
        <Desc>The material of the left side</Desc>
      </Param>
      <Param>
        <Name>centerTexture</Name>
        <Type>lngVarMode</Type>
        <Desc>The material of the center</Desc>
      </Param>
      <Param>
        <Name>rightTexture</Name>
        <Type>lngVarMode</Type>
        <Desc>The material of the right side</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPClOvrdWallTxt</Name>
    <ChangedDate>2017:06:13T15:43:00</ChangedDate>
    <Version>2300</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets the wall texture of a viewport class override</ShortDesc>
    <ID>13588</ID>
    <IDName>procSetVPClOvrdWallTxt</IDName>
    <InternalFunctionName>MP_SetVPClOvrdWallTxt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The handle of the viewport</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class override</Desc>
      </Param>
      <Param>
        <Name>leftTexture</Name>
        <Type>longMode</Type>
        <Desc>The left side texture to be set</Desc>
      </Param>
      <Param>
        <Name>centerTexture</Name>
        <Type>longMode</Type>
        <Desc>Thecenter texture to be set</Desc>
      </Param>
      <Param>
        <Name>rightTexture</Name>
        <Type>longMode</Type>
        <Desc>The right side texture to be set</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVPClOvrdRoofTxt</Name>
    <ChangedDate>2017:06:14T09:05:00</ChangedDate>
    <Version>2300</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <ShortDesc>Gets the roof texture of a viewport class override</ShortDesc>
    <ID>13589</ID>
    <IDName>procGetVPClOvrdRoofTxt</IDName>
    <InternalFunctionName>MP_GetVPClOvrdRoofTxt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class override</Desc>
      </Param>
      <Param>
        <Name>topMaterial</Name>
        <Type>lngVarMode</Type>
        <Desc>The material of the top</Desc>
      </Param>
      <Param>
        <Name>dormerMaterial</Name>
        <Type>lngVarMode</Type>
        <Desc>The material of the dormer</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVPClOvrdRoofTxt</Name>
    <ChangedDate>2017:06:14T09:12:00</ChangedDate>
    <Version>2300</Version>
    <Category>Viewports</Category>
    <Type>Procedure</Type>
    <ShortDesc>Sets the roog texture of a viewport class override</ShortDesc>
    <ID>13590</ID>
    <IDName>procSetVPClOvrdRoofTxt</IDName>
    <InternalFunctionName>MP_SetVPClOvrdRoofTxt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>viewportHandle</Name>
        <Type>handleMode</Type>
        <Desc>The viewport handle</Desc>
      </Param>
      <Param>
        <Name>className</Name>
        <Type>stringMode</Type>
        <Desc>The name of the class override</Desc>
      </Param>
      <Param>
        <Name>topMaterial</Name>
        <Type>longMode</Type>
        <Desc>The material of the top</Desc>
      </Param>
      <Param>
        <Name>dormerMaterial</Name>
        <Type>longMode</Type>
        <Desc>The material of the dormer</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjTypeProperties</Name>
    <ChangedDate>2017:06:16T14:18:00</ChangedDate>
    <Version>2300</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Receives an object type and returns the properties of that object type</Description>
    <ShortDesc>Receives an object type and returns the properties of that object type</ShortDesc>
    <Result>Returns bit map of properties associated with an object's type</Result>
    <Example>This function should return kTermProp for type kTermNode, kLineProp for kLineNode and so on for all existing object types that are defined in Objs.TDType.h.</Example>
    <ID>13591</ID>
    <IDName>funcGetObjTypeProperties</IDName>
    <InternalFunctionName>MP_GetObjTypeProperties</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>ObjectType</Name>
        <Type>intMode</Type>
        <Desc>Object type whose properties are desired</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSImgShowDBHeader</Name>
    <ChangedDate>2017:06:15T15:25:00</ChangedDate>
    <Version>2300</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Check whether worksheet image is set to show database headers.</Description>
    <ShortDesc>Check whether worksheet image is set to show the database header.</ShortDesc>
    <ID>13592</ID>
    <IDName>funcGetWSImgShowDBHeader</IDName>
    <InternalFunctionName>MP_GetWSImgShowDBHeader</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hWorksheetImage</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSImgShowDBHeader</Name>
    <ChangedDate>2017:06:15T15:25:00</ChangedDate>
    <Version>2300</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Set worksheet image to either show or hide database headers. Also provides choice of whether to redraw the worksheet image.</Description>
    <ShortDesc>Set worksheet image to either show or hide database header. Also provides choice of whether to redraw the worksheet image.</ShortDesc>
    <ID>13593</ID>
    <IDName>procSetWSImgShowDBHeader</IDName>
    <InternalFunctionName>MP_SetWSImgShowDBHeader</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hWorksheetImage</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>show</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>redrawImage</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>UpdateImageControl3</Name>
    <ChangedDate>2017:06:21T15:52:00</ChangedDate>
    <Version>2300</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Updates the image control.[[BR]][[BR]]Returns false if the image cannot be found or set to the control, otherwise returns true.[[BR]] [[BR]]This function directly looks for the image file with the input file path, while UpdateImageControl2() only looks into the Vectorworks resrouces folder.</Description>
    <ShortDesc>Updates the image control.</ShortDesc>
    <Result>Returns false if the image cannot be found or set to the control, otherwise returns true.</Result>
    <SeeAlso>UpdateImageControl2</SeeAlso>
    <ID>13594</ID>
    <IDName>funcUpdateImageControl3</IDName>
    <InternalFunctionName>MP_UpdateImageControl3</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The dialog identifier given by the command to create the dialog.</Desc>
      </Param>
      <Param>
        <Name>controlID</Name>
        <Type>longMode</Type>
        <Desc>The identifier of the control to be updated.</Desc>
      </Param>
      <Param>
        <Name>imageFullPath</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The full path to the image.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCatalogPath</Name>
    <ChangedDate>2017:06:22T12:06:00</ChangedDate>
    <Version>2300</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Get the path to catalog files for a plug-in object.</Description>
    <ShortDesc>Get the path for a plug-in style catalog.</ShortDesc>
    <Result>TRUE of the object supports catalogs.[[BR]]FALSE if the object does not support catalogs.</Result>
    <ID>13595</ID>
    <IDName>funcGetCatalogPath</IDName>
    <InternalFunctionName>MP_GetCatalogPath</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>inhObject</Name>
        <Type>handleMode</Type>
        <Desc>Handle of parametric object.</Desc>
      </Param>
      <Param>
        <Name>outFolderSpec</Name>
        <Type>intVarMode</Type>
        <Desc>Returns the Folder Specificer of the catalogs.</Desc>
      </Param>
      <Param>
        <Name>outRelativePath</Name>
        <Type>strVarMode</Type>
        <Desc>Returns the relative path to the folder specficier. May be empty.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SelectPluginCatalog</Name>
    <ChangedDate>2017:06:22T12:12:00</ChangedDate>
    <Version>2300</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Brings up a dialog to select a catalog to attach to a plug-in style, change the attached catalog, or detach the current catalog.</Description>
    <ShortDesc>Select a catalog to attach to a plug-in style</ShortDesc>
    <Result>FALSE if the object is not a symbol, does not define a plug-in sytle, or does not support catalogs.</Result>
    <ID>13596</ID>
    <IDName>funcSelectPluginCatalog</IDName>
    <InternalFunctionName>MP_SelectPluginCatalog</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hSymbol</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a symbol the defines a plug-in style.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetCatalogItem</Name>
    <ChangedDate>2017:06:22T12:18:00</ChangedDate>
    <Version>2300</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Show the plug-in item catalog dialog to choose an item defined in the catalog. The object will be updated with all parameters defiend in the catalog.</Description>
    <ShortDesc>Choose an item from a catalog.</ShortDesc>
    <Result>TRUE if a catalog item is selected.</Result>
    <ID>13597</ID>
    <IDName>funcGetCatalogItem</IDName>
    <InternalFunctionName>MP_GetCatalogItem</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to plug-in object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsCatalogParameter</Name>
    <ChangedDate>2017:06:22T12:23:00</ChangedDate>
    <Version>2300</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Check if a parameter is defined in the catalog that has been associated with an object's plug-in style.</Description>
    <ShortDesc>Check is a parameter is defined in the catalog asociated with an object.</ShortDesc>
    <ID>13598</ID>
    <IDName>funcIsCatalogParameter</IDName>
    <InternalFunctionName>MP_IsCatalogParameter</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObj</Name>
        <Type>handleMode</Type>
        <Desc>Handle to plug-in object</Desc>
      </Param>
      <Param>
        <Name>paramName</Name>
        <Type>stringMode</Type>
        <Desc>Name of parameter to check</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetAssociation</Name>
    <ChangedDate>2017:06:26T18:17:00</ChangedDate>
    <Version>2300</Version>
    <Category>Object Editing</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Gets info about association of specified object.</Description>
    <ShortDesc>Get association handle for specified object.</ShortDesc>
    <Result>HANDLE</Result>
    <Comments>Returns association handle.</Comments>
    <ID>13599</ID>
    <IDName>funcGetAssociation</IDName>
    <InternalFunctionName>MP_GetAssociation</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>handle</Name>
        <Type>handleMode</Type>
        <Desc>Associated object handle.</Desc>
      </Param>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>Index of association.</Desc>
      </Param>
      <Param>
        <Name>associationkind</Name>
        <Type>intVarMode</Type>
        <Desc>Kind of association - reset or delete action</Desc>
      </Param>
      <Param>
        <Name>value</Name>
        <Type>intVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumAssociations</Name>
    <ChangedDate>2017:07:06T09:37:00</ChangedDate>
    <Version>2300</Version>
    <Category>Object Editing</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Get number of associations for specified object.</Description>
    <ShortDesc>Get number of associations for specified object.</ShortDesc>
    <Result>INTEGER</Result>
    <Comments>Number of associations of specified object.</Comments>
    <ID>13600</ID>
    <IDName>funcGetNumAssociations</IDName>
    <InternalFunctionName>MP_GetNumAssociations</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>handle</Name>
        <Type>handleMode</Type>
        <Desc>Object handle.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ReadBin</Name>
    <Version>2300</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] will read binary data from a currently open file. The variable length parameter list returns the read data in the specified parameters. [[BR]][[BR]]Supported data types include INTEGER (2-bytes), REAL (8-bytes), LONGINT (4-bytes), CHAR (1-byte) or STRING/DYNARRAY OF CHAR (see remarks). [[BR]][[BR]]The bytes will be written as little-endian. [[BR]][[BR]]Strings will require additional INTEGER parameter to specify encoding: 0 – mac; 1 – win; 2 – system; 3 – UTF8; 4 – UTF16.</Description>
    <ShortDesc>Reads data from the currently open binary file. Strings will require additional INTEGER parameter with encoding: 0 – mac; 1 – win; 2 – system; 3 – UTF8; 4 – UTF16</ShortDesc>
    <ID>13601</ID>
    <IDName>procReadBin</IDName>
    <InternalFunctionName>MP_ReadBin</InternalFunctionName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
    <Params>
      <Param>
        <Name>z</Name>
        <Type>anyVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WriteBin</Name>
    <Version>2300</Version>
    <Category>File I/O</Category>
    <Type>Procedure</Type>
    <Description>Procedure [[name]] outputs the specified data to a binary file. The variable length parameter list specifies the data to be written to the file. [[BR]][[BR]]Supported data types include INTEGER (2-bytes), REAL (8-bytes), LONGINT (4-bytes), CHAR (1-byte) or STRING/DYNARRAY OF CHAR (see remarks). [[BR]][[BR]]The bytes will be written as little-endian. [[BR]][[BR]]Strings will require two additional INTEGER parameters: symbol count and encoding: 0 – mac; 1 – win; 2 – system; 3 – UTF8; 4 – UTF16.</Description>
    <ShortDesc>Writes data to a binary file file. Strings will require two additional INTEGER parameter: output symbol count and encoding: 0 – mac; 1 – win; 2 – system; 3 – UTF8; 4 – UTF16</ShortDesc>
    <Example>[[name]](Value1);</Example>
    <ID>13602</ID>
    <IDName>procWriteBin</IDName>
    <InternalFunctionName>MP_WriteBin</InternalFunctionName>
    <Implemented>True</Implemented>
    <LowLevel>True</LowLevel>
    <Params>
      <Param>
        <Name>z</Name>
        <Type>anyMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>LenEncoding</Name>
    <Version>2300</Version>
    <Category>Strings</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the length of the specified string value in the specified encoding: 0 – mac; 1 – win; 2 – system; 3 – UTF8; 4 – UTF16</Description>
    <ShortDesc>Returns the length of the specified value in the specified encoding: 0 – mac; 1 – win; 2 – system; 3 – UTF8; 4 – UTF16</ShortDesc>
    <ID>13603</ID>
    <IDName>funcLenEncoding</IDName>
    <InternalFunctionName>MP_LenEncoding</InternalFunctionName>
    <ModernName>StringLength</ModernName>
    <Implemented>True</Implemented>
    <ExcessiveAbbreviation>True</ExcessiveAbbreviation>
    <Params>
      <Param>
        <Name>v</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Source string.</Desc>
      </Param>
      <Param>
        <Name>encoding</Name>
        <Type>intMode</Type>
        <Desc>0 – mac; 1 – win; 2 – system; 3 – UTF8; 4 – UTF16</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertNewComponentN</Name>
    <ChangedDate>2017:10:25T10:52:00</ChangedDate>
    <Version>2400</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Inserts a new component in an object.</Description>
    <ShortDesc>Inserts a new component in an object.</ShortDesc>
    <SeeAlso>DeleteComponent</SeeAlso>
    <ID>13604</ID>
    <IDName>funcInsertNewComponentN</IDName>
    <InternalFunctionName>MP_InsertNewComponentN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>beforeComponentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index before which to insert the new component.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>distanceMode</Type>
        <Desc>The width of the component.</Desc>
      </Param>
      <Param>
        <Name>fill</Name>
        <Type>longMode</Type>
        <Desc>The fill of the component.  Positive values for patterns, negative ref numbers for hatches.</Desc>
      </Param>
      <Param>
        <Name>leftPenWeight</Name>
        <Type>intMode</Type>
        <Desc>The pen weight of the component's left line.</Desc>
      </Param>
      <Param>
        <Name>rightPenWeight</Name>
        <Type>intMode</Type>
        <Desc>The pen weight of the component's right line.</Desc>
      </Param>
      <Param>
        <Name>leftPenStyle</Name>
        <Type>longMode</Type>
        <Desc>The pen style of the component's left line.  Positive values for patterns, negative values for line types.</Desc>
      </Param>
      <Param>
        <Name>rightPenStyle</Name>
        <Type>longMode</Type>
        <Desc>The pen style of the component's right line.  Positive values for patterns, negative values for line types.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>InsertNewDLCompN</Name>
    <ChangedDate>2017:10:25T13:46:00</ChangedDate>
    <Version>2400</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Inserts a new component before index in the Double Line Preferences.</Description>
    <ShortDesc>Inserts a new component before index in the Double Line Preferences.</ShortDesc>
    <SeeAlso>DeleteDLComponent</SeeAlso>
    <ID>13605</ID>
    <IDName>funcInsertNewDLCompN</IDName>
    <InternalFunctionName>MP_InsertNewDLCompN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>beforeIndex</Name>
        <Type>intMode</Type>
        <Desc>The index before which to insert the new component.</Desc>
      </Param>
      <Param>
        <Name>widthDistance</Name>
        <Type>distanceMode</Type>
        <Desc>The width of the component.</Desc>
      </Param>
      <Param>
        <Name>fill</Name>
        <Type>longMode</Type>
        <Desc>The fill of the component.  Positive values for patterns, negative ref numbers for hatches.</Desc>
      </Param>
      <Param>
        <Name>penWeightLeft</Name>
        <Type>intMode</Type>
        <Desc>The pen weight of the component's left line.</Desc>
      </Param>
      <Param>
        <Name>penWeightRight</Name>
        <Type>intMode</Type>
        <Desc>The pen weight of the component's right line.</Desc>
      </Param>
      <Param>
        <Name>penStyleLeft</Name>
        <Type>longMode</Type>
        <Desc>The pen style of the component's left line.  Positive values for patterns, negative values for line types.</Desc>
      </Param>
      <Param>
        <Name>penStyleRight</Name>
        <Type>longMode</Type>
        <Desc>The pen style of the component's right line.  Positive values for patterns, negative values for line types.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDLCompPenStylesN</Name>
    <ChangedDate>2017:12:22T07:28:00</ChangedDate>
    <Version>2400</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the left and right side pen styles of the component at index in the Double Line Preferences.</Description>
    <ShortDesc>Gets the left and right side pen styles of the component at index in the Double Line Preferences.</ShortDesc>
    <SeeAlso>SetDLCompPenStylesN</SeeAlso>
    <ID>13606</ID>
    <IDName>funcGetDLCompPenStylesN</IDName>
    <InternalFunctionName>MP_GetDLCompPenStylesN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>penStyleLeft</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns the pen style of the component's left line.  Positive values for patters, negative values for line types.</Desc>
      </Param>
      <Param>
        <Name>penStyleRight</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns the pen style of the component's right line.  Positive values for patterns, negative values for line types.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDLCompPenStylesN</Name>
    <ChangedDate>2017:10:25T14:11:00</ChangedDate>
    <Version>2400</Version>
    <Category>Document Settings</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the left and right pen styles for the component at index in the Double Line Preferences.</Description>
    <ShortDesc>Sets the left and right pen styles for the component at index in the Double Line Preferences.</ShortDesc>
    <SeeAlso>GetDLCompPenStylesN</SeeAlso>
    <ID>13607</ID>
    <IDName>funcSetDLCompPenStylesN</IDName>
    <InternalFunctionName>MP_SetDLCompPenStylesN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>index</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>penStyleLeft</Name>
        <Type>longMode</Type>
        <Desc>The pen style of the component's left line.  Positive values for patterns, negative values for line types.</Desc>
      </Param>
      <Param>
        <Name>penStyleRight</Name>
        <Type>longMode</Type>
        <Desc>The pen style of the component's right line.  Positive values for patterns, negative values for line types.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDashLineTypeName</Name>
    <ChangedDate>2017:10:25T15:14:00</ChangedDate>
    <Version>2400</Version>
    <Category>Object Names</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the dash style name for the specified dash style using its negated internal index.</Description>
    <ShortDesc>Sets the dash style name for the specified dash style using its negated internal index.</ShortDesc>
    <Result>'true' if the operation was successful.[[BR]]'false' otherwise.</Result>
    <SeeAlso>GetDashLineTypeName</SeeAlso>
    <Comments>This replaces SetDashStyleName.</Comments>
    <ID>13608</ID>
    <IDName>funcSetDashLineTypeName</IDName>
    <InternalFunctionName>MP_SetDashLineTypeName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>DashStyleIndex</Name>
        <Type>longMode</Type>
        <Desc>The negated internal index of the dash style to be named.</Desc>
      </Param>
      <Param>
        <Name>DashStyleName</Name>
        <Type>stringMode</Type>
        <Desc>The new name of the line type.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDashLineTypeName</Name>
    <ChangedDate>2017:10:26T09:29:00</ChangedDate>
    <Version>2400</Version>
    <Category>Object Names</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Retrieves the dash style name for the specified dash style using its negated internal index.</Description>
    <ShortDesc>Retrieves the dash style name for the specified dash style using its negated internal index.</ShortDesc>
    <Result>Name of the dash style specified by the index.</Result>
    <SeeAlso>SetDashLineTypeName</SeeAlso>
    <Comments>This replaces GetDashStyleName</Comments>
    <ID>13609</ID>
    <IDName>funcGetDashLineTypeName</IDName>
    <InternalFunctionName>MP_GetDashLineTypeName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>DashStyleIndex</Name>
        <Type>longMode</Type>
        <Desc>The negated internal index of the dash style.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDashStyleN</Name>
    <ChangedDate>2017:10:26T11:42:00</ChangedDate>
    <Version>2400</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] searches for the pattern specified by the parameters. If it exists, then the negative value of the dash pattern's internal index is returned. If it does not exist, then it is added to the document and the negative value of the dash pattern's internal index is returned. </Description>
    <ShortDesc>Returns the negative value of the dash pattern's index.</ShortDesc>
    <Comments>Searches for the pattern specified by the parameters. If it exists, then the negative value of the dash pattern's internal index is returned. If it does not exist, then it is added to the document and the negative value of the dash pattern's internal index is returned. </Comments>
    <Example>currLS:=[[name]];</Example>
    <ID>13610</ID>
    <IDName>funcGetDashStyleN</IDName>
    <SpecialOverride>CHECKDASHSTYLE(funcGetDashStyleN);</SpecialOverride>
    <Implemented>True</Implemented>
    <ImplementationDetails>Special</ImplementationDetails>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>swt</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>numPairs</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>pair1</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair2</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair3</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair4</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair5</Name>
        <Type>tdPtMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDashStyleIndexN</Name>
    <ChangedDate>2018:03:19T16:05:00</ChangedDate>
    <Version>2400</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <Description>Function [[name]] searches for the pattern specified by the parameters. If it exists, then the negative value of the dash pattern's internal index is returned. If it does not exist, then it is added to the document and the negative value of the new dash pattern's internal index is returned.</Description>
    <ShortDesc>Returns the negative value of the dash pattern's internal index.</ShortDesc>
    <SeeAlso>GetDashDataValPrAtN, GetNumDashDataPairsN</SeeAlso>
    <Example>GetDashStyleIndexN(TRUE, 2, 0.12, 0.18, 0.03, 0.07);[[BR]][[BR]]GetDashStyleIndexN(TRUE, 3, 0.12, 0.18, 0.03, 0.07, 0.2, 0.05);</Example>
    <ID>13611</ID>
    <IDName>funcGetDashStyleIndexN</IDName>
    <SpecialOverride>CHECKDASHSTYLE(funcGetDashStyleIndexN);</SpecialOverride>
    <Implemented>True</Implemented>
    <ImplementationDetails>Special</ImplementationDetails>
    <Params>
      <Param>
        <Name>swt</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>numPairs</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>pair1</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair2</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair3</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair4</Name>
        <Type>tdPtMode</Type>
      </Param>
      <Param>
        <Name>pair5</Name>
        <Type>tdPtMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDashDataValPrAtN</Name>
    <ChangedDate>2017:10:26T16:27:00</ChangedDate>
    <Version>2400</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function [[name]] gets the dash data for the specified dash style. The dash data is a dash/gap value pair. [[name]] returns false if the dash style or dash data doesn't exist. Dash styles support up to 5 dash/gap value pairs. </Description>
    <ShortDesc>Gets the dash data for the specified dash style. The dash data is a dash/gap value pair.</ShortDesc>
    <SeeAlso>GetNumDashDataPairsN, GetDashStyleIndexN</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]n, numPairs : INTEGER;[[BR]]dashIndex : LONGINT;[[BR]]scaleWThick  :BOOLEAN;[[BR]]arrayDashDat : ARRAY[1..5] OF POINT;[[BR]]x,y : REAL;[[BR]][[BR]]BEGIN[[BR]][[BR]]dashIndex := GetDashStyleIndexN(TRUE, 2, 0.12, 0.18, 0.03, 0.07);[[BR]][[BR]]numPairs := GetNumDashDataPairsN(dashIndex,scaleWThick);[[BR]][[BR]]FOR n := 1 TO numPairs DO BEGIN[[BR]] IF (GetDashDataValPrAtN(dashIndex, n , x, y)) THEN BEGIN[[BR]]   arrayDashDat[n].x := x ;[[BR]]   arrayDashDat[n].y := y ;[[BR]] END; [[BR]]END;[[BR]][[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>13612</ID>
    <IDName>funcGetDashDataValPrAtN</IDName>
    <InternalFunctionName>MP_GetDashDataValPrAtN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dashStyleIndex</Name>
        <Type>longMode</Type>
        <Desc>The negative value of the dash pattern's internal index.</Desc>
      </Param>
      <Param>
        <Name>dataIndex</Name>
        <Type>intMode</Type>
        <Desc>Index of the data value pair.</Desc>
      </Param>
      <Param>
        <Name>dash</Name>
        <Type>rVarMode</Type>
        <Desc>The dash segement value.</Desc>
      </Param>
      <Param>
        <Name>gap</Name>
        <Type>rVarMode</Type>
        <Desc>The gap segment value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetNumDashDataPairsN</Name>
    <ChangedDate>2017:10:27T08:20:00</ChangedDate>
    <Version>2400</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Function [[name]] returns the number of dash/gap value pairs defined for the specified dash style. The "scale with thickness" setting is also returned. Dash styles support up to 5 dash/gap value pairs.</Description>
    <ShortDesc>Returns the number of dash/gap value pairs defined for the specified dash style. </ShortDesc>
    <SeeAlso>GetDashDataValPrAtN, GetDashStyleIndexN</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]n, numPairs : INTEGER;[[BR]]dashIndex : LONGINT;[[BR]]scaleWThick  :BOOLEAN;[[BR]]arrayDashDat : ARRAY[1..5] OF POINT;[[BR]]x,y : REAL;[[BR]][[BR]]BEGIN[[BR]][[BR]]dashIndex := GetDashStyleIndexN(TRUE, 2, 0.12, 0.18, 0.03, 0.07);[[BR]][[BR]]numPairs := GetNumDashDataPairsN(dashIndex,scaleWThick);[[BR]][[BR]]FOR n := 1 TO numPairs DO BEGIN[[BR]] IF (GetDashDataValPrAtN(dashIndex, n , x, y)) THEN BEGIN[[BR]]   arrayDashDat[n].x := x ;[[BR]]   arrayDashDat[n].y := y ;[[BR]] END; [[BR]]END;[[BR]][[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>13613</ID>
    <IDName>funcGetNumDashDataPairsN</IDName>
    <InternalFunctionName>MP_GetNumDashDataPairsN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dashIndex</Name>
        <Type>longMode</Type>
        <Desc>The negative value of the dash pattern's internal index.</Desc>
      </Param>
      <Param>
        <Name>swt</Name>
        <Type>boolVarMode</Type>
        <Desc>The "scale with thickness" setting.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDlgCtrlWidthStdCh</Name>
    <ChangedDate>2017:12:01T09:12:00</ChangedDate>
    <Version>2400</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Returns the width in standard characters for dialog control creation. [[BR]][[BR]]The width is different than the number of symbols (Len) as in some languages (Japanese for example) the symbols are very different in size on the dialog.[[BR]][[BR]]E.g. CreateStaticText</Description>
    <ShortDesc>Returns the width in standard characters for dialog control creation. E.g. CreateStaticText</ShortDesc>
    <Result>Return the number of std characters in the input string.</Result>
    <SeeAlso>CreateStaticText,CreateCenteredStaticText,CreateStyledStatic,CreateEditInteger,CreateEditReal,CreateEditText,CreateEditTextBox,CreateListBox,CreateListBoxN,CreateLB,CreatePullDownMenu,CreateEnhancedPullDownMenu,CreateColorPopup,CreatePullDownMenuGroupBox,CreateTreeControl,CreateClassPullDownMenu,CreateDesignLayerPullDownMenu,CreateSheetLayerPullDownMenu</SeeAlso>
    <ID>13614</ID>
    <IDName>funcGetDlgCtrlWidthStdCh</IDName>
    <InternalFunctionName>MP_GetDlgCtrlWidthStdCh</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>str</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The string used to calculate the std character count.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWSImgComponent</Name>
    <ChangedDate>2018:08:17T16:12:00</ChangedDate>
    <Version>2400</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Gets the specified component of a worksheet cell image.[[BR]][[BR]][[note:SymbolDisplayComponentsTable]][[BR]]                                                                 </Description>
    <ShortDesc>Gets the specified component of a worksheet cell image.</ShortDesc>
    <SeeAlso>SetWSImgComponent</SeeAlso>
    <ID>13615</ID>
    <IDName>procGetWSImgComponent</IDName>
    <InternalFunctionName>MP_GetWSImgComponent</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>row</Name>
        <Type>intMode</Type>
        <Desc>The cell row.</Desc>
      </Param>
      <Param>
        <Name>column</Name>
        <Type>intMode</Type>
        <Desc>The cell column.</Desc>
      </Param>
      <Param>
        <Name>component</Name>
        <Type>intVarMode</Type>
        <Desc>The image component</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSImgComponent</Name>
    <ChangedDate>2018:08:17T16:12:00</ChangedDate>
    <Version>2400</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets the specified 2D component of a worksheet cell image.[[BR]][[BR]][[note:SymbolDisplayComponentsTable]]</Description>
    <ShortDesc>Sets the specified 2D component of a worksheet cell image.</ShortDesc>
    <SeeAlso>GetWSImgComponent</SeeAlso>
    <ID>13616</ID>
    <IDName>procSetWSImgComponent</IDName>
    <InternalFunctionName>MP_SetWSImgComponent</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>The worksheet handle.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of cell range.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of cell range.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of cell range.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of cell range.</Desc>
      </Param>
      <Param>
        <Name>component</Name>
        <Type>intMode</Type>
        <Desc>The image component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Set2DComponentGroup</Name>
    <ChangedDate>2018:08:17T16:54:00</ChangedDate>
    <Version>2400</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the specified 2D component group of a symbol definition or plug-in object.   Use Top/Plan if you want to add the group into the main container of the object.                                                                             [[BR]][[BR]][[note:2DComponentsTable]]</Description>
    <ShortDesc>Sets the specified 2D component group of a symbol definition or plug-in object.</ShortDesc>
    <Result>Returns TRUE if the operation was successful. </Result>
    <SeeAlso>Get2DComponentGroup</SeeAlso>
    <ID>13617</ID>
    <IDName>funcSet2DComponentGroup</IDName>
    <InternalFunctionName>MP_Set2DComponentGroup</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object.</Desc>
      </Param>
      <Param>
        <Name>groupHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the graphics group. Can be a group or a single object. To delete the corresponding group provide NULL.</Desc>
      </Param>
      <Param>
        <Name>component</Name>
        <Type>intMode</Type>
        <Desc>2D component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateImgFromSymbolN</Name>
    <ChangedDate>2018:08:17T16:41:00</ChangedDate>
    <Version>2400</Version>
    <Category>Document Attributes</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Creates an image from the specified symbol in the specified rendering mode and view, and uses the specified component of the image.       [[BR]][[BR]][[note:SymbolDisplayControlRenderModesTable]][[BR]][[BR]][[note:SymbolDisplayControlViewsTable]][[BR]][[BR]][[note:SymbolDisplayComponentsTable]]</Description>
    <ShortDesc>Creates an image from the specified symbol.</ShortDesc>
    <Result>Returns the handle to the newly create image resource if successful; NULL otherwise. </Result>
    <SeeAlso>CreateImgFromSymbol</SeeAlso>
    <ID>13618</ID>
    <IDName>funcCreateImgFromSymbolN</IDName>
    <InternalFunctionName>MP_CreateImgFromSymbolN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>symbolName</Name>
        <Type>stringMode</Type>
        <Desc>The name of the symbol to display.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>intMode</Type>
        <Desc>The width of the symbol to display.</Desc>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>intMode</Type>
        <Desc>The height of the symbol to display.</Desc>
      </Param>
      <Param>
        <Name>margin</Name>
        <Type>intMode</Type>
        <Desc>The margin of the symbol to display.</Desc>
      </Param>
      <Param>
        <Name>renderMode</Name>
        <Type>intMode</Type>
        <Desc>The render mode in which to display the symbol. </Desc>
      </Param>
      <Param>
        <Name>view</Name>
        <Type>intMode</Type>
        <Desc>The standard view in which to display the symbol.</Desc>
      </Param>
      <Param>
        <Name>component</Name>
        <Type>intMode</Type>
        <Desc>Image component to use.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetDisplayWith2DComp</Name>
    <ChangedDate>2018:08:17T16:04:00</ChangedDate>
    <Version>2400</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets whether a 3D object in a symbol definition or plug-in object is shown when the specified 2D component is shown.[[BR]][[BR]] [[note:2DComponentsNoTopPlanTable]][[BR]]</Description>
    <ShortDesc>Sets whether a 3D object in a symbol definition or plug-in object is shown when the specified 2D component is shown.</ShortDesc>
    <Result>TRUE if the operation succeeded.</Result>
    <SeeAlso>Set2DComponentGroup, Get2DComponentGroup</SeeAlso>
    <ID>13619</ID>
    <IDName>funcSetDisplayWith2DComp</IDName>
    <InternalFunctionName>MP_SetDisplayWith2DComp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>3D object handle.</Desc>
      </Param>
      <Param>
        <Name>component</Name>
        <Type>intMode</Type>
        <Desc>2D component.</Desc>
      </Param>
      <Param>
        <Name>isVisible</Name>
        <Type>boolMode</Type>
        <Desc>Visibility of the object when the 2D component is shown.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Get2DComponentGroup</Name>
    <ChangedDate>2018:08:17T16:04:00</ChangedDate>
    <Version>2400</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Gets the specified 2D component group of a symbol definition or plug-in object or NULL if the group does not exist. [[BR]][[BR]][[note:2DComponentsNoTopPlanTable]][[BR]]</Description>
    <ShortDesc>Gets the specified 2D component group of a symbol definition or plug-in object.</ShortDesc>
    <Result>Returns a HANDLE to the specified 2D component group. </Result>
    <SeeAlso>Set2DComponentGroup, SetTopPlan2DComp, GetTopPlan2DComp</SeeAlso>
    <ID>13620</ID>
    <IDName>funcGet2DComponentGroup</IDName>
    <InternalFunctionName>MP_Get2DComponentGroup</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object.</Desc>
      </Param>
      <Param>
        <Name>component</Name>
        <Type>intMode</Type>
        <Desc>2D component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTopPlan2DComp</Name>
    <ChangedDate>2018:08:17T16:08:00</ChangedDate>
    <Version>2400</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the 2D component that is shown in Top/Plan view for a symbol definition or plug-in object[[BR]][[BR]][[note:TopPlan2DComponentsTable]]</Description>
    <ShortDesc>Sets the 2D component that is shown in Top/Plan view for a symbol definition or plug-in object.</ShortDesc>
    <Result>Returns TRUE if the operation was successful. </Result>
    <SeeAlso>GetTopPlan2DComp, Set2DComponentGroup, Get2DComponentGroup</SeeAlso>
    <ID>13621</ID>
    <IDName>funcSetTopPlan2DComp</IDName>
    <InternalFunctionName>MP_SetTopPlan2DComp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object.</Desc>
      </Param>
      <Param>
        <Name>component</Name>
        <Type>intMode</Type>
        <Desc>2D component to be shown in Top/Plan view.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTopPlan2DComp</Name>
    <ChangedDate>2018:08:17T16:16:00</ChangedDate>
    <Version>2400</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <Description>Gets the 2D component that is shown in Top/Plan view for a symbol definition or plug-in object[[BR]][[BR]][[note:TopPlan2DComponentsTable]]</Description>
    <ShortDesc>Gets the 2D component that is shown in Top/Plan view for a symbol definition or plug-in object.</ShortDesc>
    <Result>Returns the 2D component that is shown in Top/Plan view for a symbol definition or plug-in object.</Result>
    <SeeAlso>SetTopPlan2DComp, Get2DComponentGroup, Set2DComponentGroup</SeeAlso>
    <ID>13622</ID>
    <IDName>funcGetTopPlan2DComp</IDName>
    <InternalFunctionName>MP_GetTopPlan2DComp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDisplayWith2DComp</Name>
    <ChangedDate>2018:08:17T16:54:00</ChangedDate>
    <Version>2400</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets whether a 3D object in a symbol definition or plug-in object is shown when the specified 2D component is shown.[[BR]][[BR]][[note:2DComponentsNoTopPlanTable]][[BR]]</Description>
    <ShortDesc>Gets whether a 3D object in a symbol definition or plug-in object is shown when the specified 2D component is shown.</ShortDesc>
    <Result>Returns whether a 3D object in a symbol definition or plug-in object is shown when the specified 2D component is shown.</Result>
    <ID>13623</ID>
    <IDName>funcGetDisplayWith2DComp</IDName>
    <InternalFunctionName>MP_GetDisplayWith2DComp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>3D object handle.</Desc>
      </Param>
      <Param>
        <Name>component</Name>
        <Type>intMode</Type>
        <Desc>2D component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetMirrorEmpty2DComp</Name>
    <ChangedDate>2018:02:27T11:50:00</ChangedDate>
    <Version>2400</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets whether the opposite view graphics are mirrored for empty 2D components of a symbol definition or plug-in object.</Description>
    <ShortDesc>Gets whether the opposite view graphics are mirrored for empty 2D components of a symbol definition or plug-in object.</ShortDesc>
    <Result>TRUE if the opposite view graphics are mirrored for empty 2D components of a symbol definition or plug-in object.</Result>
    <SeeAlso>SetMirrorEmpty2DComp, Get2DComponentGroup, Set2DComponentGroup</SeeAlso>
    <ID>13624</ID>
    <IDName>funcGetMirrorEmpty2DComp</IDName>
    <InternalFunctionName>MP_GetMirrorEmpty2DComp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle of a symbol or plug-in object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetMirrorEmpty2DComp</Name>
    <ChangedDate>2018:02:27T11:56:00</ChangedDate>
    <Version>2400</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets whether the opposite view graphics are mirrored for empty 2D components of a symbol definition or plug-in object.</Description>
    <ShortDesc>Sets whether the opposite view graphics are mirrored for empty 2D components of a symbol definition or plug-in object.</ShortDesc>
    <Result>TRUE if the operation succeeded.</Result>
    <SeeAlso>GetMirrorEmpty2DComp, Get2DComponentGroup, Set2DComponentGroup</SeeAlso>
    <ID>13625</ID>
    <IDName>funcSetMirrorEmpty2DComp</IDName>
    <InternalFunctionName>MP_SetMirrorEmpty2DComp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle of a symbol or plug-in object.</Desc>
      </Param>
      <Param>
        <Name>doMirror</Name>
        <Type>boolMode</Type>
        <Desc>Whether the opposite view graphics are mirrored for empty 2D components.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Generate2DFrom3DComp</Name>
    <ChangedDate>2018:08:17T17:05:00</ChangedDate>
    <Version>2400</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Generates the specified 2D component of a symbol definition or plug-in object from the 3D component.[[BR]]The resulting graphics will be similar to converting the 3D component to lines from a view corresponding to the 2D component view. [[BR]]3D objects visible in the specified detail level will be used to generate the 2D component.[[BR]]                                                                  [[BR]][[note:2DComponentsNoTopPlanTable]][[BR]][[BR]][[note:AvailableRenderModesTable]][[BR]][[BR]][[note:DetailLevelTable]]</Description>
    <ShortDesc>Generates the specified 2D component of a symbol definition or plug-in object from the 3D component.</ShortDesc>
    <Result>TRUE if the operation succeeded.</Result>
    <SeeAlso>Get2DComponentGroup, Set2DComponentGroup</SeeAlso>
    <ID>13626</ID>
    <IDName>funcGenerate2DFrom3DComp</IDName>
    <InternalFunctionName>MP_Generate2DFrom3DComp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Handle of a symbol or plug-in object.</Desc>
      </Param>
      <Param>
        <Name>component</Name>
        <Type>intMode</Type>
        <Desc>2D component.</Desc>
      </Param>
      <Param>
        <Name>renderMode</Name>
        <Type>intMode</Type>
        <Desc>Render mode.</Desc>
      </Param>
      <Param>
        <Name>levelOfDetail</Name>
        <Type>intMode</Type>
        <Desc>Detail level. 3D objects visible in this detail level will be used to generate 2D component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellTopBN</Name>
    <ChangedDate>2018:02:28T09:02:00</ChangedDate>
    <Version>2400</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets a top border with the specified attributes in specified worksheet cells.[[BR]][[BR]][[name]] allows borders to be set for a rectangular range of cells. To set the border formatting of a single cell, specify identical values for the top/bottom and left/right range boundaries.[[BR]][[BR]]Note:[[BR]]A rectangular range of cells is formatted as a single block of cells. If you apply a top border to the range of cells, the border is displayed only on the right edge of the cells. [[BR]]</Description>
    <ShortDesc>Sets a top border with the specified attributes in specified worksheet cells.</ShortDesc>
    <ID>13627</ID>
    <IDName>procSetWSCellTopBN</IDName>
    <InternalFunctionName>MP_SetWSCellTopBN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Worksheet on which function is to operate.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of range to set.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of range to set.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of range to set.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of range to set.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>longMode</Type>
        <Desc>Border line style to be set.(0 = None; 2 = Solid; for dashed, use negative value of Internal Index of dash line type</Desc>
      </Param>
      <Param>
        <Name>weight</Name>
        <Type>intMode</Type>
        <Desc>Border line weight to be set. (in Mils)</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>longMode</Type>
        <Desc>Border line color to be set. (color index: 0..255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellLeftBN</Name>
    <ChangedDate>2018:02:28T09:04:00</ChangedDate>
    <Version>2400</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets a left border with the specified attributes in specified worksheet cells.[[BR]][[BR]][[name]] allows borders to be set for a rectangular range of cells. To set the border formatting of a single cell, specify identical values for the top/bottom and left/right range boundaries.[[BR]][[BR]]Note:[[BR]]A rectangular range of cells is formatted as a single block of cells. If you apply a left border to the range of cells, the border is displayed only on the right edge of the cells.</Description>
    <ShortDesc>Sets a left border with the specified attributes in specified worksheet cells.</ShortDesc>
    <ID>13628</ID>
    <IDName>procSetWSCellLeftBN</IDName>
    <InternalFunctionName>MP_SetWSCellLeftBN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Worksheet on which function is to operate.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of range to set.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of range to set.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of range to set.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of range to set.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>longMode</Type>
        <Desc>Border line style to be set.(0 = None; 2 = Solid; for dashed, use negative value of Internal Index of dash line type</Desc>
      </Param>
      <Param>
        <Name>weight</Name>
        <Type>intMode</Type>
        <Desc>Border line weight to be set.(in Mils)</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>longMode</Type>
        <Desc>Border line color to be set. (color index: 0..255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellBottomBN</Name>
    <ChangedDate>2018:02:28T09:12:00</ChangedDate>
    <Version>2400</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets a bottom border with the specified attributes in specified worksheet cells.[[BR]][[BR]][[name]] allows borders to be set for a rectangular range of cells. To set the border formatting of a single cell, specify identical values for the top/bottom and left/right range boundaries.[[BR]][[BR]]Note:[[BR]]A rectangular range of cells is formatted as a single block of cells. If you apply a bottom border to the range of cells, the border is displayed only on the right edge of the cells. </Description>
    <ShortDesc>Sets a bottom border with the specified attributes in specified worksheet cells.</ShortDesc>
    <ID>13629</ID>
    <IDName>procSetWSCellBottomBN</IDName>
    <InternalFunctionName>MP_SetWSCellBottomBN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Worksheet on which function is to operate.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of range to set.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of range to set.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of range to set.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of range to set.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>longMode</Type>
        <Desc>Border line style to be set.(0 = None; 2 = Solid; for dashed, use negative value of Internal Index of dash line type</Desc>
      </Param>
      <Param>
        <Name>weight</Name>
        <Type>intMode</Type>
        <Desc>Border line weight to be set.(in Mils)</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>longMode</Type>
        <Desc>Border line color to be set. (color index: 0..255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellRightBN</Name>
    <ChangedDate>2018:02:28T09:27:00</ChangedDate>
    <Version>2400</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets a right border with the specified attributes in specified worksheet cells.[[BR]][[BR]][[name]] allows borders to be set for a rectangular range of cells. To set the border formatting of a single cell, specify identical values for the top/bottom and left/right range boundaries.[[BR]][[BR]]Note:[[BR]]A rectangular range of cells is formatted as a single block of cells. If you apply a right border to the range of cells, the border is displayed only on the right edge of the cells.</Description>
    <ShortDesc>Sets a right border with the specified attributes in specified worksheet cells.</ShortDesc>
    <ID>13630</ID>
    <IDName>procSetWSCellRightBN</IDName>
    <InternalFunctionName>MP_SetWSCellRightBN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Worksheet on which function is to operate.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of range to set.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of range to set.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of range to set.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of range to set.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>longMode</Type>
        <Desc>Border line style to be set.(0 = None; 2 = Solid; for dashed, use negative value of Internal Index of dash line type</Desc>
      </Param>
      <Param>
        <Name>weight</Name>
        <Type>intMode</Type>
        <Desc>Border line weight to be set.(in Mils)</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>longMode</Type>
        <Desc>Border line color to be set. (color index: 0..255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellOutlineBN</Name>
    <ChangedDate>2018:02:28T09:31:00</ChangedDate>
    <Version>2400</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Outlines the specified worksheet cells with the specified border.[[BR]][[BR]][[name]] allows borders to be set for a rectangular range of cells. To set the border formatting of a single cell, specify identical values for the top/bottom and left/right range boundaries.[[BR]][[BR]]Note:[[BR]]A rectangular range of cells is formatted as a single block of cells. If you apply a top border to the range of cells, the border is displayed only on the right edge of the cells. </Description>
    <ShortDesc>Outlines the specified worksheet cells with the specified border.</ShortDesc>
    <ID>13631</ID>
    <IDName>procSetWSCellOutlineBN</IDName>
    <InternalFunctionName>MP_SetWSCellOutlineBN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Worksheet on which function is to operate.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of range to set.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of range to set.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of range to set.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of range to set.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>longMode</Type>
        <Desc>Border line style to be set.(0 = None; 2 = Solid; for dashed, use negative value of Internal Index of dash line type</Desc>
      </Param>
      <Param>
        <Name>weight</Name>
        <Type>intMode</Type>
        <Desc>Border line weight to be set.(in Mils)</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>longMode</Type>
        <Desc>Border line color to be set. (color index: 0..255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellInsideHzBN</Name>
    <ChangedDate>2018:02:28T09:36:00</ChangedDate>
    <Version>2400</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Set inside horizontal borders with the specified attributes in specified worksheet cells.[[BR]][[BR]][[name]] allows borders to be set for a rectangular range of cells. To set the border formatting of a single cell, specify identical values for the top/bottom and left/right range boundaries.[[BR]][[BR]]Note:[[BR]]A rectangular range of cells is formatted as a single block of cells. If you apply a top border to the range of cells, the border is displayed only on the right edge of the cells. </Description>
    <ShortDesc>Set inside horizontal borders with the specified attributes in specified worksheet cells.</ShortDesc>
    <ID>13632</ID>
    <IDName>procSetWSCellInsideHzBN</IDName>
    <InternalFunctionName>MP_SetWSCellInsideHzBN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Worksheet on which function is to operate.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of range to set.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of range to set.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of range to set.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of range to set.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>longMode</Type>
        <Desc>Border line style to be set.(0 = None; 2 = Solid; for dashed, use negative value of Internal Index of dash line type</Desc>
      </Param>
      <Param>
        <Name>weight</Name>
        <Type>intMode</Type>
        <Desc>Border line weight to be set.(in Mils)</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>longMode</Type>
        <Desc>Border line color to be set. (color index: 0..255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWSCellInsideVtBN</Name>
    <ChangedDate>2018:02:28T09:42:00</ChangedDate>
    <Version>2400</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Sets inside vertical borders with specified attributes in specified worksheet cells.[[BR]][[BR]][[name]] allows borders to be set for a rectangular range of cells. To set the border formatting of a single cell, specify identical values for the top/bottom and left/right range boundaries.[[BR]][[BR]]Note:[[BR]]A rectangular range of cells is formatted as a single block of cells. If you apply a top border to the range of cells, the border is displayed only on the right edge of the cells. </Description>
    <ShortDesc>Sets inside vertical borders with specified attributes in specified worksheet cells.</ShortDesc>
    <ID>13633</ID>
    <IDName>procSetWSCellInsideVtBN</IDName>
    <InternalFunctionName>MP_SetWSCellInsideVtBN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>worksheet</Name>
        <Type>handleMode</Type>
        <Desc>Worksheet on which function is to operate.</Desc>
      </Param>
      <Param>
        <Name>topRow</Name>
        <Type>intMode</Type>
        <Desc>Top row of range to set.</Desc>
      </Param>
      <Param>
        <Name>leftColumn</Name>
        <Type>intMode</Type>
        <Desc>Left column of range to set.</Desc>
      </Param>
      <Param>
        <Name>bottomRow</Name>
        <Type>intMode</Type>
        <Desc>Bottom row of range to set.</Desc>
      </Param>
      <Param>
        <Name>rightColumn</Name>
        <Type>intMode</Type>
        <Desc>Right column of range to set.</Desc>
      </Param>
      <Param>
        <Name>style</Name>
        <Type>longMode</Type>
        <Desc>Border line style to be set.(0 = None; 2 = Solid; for dashed, use negative value of Internal Index of dash line type</Desc>
      </Param>
      <Param>
        <Name>weight</Name>
        <Type>intMode</Type>
        <Desc>Border line weight to be set.(in Mils)</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>longMode</Type>
        <Desc>Border line color to be set. (color index: 0..255)</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetPseudoIndFromDash</Name>
    <ChangedDate>2018:02:28T12:23:00</ChangedDate>
    <Version>2400</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Supplies a pseudo index for a dashed style. The returned index is not guaranteed to produce the same line type from file to file, nor even in the same file if line types change.[[BR]]Returns TRUE if successful.</Description>
    <ShortDesc>Supplies a pseudo index for a dashed style. Returns TRUE if successful.</ShortDesc>
    <SeeAlso>GetDashFrompseudoInd,BeginMultDashConvert,EndMultDashConvert</SeeAlso>
    <ID>13634</ID>
    <IDName>funcGetPseudoIndFromDash</IDName>
    <InternalFunctionName>MP_GetPseudoIndFromDash</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dashStyle</Name>
        <Type>longMode</Type>
        <Desc>Negative internal index of a dashed line type.</Desc>
      </Param>
      <Param>
        <Name>outPseudoIndex</Name>
        <Type>intVarMode</Type>
        <Desc>Pseudo index (a negative number) corresponding to the dash style.  The pseudo index is not guaranteed to produce the same line across files (or even in the same file if line types are changed).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDashFromPseudoInd</Name>
    <ChangedDate>2018:02:28T12:23:00</ChangedDate>
    <Version>2400</Version>
    <Category>Utility</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the dash style that corresponds to the pseudo index and returns the style's internal index. Returns TRUE if successful.[[BR]][[BR]]</Description>
    <ShortDesc>Finds the dash style that corresponds to the pseudo index and returns the style's internal index. Returns TRUE if successful.</ShortDesc>
    <SeeAlso>GetPseudoIndFromDash,BeginMultDashConvert,EndMultDashConvert</SeeAlso>
    <ID>13635</ID>
    <IDName>funcGetDashFromPseudoInd</IDName>
    <InternalFunctionName>MP_GetDashFromPseudoInd</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>pseudoIndex</Name>
        <Type>intMode</Type>
        <Desc>Pseudo index (negative value)  for which a dash style is requested. </Desc>
      </Param>
      <Param>
        <Name>outDashStyle</Name>
        <Type>lngVarMode</Type>
        <Desc>Negative internal index of a dashed line type corresponding to the pseudo index.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>BeginMultDashConvert</Name>
    <ChangedDate>2018:02:28T12:23:00</ChangedDate>
    <Version>2400</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Used when a number of pseudo index to dash style conversion operations (or vice versa) are going to be performed. [[BR]][[BR]]Use EndMultDashConvert when the conversions are complete. </Description>
    <ShortDesc>Used when a number of pseudoindex to dash style operations (or vice versa) are going to be performed. Use in conjunction with EndMultDashConvert.</ShortDesc>
    <SeeAlso>GetPseudoIndFromDash,GetDashFromPseudoInd,EndMultDashConvert</SeeAlso>
    <ID>13636</ID>
    <IDName>procBeginMultDashConvert</IDName>
    <InternalFunctionName>MP_BeginMultDashConvert</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>EndMultDashConvert</Name>
    <ChangedDate>2018:02:28T12:23:00</ChangedDate>
    <Version>2400</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <Description>Used in conjunction with BeginMultDashConvert to end the set of conversions.</Description>
    <ShortDesc>Used in conjunction with BeginMultDashConvert to end the set of conversions.</ShortDesc>
    <SeeAlso>GetPseudoIndFromDash,GetDashFromPseudoInd,BeginMultDashConvert</SeeAlso>
    <ID>13637</ID>
    <IDName>procEndMultDashConvert</IDName>
    <InternalFunctionName>MP_EndMultDashConvert</InternalFunctionName>
    <Implemented>True</Implemented>
  </Item>

  <Item>
    <Name>AddObjectTo2DComp</Name>
    <ChangedDate>2018:08:17T16:24:00</ChangedDate>
    <Version>2400</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Adds an object to the specified 2D component group of a symbol definition or plug-in object. Use Top/Plan if you want to add the the object into the main container of the symbol definition or plug-in object.[[BR]][[BR]][[note:2DComponentsTable]]</Description>
    <ShortDesc>Adds an object to the specified 2D component group of a symbol definition or plug-in object.</ShortDesc>
    <Result>Returns TRUE if the operation was successful. </Result>
    <SeeAlso>Set2DComponentGroup, Get2DComponentGroup</SeeAlso>
    <ID>13638</ID>
    <IDName>funcAddObjectTo2DComp</IDName>
    <InternalFunctionName>MP_AddObjectTo2DComp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>Symbol definition or plug-in object.</Desc>
      </Param>
      <Param>
        <Name>objToAddHandle</Name>
        <Type>handleMode</Type>
        <Desc>New object to be added to the 2D component group.</Desc>
      </Param>
      <Param>
        <Name>component</Name>
        <Type>intMode</Type>
        <Desc>2D component</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateSymDispCtrlN</Name>
    <ChangedDate>2018:08:17T15:49:00</ChangedDate>
    <Version>2400</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a new symbol display control in the dialog layout.  The control displays the specified symbol in the specified rendering mode and view. Specified image component is used.  The actual size of the symbol is not relevant; it is shown as large as possible in the given height and width (the height to width ratio of the symbol is always preserved).  To show a blank SymbolDisplay control, use an empty string as the symbolName parameter.[[BR]][[BR]][[note:SymbolDisplayControlRenderModesTable]][[BR]][[BR]][[note:SymbolDisplayControlViewsTable]][[BR]][[BR]][[note:SymbolDisplayComponentsTable]]</Description>
    <ShortDesc>Creates a new symbol display control in the dialog layout.</ShortDesc>
    <SeeAlso>UpdateSymDispCtrlN</SeeAlso>
    <ID>13639</ID>
    <IDName>procCreateSymDispCtrlN</IDName>
    <InternalFunctionName>MP_CreateSymDispCtrlN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The ID of the dialog in which to create the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The item ID of the control.</Desc>
      </Param>
      <Param>
        <Name>symbolName</Name>
        <Type>stringMode</Type>
        <Desc>The name of the symbol to display.</Desc>
      </Param>
      <Param>
        <Name>width</Name>
        <Type>intMode</Type>
        <Desc>The width of the control in pixels.</Desc>
      </Param>
      <Param>
        <Name>height</Name>
        <Type>intMode</Type>
        <Desc>The height of the control in pixels.</Desc>
      </Param>
      <Param>
        <Name>margin</Name>
        <Type>intMode</Type>
        <Desc>The margin bewteen the border of the control and the symbol in pixels.</Desc>
      </Param>
      <Param>
        <Name>view</Name>
        <Type>intMode</Type>
        <Desc>The view in which to display the symbol.</Desc>
      </Param>
      <Param>
        <Name>renderMode</Name>
        <Type>intMode</Type>
        <Desc>The render mode in which to display the symbol.</Desc>
      </Param>
      <Param>
        <Name>component</Name>
        <Type>intMode</Type>
        <Desc>The image component.</Desc>
      </Param>
      <Param>
        <Name>scaleByZoom</Name>
        <Type>boolMode</Type>
        <Desc>Whether the sizing is done by zoom or layer scale. </Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>UpdateSymDispCtrlN</Name>
    <ChangedDate>2018:08:17T15:35:00</ChangedDate>
    <Version>2400</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Updates a pre-existing symbol display control in the dialog with a new symbol, rendering mode, view or image component.  The dialog ID and item ID must refer to symbol display control created with CreateSymDispCtrlN.  To show a blank SymbolDisplay control, use an empty string as the symbolName parameter.[[BR]][[BR]][[note:SymbolDisplayControlRenderModesTable]][[BR]][[BR]][[note:SymbolDisplayControlViewsTable]][[BR]][[BR]][[note:SymbolDisplayComponentsTable]][[BR]]</Description>
    <ShortDesc>Updates a pre-existing symbol display control in the dialog with a new symbol, rendering mode, view or image component.</ShortDesc>
    <SeeAlso>CreateSymDispCtrlN</SeeAlso>
    <ID>13640</ID>
    <IDName>procUpdateSymDispCtrlN</IDName>
    <InternalFunctionName>MP_UpdateSymDispCtrlN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The ID of the dialog in which to create the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The item ID of the control.</Desc>
      </Param>
      <Param>
        <Name>symbolName</Name>
        <Type>stringMode</Type>
        <Desc>The name of the symbol to display.</Desc>
      </Param>
      <Param>
        <Name>view</Name>
        <Type>intMode</Type>
        <Desc>The view in which to display the symbol.</Desc>
      </Param>
      <Param>
        <Name>renderMode</Name>
        <Type>intMode</Type>
        <Desc>The render mode in which to display the symbol.</Desc>
      </Param>
      <Param>
        <Name>component</Name>
        <Type>intMode</Type>
        <Desc>The image component.</Desc>
      </Param>
      <Param>
        <Name>scaleByZoom</Name>
        <Type>boolMode</Type>
        <Desc>Whether the sizing is done by zoom or layer scale. </Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateTextureBitmapD</Name>
    <ChangedDate>2018:03:13T16:03:00</ChangedDate>
    <Version>2400</Version>
    <Category>Textures</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>This function takes a shader record and creates a Texture bitmap.</Description>
    <ShortDesc>Creates a texture bitmap from the shader record without bringing up a dialogue.</ShortDesc>
    <Result>A texture bitmap (TextureBitmapHandle) is created from the input shader record and is returned.</Result>
    <SeeAlso>SetTextureBitmap,CreateShaderRecord</SeeAlso>
    <ID>13641</ID>
    <IDName>funcCreateTextureBitmapD</IDName>
    <InternalFunctionName>MP_CreateTextureBitmapD</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>parentShaderRecord</Name>
        <Type>handleMode</Type>
        <Desc>This is the shader record input that the texture bitmap will be attached to.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateSearchEditBox</Name>
    <ChangedDate>2018:03:15T15:32:00</ChangedDate>
    <Version>2400</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a search field control in a dialog layout.</Description>
    <ShortDesc>Creates a search field control in a dialog layout.</ShortDesc>
    <SeeAlso>GetDlgCtrlWidthStdCh</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	dialog1 :INTEGER;[[BR]]	result  :INTEGER;[[BR]]PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]END;[[BR]]BEGIN[[BR]]	dialog1 := CreateLayout('Example Dialog', FALSE, 'OK', 'Cancel');[[BR]]	CreateSearchEditBox(dialog1, 4, 'search', 16);[[BR]]	SetFirstLayoutItem(dialog1, 4);[[BR]]	result := RunLayoutDialog(dialog1, Dialog_Handler);[[BR]]END;[[BR]]RUN(Example);</Example>
    <ID>13642</ID>
    <IDName>procCreateSearchEditBox</IDName>
    <InternalFunctionName>MP_CreateSearchEditBox</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index that will identify the control item.</Desc>
      </Param>
      <Param>
        <Name>promptText</Name>
        <Type>stringMode</Type>
        <Desc>The default prompt text for the search control.</Desc>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>longMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateEditPassword</Name>
    <Version>2400</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates an password text field control in a dialog layout.</Description>
    <ShortDesc>Creates an password text field control in a dialog layout.</ShortDesc>
    <SeeAlso>GetDlgCtrlWidthStdCh</SeeAlso>
    <Example>PROCEDURE Example;[[BR]]VAR[[BR]]	dialog1 :INTEGER;[[BR]]	result  :INTEGER;[[BR]]PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);[[BR]]BEGIN[[BR]]END;[[BR]]BEGIN[[BR]]	dialog1 := CreateLayout('Example Dialog', FALSE, 'OK', 'Cancel');[[BR]]	CreateEditPassword(dialog1, 4, 16);[[BR]]	SetFirstLayoutItem(dialog1, 4);[[BR]]	result := RunLayoutDialog(dialog1, Dialog_Handler);[[BR]]END;[[BR]]RUN(Example);[[BR]][[BR]]</Example>
    <ID>13643</ID>
    <IDName>procCreateEditPassword</IDName>
    <InternalFunctionName>MP_CreateEditPassword</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>itemID</Name>
        <Type>longMode</Type>
        <Desc>The index that will identify the control item.</Desc>
      </Param>
      <Param>
        <Name>widthInStdChar</Name>
        <Type>longMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjectByUuid</Name>
    <ChangedDate>2018:03:26T17:03:00</ChangedDate>
    <Version>2304</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to the object with the specified UUID. If the UUID is not valid, or if no object with that UUID exists, NIL is returned.</Description>
    <ShortDesc>Returns a handle to the object with the specified UUID.</ShortDesc>
    <Result>HANDLE</Result>
    <SeeAlso>GetObjectUuid</SeeAlso>
    <ID>13644</ID>
    <IDName>funcGetObjectByUuid</IDName>
    <InternalFunctionName>MP_GetObjectByUuid</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>UUID</Name>
        <Type>stringMode</Type>
        <Desc>Object UUID</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjectUuid</Name>
    <ChangedDate>2018:03:26T17:03:00</ChangedDate>
    <Version>2304</Version>
    <Category>Object Info</Category>
    <Type>Function</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Function [[name]] returns the UUID of the referenced object. </Description>
    <ShortDesc>Returns the UUID of the referenced object.</ShortDesc>
    <Result>STRING</Result>
    <SeeAlso>GetObjectByUuid</SeeAlso>
    <ID>13645</ID>
    <IDName>funcGetObjectUuid</IDName>
    <InternalFunctionName>MP_GetObjectUuid</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjectTags</Name>
    <ChangedDate>2018:05:10T14:57:00</ChangedDate>
    <Version>2400</Version>
    <Category>General Edit</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Lets the user set a list of Tags on an object such as a Class,Layer or Resource.</Description>
    <ShortDesc>Lets the user set a list of Tags on an object such as a Class,Layer or Resource.</ShortDesc>
    <ID>13646</ID>
    <IDName>funcSetObjectTags</IDName>
    <InternalFunctionName>MP_SetObjectTags</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
        <Desc>The object to set Tags on.</Desc>
      </Param>
      <Param>
        <Name>arrTags</Name>
        <Type>arrayMode</Type>
        <Desc>The arra of Tag Strings.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjectTags</Name>
    <ChangedDate>2018:05:10T14:47:00</ChangedDate>
    <Version>2400</Version>
    <Category>General Edit</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Lets the user query the list of Tags set on an object such as a Class,Layer or Resource.</Description>
    <ShortDesc>Lets the user query the list of Tags set on an object such as a Class,Layer or Resource.</ShortDesc>
    <ID>13647</ID>
    <IDName>funcGetObjectTags</IDName>
    <InternalFunctionName>MP_GetObjectTags</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objHandle</Name>
        <Type>handleMode</Type>
        <Desc>The handle to the object to query Tags from.</Desc>
      </Param>
      <Param>
        <Name>outArrTags</Name>
        <Type>arrayVarMode</Type>
        <Desc>The output array of Tags queried from the object.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetDrawingArea</Name>
    <ChangedDate>2018:06:25T16:28:00</ChangedDate>
    <Version>2400</Version>
    <OldVersion>000</OldVersion>
    <Category>Layers</Category>
    <Type>Procedure</Type>
    <ReturnType>STRING</ReturnType>
    <Description>Gets the drawing area of the active layer, as in Page Setup dialog. If Other is selected returns an empty string as outDrawingArea and true for outIsOther.If One Printer Page is Selected, returns empty string for outDrawingArea and true for outIsOnePrinterPage. Otherwise, returns the drawing area name (ISO A3, US ARCH A, etc.)</Description>
    <ShortDesc>Gets the drawing area as in Page Setup dialog.</ShortDesc>
    <ID>13648</ID>
    <IDName>procGetDrawingArea</IDName>
    <InternalFunctionName>MP_GetDrawingArea</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>outDrawingArea</Name>
        <Type>strVarMode</Type>
        <Desc>Returns the paper size name of the active layer, if it is found in the predefined paper sizes from DwgSizes-Universal.txt.</Desc>
      </Param>
      <Param>
        <Name>outIsOther</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns true, if the paper size of the active layer is not one of the predefined sizes from DwgSizes-Universal.txt.</Desc>
      </Param>
      <Param>
        <Name>outIsOnePrintedPage</Name>
        <Type>boolVarMode</Type>
        <Desc>Returns true, if One Printer Page was selected in Page Setup dialog and the page area is the same as the selected from the printer page area.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateDuplicateObjN</Name>
    <ChangedDate>2018:09:04T12:25:00</ChangedDate>
    <Version>2500</Version>
    <Category>Object Editing</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Duplicates the specified object and inserts the new  object into the container.  If container is nil, the new object will be inserted in the active container (Functionlaity of CreateDuplicateObject). This functions add an extra input paramer to maintain height relative to the specified layer.</Description>
    <ShortDesc>Mimics the functionality of CreateDuplicateObject also adding an extra input paramer to maintain height relative to the specified layer.</ShortDesc>
    <ID>13649</ID>
    <IDName>funcCreateDuplicateObjN</IDName>
    <InternalFunctionName>MP_CreateDuplicateObjN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectToDuplicate</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>containerHandle</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>maintainHeightRelativeToLayer</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RunImageComp</Name>
    <ChangedDate>2018:09:19T16:56:00</ChangedDate>
    <Version>2500</Version>
    <Category>Utility</Category>
    <Type>Procedure</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Runs the image comparison testing tool. </ShortDesc>
    <ID>13650</ID>
    <IDName>procRunImageComp</IDName>
    <InternalFunctionName>MP_RunImageComp</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>FilePath</Name>
        <Type>stringMode</Type>
        <Desc>This is the file path to the test file</Desc>
      </Param>
      <Param>
        <Name>savedView</Name>
        <Type>stringMode</Type>
        <Desc>The name of the saved view test</Desc>
      </Param>
      <Param>
        <Name>SettingsDir</Name>
        <Type>stringMode</Type>
        <Desc>The path to the directory where the settings.csv file is</Desc>
      </Param>
      <Param>
        <Name>imageWidth</Name>
        <Type>intMode</Type>
        <Desc>The width in pixels of the image this function will save of the saved view.  This should be close to the width of the reference image.</Desc>
      </Param>
      <Param>
        <Name>imageHeight</Name>
        <Type>intMode</Type>
        <Desc>The height in pixels of the image this function will save of the saved view.  This should be close to the height of the reference image.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateLayerPDMenu</Name>
    <ChangedDate>2018:11:26T17:13:00</ChangedDate>
    <Version>2500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a Layout Manager layer pull down menu control.</Description>
    <ShortDesc>Creates a Layout Manager layer pull down menu control.</ShortDesc>
    <ID>13651</ID>
    <IDName>procCreateLayerPDMenu</IDName>
    <InternalFunctionName>MP_CreateLayerPDMenu</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>widthInStandardChar</Name>
        <Type>intMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WSScript_AddHandle</Name>
    <ChangedDate>2018:12:06T15:28:00</ChangedDate>
    <Version>2500</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Add a handle for a worksheet script usage. This is most notable used for scripts that generate object database for worksheets.</Description>
    <ShortDesc>Add a handle for a worksheet script usage.</ShortDesc>
    <ID>13652</ID>
    <IDName>procWSScript_AddHandle</IDName>
    <InternalFunctionName>MP_WSScript_AddHandle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>The handle of an object to be added</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EditSymMarkersDlg</Name>
    <ChangedDate>2019:03:15T14:40:00</ChangedDate>
    <Version>2500</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Function EditSymMarkersDlg displays a dialog box which requests the user to choose starting and ending symbol markers. Returns TRUE if OK is clicked. Parameters inOutStartMarkerSymName and inOutEndMarkerSymName set the symbols to initialize selected symbols and return the newly selected symbol names.</Description>
    <ShortDesc>Function EditSymMarkersDlg displays a dialog box which requests the user to choose starting and ending symbol markers.</ShortDesc>
    <ID>13653</ID>
    <IDName>funcEditSymMarkersDlg</IDName>
    <InternalFunctionName>MP_EditSymMarkersDlg</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogTitle</Name>
        <Type>stringMode</Type>
        <Desc>Dialog title string.</Desc>
      </Param>
      <Param>
        <Name>contextHelpID</Name>
        <Type>stringMode</Type>
        <Desc>Contextual help ID string.</Desc>
      </Param>
      <Param>
        <Name>inOutStartMarkerSymName</Name>
        <Type>stringInOutMode</Type>
        <Desc>Name of starting symbol marker.</Desc>
      </Param>
      <Param>
        <Name>inOutEndMarkerSymName</Name>
        <Type>stringInOutMode</Type>
        <Desc>Name of ending symbol marker.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ImportParasolidXT</Name>
    <ChangedDate>2019:04:08T14:40:00</ChangedDate>
    <Version>2500</Version>
    <Category>File I/O</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Imports the provided Parasolid XT file.</Description>
    <ShortDesc>Imports the provided Parasolid XT file</ShortDesc>
    <ID>13654</ID>
    <IDName>funcImportParasolidXT</IDName>
    <InternalFunctionName>MP_ImportParasolidXT</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>filePath</Name>
        <Type>stringMode</Type>
        <Desc>The full path to the file to be imported.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreatePullDownSearch</Name>
    <ChangedDate>2019:04:11T13:44:00</ChangedDate>
    <Version>2500</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a pulldown menu with a search bar at the top.[[BR]][[BR]]The contents of the pulldown should be filtered as you type in the search bar.[[BR]][[BR]]</Description>
    <ShortDesc>Creates a pulldown menu with a search bar at the top.</ShortDesc>
    <ID>13655</ID>
    <IDName>procCreatePullDownSearch</IDName>
    <InternalFunctionName>MP_CreatePullDownSearch</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
      </Param>
      <Param>
        <Name>nWidthInChars</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetWallRecessGroup</Name>
    <ChangedDate>2019:04:24T23:07:00</ChangedDate>
    <Version>2500</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Get the wall recess geometry group associated with the object.</Description>
    <ShortDesc>Get the wall recess geometry group associated with the object.</ShortDesc>
    <Result>The group containing the geometry that will be used for wall recess.</Result>
    <ID>13656</ID>
    <IDName>funcGetWallRecessGroup</IDName>
    <InternalFunctionName>MP_GetWallRecessGroup</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHand</Name>
        <Type>handleMode</Type>
        <Desc>Object handle to get the geometry for.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetWallRecessGroup</Name>
    <ChangedDate>2019:04:24T23:04:00</ChangedDate>
    <Version>2500</Version>
    <Category>Objects - Custom</Category>
    <Type>Procedure</Type>
    <Description>Set the wall recess geometry group associated with the object.</Description>
    <ShortDesc>Set the wall recess geometry group associated with the object.</ShortDesc>
    <ID>13657</ID>
    <IDName>procSetWallRecessGroup</IDName>
    <InternalFunctionName>MP_SetWallRecessGroup</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHand</Name>
        <Type>handleMode</Type>
        <Desc>Object handle to set the geometry for.</Desc>
      </Param>
      <Param>
        <Name>geometryGroup</Name>
        <Type>handleMode</Type>
        <Desc>The group containing the new geometry.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>PublishSavedSet</Name>
    <ChangedDate>2019:05:20T09:21:00</ChangedDate>
    <Version>2500</Version>
    <Category>ImportExport</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>This function publishes passed saved set from the opened document to the given folder. Returns true if succeeded to publish items.</Description>
    <ShortDesc>Publishes passed saved set from the opened document to the given folder.</ShortDesc>
    <ID>13658</ID>
    <IDName>funcPublishSavedSet</IDName>
    <InternalFunctionName>MP_PublishSavedSet</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>savedSetName</Name>
        <Type>stringMode</Type>
        <Desc>Saved set to be published.</Desc>
      </Param>
      <Param>
        <Name>outputFolder</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>Output folder for the createded files.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Get2DCompLocation</Name>
    <ChangedDate>2019:06:26T13:24:00</ChangedDate>
    <Version>2500</Version>
    <Category>Objects - Custom</Category>
    <Type>Procedure</Type>
    <ShortDesc>Gets the location of a 2D component of a symbol definition, Plug-in Object Style, or plug-in object.</ShortDesc>
    <ID>13659</ID>
    <IDName>procGet2DCompLocation</IDName>
    <InternalFunctionName>MP_Get2DCompLocation</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>component</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>onBoundsCube</Name>
        <Type>boolVarMode</Type>
      </Param>
      <Param>
        <Name>offset</Name>
        <Type>rVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Set2DCompLocation</Name>
    <ChangedDate>2019:06:26T13:24:00</ChangedDate>
    <Version>2500</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Sets the location of a 2D component of a symbol definition, Plug-in Object Style, or plug-in object</ShortDesc>
    <ID>13660</ID>
    <IDName>funcSet2DCompLocation</IDName>
    <InternalFunctionName>MP_Set2DCompLocation</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>component</Name>
        <Type>intMode</Type>
      </Param>
      <Param>
        <Name>onBoundsCube</Name>
        <Type>boolMode</Type>
      </Param>
      <Param>
        <Name>offset</Name>
        <Type>realMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetHorizSecCutPlane</Name>
    <ChangedDate>2019:06:27T11:51:00</ChangedDate>
    <Version>2500</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <ShortDesc>Gets the horizontal section cut plane of a symbol definition, Plug-in Object Style, or plug-in object.</ShortDesc>
    <ID>13661</ID>
    <IDName>funcGetHorizSecCutPlane</IDName>
    <InternalFunctionName>MP_GetHorizSecCutPlane</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetHorizSecCutPlane</Name>
    <ChangedDate>2019:06:26T13:13:00</ChangedDate>
    <Version>2500</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Sets whether the 2D components of a symbol definition, Plug-in Object Style, or plug-in object are by style.</ShortDesc>
    <ID>13662</ID>
    <IDName>funcSetHorizSecCutPlane</IDName>
    <InternalFunctionName>MP_SetHorizSecCutPlane</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>objectCutPlane</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVertSecCutPlane</Name>
    <ChangedDate>2019:06:26T13:16:00</ChangedDate>
    <Version>2500</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>INTEGER</ReturnType>
    <ShortDesc>Gets the vertical section cut plane of a symbol definition, Plug-in Object Style, or plug-in object.</ShortDesc>
    <ID>13663</ID>
    <IDName>funcGetVertSecCutPlane</IDName>
    <InternalFunctionName>MP_GetVertSecCutPlane</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Get2DCompByStyle</Name>
    <ChangedDate>2019:06:26T13:16:00</ChangedDate>
    <Version>2500</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Gets whether the 2D components of a symbol definition, Plug-in Object Style, or plug-in object are by style</ShortDesc>
    <ID>13664</ID>
    <IDName>funcGet2DCompByStyle</IDName>
    <InternalFunctionName>MP_Get2DCompByStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>Set2DCompByStyle</Name>
    <ChangedDate>2019:06:26T13:17:00</ChangedDate>
    <Version>2500</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Sets whether the 2D components of a symbol definition, Plug-in Object Style, or plug-in object are by style.</ShortDesc>
    <ID>13665</ID>
    <IDName>funcSet2DCompByStyle</IDName>
    <InternalFunctionName>MP_Set2DCompByStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>byStyle</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetMrEm2DCompByStyle</Name>
    <ChangedDate>2019:06:26T13:17:00</ChangedDate>
    <Version>2500</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Gets whether the mirror empty 2D components setting of a symbol definition, Plug-in Object Style, or plug-in object is by style.</ShortDesc>
    <ID>13666</ID>
    <IDName>funcGetMrEm2DCompByStyle</IDName>
    <InternalFunctionName>MP_GetMrEm2DCompByStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetMrEm2DCompByStyle</Name>
    <ChangedDate>2019:06:26T13:18:00</ChangedDate>
    <Version>2500</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Sets whether the mirror empty 2D components setting of a symbol definition, Plug-in Object Style, or plug-in object is by style.</ShortDesc>
    <ID>13667</ID>
    <IDName>funcSetMrEm2DCompByStyle</IDName>
    <InternalFunctionName>MP_SetMrEm2DCompByStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>byStyle</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetTpPl2DCompByStyle</Name>
    <ChangedDate>2019:06:26T13:17:00</ChangedDate>
    <Version>2500</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Gets whether the Top/Plan 2D component of a symbol definition, Plug-in Object Style, or plug-in object is by style</ShortDesc>
    <ID>13668</ID>
    <IDName>funcGetTpPl2DCompByStyle</IDName>
    <InternalFunctionName>MP_GetTpPl2DCompByStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetTpPl2DCompByStyle</Name>
    <ChangedDate>2019:06:26T13:18:00</ChangedDate>
    <Version>2500</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Sets whether the Top/Plan 2D component of a symbol definition, Plug-in Object Style, or plug-in object is by style.</ShortDesc>
    <ID>13669</ID>
    <IDName>funcSetTpPl2DCompByStyle</IDName>
    <InternalFunctionName>MP_SetTpPl2DCompByStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>byStyle</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetHorizSecCPByStyle</Name>
    <ChangedDate>2019:06:26T13:17:00</ChangedDate>
    <Version>2500</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Gets whether the horizontal section cut plane of a symbol definition, Plug-in Object Style, or plug-in object is by style.</ShortDesc>
    <ID>13670</ID>
    <IDName>funcGetHorizSecCPByStyle</IDName>
    <InternalFunctionName>MP_GetHorizSecCPByStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetHorizSecCPByStyle</Name>
    <ChangedDate>2019:06:26T13:18:00</ChangedDate>
    <Version>2500</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Sets whether the horizontal section cut plane of a symbol definition, Plug-in Object Style, or plug-in object is by style.</ShortDesc>
    <ID>13671</ID>
    <IDName>funcSetHorizSecCPByStyle</IDName>
    <InternalFunctionName>MP_SetHorizSecCPByStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>byStyle</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetVertSecCPByStyle</Name>
    <ChangedDate>2019:06:26T13:17:00</ChangedDate>
    <Version>2500</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Gets whether the vertical section cut plane of a symbol definition, Plug-in Object Style, or plug-in object is by style.</ShortDesc>
    <ID>13672</ID>
    <IDName>funcGetVertSecCPByStyle</IDName>
    <InternalFunctionName>MP_GetVertSecCPByStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVertSecCPByStyle</Name>
    <ChangedDate>2019:06:26T13:18:00</ChangedDate>
    <Version>2500</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Sets whether the vertical section cut plane of a symbol definition, Plug-in Object Style, or plug-in object is by style.</ShortDesc>
    <ID>13673</ID>
    <IDName>funcSetVertSecCPByStyle</IDName>
    <InternalFunctionName>MP_SetVertSecCPByStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>byStyle</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetVertSecCutPlane</Name>
    <ChangedDate>2019:06:26T13:59:00</ChangedDate>
    <Version>2500</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Sets the vertical section cut plane of a symbol definition, Plug-in Object Style, or plug-in object.</ShortDesc>
    <ID>13674</ID>
    <IDName>funcSetVertSecCutPlane</IDName>
    <InternalFunctionName>MP_SetVertSecCutPlane</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>objectCutPlane</Name>
        <Type>intMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AlertCriticalHLink</Name>
    <ChangedDate>2019:08:14T14:10:00</ChangedDate>
    <Version>2500</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Procedure</Type>
    <Description>Informs the user of a serious problem that requires intervention or correction before work can continue. Provides a hyperlink (HLink) to further help the user resolve the problem.</Description>
    <ShortDesc>Informs the user of a serious problem that requires intervention or correction before work can continue.</ShortDesc>
    <SeeAlso>AlertCritical, AlertInform, AlertQuestion, AlertInformDontShowAgain, AlertQuestionDontShowAgain, AlertInformHLink, AlertInformHLinkN</SeeAlso>
    <Comments>Created by KAS 8/14/2019</Comments>
    <Example>AlertCriticalHLink('Serious Problem with X', 'Please visit', 'our website', 'https://www.vectorworks.net', 'for more information on how to resolve the problem with X.');</Example>
    <ID>13675</ID>
    <IDName>procAlertCriticalHLink</IDName>
    <InternalFunctionName>MP_AlertCriticalHLink</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>text</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The information to be displayed.</Desc>
      </Param>
      <Param>
        <Name>adviceBeforeLink</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The text to be added in a smaller font under the main information message and above the hyperlink.</Desc>
      </Param>
      <Param>
        <Name>linkTitle</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The clickable text of the hyperlink to be added under the adviceBeforeLink text and above the adviceAfterLink text. The text to be added will be in the same smaller font as the adviceBeforeLink text.</Desc>
      </Param>
      <Param>
        <Name>linkURL</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The URL that a user will be directed to when the user clicks on the linkTitle text.</Desc>
      </Param>
      <Param>
        <Name>adviceAfterLink</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The text to be added under the hyperlink. The text to be added will be in the same smaller font as the adviceBeforeLink text.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AlertInformHLink</Name>
    <ChangedDate>2019:08:14T14:35:00</ChangedDate>
    <Version>2500</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Procedure</Type>
    <Description>Displays an alert dialog which provides the user with information about the result of a command. It offers no user choices. It provides a hyperlink (HLink) to further help the user.</Description>
    <ShortDesc>Displays an alert dialog which provides the user with information about the result of a command.</ShortDesc>
    <SeeAlso>AlertInform, AlertQuestion, AlertCritical, AlertInformDontShowAgain, AlertQuestionDontShowAgain, AlertCriticalHLink, AlertInformHLinkN</SeeAlso>
    <Comments>Created by KAS 8/14/2019</Comments>
    <Example>AlertInformHLink('That item is not a valid item', 'Please visit', 'our website', 'https://www.vectorworks.net', 'for more information on what is a valid item.', false);</Example>
    <ID>13676</ID>
    <IDName>procAlertInformHLink</IDName>
    <InternalFunctionName>MP_AlertInformHLink</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>text</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The information to be displayed.</Desc>
      </Param>
      <Param>
        <Name>adviceBeforeLink</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The text to be added in a smaller font under the main information message and above the hyperlink.</Desc>
      </Param>
      <Param>
        <Name>linkTitle</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The clickable text of the hyperlink to be added under the adviceBeforeLink text and above the adviceAfterLink text. The text to be added will be in the same smaller font as the adviceBeforeLink text.</Desc>
      </Param>
      <Param>
        <Name>linkURL</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The URL that a user will be directed to when the user clicks on the linkTitle text.</Desc>
      </Param>
      <Param>
        <Name>adviceAfterLink</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The text to be added under the hyperlink. The text to be added will be in the same smaller font as the adviceBeforeLink text.</Desc>
      </Param>
      <Param>
        <Name>minorAlert</Name>
        <Type>boolMode</Type>
        <Desc>The severity of the alert: minor(true) or major(false).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AlertInformHLinkN</Name>
    <ChangedDate>2019:08:14T14:56:00</ChangedDate>
    <Version>2500</Version>
    <Category>Dialogs - Predefined</Category>
    <Type>Procedure</Type>
    <Description>Displays an alert dialog which provides the user with information about the result of a command with an option to not show the dialog again. It offers no user choices. It provides a hyperlink (HLink) to further help the user.[[BR]][[BR]]The parameter 'arrOptions' is of type ARRAY [1..3] OF STRING;[[BR]]arrOpt[1] - Saved setting category to save checkbox value[[BR]]arrOpt[2] - Saved setting item to save checkbox value [[BR]]arrOpt[3] - Specify the string to use in overriding the default 'Dont show this dialog again' checkbox string</Description>
    <ShortDesc>Displays an alert dialog which provides the user with information about the result of a command with an option to not show the dialog again.</ShortDesc>
    <SeeAlso>AlertInform, AlertQuestion, AlertCritical, AlertInformDontShowAgain, AlertQuestionDontShowAgain, AlertCriticalHLink, AlertInformHLink</SeeAlso>
    <Comments>Created by KAS 8/14/2019</Comments>
    <Example>PROCEDURE Example;[[BR]][[BR]]VAR[[BR]]	arrayText : ARRAY[1..3] OF STRING;[[BR]][[BR]]BEGIN[[BR]]	arrayText[1] := 'DontShowDialogAgainCategory';[[BR]]	arrayText[2] := 'DontShowDialogAgainItem'; {Should be unique for every AlertInformDontShowAgain}[[BR]]	arrayText[3] := '';[[BR]][[BR]]	AlertInformHLinkN('This is an invalid item.', 'Please visit', 'our website', 'https://www.vectorworks.net', 'for more information on what is a valid item.', false, arrayText);[[BR]]END;[[BR]][[BR]]RUN(Example);</Example>
    <ID>13677</ID>
    <IDName>procAlertInformHLinkN</IDName>
    <InternalFunctionName>MP_AlertInformHLinkN</InternalFunctionName>
    <Implemented>True</Implemented>
    <DocumentationNeedsAttention>True</DocumentationNeedsAttention>
    <Params>
      <Param>
        <Name>text</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The information to be displayed.</Desc>
      </Param>
      <Param>
        <Name>adviceBeforeLink</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The text to be added in a smaller font under the main information message and above the hyperlink.</Desc>
      </Param>
      <Param>
        <Name>linkTitle</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The clickable text of the hyperlink to be added under the adviceBeforeLink text and above the adviceAfterLink text. The text to be added will be in the same smaller font as the adviceBeforeLink text.</Desc>
      </Param>
      <Param>
        <Name>linkURL</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The URL that a user will be directed to when the user clicks on the linkTitle text.</Desc>
      </Param>
      <Param>
        <Name>adviceAfterLink</Name>
        <Type>eCharDynarrayMode</Type>
        <Desc>The text to be added under the hyperlink. The text to be added will be in the same smaller font as the adviceBeforeLink text.</Desc>
      </Param>
      <Param>
        <Name>minorAlert</Name>
        <Type>boolMode</Type>
        <Desc>The severity of the alert: minor(true) or major(false).</Desc>
      </Param>
      <Param>
        <Name>arrOptions</Name>
        <Type>arrayMode</Type>
        <Desc>ARRAY [1..3] OF STRING; arrOpt[1] - Saved setting category to save checkbox value arrOpt[2] - Saved setting item to save checkbox value  arrOpt[3] - Specify a string to use in overriding the default 'Dont show this dialog again' checkbox string</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>EnableLBExternalSort</Name>
    <ChangedDate>2019:11:01T15:29:00</ChangedDate>
    <Version>2500</Version>
    <Category>Dialogs - Modern - Browser</Category>
    <Type>Procedure</Type>
    <Description>Enables/disables external sorting.</Description>
    <ShortDesc>Enables/disables external sorting.</ShortDesc>
    <ID>13678</ID>
    <IDName>procEnableLBExternalSort</IDName>
    <InternalFunctionName>MP_EnableLBExternalSort</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>dialogID</Name>
        <Type>longMode</Type>
        <Desc>id of the dialog that contains the list browser</Desc>
      </Param>
      <Param>
        <Name>componentID</Name>
        <Type>longMode</Type>
        <Desc>id of the list browser control</Desc>
      </Param>
      <Param>
        <Name>enable</Name>
        <Type>boolMode</Type>
        <Desc>specifies whether to enable or disable external sorting</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjMaterialName</Name>
    <ChangedDate>2020:02:25T16:03:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Gets the name of an object's referenced material. Returns true if successful; false otherwise.</ShortDesc>
    <ID>13679</ID>
    <IDName>funcGetObjMaterialName</IDName>
    <InternalFunctionName>MP_GetObjMaterialName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>materialName</Name>
        <Type>strVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetObjMaterialHandle</Name>
    <ChangedDate>2020:02:25T16:00:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <ShortDesc>Returns the handle to an object's referenced material, if any.</ShortDesc>
    <ID>13680</ID>
    <IDName>funcGetObjMaterialHandle</IDName>
    <InternalFunctionName>MP_GetObjMaterialHandle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>object handle</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetObjMaterialHandle</Name>
    <ChangedDate>2020:02:25T16:01:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Sets the specified material handle as the specified object's referenced material. Returns true if successful else returns false. </ShortDesc>
    <ID>13681</ID>
    <IDName>funcSetObjMaterialHandle</IDName>
    <InternalFunctionName>MP_SetObjMaterialHandle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleInOutMode</Type>
      </Param>
      <Param>
        <Name>materialHandle</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetMaterialTexture</Name>
    <ChangedDate>2020:07:16T14:35:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <ShortDesc>Returns the internal index of the material's texture if it exists; 0 otherwise.If it is a Compound material, the fill style for the primary sub-material is returned.</ShortDesc>
    <ID>13682</ID>
    <IDName>funcGetMaterialTexture</IDName>
    <InternalFunctionName>MP_GetMaterialTexture</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objectHandle</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetMaterialTexture</Name>
    <ChangedDate>2020:07:16T14:36:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Sets the material's texture. Only a simple material may have its texture set. Returns true if successful; false otherwise. If textureIndex is invalid it sets the texture to None.</ShortDesc>
    <ID>13683</ID>
    <IDName>funcSetMaterialTexture</IDName>
    <InternalFunctionName>MP_SetMaterialTexture</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>materialHandle</Name>
        <Type>handleInOutMode</Type>
      </Param>
      <Param>
        <Name>textureIndex</Name>
        <Type>longMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateMaterial</Name>
    <ChangedDate>2020:02:26T10:01:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <ShortDesc>Creates a BuildingMaterialType node of the specified type, either Simple or Compound. The type of the node may not be changed after creation.</ShortDesc>
    <ID>13684</ID>
    <IDName>funcCreateMaterial</IDName>
    <InternalFunctionName>MP_CreateMaterial</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>stringMode</Type>
      </Param>
      <Param>
        <Name>isSimpleMaterial</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsMaterialSimple</Name>
    <ChangedDate>2020:02:26T10:41:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Determines if the specified material's type is Simple or Compound.</ShortDesc>
    <ID>13685</ID>
    <IDName>funcIsMaterialSimple</IDName>
    <InternalFunctionName>MP_IsMaterialSimple</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>materialHandle</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetMaterialFillStyle</Name>
    <ChangedDate>2020:07:16T14:36:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>LONGINT</ReturnType>
    <ShortDesc>Returns the internal index to the material's fill style. If it is a Compound material, the fill style for the primary sub-material is returned.</ShortDesc>
    <ID>13686</ID>
    <IDName>funcGetMaterialFillStyle</IDName>
    <InternalFunctionName>MP_GetMaterialFillStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>materialHandle</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetMaterialFillStyle</Name>
    <ChangedDate>2020:07:16T14:41:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Sets the material's fill style. Only a simple material may have its fill style set. It also sets Fill style by class to false; Returns true if successful; false otherwise. If fillStyle is invalid it sets the fill style to None;</ShortDesc>
    <ID>13687</ID>
    <IDName>funcSetMaterialFillStyle</IDName>
    <InternalFunctionName>MP_SetMaterialFillStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>materialHandle</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>fillStyle</Name>
        <Type>longMode</Type>
        <Desc>InternalIndex of fillStyle</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>IsMtrlFillStyleByCls</Name>
    <ChangedDate>2020:02:26T13:50:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Determines if the material fill should be by class. If it is a Compound material, the fill style for the primary sub-material is returned.</ShortDesc>
    <ID>13688</ID>
    <IDName>funcIsMtrlFillStyleByCls</IDName>
    <InternalFunctionName>MP_IsMtrlFillStyleByCls</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>materialHandle)</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetMtlFillStyleByCls</Name>
    <ChangedDate>2020:02:26T14:01:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Sets the material's fill style.Only a simple material may have its fill style set. It also sets the fill style to None. Returns true if successful; false otherwise.</ShortDesc>
    <ID>13689</ID>
    <IDName>funcSetMtlFillStyleByCls</IDName>
    <InternalFunctionName>MP_SetMtlFillStyleByCls</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>materialHandle</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>isByClass</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetRFieldOpt</Name>
    <ChangedDate>2020:03:05T16:30:00</ChangedDate>
    <Version>2600</Version>
    <Category>Database / Record</Category>
    <Type>Procedure</Type>
    <Description>Set options for a record field.</Description>
    <ShortDesc>Set the options for a record field.</ShortDesc>
    <SeeAlso>GetRFieldOpt,GetRField,SetRField</SeeAlso>
    <Example>SetRField(HandleToObject,'Part Info','Serial No.',False, False);</Example>
    <ID>13690</ID>
    <IDName>procSetRFieldOpt</IDName>
    <InternalFunctionName>MP_SetRFieldOpt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to a object with an attached record.</Desc>
      </Param>
      <Param>
        <Name>record</Name>
        <Type>stringMode</Type>
        <Desc>Name of record to be updated.</Desc>
      </Param>
      <Param>
        <Name>field</Name>
        <Type>stringMode</Type>
        <Desc>Name of field to be updated.</Desc>
      </Param>
      <Param>
        <Name>isEmpty</Name>
        <Type>boolMode</Type>
        <Desc>Option to set, specifying this field as empty data for the Data Manager.</Desc>
      </Param>
      <Param>
        <Name>isDataLinked</Name>
        <Type>boolMode</Type>
        <Desc>Option to set, specifying this field data linked for the Data Manager.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetRFieldOpt</Name>
    <ChangedDate>2020:03:05T16:32:00</ChangedDate>
    <Version>2600</Version>
    <Category>Database / Record</Category>
    <Type>Procedure</Type>
    <Description>Get the options for a record field.</Description>
    <ShortDesc>Get the options for a record field.</ShortDesc>
    <SeeAlso>SetRFieldOpt,GetRField,SetRField</SeeAlso>
    <ID>13691</ID>
    <IDName>procGetRFieldOpt</IDName>
    <InternalFunctionName>MP_GetRFieldOpt</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>record</Name>
        <Type>stringMode</Type>
        <Desc>Name of record format.</Desc>
      </Param>
      <Param>
        <Name>field</Name>
        <Type>stringMode</Type>
        <Desc>Name of field to be queried. </Desc>
      </Param>
      <Param>
        <Name>outIsEmpty</Name>
        <Type>boolVarMode</Type>
        <Desc>Output the flag for empty value used by the Data Manager.</Desc>
      </Param>
      <Param>
        <Name>outIsDataLinked</Name>
        <Type>boolVarMode</Type>
        <Desc>Output the flag for data linked value used by the Data Manager.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetMtlFillBackColor</Name>
    <ChangedDate>2020:03:24T17:25:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Returns the fill background color of the specified material. The color is returned as the RGB components of the color. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Returns the fill background color of the specified material.</ShortDesc>
    <Comments>Returns the fill background color of the material in parameters colorRV, colorGV, and colorBV.</Comments>
    <Example>[[name]](mtlHandle,cRed,cGrn,cBlu);[[BR]]RGBToColorIndex(cRed,cGrn,cBlu,colorValue);</Example>
    <ID>13692</ID>
    <IDName>procGetMtlFillBackColor</IDName>
    <InternalFunctionName>MP_GetMtlFillBackColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>material</Name>
        <Type>handleMode</Type>
        <Desc>Handle to material.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (red).</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (green).</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (blue).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetMtlFillForeColor</Name>
    <ChangedDate>2020:03:24T17:25:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Returns the fill foreground color of the specified material. The color is returned as the RGB components of the color. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Returns the fill foreground color of the specified material.</ShortDesc>
    <Comments>Returns the fill foreground color of the material in parameters colorRV, colorGV, and colorBV.</Comments>
    <Example>[[name]](mtlHandle,cRed,cGrn,cBlu);[[BR]]RGBToColorIndex(cRed,cGrn,cBlu,colorValue);</Example>
    <ID>13693</ID>
    <IDName>procGetMtlFillForeColor</IDName>
    <InternalFunctionName>MP_GetMtlFillForeColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>material</Name>
        <Type>handleMode</Type>
        <Desc>Handle to material.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (red).</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (green).</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (blue).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetMtlPenBackColor</Name>
    <ChangedDate>2020:03:24T15:38:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Returns the pen background color of the specified material. The color is returned as the RGB components of the color. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Returns the pen background color of the specified material.</ShortDesc>
    <Comments>Returns the pen background color of the material in parameters colorRV, colorGV, and colorBV.</Comments>
    <Example>[[name]](mtlHandle,cRed,cGrn,cBlu);[[BR]]RGBToColorIndex(cRed,cGrn,cBlu,colorValue);</Example>
    <ID>13694</ID>
    <IDName>procGetMtlPenBackColor</IDName>
    <InternalFunctionName>MP_GetMtlPenBackColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>material</Name>
        <Type>handleMode</Type>
        <Desc>Handle to material.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (red).</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (green).</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (blue).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetMtlPenForeColor</Name>
    <ChangedDate>2020:03:24T15:38:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Returns the pen foreground color of the specified material. The color is returned as the RGB components of the color. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Returns the pen foreground color of the specified material.</ShortDesc>
    <Comments>Returns the pen foreground color setting of the material in parameters colorRV, colorGV, and colorBV.</Comments>
    <Example>[[name]](mtlHandle,cRed,cGrn,cBlu);[[BR]]RGBToColorIndex(cRed,cGrn,cBlu,colorValue);</Example>
    <ID>13695</ID>
    <IDName>procGetMtlPenForeColor</IDName>
    <InternalFunctionName>MP_GetMtlPenForeColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>material</Name>
        <Type>handleMode</Type>
        <Desc>Handle to material.</Desc>
      </Param>
      <Param>
        <Name>red</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (red).</Desc>
      </Param>
      <Param>
        <Name>green</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (green).</Desc>
      </Param>
      <Param>
        <Name>blue</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns RGB color component (blue).</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetMtlFillBackColor</Name>
    <ChangedDate>2020:03:24T15:39:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Sets the fill background color of the specified material. The color must be specified using the RGB components of the desired color. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Sets the fill background color of the specified material.</ShortDesc>
    <Comments>Sets the fill background color of the material.</Comments>
    <Example>ColorIndexToRGB(214,cRed,cGrn,cBlu);[[BR]][[name]](mtlHandle,cRed,cGrn,cBlu);</Example>
    <ID>13696</ID>
    <IDName>procSetMtlFillBackColor</IDName>
    <InternalFunctionName>MP_SetMtlFillBackColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>material</Name>
        <Type>handleMode</Type>
        <Desc>Handle to material.</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetMtlFillForeColor</Name>
    <ChangedDate>2020:03:24T15:39:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Sets the fill foreground color of the specified material. The color must be specified using the RGB components of the desired color. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Sets the fill foreground color of the specified material.</ShortDesc>
    <Comments>Sets the fill background color of the material.</Comments>
    <Example>ColorIndexToRGB(214,cRed,cGrn,cBlu);[[BR]][[name]](mtlHandle,cRed,cGrn,cBlu);</Example>
    <ID>13697</ID>
    <IDName>procSetMtlFillForeColor</IDName>
    <InternalFunctionName>MP_SetMtlFillForeColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>material</Name>
        <Type>handleMode</Type>
        <Desc>Handle to material.</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetMtlPenBackColor</Name>
    <ChangedDate>2020:03:24T15:39:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Sets the pen background color of the specified material. The color must be specified using the RGB components of the desired color. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Sets the pen background color of the specified material.</ShortDesc>
    <Comments>Sets the pen background color of the material.</Comments>
    <Example>ColorIndexToRGB(214,cRed,cGrn,cBlu);[[BR]][[name]](mtlHandle,cRed,cGrn,cBlu);</Example>
    <ID>13698</ID>
    <IDName>procSetMtlPenBackColor</IDName>
    <InternalFunctionName>MP_SetMtlPenBackColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>material</Name>
        <Type>handleMode</Type>
        <Desc>Handle to material.</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetMtlPenForeColor</Name>
    <ChangedDate>2020:03:24T15:39:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Procedure</Type>
    <Description>Sets the pen foreground color of the specified material. The color must be specified using the RGB components of the desired color. RGB values are in the range of 0~65535.</Description>
    <ShortDesc>Sets the pen foreground color of the specified material.</ShortDesc>
    <Comments>Sets the pen foreground color of the material.</Comments>
    <Example>ColorIndexToRGB(214,cRed,cGrn,cBlu);[[BR]][[name]](mtlHandle,cRed,cGrn,cBlu);</Example>
    <ID>13699</ID>
    <IDName>procSetMtlPenForeColor</IDName>
    <InternalFunctionName>MP_SetMtlPenForeColor</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>material</Name>
        <Type>handleMode</Type>
        <Desc>Handle to material.</Desc>
      </Param>
      <Param>
        <Name>color</Name>
        <Type>colorMode</Type>
        <Desc>RGB color value.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetComponentMaterial</Name>
    <ChangedDate>2020:04:09T10:48:00</ChangedDate>
    <Version>2600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the material of a component in an object.</Description>
    <ShortDesc>Gets the material of a component in an object.</ShortDesc>
    <SeeAlso>SetComponentMaterial</SeeAlso>
    <ID>13700</ID>
    <IDName>funcGetComponentMaterial</IDName>
    <InternalFunctionName>MP_GetComponentMaterial</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>material</Name>
        <Type>lngVarMode</Type>
        <Desc>Returns the material of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetComponentMaterial</Name>
    <ChangedDate>2020:04:09T10:48:00</ChangedDate>
    <Version>2600</Version>
    <Category>Objects - Architectural</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Sets the material of a component in an object.</Description>
    <ShortDesc>Sets the material of a component in an object.</ShortDesc>
    <SeeAlso>GetComponentMaterial</SeeAlso>
    <ID>13701</ID>
    <IDName>funcSetComponentMaterial</IDName>
    <InternalFunctionName>MP_SetComponentMaterial</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>object</Name>
        <Type>handleMode</Type>
        <Desc>The object. Can be a wall, round wall, slab, roof face, roof, Wall Style, Slab Style, Roof Style, the Wall Preferences, the Slab Preferences, or the Roof Preferences.</Desc>
      </Param>
      <Param>
        <Name>componentIndex</Name>
        <Type>intMode</Type>
        <Desc>The index of the component.</Desc>
      </Param>
      <Param>
        <Name>material</Name>
        <Type>longMode</Type>
        <Desc>The material of the component.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WSScript_AddHandleId</Name>
    <ChangedDate>2018:12:06T15:28:00</ChangedDate>
    <Version>2600</Version>
    <Category>Worksheets</Category>
    <Type>Procedure</Type>
    <Description>Add a handle with id for a worksheet script usage. This is most notable used for scripts that generate object database for worksheets.</Description>
    <ShortDesc>Add a handle with id for a worksheet script usage.</ShortDesc>
    <ID>13702</ID>
    <IDName>procWSScript_AddHandleId</IDName>
    <InternalFunctionName>MP_WSScript_AddHandleId</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>The handle of an object to be added</Desc>
      </Param>
      <Param>
        <Name>id</Name>
        <Type>intMode</Type>
        <Desc>The id of the handle</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>AddSubMtrlToMtrl</Name>
    <ChangedDate>2020:04:13T16:54:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>Boolean</ReturnType>
    <Description>Adds a Simple material to a Compound material. Sets the fraction of the Simple material as a relation to the whole. Fraction can have value between 0.0 and 1.0. "Primary" material is a simple material which carries the graphical attributes to be used by the compound material.</Description>
    <ShortDesc>Adds a Simple material to a Compound material. Sets the fraction of the Simple material as a relation to the whole.</ShortDesc>
    <Result>Returns true if successful; false otherwise. Function fails if the simple material already was added.</Result>
    <ID>13703</ID>
    <IDName>funcAddSubMtrlToMtrl</IDName>
    <InternalFunctionName>MP_AddSubMtrlToMtrl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hMaterial</Name>
        <Type>handleMode</Type>
        <Desc>Handle of a Compound material</Desc>
      </Param>
      <Param>
        <Name>subMtrlName</Name>
        <Type>stringMode</Type>
        <Desc>Name of a Simple material to be added</Desc>
      </Param>
      <Param>
        <Name>fraction</Name>
        <Type>realMode</Type>
        <Desc>Fraction of the Simple material</Desc>
      </Param>
      <Param>
        <Name>makePrimary</Name>
        <Type>boolMode</Type>
        <Desc>True if this Simple material should become the primary material of the Compound material</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>RemoveSubMtrlFromMtl</Name>
    <ChangedDate>2020:04:13T16:55:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>Boolean</ReturnType>
    <Description>Removes a Simple material from a Compound material.</Description>
    <ShortDesc>Removes a Simple material from a Compound material.</ShortDesc>
    <Result>Returns true if successful; false otherwise. Returns false if the simple material is not found.</Result>
    <ID>13704</ID>
    <IDName>funcRemoveSubMtrlFromMtl</IDName>
    <InternalFunctionName>MP_RemoveSubMtrlFromMtl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hMaterial</Name>
        <Type>handleMode</Type>
        <Desc>Handle of a Compound material</Desc>
      </Param>
      <Param>
        <Name>subMtrlName</Name>
        <Type>stringMode</Type>
        <Desc>Name of a Simple material to be deleted</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>UpdateSubMtrlInMtrl</Name>
    <ChangedDate>2020:04:13T16:55:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>Boolean</ReturnType>
    <Description>Updates a Simple material which is a part of a Compound material. Sets new values for its fraction and whether it should be the primary material. Fraction can have value between 0.0 and 1.0. "Primary" material is a simple material which carries the graphical attributes to be used by the compound material.</Description>
    <ShortDesc>Updates a Simple material which is a part of a Compound material. Sets new values for its fraction and whether it should be the primary material.</ShortDesc>
    <Result>Returns true if successful; false otherwise. Returns false if the simple material was not found.</Result>
    <ID>13705</ID>
    <IDName>funcUpdateSubMtrlInMtrl</IDName>
    <InternalFunctionName>MP_UpdateSubMtrlInMtrl</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hMaterial</Name>
        <Type>handleMode</Type>
        <Desc>Handle of a Compound material</Desc>
      </Param>
      <Param>
        <Name>subMtrlName</Name>
        <Type>stringMode</Type>
        <Desc>Name of a Simple material to be updated</Desc>
      </Param>
      <Param>
        <Name>fraction</Name>
        <Type>realMode</Type>
        <Desc>Fraction of the Simple material</Desc>
      </Param>
      <Param>
        <Name>makePrimary</Name>
        <Type>boolMode</Type>
        <Desc>True if this Simple material should become the primary material of the Compound material</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ActSymDefN</Name>
    <ChangedDate>2020:05:18T15:01:00</ChangedDate>
    <Version>2600</Version>
    <Category>Objects - Symbols</Category>
    <Type>Function</Type>
    <ReturnType>HANDLE</ReturnType>
    <Description>Function [[name]] returns a handle to the currently active symbol.[[BR]][[BR]]If the active symbol is not in the active document, it will be imported, unless there is a conflict and the allowConflictDlg parameter is set to FALSE. After being imported, the imported symbol will be returned.</Description>
    <ShortDesc>Returns the active symbol of the document.</ShortDesc>
    <SeeAlso>ActLayer, ActiveClass, ActSymDef</SeeAlso>
    <Example>HandleToActiveSym:=ActSymDefN(TRUE);</Example>
    <ID>13706</ID>
    <IDName>funcActSymDefN</IDName>
    <InternalFunctionName>MP_ActSymDefN</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>allowConflictDlg</Name>
        <Type>boolMode</Type>
        <Desc>Whether to show a conflict dialog if the active symbol is not in the active document, and a conflict would need to be resolved to import it. If there is a conflict and allowConflictDlg is set to FALSE, [[name]] will return NULL.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>CreateResourcePopup</Name>
    <ChangedDate>2020:04:29T12:56:00</ChangedDate>
    <Version>2600</Version>
    <Category>Dialogs - Modern</Category>
    <Type>Procedure</Type>
    <Description>Creates a text popup similar to a pulldown menu that opens a Resource Manager window.[[BR]][[BR]]This is basically the same as the Thumbnail popup but the control only displays the name of the selected item (it does not display its thumbnail), resembling a pulldown menu control.</Description>
    <ShortDesc>Creates a text popup similar to a pulldown menu that opens a Resource Manager window.</ShortDesc>
    <ID>13707</ID>
    <IDName>procCreateResourcePopup</IDName>
    <InternalFunctionName>MP_CreateResourcePopup</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>nDialogID</Name>
        <Type>longMode</Type>
        <Desc>The index of the dialog layout containing the control.</Desc>
      </Param>
      <Param>
        <Name>nComponentID</Name>
        <Type>longMode</Type>
        <Desc>The index that will identify the control item.</Desc>
      </Param>
      <Param>
        <Name>nWidthInChars</Name>
        <Type>intMode</Type>
        <Desc>The width of the displayed text in standard character count. See GetDlgCtrlWidthStdCh.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WSScript_GetEdit</Name>
    <ChangedDate>2020:05:18T16:23:00</ChangedDate>
    <Version>2600</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>This function must be used inside a worksheet script called by 'RunScriptEdit' worksheet formula. It will tell the script when a value has been change and what's the value. Use 'WSScript_GetEditObj' to get the value.</Description>
    <ShortDesc>This function must be used inside a worksheet script called by 'RunScriptEdit' worksheet formula. It will tell the script when a value has been change and what's the value. Use 'WSScript_GetEditObj' to get the value.</ShortDesc>
    <Result>Return true if the cell is being edited.</Result>
    <SeeAlso>WSScript_GetEditObj</SeeAlso>
    <ID>13708</ID>
    <IDName>funcWSScript_GetEdit</IDName>
    <InternalFunctionName>MP_WSScript_GetEdit</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>outNewValue</Name>
        <Type>eCharDynarrayVarMode</Type>
        <Desc>The new value for the cell as inputted by the user.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>WSScript_GetEditObj</Name>
    <ChangedDate>2020:05:18T16:29:00</ChangedDate>
    <Version>2600</Version>
    <Category>Worksheets</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>This function must be used inside a worksheet script called by 'RunScriptEdit' worksheet formula. It will return the object being edited when 'WSScript_GetEdit' returns that the script is in edit mode.</Description>
    <ShortDesc>This function must be used inside a worksheet script called by 'RunScriptEdit' worksheet formula. It will return the object being edited when 'WSScript_GetEdit' returns that the script is in edit mode.</ShortDesc>
    <Result>Return FALSE and NIL or vs.Handle() if the index is outside the range.</Result>
    <SeeAlso>WSScript_GetEdit</SeeAlso>
    <ID>13709</ID>
    <IDName>funcWSScript_GetEditObj</IDName>
    <InternalFunctionName>MP_WSScript_GetEditObj</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>objIndex</Name>
        <Type>intMode</Type>
        <Desc>Index to the object to be returned as the script can be called for a set of objects. Will return FALSE if no such object.</Desc>
      </Param>
      <Param>
        <Name>outObj</Name>
        <Type>handleVarMode</Type>
        <Desc>Output the object that is being edited.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetClassByStyle</Name>
    <ChangedDate>2020:06:16T15:24:00</ChangedDate>
    <Version>2600</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Gets whether the Class of a symbol definition, Plug-in Object Style, or plug-in object is by style</ShortDesc>
    <ID>13710</ID>
    <IDName>funcGetClassByStyle</IDName>
    <InternalFunctionName>MP_GetClassByStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>SetClassByStyle</Name>
    <ChangedDate>2020:06:16T15:24:00</ChangedDate>
    <Version>2600</Version>
    <Category>Objects - Custom</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <ShortDesc>Gets whether the Class of a symbol definition, Plug-in Object Style, or plug-in object is by style</ShortDesc>
    <ID>13711</ID>
    <IDName>funcSetClassByStyle</IDName>
    <InternalFunctionName>MP_SetClassByStyle</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>hObject</Name>
        <Type>handleMode</Type>
      </Param>
      <Param>
        <Name>byStyle</Name>
        <Type>boolMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetMaterialArea</Name>
    <ChangedDate>2020:06:29T16:48:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the surface area of the object having the specified material.</Description>
    <ShortDesc>Returns the surface area of the object having the specified material.</ShortDesc>
    <Result>Returns the surface area of the object having the specified material.</Result>
    <SeeAlso>GetMaterialVolume</SeeAlso>
    <ID>13712</ID>
    <IDName>funcGetMaterialArea</IDName>
    <InternalFunctionName>MP_GetMaterialArea</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to object.</Desc>
      </Param>
      <Param>
        <Name>material</Name>
        <Type>stringMode</Type>
        <Desc>Name of material.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetMaterialVolume</Name>
    <ChangedDate>2020:06:29T16:48:00</ChangedDate>
    <Version>2600</Version>
    <Category>Object Attributes</Category>
    <Type>Function</Type>
    <ReturnType>REAL</ReturnType>
    <Description>Returns the volume of the object having the specified material.</Description>
    <ShortDesc>Returns the volume of the object having the specified material.</ShortDesc>
    <Result>Returns the volume of the object having the specified material.</Result>
    <ID>13713</ID>
    <IDName>funcGetMaterialVolume</IDName>
    <InternalFunctionName>MP_GetMaterialVolume</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>h</Name>
        <Type>handleMode</Type>
        <Desc>Handle to the object.</Desc>
      </Param>
      <Param>
        <Name>material</Name>
        <Type>stringMode</Type>
        <Desc>Returns the volume of the object having the specified material.</Desc>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>GetProjectName</Name>
    <ChangedDate>2020:07:10T16:08:00</ChangedDate>
    <Version>2600</Version>
    <Category>Project Sharing</Category>
    <Type>Function</Type>
    <ReturnType>BOOLEAN</ReturnType>
    <Description>Gets the name of the Project File for Project Sharing.</Description>
    <ShortDesc>Gets the name of the Project File for Project Sharing.</ShortDesc>
    <Result>Returns True on success, False on failure or if not Project Sharing</Result>
    <ID>13714</ID>
    <IDName>funcGetProjectName</IDName>
    <InternalFunctionName>MP_GetProjectName</InternalFunctionName>
    <Implemented>True</Implemented>
    <Params>
      <Param>
        <Name>name</Name>
        <Type>strVarMode</Type>
      </Param>
    </Params>
  </Item>

  <Item>
    <Name>ForEachMaterial</Name>
    <ChangedDate>2020:08:12T11:07:00</ChangedDate>
    <Version>2600</Version>
    <Category>Document List Handling</Category>
    <Type>Procedure</Type>
    <Description>Enumerate the materials in the current file.</Description>
    <ShortDesc>Enumerate the materials in the current file.</ShortDesc>
    <ID>13715</ID>
    <IDName>procForEachMaterial</IDName>
    <SpecialOverride>CHECKFOREACHMATERIAL(procForEachMaterial, userProcMode, boolMode);</SpecialOverride>
    <Implemented>True</Implemented>
    <ImplementationDetails>Special</ImplementationDetails>
    <Params>
      <Param>
        <Name>onlyUsed</Name>
        <Type>boolMode</Type>
        <Desc>List only materials that are used in the current file.</Desc>
      </Param>
      <Param>
        <Name>callback</Name>
        <Type>userProcMode</Type>
        <Desc>Callback to be executed for each material in the file, or for each material that is used, depending on the 'used' parameter.</Desc>
      </Param>
    </Params>
  </Item>


  <Note>
    <Tag>2DComponentsNoTopPlanTable</Tag>
    <Text>&lt;I&gt;Table - 2D Components&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;2D Component&lt;/FONT&gt;&lt;/TH&gt;[[BR]]    &lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Not Set&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Top&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Bottom&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Top and Bottom Cut&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Front&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Back&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;5&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Front and Back Cut&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;6&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Left&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;7&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Right&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;8&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Left and Right Cut&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;9&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
  </Note>

  <Note>
    <Tag>2DComponentsTable</Tag>
    <Text>&lt;I&gt;Table - 2D Components&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;2D Component&lt;/FONT&gt;&lt;/TH&gt;[[BR]]    &lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Not Set&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Top&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Bottom&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Top and Bottom Cut&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Front&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Back&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;5&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Front and Back Cut&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;6&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Left&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;7&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Right&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;8&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Left and Right Cut&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;9&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Top/Plan&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;10&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
  </Note>

  <Note>
    <Tag>AddFieldTypeTable</Tag>
    <Text>&lt;I&gt;Table - Field Types&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]        &lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]          &lt;TR&gt; [[BR]]            &lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Button [[BR]]              Style&lt;/FONT&gt;&lt;/TH&gt;[[BR]]            &lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Style [[BR]]              Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]          &lt;/TR&gt;[[BR]]          &lt;TR&gt; [[BR]]            &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Static Text Field&lt;/TD&gt;[[BR]]            &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]          &lt;/TR&gt;[[BR]]          &lt;TR&gt; [[BR]]            &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Editable Text Field&lt;/TD&gt;[[BR]]            &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]          &lt;/TR&gt;[[BR]]        &lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>AlignItemEdgeOptions</Tag>
    <Text>&lt;I&gt;Table - Alignment Options&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR BGCOLOR=#000000&gt; [[BR]]	&lt;TH&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#FFFFFF&gt;Index&lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]	&lt;TH&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#FFFFFF&gt;Alignment Edge&lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		1 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Right &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		2 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Bottom &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		3 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Left &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;TD&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR BGCOLOR=#000000&gt; [[BR]]	&lt;TH&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#FFFFFF&gt;Index&lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]	&lt;TH&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#FFFFFF&gt;Alignment Mode&lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		0 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#000000&gt;Resize control items&lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		1 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#000000&gt;Shift control items&lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>AvailableRenderModesTable</Tag>
    <Text>&lt;I&gt;Table - Available Render Modes&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Render Mode&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wireframe&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Hidden Line&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;6&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Dashed Hidden Line&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;7&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
  </Note>

  <Note>
    <Tag>BinaryConstrainType</Tag>
    <Text>&lt;I&gt;Table - Binary Constraint Types&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR BGCOLOR=#000000&gt; [[BR]]	&lt;TH&gt;&lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#FFFFFF&gt;Index&lt;/FONT&gt;&lt;/CENTER&gt;&lt;/TH&gt;[[BR]]	&lt;TH&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#FFFFFF&gt;Constraint Type&lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		1 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#000000&gt;coincident&lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		2 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#000000&gt;collinear&lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		3 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#000000&gt;parallel &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		6 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#000000&gt;tangent &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		7 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#000000&gt;concentric&lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		8 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#000000&gt;distance &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		9 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#000000&gt;horizontal distance&lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		10 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#000000&gt;vertical distance&lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		12 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#000000&gt;angle&lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		13 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#000000&gt;perpendicular&lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ButtonStyleTable</Tag>
    <Text>&lt;I&gt;Table - Custom Dialog Button Styles&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Button [[BR]]	  Style&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Style [[BR]]	  Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Standard Button&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Check Box&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Radio Button&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Auto Check Box&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Auto Radio Button&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;5&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;[[BR]]</Text>
    <Comment>Button styles for custom dialogs.</Comment>
  </Note>

  <Note>
    <Tag>CellAlignTable</Tag>
    <Text>&lt;I&gt;Table - Worksheet Cell Alignment&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Alignment&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;General&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Left&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Right&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Center&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>CellFormatTable</Tag>
    <Text>&lt;I&gt;Table - Worksheet Cell Formats&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Cell Format&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;General&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Decimal&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Decimal/comma&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Scientific&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Fractional&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Dimension&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;5&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Angle&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;6&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ClassIndex</Tag>
    <Text>A numerical index  from 1 to 255 specifying a class.</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ClassName</Tag>
    <Text>Class names cannot exceed 20 characters.</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ClassTextureRefTable</Tag>
    <Text>&lt;I&gt;Table - Object Texture Reference&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Texture&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Index Value&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Primary&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Secondary&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Tertiary&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>Used for objects that may have multiple textures(walls, roofs, etc.).</Comment>
  </Note>

  <Note>
    <Tag>ClassVisResultTable</Tag>
    <Text>&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Visibility&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Index Value&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Visible&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Hidden&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;-1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Grayed&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ColorTableNote</Tag>
    <Text>A color table listing with associated index values can be found in the &lt;A HREF="../Appendix/appendix.html#colors"&gt;Appendix&lt;/A&gt;.[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ConstraintIDTable</Tag>
    <Text>&lt;I&gt;Vectorworks Constraint Identifiers&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constraint&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Identifier&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Snap To Grid&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;A&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Snap To Objects&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;Q&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Constrain Angle&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;S&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Snap Intersection&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;W&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Smart Points&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;D&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Snap To Distance&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;E&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Smart Edge&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;F&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Constrain Tangent&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;R&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;[[BR]]</Text>
    <Comment>SetConstrain constraint ID values</Comment>
  </Note>

  <Note>
    <Tag>ConstrainType</Tag>
    <Text>&lt;I&gt;Table - Constraint Types&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR BGCOLOR=#000000&gt; [[BR]]	&lt;TH&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#FFFFFF&gt; Index &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]	&lt;TH&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#FFFFFF&gt; Constraint Type &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		4  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Vertical  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		5  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Horizontal  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		8  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Distance  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		9  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Vertical distance  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		10  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Horizontal distance  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		11  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Radius  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>CursorTypeTable</Tag>
    <Text>&lt;I&gt;Table - Cursor Styles&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Cursor Style&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Style Flag&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Large Cross&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;LgCrossC&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Small Cross&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;SmCrossC&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Watch&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;WatchC&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Text Bar&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;TextBarC&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Arrow&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;ArrowC&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Hand&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;HandC&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>CustomDialogOrigin</Tag>
    <Text>The coordinate origin (0,0) of a custom dialog box is the top left corner of the dialog box pane with x values increasing to the right, and y values increasing in a down direction.</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>CustomObjParamNote</Tag>
    <Text>The string passed into the parameter name argument should use the parameter constant syntax, not the actual parameter name.  The string should have the prefix character 'P', and should have all spaces replaced with underscore characters.  For example, a parameter Jamb Depth would have a constant declared as PJAMB_DEPTH and therefore the parameter name argument to this function should be the string 'PJAMB_DEPTH'. </Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>DateFormatTable</Tag>
    <Text>&lt;I&gt;Table - Values for dateFormat parameter:&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Date Format&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Full Date&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Abbreviated Date&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Short Date&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>DateStringFormatTable</Tag>
    <Text>&lt;I&gt;Table - Values for infoFormat parameter:&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Date/Time&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Date only&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Date and Time&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Time only&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>DetailLevelTable</Tag>
    <Text>&lt;I&gt;Table - Detail Levels&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Detail Level&lt;/FONT&gt;&lt;/TH&gt;[[BR]]    &lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Low&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Medium&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;High&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;All&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;7&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
  </Note>

  <Note>
    <Tag>DimFlagNote</Tag>
    <Text>Bit code values for dimension flags can be found in the &lt;A HREF="../Appendix/appendix.html#lindim"&gt;VectorScript Appendix&lt;/A&gt;.[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>DoMenuTextTable</Tag>
    <Text>A table listing DoMenuTextByName values can be found in the &lt;A HREF="../Appendix/appendix.html#appx_h"&gt;VectorScript Appendix&lt;/A&gt;.[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>EditRealFieldTypes</Tag>
    <Text>&lt;I&gt;Table - Field Types for EditReal Fields&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR BGCOLOR=#000000&gt; [[BR]]	&lt;TH&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#FFFFFF&gt; Index &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]	&lt;TH&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#FFFFFF&gt; Field Value &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		1  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		REAL value  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		2  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Angular value  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		3  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Dimension  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		4  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		X coordinate  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		5  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Y coordinate  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ExtendedControlTypes</Tag>
    <Text>&lt;I&gt;Table - Control Types&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]        &lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]          &lt;TR BGCOLOR=#000000&gt; [[BR]]            &lt;TH&gt; &lt;CENTER&gt;[[BR]]                &lt;FONT COLOR=#FFFFFF&gt;Index&lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]            &lt;TH&gt; &lt;CENTER&gt;[[BR]]                &lt;FONT COLOR=#FFFFFF&gt;Control Type&lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]          &lt;/TR&gt;[[BR]]          &lt;TR&gt; [[BR]]            &lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]                1 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]            &lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]                Image &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]          &lt;/TR&gt;[[BR]]          &lt;TR&gt; [[BR]]            &lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]                2 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]            &lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]                System Color &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]          &lt;/TR&gt;[[BR]]          &lt;TR&gt; [[BR]]            &lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]                3 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]            &lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]                Slider &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]          &lt;/TR&gt;[[BR]]          &lt;TR&gt; [[BR]]            &lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]                10 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]            &lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]                Image Popup &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]          &lt;/TR&gt;[[BR]]          &lt;TR&gt; [[BR]]            &lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]                11 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]            &lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]                Gradient Slider &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]          &lt;/TR&gt;[[BR]]        &lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>FieldStyleConstantTable</Tag>
    <Text>Please refer to the &lt;A HREF="../Appendix/appendix.html#fielddisplay"&gt;VectorScript Appendix&lt;/A&gt; for specific field style types.[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>FieldTypeConstantTable</Tag>
    <Text>Please refer to the &lt;A HREF="../Appendix/appendix.html#fieldtype"&gt;VectorScript Appendix&lt;/A&gt; for specific field data types and formatting.[[BR]]</Text>
    <Comment>Data type constants for record fields</Comment>
  </Note>

  <Note>
    <Tag>FilePathNote</Tag>
    <Text>If the filename includes a fully qualified path, the path has to use the appropriate notation for the local operating system:&lt;br&gt; [[BR]]&lt;dir&gt;Macintosh HD:Applications:Vectorworks:Plug-Ins:Data:Notes.txt&lt;/dir&gt;[[BR]]&lt;dir&gt;C:\Program Files\Vectorworks\Plug-Ins\Data\Notes.txt&lt;/dir&gt;[[BR]]If the filename includes a path relative to the location of the Vectorworks executable, the subfolder delimiters have to be backslashes:&lt;br&gt;[[BR]]&lt;dir&gt;Plug-Ins\Data\Notes.txt&lt;/dir&gt;[[BR]]If the filename does not include a path, the file is assumed to exist in the same folder as the Vectorworks executable.</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>FillPatTable</Tag>
    <Text>Fill patterns and their associated constants can be found in the &lt;A HREF="../Appendix/appendix.html#fptable"&gt;VectorScript Appendix&lt;/A&gt;.[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>FolderPath</Tag>
    <Text>&lt;I&gt;Table - Folder Path Selectors&lt;/I&gt;[[BR]]&lt;P&gt; [[BR]]&lt;CENTER&gt;[[BR]]  &lt;TABLE WIDTH=300 ALIGN=CENTER&gt;[[BR]]   &lt;TR&gt;[[BR]]    &lt;TD&gt;[[BR]]     &lt;B&gt;&lt;I&gt; Note that use of the negative values of these constants can be used to get the user-based folder path.  The positive values are for application-based paths, which should not be used for writing. &lt;/I&gt;&lt;/B&gt;[[BR]]    &lt;/TD&gt;[[BR]]   &lt;/TR&gt;[[BR]]  &lt;/TABLE&gt;[[BR]]  &lt;P&gt;[[BR]]  &lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF &gt;Folder Name&lt;/FONT&gt;&lt;/TH&gt;[[BR]]      &lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF &gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Application&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Plug-Ins&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Workspaces&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Templates&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;7&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Standards&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;8&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Help&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;9&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Dictionaries&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;10&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;User App Data&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;12&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Libraries&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;13&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Defaults&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;14&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Settings&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;15&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;PDF Resources&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;18&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Plug-In Data&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;20&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Plug-In Includes&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;21&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Plug-In interfaces&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;22&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Favorites&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;23&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Renderworks - Textures&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;100&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Cabinet - Handles&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;101&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Door - Hardware&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;102&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Attributes - Gradients&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;103&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Hardscape - Hatches&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;104&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Attributes - Hatches&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;105&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Attributes - Image Fills&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;106&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Plants&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;107&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Toilet Stall - Fixtures&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;108&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;RenderWorks - Backgrounds&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;109&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Seating Layout - Symbols&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;110&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Tile - Symbols&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;111&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Human Figure - Textures&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;112&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Walls&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;113&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Stairs&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;114&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Drawing Border - Title Blocks&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;115&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Section - Markers&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;116&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Repetitive Unit&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;117&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Door - Custom Leaves&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;118&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Lighting Instrument - Gobos&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;119&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Reports~Schedules&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;120&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]     &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Lighting Instrument - Symbols&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;121&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Plants - Hatches&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;124&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Repetitive Unit: Flooring/Decking&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;125&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Repetitive Unit: Framing&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;126&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Repetitive Unit: Masonry Units&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;127&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Repetitive Unit: Miscellaneous&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;128&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Repetitive Unit: Roofing&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;129&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Repetitive Unit: Siding&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;130&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Walls - Hatches&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;131&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]    &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Walls - Textures&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;132&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]     &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Window - Custom Shutters&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;133&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]     &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Sketch Styles&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;134&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]     &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Plant Database&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;135&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]     &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;VW Plants&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;136&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]     &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Color Palettes&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;137&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]     &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Framing Member - Custom Profile&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;138&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]     &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Spaces - Occupant Organization Name Lists&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;140&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]     &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Spaces - Space Name Lists and Libraries&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;141&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]	 &lt;TR&gt; [[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Structural Shapes&lt;/TD&gt;[[BR]]      &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;142&lt;/TD&gt;[[BR]]    &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt; </Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>FontID</Tag>
    <Text>An integer ID with a value representing a font in the current operating system.</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ForEachLayer</Tag>
    <Text>&lt;I&gt;Table - ForEachObjectInLayer Selectors&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3 ID="Table1"&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TH&gt;&lt;DIV ALIGN=LEFT&gt;&lt;I&gt;Object Options&lt;/I&gt;&lt;/DIV&gt;&lt;/TH&gt;[[BR]]		&lt;TH&gt;&amp;nbsp;&lt;/TH&gt;[[BR]]		&lt;TH&gt;&amp;nbsp;&lt;/TH&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR BGCOLOR=#000000&gt; [[BR]]		&lt;TH&gt; &lt;CENTER&gt;&lt;FONT COLOR=#FFFFFF&gt; Option &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]		&lt;TH&gt; &lt;CENTER&gt;&lt;FONT COLOR=#FFFFFF&gt; Selector &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]		&lt;TH&gt; &lt;CENTER&gt;&lt;FONT COLOR=#FFFFFF&gt; Description &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;All objects  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;0  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp;&lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;Visible Objects only  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;1  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;Selected Objects only  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;2  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;Unlocked objects only  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;4  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TH WIDTH=133&gt; &lt;DIV ALIGN=LEFT&gt;&lt;I&gt;Traversal Options&lt;/I&gt;&lt;/DIV&gt;&lt;/TH&gt;[[BR]]		&lt;TH WIDTH=48&gt;&amp;nbsp; &lt;/TH&gt;[[BR]]		&lt;TH WIDTH=297&gt;&amp;nbsp; &lt;/TH&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR BGCOLOR=#000000&gt; [[BR]]		&lt;TH WIDTH=133&gt; &lt;CENTER&gt;&lt;FONT COLOR=#FFFFFF&gt; Option &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]		&lt;TH WIDTH=48&gt; &lt;CENTER&gt;&lt;FONT COLOR=#FFFFFF&gt; Selector &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]		&lt;TH WIDTH=297&gt; &lt;CENTER&gt;&lt;FONT COLOR=#FFFFFF&gt; Description &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;Traverse Shallow &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;0 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;Traverse Groups  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;1  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;Traverse inside groups  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;Traverse Deep  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;2  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;Traverse all containers (walls, extrudes, sweeps, etc)&lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TH WIDTH=133&gt; &lt;DIV ALIGN=LEFT&gt; &lt;I&gt;Layer Options&lt;/I&gt;&lt;/DIV&gt;&lt;/TH&gt;[[BR]]		&lt;TH WIDTH=48&gt;&amp;nbsp; &lt;/TH&gt;[[BR]]		&lt;TH WIDTH=297&gt;&amp;nbsp; &lt;/TH&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR BGCOLOR=#000000&gt; [[BR]]		&lt;TH WIDTH=133&gt; &lt;CENTER&gt;&lt;FONT COLOR=#FFFFFF&gt; Option &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]		&lt;TH WIDTH=48&gt; &lt;CENTER&gt;&lt;FONT COLOR=#FFFFFF&gt; Selector &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]		&lt;TH WIDTH=297&gt; &lt;CENTER&gt;&lt;FONT COLOR=#FFFFFF&gt; Description &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;Current layer  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;0  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;All layers  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;1  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;Visible layers  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;2  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;Editable layers  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;4  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;Snappable layers  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;8  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ForEachList</Tag>
    <Text>&lt;I&gt;Table - ForEachObjectInList Selectors&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD WIDTH=133&gt;&lt;B&gt;&lt;I&gt;Object Options&lt;/I&gt;&lt;/B&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=48&gt;&amp;nbsp;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=297&gt;&amp;nbsp;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR BGCOLOR=#000000&gt; [[BR]]	&lt;TH WIDTH=133&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#FFFFFF&gt; Option &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]	&lt;TH WIDTH=48&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#FFFFFF&gt; Selector &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]	&lt;TH WIDTH=297&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#FFFFFF&gt; Description &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/THD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		All objects  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		0  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		Visible Objects only  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		1  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		Selected Objects only  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		2  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		Locked objects only  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		4  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD WIDTH=133&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;TD WIDTH=48&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;TD WIDTH=297&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD WIDTH=133&gt; &lt;DIV ALIGN=LEFT&gt; &lt;B&gt;&lt;I&gt;Traversal Options&lt;/I&gt;&lt;/B&gt;  [[BR]]	  &lt;/DIV&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=48&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;TD WIDTH=297&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR BGCOLOR=#000000&gt; [[BR]]	&lt;TH WIDTH=133&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#FFFFFF&gt; Option &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]	&lt;TH WIDTH=48&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#FFFFFF&gt; Selector &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]	&lt;TH WIDTH=297&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#FFFFFF&gt; Description &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		Traverse Shallow &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		0 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		Traverse Groups  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		1  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		Traverse inside groups  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		Traverse Deep  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		2  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		Traverse all containers (walls, extrudes, sweeps, etc)  [[BR]]	  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ForEachObjectAtPoint</Tag>
    <Text>&lt;I&gt;Table - ForEachObjectAtPoint Selectors&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3 ID="Table1"&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TH&gt;&lt;DIV ALIGN=LEFT&gt;&lt;I&gt;Object Options&lt;/I&gt;&lt;/DIV&gt;&lt;/TH&gt;[[BR]]		&lt;TH&gt;&amp;nbsp;&lt;/TH&gt;[[BR]]		&lt;TH&gt;&amp;nbsp;&lt;/TH&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR BGCOLOR=#000000&gt; [[BR]]		&lt;TH&gt; &lt;CENTER&gt;&lt;FONT COLOR=#FFFFFF&gt; Option &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]		&lt;TH&gt; &lt;CENTER&gt;&lt;FONT COLOR=#FFFFFF&gt; Selector &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]		&lt;TH&gt; &lt;CENTER&gt;&lt;FONT COLOR=#FFFFFF&gt; Description &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;All objects  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;0  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp;&lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;Visible Objects only  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;1  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;Selected Objects only  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;2  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;Unlocked objects only  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;4  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TH WIDTH=133&gt; &lt;DIV ALIGN=LEFT&gt;&lt;I&gt;Traversal Options&lt;/I&gt;&lt;/DIV&gt;&lt;/TH&gt;[[BR]]		&lt;TH WIDTH=48&gt;&amp;nbsp; &lt;/TH&gt;[[BR]]		&lt;TH WIDTH=297&gt;&amp;nbsp; &lt;/TH&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR BGCOLOR=#000000&gt; [[BR]]		&lt;TH WIDTH=133&gt; &lt;CENTER&gt;&lt;FONT COLOR=#FFFFFF&gt; Option &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]		&lt;TH WIDTH=48&gt; &lt;CENTER&gt;&lt;FONT COLOR=#FFFFFF&gt; Selector &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]		&lt;TH WIDTH=297&gt; &lt;CENTER&gt;&lt;FONT COLOR=#FFFFFF&gt; Description &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;Traverse Shallow &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;0 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt; [[BR]]		&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;Traverse Groups  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;1  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]		&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;Traverse inside groups  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>FormatTextMask</Tag>
    <Text>&lt;I&gt;disableMask Values&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Description&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Font&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Size&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Spacing&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Style&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;8&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;hAlign&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;16&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;vAlign&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;32&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>LayerClassOptions</Tag>
    <Text>&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Visibility&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Index&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Active Only&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Gray Others&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Gray/Snap Others&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;6&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Show Others&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Show/Snap Others&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Show/Snap/Modify Others&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;5&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>LayerNameNote</Tag>
    <Text>Single quotes should be avoided in layer names, as they will be treated as a mismatched string specifier, and will cause an error to be generated.[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>LayerVisTable</Tag>
    <Text>&lt;I&gt;Table - Layer Visibility&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Visibility&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Index Value&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Normal&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Grayed&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Invisible&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;-1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>LightFalloffTable</Tag>
    <Text>&lt;I&gt;Table - Light Falloff Types&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Falloff Type&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;None&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Normal&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Smooth&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Sharp&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>The sharp value applies to the angular falloff only.</Comment>
  </Note>

  <Note>
    <Tag>LightTypeTable</Tag>
    <Text>&lt;I&gt;Table - Light Types&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Light Type&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Directional&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Point&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Spot&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>LStyleTable</Tag>
    <Text>Line styles and their associated constants can be found in the &lt;A HREF="../Appendix/appendix.html#lstable"&gt;VectorScript Appendix&lt;/A&gt;.[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>MarkerStyleNote</Tag>
    <Text>A complete listing of marker styles can be found in the &lt;A HREF="../Appendix/appendix.html#marker"&gt;Appendix&lt;/A&gt;[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>MarkerStyleTable</Tag>
    <Text>&lt;I&gt;Marker Styles&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Marker [[BR]]	  Style&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Arrow at start&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Arrow at end&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER&gt;&amp;nbsp;&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER&gt;&amp;nbsp;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Filled Arrow&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Empty Arrow&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Open Arrow&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;8&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Filled Circle&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;12&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Empty Circle&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;16&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Slash&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;20&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Cross&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;24&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>MarkerStyleTableNew</Tag>
    <Text>&lt;I&gt;Marker Styles&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Marker [[BR]]	  Style&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Filled Arrow&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Empty Arrow&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Open Arrow&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Filled Circle&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Empty Circle&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Slash&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;5&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Cross&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;6&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ModifierKeyNote</Tag>
    <Text>Modifier keys are defined as the Caps Lock, Command, Control, Option, and Shift keys.</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>MoveObjsTable</Tag>
    <Text>&lt;I&gt;Table - Effect of MoveObjs Parameters&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;allLayers&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;allObjects&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Effect&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;TRUE&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;TRUE&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;Move all objects on all layers&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;TRUE&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;FALSE&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;Move selected objects on all layers&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;FALSE&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;TRUE&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;Move all objects on active layer&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;FALSE&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;FALSE&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;Move selected objects on active layer&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ObjSelectorNote</Tag>
    <Text>For specific object selector index values, see the &lt;A HREF="../Appendix/appendix.html#appx_g"&gt;Appendix&lt;/A&gt;.[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ObjTypeNote</Tag>
    <Text>A complete listing of supported object types may be found in the &lt;A HREF="../Appendix/appendix.html#objects"&gt;Appendix&lt;/A&gt;.[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ParamTypeConstantTable</Tag>
    <Text>For Plug-in Object Parameter Records, the field types are documented in the &lt;A HREF="../Appendix/appendix.html#paramtype"&gt;VectorScript Appendix&lt;/A&gt;.[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>PointSizeNote</Tag>
    <Text>72 points are equal to one(1) inch.</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>PrefItemTableNote</Tag>
    <Text>A table of preference dialog items and their corresponding IDs may be found in the &lt;A HREF="../Appendix/appendix.html#appx_f"&gt;Appendix&lt;/A&gt;.[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>PrintReturnValues</Tag>
    <Text>&lt;I&gt;Table - Return Values&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Return Value&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Status&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;0&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;User cancelled&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;1&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;Success&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;2&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;Failure&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ProductModules</Tag>
    <Text>&lt;I&gt;Table - GetEnabledModules Selectors&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR BGCOLOR=#000000&gt; [[BR]]	&lt;TH WIDTH=133&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#FFFFFF&gt; Module &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]	&lt;TH WIDTH=48&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#FFFFFF&gt; Selector &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]	&lt;TH WIDTH=297&gt; &lt;CENTER&gt;[[BR]]		&lt;FONT COLOR=#FFFFFF&gt; Description &lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		Foundation  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		0  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp; &lt;CENTER&gt;[[BR]]		Vectorworks general purpose CAD.  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		RenderWorks  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		1  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt;&amp;nbsp; &lt;CENTER&gt;[[BR]]		Advanced rendering features, lighting, textures.  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		Architect  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		2  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		Architectural features including advanced window, door, wall framing, [[BR]]		HVAC. &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		Landmark  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		4  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		Site modeling and landscape design module. &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		Spotlight  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		8  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		Theater lighting, set, and scenic design features.  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		Mechanical  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		16  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		Mechanical engineering module for designers and fabricators. [[BR]]	  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD WIDTH=133 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		Pro  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=48 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		32  &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD WIDTH=297 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		Foundation for European market. &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD WIDTH=133&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;TD WIDTH=48&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]	&lt;TD WIDTH=297&gt;&amp;nbsp; &lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ProjectSharingPermissions</Tag>
    <Text>&lt;I&gt;Table - Project Sharing Permissions&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER&gt;&lt;B&gt;Permission Level&gt;&lt;/B&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER&gt;&lt;B&gt;Constant&lt;/B&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=LEFT&gt;Read Only&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=LEFT&gt;Layers-Restricted&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=LEFT&gt;Layers-Unrestricted&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=LEFT&gt;Layers and Resources&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=LEFT&gt;Project&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER&gt;5&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=LEFT&gt;Administrative&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER&gt;6&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;[[BR]]</Text>
  </Note>

  <Note>
    <Tag>RenderModesTable</Tag>
    <Text>&lt;I&gt;Table - Render Modes&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Render Mode&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wireframe&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Unshaded Polygon&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Shaded Polygon&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Shaded Polygon No Lines&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Final Shaded Polygon&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;5&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Hidden Line&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;6&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Dashed Hidden Line&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;7&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;OpenGL&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;11&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Fast RenderWorks&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;12&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Fast RenderWorks with Shadows&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;13&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Final Quality Renderworks&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;14&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Custom Renderworks&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;15&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>RoofMiterStyleTable</Tag>
    <Text>&lt;I&gt;Table - Roof Miter Styles&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Miter Style&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Vertical&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Horizontal&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Double&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;&lt;p&gt;3&lt;/p&gt;&lt;/TD&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Square&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;&lt;p&gt;4&lt;/p&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ScaleCalcNote</Tag>
    <Text>&lt;I&gt;Calculating the Scale&lt;/I&gt;&lt;P&gt;[[BR]]To calculate the scale parameter from an architecural scale, the following formula may be used :&lt;P&gt;[[BR]][[BR]]&lt;CENTER&gt;denominator/numerator * true size(in inches) = ActualSize&lt;/CENTER&gt;&lt;P&gt;[[BR]][[BR]]For example, to calculate a scale of 3/8"=1'-0", the scale parameter would be 8/3 *12 = 32.[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>SetCallToolIDTableRef</Tag>
    <Text>Please refer to the &lt;A HREF="../Appendix/appendix.html#settool"&gt;VectorScript Appendix&lt;/A&gt; for specific tool ID values.[[BR]]</Text>
    <Comment>Table of identifiers for SetTool and CallTool(TDEF resource IDs)</Comment>
  </Note>

  <Note>
    <Tag>ShaderFamilyBump</Tag>
    <Text>&lt;I&gt;Table - Bump Shader Family&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Prototype&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Cast&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Simple Rough&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Image Bump&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Dimple&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Knurl&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;5&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Rough&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;6&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Treadplate&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;7&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ShaderFamilyColor</Tag>
    <Text>&lt;I&gt;Table - Color Shader Family&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Prototype&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Blue Marble&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Chrome&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Cubes&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Decal&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Marble&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;5&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Plain Color&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;6&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Simple Wood&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;7&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Clouds&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;8&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Solid Polka&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;9&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Brick&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;10&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Checker&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;11&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Diagonal&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;12&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Filtered Image&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;13&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Grid Color&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;14&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Image Color&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;15&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Polka&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;16&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Horiz Stripe&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;17&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Textured Brick&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;18&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Vertical Stripe&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;19&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wood&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;20&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Oak&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;21&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Maple&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;22&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Birch&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;23&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Cherry&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;24&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Pine&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;25&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Wood Floor&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;26&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Oak Floor&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;27&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Maple Floor&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;28&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Birch Floor&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;29&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Cherry Floor&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;30&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Pine Floor&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;31&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Brick Bonds&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;32&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Granite&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;33&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Roof Tiles&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;34&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ShaderFamilyReflective</Tag>
    <Text>&lt;I&gt;Table - Reflectivity Shader Family&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Prototype&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Chrome 2D&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Conductor&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Constant&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Dielectric&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Glass&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;5&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Matte&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;6&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Metal&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;7&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Mirror&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;8&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Phong&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;9&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Plastic&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;10&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Image&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;11&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ShaderFamilyTransparency</Tag>
    <Text>&lt;I&gt;Table - Transparency Shader Family&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Prototype&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Eroded&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Plain Transparency&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Color Filter&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Checker Transparency&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Grid Transparency&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;5&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Image Transparency&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;6&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Mask Transparency&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;7&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wrapped Square&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;8&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>SmoothTypeTable</Tag>
    <Text>&lt;I&gt;Table - Smoothing Types&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Smooth Type&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;None&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Bezier&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Cubic&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Arc&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>SolidsResultsTable</Tag>
    <Text>&lt;I&gt;Table - Solids Operation Result Codes&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Operation Result&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Result Code&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Success&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Null geometry error&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Geometry error&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Out of memory error&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Bad group error&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;5&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Invalid object type&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;6&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Bad input&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;20&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>Sweep2DNote</Tag>
    <Text>&lt;I&gt; 2D Object "Template" for Sweep&lt;/I&gt;&lt;P&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>Sweep3DNote</Tag>
    <Text>&lt;I&gt; Sweep Object&lt;/I&gt;&lt;P&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>SymbolAlignTable</Tag>
    <Text>&lt;I&gt;Table - Symbol Insertion Alignment&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Alignment&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Centerline&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Left Edge&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Right Edge&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>SymbolDisplayComponentsTable</Tag>
    <Text>&lt;I&gt;Table - Components&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Component&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;3D&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;2D&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;2D Cut&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Not set&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
  </Note>

  <Note>
    <Tag>SymbolDisplayControlRenderModesTable</Tag>
    <Text>&lt;I&gt;Table - Render Modes&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Render Mode&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Wireframe&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Unshaded Polygon&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Shaded Polygon&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Shaded Polygon No Lines&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Final Shaded Polygon&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;5&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Hidden Line&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;6&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Dashed Hidden Line&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;7&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;OpenGL&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;11&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Fast RenderWorks&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;12&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Fast RenderWorks with Shadows&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;13&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Final Quality RenderWorks&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;14&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Custom RenderWorks&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;15&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Artistic RenderWorks&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;17&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Sketch&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;18&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>SymbolDisplayControlViewsTable</Tag>
    <Text>&lt;I&gt;Table - Views&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;View&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Top/Plan&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Front&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Back&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Left&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;5&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Right&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;6&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Top&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;7&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Bottom&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;8&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Right Isometric&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;9&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Left Isometric&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;10&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Right Rear Isometric&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;11&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Left Rear Isometric&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;12&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Bottom Right Isometric&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;13&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Bottom Left Isometric&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;14&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Bottom Right Rear Isometric&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;15&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Bottom Left Rear Isometric&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;16&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>SymInsertOptionTable</Tag>
    <Text>&lt;I&gt;Table - Symbol Insertion Options&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ROWSPAN=3 ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Insertion Mode&lt;/TD&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Description&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant [[BR]]	  Value&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Insert on Center Line&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Insert on Edge&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ROWSPAN=6 ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Break Mode&lt;/TD&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Description&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH  ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant [[BR]]	  Value&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Full Break with Caps&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Full Break No Caps&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Half Break&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;No Break&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>SymToGroup</Tag>
    <Text>&lt;I&gt;Table - Convert Actions&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR &gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Convert Action&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Don't convert subobjects&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Convert plug-in and symbol subobjects&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Convert all subobjects&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>TextCount</Tag>
    <Text>The text length is in a range between 1 and 32766. If the range extends beyond the end of the text string, then it is truncated to remain legal.</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>TextFieldEnableNote</Tag>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>TextFlipTable</Tag>
    <Text>&lt;I&gt;Table - Text Flip Style&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR &gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Flip Style&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;No reflection&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Horizontal reflection thru origin&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Vertical reflection thru origin&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>TextHorizontalAlignTable</Tag>
    <Text>&lt;I&gt;Table - Text Justification&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Justification&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Left&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Center&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Right&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Justify&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>TextIndex</Tag>
    <Text>The position is in a range between 0 and 32767, representing a character position in the text string. An index of 0 refers to the first character in the string.</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>TextSpacingTable</Tag>
    <Text>&lt;I&gt;Table - Text Spacing&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR &gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Leading&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Single space&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;1 1/2 space&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Double space&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>TextStyleTable</Tag>
    <Text>&lt;I&gt;Table - Text Style&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Style&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Plain&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Bold&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Italic&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Underline&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Outline&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;8&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Shadowed&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;16&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Superscript&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;32&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Subscript&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;64&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>TextureSpaceObjs</Tag>
    <Text>&lt;I&gt;Table - Texture Space Objects&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Object&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Primary&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Secondary&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Tertiary&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>TextureSpaceTypeTable</Tag>
    <Text>&lt;I&gt;Table - Texture Mapping Spaces&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Date Style&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Plane&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Sphere&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Cylinder&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Algorithmic&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>TextVerticalAlignTable</Tag>
    <Text>&lt;I&gt;Table - Text Vertical Justification&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Justification&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Top of text box&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Top baseline&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Text centerline&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Bottom baseline&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Bottom of text box&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;5&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>TopPlan2DComponentsTable</Tag>
    <Text>&lt;I&gt;Table - Components&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Component&lt;/FONT&gt;&lt;/TH&gt;[[BR]]    &lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Top&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Top and Bottom Cut&lt;/TD&gt;[[BR]]    &lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
  </Note>

  <Note>
    <Tag>UnitFormatsTable</Tag>
    <Text>&lt;I&gt;Vectorworks Unit Formats&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Units Format&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Format Flag&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Decimal&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Fractional&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Decimal Feet and Inches&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Fractional Feet and Inches &lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>UnitSettingTable</Tag>
    <Text>&lt;I&gt;Table - Standard Unit Settings&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]	&lt;TABLE BORDER="0" ALIGN="CENTER" CELLSPACING="1" CELLPADDING="3" ID="Table1"&gt;[[BR]]		&lt;TR&gt;[[BR]]			&lt;TH ALIGN="CENTER" BGCOLOR="#000000"&gt;[[BR]]				&lt;FONT COLOR="#FFFFFF"&gt;Units Setting&lt;/FONT&gt;&lt;/TH&gt;[[BR]]			&lt;TH ALIGN="CENTER" BGCOLOR="#000000"&gt;[[BR]]				&lt;FONT COLOR="#FFFFFF"&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]		&lt;/TR&gt;[[BR]]		&lt;TR&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCCC"&gt;Custom&lt;/TD&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCFF"&gt;0&lt;/TD&gt;[[BR]]		&lt;/TR&gt;[[BR]]		&lt;TR&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCCC"&gt;Feet/Inches&lt;/TD&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCFF"&gt;1&lt;/TD&gt;[[BR]]		&lt;/TR&gt;[[BR]]		&lt;TR&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCCC"&gt;Inches&lt;/TD&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCFF"&gt;2&lt;/TD&gt;[[BR]]		&lt;/TR&gt;[[BR]]		&lt;TR&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCCC"&gt;Feet&lt;/TD&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCFF"&gt;3&lt;/TD&gt;[[BR]]		&lt;/TR&gt;[[BR]]		&lt;TR&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCCC"&gt;Yards&lt;/TD&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCFF"&gt;4&lt;/TD&gt;[[BR]]		&lt;/TR&gt;[[BR]]		&lt;TR&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCCC"&gt;Miles&lt;/TD&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCFF"&gt;5&lt;/TD&gt;[[BR]]		&lt;/TR&gt;[[BR]]		&lt;TR&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCCC"&gt;Microns&lt;/TD&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCFF"&gt;6&lt;/TD&gt;[[BR]]		&lt;/TR&gt;[[BR]]		&lt;TR&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCCC"&gt;Millimeters&lt;/TD&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCFF"&gt;7&lt;/TD&gt;[[BR]]		&lt;/TR&gt;[[BR]]		&lt;TR&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCCC"&gt;Centimeters&lt;/TD&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCFF"&gt;8&lt;/TD&gt;[[BR]]		&lt;/TR&gt;[[BR]]		&lt;TR&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCCC"&gt;Meters&lt;/TD&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCFF"&gt;9&lt;/TD&gt;[[BR]]		&lt;/TR&gt;[[BR]]		&lt;TR&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCCC"&gt;Kilometers&lt;/TD&gt;[[BR]]			&lt;TD ALIGN="CENTER" BGCOLOR="#CCCCFF"&gt;10&lt;/TD&gt;[[BR]]		&lt;/TR&gt;[[BR]]	&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>UnitsFormatTable</Tag>
    <Text>&lt;I&gt;Table - Units Formats&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Units Format&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Decimal&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Fractional&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Decimal Ft/Inches&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Fractional Ft/Inches&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>ViewProjectionsTable</Tag>
    <Text>&lt;I&gt;Table - View Projections&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Projection&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Orthognal&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Perspective&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Oblique Cavalier 45&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Oblique Cavalier 30&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Oblique Cabinet 45&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Oblique Cabinet 30&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;5&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;2D Plan&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;6&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>WallPeakStyles</Tag>
    <Text>&lt;I&gt;Wall Peak Types&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0&gt;[[BR]]	&lt;TR&gt;	[[BR]]		&lt;TD&gt;&lt;IMG SRC="..\Graphics\botpeak.gif"&gt;&lt;/TD&gt;[[BR]]		&lt;TD&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/TD&gt;[[BR]]		&lt;TD&gt;&lt;IMG SRC="..\Graphics\toppeak.gif"&gt;&lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]	&lt;TR&gt;	[[BR]]		&lt;TD ALIGN=CENTER&gt;Low Peak&lt;/TD&gt;[[BR]]		&lt;TD&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/TD&gt;[[BR]]		&lt;TD ALIGN=CENTER&gt;High Peak&lt;/TD&gt;[[BR]]	&lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;[[BR]]</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>WorksheetNumberFormatTable</Tag>
    <Text>&lt;I&gt;Table - Worksheet Number Formats&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Style&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Constant&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Meaning of Accuracy&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;General&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;0&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Fixed Decimal&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;1&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;number of decimal places&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;DecwCommas&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;2&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;number of decimal places&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Scientific&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;3&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;number of decimal places&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Fractional&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;4&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;largest displayed denominator&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Dimension&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;5&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Angle&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;6&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;corresponds to angular accuracy in units dialog&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Date&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;7&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Conditional&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;8&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Dimension Area&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;11&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Dimension Volume&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;12&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Text&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;13&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>WriteLnFormatNote</Tag>
    <Text>See the VectorScript Language Guide for details on formatting values using WriteLn.</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>WSDialogType</Tag>
    <Text>&lt;I&gt;Table - Worksheet Dialog Selectors&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR BGCOLOR=#000000&gt; [[BR]]	&lt;TH&gt;&lt;CENTER&gt;&lt;FONT COLOR=#FFFFFF&gt;Index&lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]	&lt;TH&gt;&lt;CENTER&gt;&lt;FONT COLOR=#FFFFFF&gt;Dialog&lt;/FONT&gt; &lt;/CENTER&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt;&lt;CENTER&gt;0&lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt;&lt;CENTER&gt;Column Width &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;1&lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;Cell Border&lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		2 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Number &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		3 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Preferences &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		4 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Print Setup &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD HEIGHT=17 BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		5 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD HEIGHT=17 BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Print &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		6 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Function &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		7 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Criteria &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		8 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Format Text &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		9 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Set Row Criteria &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD BGCOLOR=#CCCCCC&gt; &lt;CENTER&gt;[[BR]]		10 &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]	&lt;TD BGCOLOR=#CCCCFF&gt; &lt;CENTER&gt;[[BR]]		Edit Row Criteria &lt;/CENTER&gt;&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

  <Note>
    <Tag>XferModeTable</Tag>
    <Text>&lt;I&gt;Transfer Modes&lt;/I&gt;&lt;P&gt;[[BR]]&lt;CENTER&gt;[[BR]]&lt;TABLE BORDER=0 ALIGN=CENTER CELLSPACING=1 CELLPADDING=3&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Transfer Mode&lt;/FONT&gt;&lt;/TH&gt;[[BR]]	&lt;TH ALIGN=CENTER BGCOLOR=#000000&gt;&lt;FONT COLOR=#FFFFFF&gt;Index Value&lt;/FONT&gt;&lt;/TH&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Copy&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;8&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;OR&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;9&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;XOR&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;10&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;BIC&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;11&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Inverse Copy&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;12&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Inverse OR&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;13&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Inverse XOR&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;14&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]  &lt;TR&gt; [[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCCC&gt;Inverse BIC&lt;/TD&gt;[[BR]]	&lt;TD ALIGN=CENTER BGCOLOR=#CCCCFF&gt;15&lt;/TD&gt;[[BR]]  &lt;/TR&gt;[[BR]]&lt;/TABLE&gt;[[BR]]&lt;/CENTER&gt;</Text>
    <Comment>[[BR]]</Comment>
  </Note>

</VectorScriptReference>
